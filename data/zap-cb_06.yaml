- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Validating (Data) Inputs – Part 1
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证（数据）输入 – 第1部分
- en: You made it to [*Chapter 6*](B18829_06.xhtml#_idTextAnchor229), the meat and
    potatoes of hacking! In this chapter are the attack vectors that everyone comes
    to know, love, hate, and want to recreate. Here, we’ll begin digging our hands
    into attack methods that exploit fields or objects susceptible to input validation
    issues, poor encoding practices, or lack of parameterization on the backend with
    database inputs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经来到了[*第6章*](B18829_06.xhtml#_idTextAnchor229)，黑客攻击的核心内容！在这一章中，你将会了解每个黑客都认识、喜爱、憎恨并希望重现的攻击方法。在这里，我们将开始深入研究利用容易受到输入验证问题、糟糕编码实践或后端缺乏参数化的字段或对象的攻击方法。
- en: Though many are aware of attacks such as **cross-site scripting** (**XSS**)
    that can exploit sessions or **Structured Query Language** (**SQL**) Injection
    attacks to bypass authentication or pull data across from databases, we’ll also
    dig into many more attacks that capitalize on the same poor coding practices.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管许多人都知道**跨站脚本攻击**（**XSS**）等攻击，它们可以利用会话或**结构化查询语言**（**SQL**）注入攻击来绕过身份验证或从数据库中拉取数据，但我们还将深入探讨更多利用相同糟糕编码实践的攻击。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下教程：
- en: Testing for reflected XSS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试反射型XSS
- en: Testing for HTTP verb tampering
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试HTTP动词篡改
- en: Testing for **HTTP Parameter** **Pollution** (**HPP**)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试**HTTP参数污染**（**HPP**）
- en: Testing for SQL Injection
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试SQL注入
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, it is required that you install **OWASP Zed Attack Proxy**
    (**OWASP ZAP**) and OWASP Juice Shop on your machine to intercept traffic between
    the browser and OWASP Juice Shop. In addition, utilize your PortSwigger account
    for access to the PortSwigger Academy labs that will be used in this chapter’s
    recipes. Last, the use of the Mutillidae II Docker environment is required to
    complete some of the attacks.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章内容，要求你在本机上安装**OWASP Zed Attack Proxy**（**OWASP ZAP**）和OWASP Juice Shop，以便拦截浏览器与OWASP
    Juice Shop之间的流量。此外，还需要使用你的PortSwigger账户访问PortSwigger Academy的实验室，这些实验室将用于本章的教程。最后，为了完成某些攻击，需要使用Mutillidae
    II Docker环境。
- en: Testing for reflected XSS
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试反射型XSS
- en: 'The XSS vulnerability is one of the most common web application injection attacks.
    This attack falls into number 3 in the *OWASP Top 10:2021 – Injection* category.
    XSS tricks the user’s browser into running malicious JavaScript code that an attacker
    has crafted to steal a user’s sensitive information, such as session cookies or
    passwords. In some cases, the attacker could take over the entire application
    if the session information of an administrator account were to be compromised.
    XSS attacks are possible in any application that uses input data from a user to
    produce an output. There are multiple XSS vulnerability types: Reflected XSS,
    Stored XSS, and DOM XSS. DOM XSS will be discussed in [*Chapter 9*](B18829_09.xhtml#_idTextAnchor320),
    *Client-Side Testing*.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: XSS漏洞是最常见的Web应用程序注入攻击之一。这种攻击位于*OWASP Top 10:2021 – 注入*类别中的第3位。XSS欺骗用户的浏览器运行攻击者精心设计的恶意JavaScript代码，以窃取用户的敏感信息，例如会话cookie或密码。在某些情况下，如果管理员帐户的会话信息被泄露，攻击者可能会接管整个应用程序。任何使用用户输入数据生成输出的应用程序都有可能遭受XSS攻击。XSS漏洞有多种类型：反射型XSS、存储型XSS和DOM
    XSS。DOM XSS将在[*第9章*](B18829_09.xhtml#_idTextAnchor320)，*客户端测试*中讨论。
- en: In this recipe, we will attack the OWASP Juice Shop application with a Reflected
    XSS payload and intercept the traffic using ZAP to manipulate the request and
    see the attack reflected, back in the browser.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将使用反射型XSS负载攻击OWASP Juice Shop应用程序，并利用ZAP拦截流量，操控请求并观察攻击在浏览器中反映出来。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This lab requires a running Juice Shop application and ZAP being able to intercept
    requests and responses from the server to your browser.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本实验要求运行Juice Shop应用程序，并且ZAP能够拦截来自服务器到浏览器的请求和响应。
- en: How to do it…
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: A Reflected XSS vulnerability happens when the application accepts the user’s
    input and displays it in the response output. Reflected XSS is not stored in the
    application permanently (non-persistent), unlike Stored XSS (persistent).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 反射型XSS漏洞发生在应用程序接受用户输入并将其显示在响应输出中时。与存储型XSS（持久性）不同，反射型XSS不会在应用程序中永久存储（非持久性）。
- en: 'The following steps are used to exploit an XSS vulnerability:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤用于利用XSS漏洞：
- en: Open OWASP Juice Shop.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开OWASP Juice Shop。
- en: Intercept the web application with OWASP ZAP with **Set** **Break** enabled.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用启用**设置** **中断**的OWASP ZAP拦截Web应用程序。
- en: 'Enter the following payload into the **Search** field:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下有效负载输入到**搜索**字段中：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Observe the reflected payload pop-up alert in the browser, as seen in *Figure
    6**.1*:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请观察浏览器中反射的负载弹出警告，如*图 6.1*所示：
- en: '![Figure 6.1 – XSS payload reflected](image/Figure_06.01_B18829.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – XSS 负载反射](image/Figure_06.01_B18829.jpg)'
- en: Figure 6.1 – XSS payload reflected
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – XSS 负载反射
- en: How it works…
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Whether an XSS attack is reflected or stored, the result is always the same.
    The payload’s entry into the server’s system is what makes these two different.
    Never assume that a “read-only” website is immune to reflected XSS attacks. The
    end user may experience a range of issues as a result of XSS, from minor annoyances
    to full account compromise. By disclosing the user’s session cookie, XSS attacks
    provide the attacker access to the user’s session and account. Depending upon
    the level of privilege a user has, such as administrator-level privileges, this
    could increase the risk.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 无论 XSS 攻击是反射型还是存储型，结果总是一样的。负载进入服务器系统的方式使这两者有所不同。永远不要假设一个“只读”网站可以免疫反射型 XSS 攻击。最终用户可能会因为
    XSS 而经历一系列问题，从小麻烦到完全账户泄露不等。通过泄露用户的会话 Cookie，XSS 攻击为攻击者提供了访问用户会话和账户的权限。根据用户的权限等级，例如管理员权限，这可能会增加风险。
- en: There’s more…
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'XSS attacks are common, and preventing them is critical. The following are
    two methods of protecting against XSS attacks. Keep in mind that these are not
    the only options to protect against XSS attacks:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: XSS 攻击很常见，防止这些攻击至关重要。以下是两种防止 XSS 攻击的方法。请记住，这些并不是唯一的防护 XSS 攻击的选项：
- en: '**Encoding non-alphanumeric characters to prevent the browser from executing
    the code**: You can utilize a library or framework that automatically encodes
    or escapes user input so that it is not perceived as code. In an HTML environment,
    for example, you may use Python’s **html.escape()** method or JavaScript’s **HTMLElement.textContent**
    property to encode user input so that it is interpreted as plaintext rather than
    executable code.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对非字母数字字符进行编码以防止浏览器执行代码**：你可以利用一个库或框架自动编码或转义用户输入，使其不被视为代码。例如，在 HTML 环境中，你可以使用
    Python 的**html.escape()**方法或 JavaScript 的**HTMLElement.textContent**属性来编码用户输入，使其被解释为纯文本而不是可执行代码。'
- en: '**Validating the user’s input submitted by the user and allowing a specific
    list or type of input**: Using a whitelist of permitted characters rather than
    a blacklist of prohibited characters is one technique for doing this. You may,
    for instance, restrict input to alphanumeric letters and a few basic symbols while
    disallowing any input that comprises HTML or JavaScript elements.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证用户提交的输入并允许特定类型或列表的输入**：使用允许字符的白名单，而不是禁止字符的黑名单，是实现这一目标的一种技术。例如，你可以限制输入为字母数字字符和一些基本符号，同时禁止任何包含
    HTML 或 JavaScript 元素的输入。'
- en: It’s also a good idea to employ a **Content Security Policy** (**CSP**) to indicate
    which sources are permitted to execute scripts on your site, as well as to include
    input sanitization in your server-side validation process. Even if an attacker
    succeeds in circumventing your client-side validation, this can assist in avoiding
    XSS.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**内容安全策略**（**CSP**）来指定哪些源被允许在你的网站上执行脚本也是一个好主意，同时在服务器端验证过程中包含输入清理。即使攻击者成功绕过客户端验证，这也有助于避免
    XSS 攻击。
- en: Important note
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: '**Stored XSS** (**XSS Type II**) is a persistent attack also known as second-order
    XSS. It occurs when an application obtains malicious data from an unreliable source,
    stores it in its servers, and then includes that data inadvertently in subsequent
    HTTP responses. This attack utilizes the same methods as Reflected XSS.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**存储型 XSS**（**XSS 类型 II**）是一种持久性攻击，也被称为二次 XSS。它发生在应用程序从不可靠的来源获取恶意数据，将其存储在服务器上，并随后在
    HTTP 响应中不经意地包含该数据时。这种攻击使用与反射型 XSS 相同的方法。'
- en: See also
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'For more information on XSS, go to the following links:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 获取更多关于 XSS 的信息，请访问以下链接：
- en: '[https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)'
- en: '[https://owasp.org/www-community/attacks/xss/](https://owasp.org/www-community/attacks/xss/)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://owasp.org/www-community/attacks/xss/](https://owasp.org/www-community/attacks/xss/)'
- en: 'For more payloads, visit GitHub to search for more, or go to the following
    link:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看更多负载，请访问 GitHub 搜索更多，或访问以下链接：
- en: '[https://github.com/payloadbox/xss-payload-list](https://github.com/payloadbox/xss-payload-list)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/payloadbox/xss-payload-list](https://github.com/payloadbox/xss-payload-list)'
- en: Testing for HTTP verb tampering
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 HTTP 动词篡改
- en: When using various HTTP methods to access system objects, HTTP Verb Tampering
    evaluates how the web application reacts. The tester should attempt to reach each
    system object found during spidering using each HTTP method.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用各种 HTTP 方法访问系统对象时，HTTP 动词篡改评估 Web 应用的反应。测试人员应尝试使用每种 HTTP 方法访问爬取期间找到的每个系统对象。
- en: '**GET** and **POST** requests aren’t the only request types that the HTTP specification
    supports. Developers may not have anticipated how a standard-compliant web server
    will react to these alternate approaches. Although *verb tampering* is the usual
    term for these requests, the *RFC 9110* specification refers to them as various
    HTTP methods.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**GET** 和 **POST** 请求并不是 HTTP 规范支持的唯一请求类型。开发人员可能没有预料到符合标准的 Web 服务器将如何对这些替代方法做出反应。虽然*动词篡改*是这些请求的通常术语，但
    *RFC 9110* 规范将它们称为各种 HTTP 方法。'
- en: In this recipe, we’ll explore the use of a few of these HTTP verbs to understand
    the response that occurs from the server and how this can be exploited.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将探讨使用一些这些 HTTP 动词来了解服务器响应以及如何利用它。
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This lab requires an account with PortSwigger Academy and a working copy of
    ZAP to intercept requests and responses from the server to your browser. We will
    be utilizing the *Information disclosure due to insecure configuration* lab for
    this recipe.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 本实验室需要一个 PortSwigger Academy 账户和一个可用的 ZAP 副本来拦截从服务器到您的浏览器的请求和响应。我们将利用*由于不安全配置而导致信息泄露*实验室来进行这个示例。
- en: How to do it…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: In this recipe, the administrative interface has an authentication bypass flaw.
    In order to take advantage of it, the attacker must understand the specific HTTP
    header that the frontend uses.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，管理界面存在身份验证绕过漏洞。为了利用它，攻击者必须了解前端使用的特定 HTTP 头。
- en: 'The following steps are used to exploit HTTP verb tampering:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 利用 HTTP 动词篡改的步骤如下：
- en: Start by intercepting web traffic in ZAP using **Manual Explore** from the **Quick
    Start** menu, and within **Manual Explore**, enable **Set Break** and refresh
    the web page.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在**快速开始**菜单中使用**手动探索**在 ZAP 中拦截 Web 流量，并在**手动探索**中启用**设置中断**并刷新网页开始。
- en: By browsing to the **/admin** path, notice the **GET** request. The response
    will disclose an **Admin interface only available to local** **users** message.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过浏览到 **/admin** 路径，注意 **GET** 请求。响应将披露一个**仅供本地用户使用的管理员界面**消息。
- en: 'Resend the request, but replace **GET** with the **TRACE** method (see *Figure
    6**.2*):'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新发送请求，但将**GET**替换为**TRACE**方法（见*图 6**.2*）：
- en: '[PRE1]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Figure 6.2 – TRACE request](image/Figure_06.02_B18829.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – TRACE 请求](image/Figure_06.02_B18829.jpg)'
- en: Figure 6.2 – TRACE request
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – TRACE 请求
- en: 'The **X-Custom-IP-Authorization** header will now contain your IP address,
    appended to your request. This is used to determine whether the request came from
    the localhost IP address, as shown in *Figure 6**.3*:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**X-Custom-IP-Authorization** 头现在将包含您的 IP 地址，附加到您的请求中。这用于确定请求是否来自本地主机 IP 地址，如*图
    6**.3*所示：'
- en: '![Figure 6.3 – Response containing the IP address](image/Figure_06.03_B18829.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 包含 IP 地址的响应](image/Figure_06.03_B18829.jpg)'
- en: Figure 6.3 – Response containing the IP address
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 包含 IP 地址的响应
- en: 'Open **Replacer** (*Ctrl* + *R*). This will be used to match and replace a
    header. Create a description, and leave **Match Type** as **Response Body String**.
    Add the following to the **Replacement** **String** field:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**Replacer**（*Ctrl* + *R*）。这将用于匹配和替换头部。创建一个描述，并将**匹配类型**保留为**响应主体字符串**。将以下内容添加到**替换字符串**字段中：
- en: '[PRE2]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The IP address is the same IP address seen in the HTTP Response when you tried
    visiting the /admin page in *Step 3*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: IP 地址与您在*第 3 步*尝试访问 /admin 页面时在 HTTP 响应中看到的 IP 地址相同。
- en: 'Add the following to the **Replacement String** field as seen in *Figure 6**.4*:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到**替换字符串**字段中，如*图 6**.4*所示：
- en: '[PRE3]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Figure 6.4 – Match / Replace String](image/Figure_06.04_B18829.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – 匹配 / 替换字符串](image/Figure_06.04_B18829.jpg)'
- en: Figure 6.4 – Match / Replace String
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 匹配 / 替换字符串
- en: Important note
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'For the **Replace** rule per the OWASP documentation:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 OWASP 文档的**替换**规则：
- en: '**Response** **Body String:**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**响应** **主体字符串：**'
- en: '*In this case, the Match String instance will be treated as a string or regular
    expression (regex).If it is present in the response body, then it will be replaced
    by the* *replacement text.*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*在这种情况下，匹配字符串实例将被视为字符串或正则表达式（regex）。如果它出现在响应体中，那么它将被* *替换文本* 替换。*'
- en: Check the **Enable** check box and click **Save**. ZAP will now add this to
    every request you send.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选 **启用** 复选框并点击 **保存**。ZAP 将把此设置应用到你发送的每一个请求中。
- en: 'Browse back to the home page. Notice that you now have access to the **Admin
    panel** link (displayed in *Figure 6**.5*) and can then delete the user, **Carlos**:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回主页浏览。注意，现在你可以访问 **管理员面板** 链接（显示在 *图 6.5* 中），然后可以删除用户 **Carlos**：
- en: '![Figure 6.5 – Admin panel](image/Figure_06.05_B18829.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – 管理面板](image/Figure_06.05_B18829.jpg)'
- en: Figure 6.5 – Admin panel
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 管理面板
- en: How it works…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The HTTP **TRACE** method is intended for troubleshooting. When you enable the
    **TRACE** method, the web server will run a message loopback test along the path
    to the target resource.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP **TRACE** 方法用于故障排除。当你启用 **TRACE** 方法时，Web 服务器会沿着到目标资源的路径进行消息回环测试。
- en: Although this behavior is usually harmless and often used by developers for
    useful debugging purposes, if configured incorrectly, it can result in the leaking
    of private data, including internal authentication headers added by reverse proxies.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种行为通常是无害的，并且开发人员经常用它进行有用的调试，但如果配置不当，可能会导致私人数据泄露，包括由反向代理添加的内部认证头。
- en: 'The following are other standard methods commonly used:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是常用的其他标准方法：
- en: '**GET**: Transfer a current representation of the target resource'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GET**：传输目标资源的当前表示'
- en: '**HEAD**: Same as **GET**, but do not transfer the response content'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HEAD**：与 **GET** 相同，但不传输响应内容'
- en: '**POST**: Perform resource-specific processing on the request content'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**POST**：对请求内容执行资源特定的处理'
- en: '**PUT**: Replace all current representations of the target resource with the
    requested content'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PUT**：用请求的内容替换目标资源的所有当前表示'
- en: '**DELETE**: Remove all current representations of the target resource'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DELETE**：删除目标资源的所有当前表示'
- en: '**CONNECT**: Establish a tunnel to the server identified by the target resource'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CONNECT**：建立到目标资源所识别的服务器的隧道'
- en: '**OPTIONS**: Describe the communication options for the target resource'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OPTIONS**：描述目标资源的通信选项'
- en: '**TRACK**: Define text tracks for components with **audio>** or **video>**'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TRACK**：为带有 **audio>** 或 **video>** 组件定义文本轨道'
- en: There’s more…
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Remember that the web server handles the **TRACE** verb. Your request may be
    routed through additional components on its way to the web server, such as a **web
    application firewall** (**WAF**) or load balancer. If that WAF includes headers,
    your **TRACE** response will include those headers, allowing you to obtain more
    information.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Web 服务器处理 **TRACE** 动词。你的请求可能会通过到达 Web 服务器的附加组件路由，例如 **Web 应用防火墙**（**WAF**）或负载均衡器。如果该
    WAF 包含头信息，你的 **TRACE** 响应将包含这些头信息，从而让你获得更多信息。
- en: Important note
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '**XMLHttpRequest** (**XHR**) will no longer send a **"TRACE"** request in modern
    browsers, and the **Cross-Origin Resource Sharing** (**CORS**) framework prevents
    XHR requests to foreign sites that do not explicitly allow them. As a result,
    old attacks seen in **cross-site tracing** (**XST**) are no longer effective.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**XMLHttpRequest**（**XHR**）在现代浏览器中不再发送 **"TRACE"** 请求，且 **跨源资源共享**（**CORS**）框架阻止
    XHR 请求向未明确允许的外部站点发送请求。因此，在 **跨站点追踪**（**XST**）中出现的旧攻击不再有效。'
- en: See also
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: For further information on *RFC 9110*, please visit [https://www.rfc-editor.org/rfc/rfc9110.html#method.overview](https://www.rfc-editor.org/rfc/rfc9110.html#method.overview).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 *RFC 9110* 的更多信息，请访问 [https://www.rfc-editor.org/rfc/rfc9110.html#method.overview](https://www.rfc-editor.org/rfc/rfc9110.html#method.overview)。
- en: For more reading on **Web Distributed Authoring and Version** (**WebDAV**),
    please visit [http://www.webdav.org/specs/rfc2518.html](http://www.webdav.org/specs/rfc2518.html)
    or [https://datatracker.ietf.org/doc/html/rfc4918](https://datatracker.ietf.org/doc/html/rfc4918)
    (*RFC 4918*).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 **Web 分布式创作与版本控制**（**WebDAV**）的更多阅读，请访问 [http://www.webdav.org/specs/rfc2518.html](http://www.webdav.org/specs/rfc2518.html)
    或 [https://datatracker.ietf.org/doc/html/rfc4918](https://datatracker.ietf.org/doc/html/rfc4918)（*RFC
    4918*）。
- en: Important note
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'If WebDAV extensions are enabled, these may permit several more HTTP methods:
    **PROPFIND**, **PROPPATCH**, **MKCOL**, **COPY**, **MOVE**, **LOCK**, and **UNLOCK**.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了 WebDAV 扩展，这些扩展可能允许更多的 HTTP 方法：**PROPFIND**，**PROPPATCH**，**MKCOL**，**COPY**，**MOVE**，**LOCK**，和
    **UNLOCK**。
- en: Testing for HTTP Parameter Pollution (HPP)
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 HTTP 参数污染（HPP）
- en: In this recipe, we are going to go over HPP, and you will learn that by polluting
    a parameter, an attacker could take advantage of creating an account and take
    over another user’s account for their use.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将讨论 HPP，你将了解到通过污染一个参数，攻击者可以利用这一点创建账户并接管另一个用户的账户。
- en: Getting ready
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To prepare for this recipe, please start ZAP and OWASP Juice Shop. Make sure
    that ZAP intercepts traffic at the OWASP Juice Shop application home page.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备此步骤，请启动 ZAP 和 OWASP Juice Shop。确保 ZAP 在 OWASP Juice Shop 应用首页拦截流量。
- en: How to do it…
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行…
- en: In this recipe, we’ll lead you through the steps on how to conduct HPP in OWASP
    Juice Shop. We are going to pollute the email field by adding a second value,
    which will allow the account creation process to establish an account with the
    attacker’s email in place of the victim’s email.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将引导你了解如何在 OWASP Juice Shop 中进行 HPP 攻击。我们将通过向电子邮件字段添加第二个值来污染它，这将使账户创建过程用攻击者的电子邮件替代受害者的电子邮件来建立账户。
- en: 'The following steps guide you through this process:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导你完成此过程：
- en: 'Open ZAP and enable interception on ZAP by clicking **Set break on all requests
    and responses**, which will turn from green to red when enabled. See *Figure 6**.**6*:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 ZAP，并通过点击**在所有请求和响应上设置断点**来启用 ZAP 的拦截功能，启用时会从绿色变为红色。参见*图 6.6*：
- en: '![Figure 6.6 – Setting a break](image/Figure_06.06_B18829.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – 设置断点](image/Figure_06.06_B18829.jpg)'
- en: Figure 6.6 – Setting a break
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – 设置断点
- en: You also will need to step through each request since this configuration will
    stop all requests sent by the browser and responses.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要逐个处理每个请求，因为这个配置会阻止浏览器发送的所有请求和响应。
- en: Start by going to **Account** then **Login** then **Not Yet** **a Customer**.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**账户**进入，然后点击**登录**，接着选择**还不是客户**。
- en: Create a **victim@email.com** email address with any password and anything for
    the security question.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**victim@email.com**的电子邮件地址，设置任意密码和安全问题的答案。
- en: 'After you click **Register**, go to ZAP and look at the request, then enter
    the attacker email by copying the field name and the value, as shown in *Figure
    6**.7*, and forward the request on ZAP:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你点击**注册**后，前往 ZAP 查看请求，然后通过复制字段名和值（如*图 6.7*所示）输入攻击者电子邮件，并在 ZAP 中转发请求：
- en: '![Figure 6.7 – Request to change to attacker email](image/Figure_06.07_B18829.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – 更改为攻击者电子邮件的请求](image/Figure_06.07_B18829.jpg)'
- en: Figure 6.7 – Request to change to attacker email
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 更改为攻击者电子邮件的请求
- en: 'After you send the request, the response will show the successful registration
    of the account but now with the attacker’s email instead of the victim’s email.
    See *Figure 6**.8*:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发送请求后，响应会显示账户成功注册，但现在使用的是攻击者的电子邮件，而不是受害者的电子邮件。参见*图 6.8*：
- en: '![Figure 6.8 – Response of successful attacker registration of the account](image/Figure_06.08_B18829.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 攻击者成功注册账户的响应](image/Figure_06.08_B18829.jpg)'
- en: Figure 6.8 – Response of successful attacker registration of the account
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 攻击者成功注册账户的响应
- en: 'Lastly, log in with the attacker’s email address and password you created.
    Notice that the account showing under the profile is the attacker’s email. See
    *Figure 6**.9*:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用你创建的攻击者电子邮件地址和密码登录。注意，个人资料下显示的账户是攻击者的电子邮件。参见*图 6.9*：
- en: '![Figure 6.9 – Login of attacker account](image/Figure_06.09_B18829.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – 攻击者账户登录](image/Figure_06.09_B18829.jpg)'
- en: Figure 6.9 – Login of attacker account
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – 攻击者账户登录
- en: How it works…
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其工作原理是…
- en: The attack works due to the application accepting multiple parameters with the
    same name. Since there is no standard on how an application should handle multiple
    parameters with the same name, this can cause an application to process the parameter
    in unanticipated ways.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击有效的原因是应用程序接受多个相同名称的参数。由于没有标准规定应用程序应如何处理具有相同名称的多个参数，这可能导致应用程序以意想不到的方式处理参数。
- en: In addition, HPP attacks include inserting several contradictory values into
    the query string parameters of an HTTP request in order to confuse or manipulate
    the server-side program that processes the request.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，HPP 攻击包括将多个相互矛盾的值插入到 HTTP 请求的查询字符串参数中，以便混淆或操纵处理请求的服务器端程序。
- en: 'An attacker might try to leverage this approach by converting arguments into
    an array. For example, an attacker may make the following request:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能尝试通过将参数转换为数组来利用这种方法。例如，攻击者可能会发出以下请求：
- en: '[PRE4]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this case, the attacker is attempting to inject two contradictory values
    into the **q** argument by converting it to an array. This might be exploited
    to circumvent input validation or cause the program to act unexpectedly.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，攻击者试图通过将**q**参数转换为数组来注入两个矛盾的值。这可能被利用来绕过输入验证或导致程序出现意外行为。
- en: See also
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'Consider further reading to understand HPP and remediations for this type of
    attack. Here’s a resource you could look at: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution).'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 可以考虑进一步阅读，以了解 HPP 及此类攻击的修复措施。您可以参考以下资源：[https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution)。
- en: Testing for SQL Injection
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 SQL 注入
- en: SQL Injection is an attack that injects a SQL query mainly in input fields to
    unauthorizedly view database data, perform modifications to database data, or
    execute commands to control the underlying infrastructure. SQL Injection is considered
    one of the most common web application attacks. SQL Injection is a critical web
    application vulnerability; a successful attack can enable the attacker to make
    modifications (delete, view, or edit) to all the data stored in the database or
    execute commands on the underlying system.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入是一种攻击，主要通过输入字段注入 SQL 查询，以未经授权的方式查看数据库数据、修改数据库数据或执行命令来控制底层基础设施。SQL 注入被认为是最常见的
    Web 应用程序攻击之一。SQL 注入是一种严重的 Web 应用程序漏洞；成功的攻击可以使攻击者修改（删除、查看或编辑）数据库中存储的所有数据，或在底层系统上执行命令。
- en: 'It is important to prevent SQL Injection attacks; some of the techniques to
    prevent them are listed here:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 防止 SQL 注入攻击非常重要；以下是一些防止 SQL 注入攻击的技术：
- en: Using parameterized queries, which prevents the application from adding the
    user’s input directly to the database query. This enables the developer to hardcode
    the SQL query and then pass the user’s input as parameters to the query.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用参数化查询，防止应用程序将用户输入直接添加到数据库查询中。这使得开发人员能够硬编码 SQL 查询，然后将用户输入作为参数传递给查询。
- en: Escaping user input, which escapes special characters in the query. SQL Injection
    attacks are dependent on special characters to complete the SQL query, such as
    **'** or **"**.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转义用户输入，转义查询中的特殊字符。SQL 注入攻击依赖于特殊字符来完成 SQL 查询，如**'**或**"**。
- en: Input sanitization, which programmatically specifies which types of characters
    are accepted—for example, only accepting alphabetic characters.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入净化，通过编程方式指定接受哪些类型的字符——例如，只接受字母字符。
- en: Keep in mind that these techniques are not the only methods to prevent SQL Injection
    attacks.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这些技术并不是防止 SQL 注入攻击的唯一方法。
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To follow along in this lab, ensure that Juice Shop is running and ZAP is intercepting
    the requests.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本实验中进行操作，请确保 Juice Shop 正在运行，且 ZAP 正在拦截请求。
- en: How to do it…
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The following instructions walk you through steps to exploit a SQL Injection
    vulnerability in the login page of the OWASP Juice Shop application. In this lab,
    we will perform an SQL Injection attack to bypass the authentication mechanism
    and log in as the administrator. Before following the steps, ensure that the OWASP
    Juice Shop application is running and ZAP is intercepting the traffic between
    the application and the browser:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下说明将指导您通过步骤利用 OWASP Juice Shop 应用程序登录页面中的 SQL 注入漏洞。在本实验中，我们将执行一次 SQL 注入攻击，绕过身份验证机制并以管理员身份登录。在执行步骤之前，请确保
    OWASP Juice Shop 应用程序正在运行，并且 ZAP 正在拦截应用程序与浏览器之间的流量：
- en: 'When we open OWASP Juice Shop, we must find the email/username of the administrator
    account. On the home page (the **All Products** page), click on **Apple Juice**,
    and in the **Reviews** section, you can see that the administrator wrote a review
    and their email is shown, as seen in *Figure 6**.**10*:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 OWASP Juice Shop 后，我们需要找到管理员账户的电子邮件/用户名。在主页（**所有产品**页面），点击**苹果汁**，在**评论**部分，您可以看到管理员写的评论，并显示了他们的电子邮件，如*图
    6.10*所示：
- en: '![Figure 6.10 – Administrator email in Reviews](image/Figure_06.10_B18829.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10 – 管理员电子邮件在评论中的显示](image/Figure_06.10_B18829.jpg)'
- en: Figure 6.10 – Administrator email in Reviews
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – 管理员电子邮件在评论中的显示
- en: 'Navigate to the login page by clicking on **Account** and then **Login**, as
    seen in *Figure 6**.11*:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**账户**，然后点击**登录**来导航到登录页面，如*图 6.11*所示：
- en: '![Figure 6.11 – Login](image/Figure_06.11_B18829.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.11 – 登录](image/Figure_06.11_B18829.jpg)'
- en: Figure 6.11 – Login
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – 登录
- en: Enter **admin@juice-sh.op** as the email and any value as the password. The
    login will fail.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**admin@juice-sh.op**作为电子邮件，密码可以输入任何值。登录将会失败。
- en: 'Once the login fails, open ZAP. In the **History** tab, find the login request.
    The request will be a **POST** request, the URL will be **/rest/user/login**,
    and the code will be a **401** code. Right-click the request and select **Open/Resend
    with Request Editor…**, as seen in *Figure 6**.12*:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦登录失败，打开 ZAP。在**历史记录**标签中，找到登录请求。该请求将是一个**POST**请求，URL 将是**/rest/user/login**，状态码将是**401**。右键点击请求并选择**使用请求编辑器打开/重新发送…**，如*图
    6.12*所示：
- en: '![Figure 6.12 – Open/Resend with Request Editor…](image/Figure_06.12_B18829.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12 – 使用请求编辑器打开/重新发送…](image/Figure_06.12_B18829.jpg)'
- en: Figure 6.12 – Open/Resend with Request Editor…
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – 使用请求编辑器打开/重新发送…
- en: 'Once **Request Editor** opens, in the bottom window you will see the email.
    After the last character in the email, add **'' OR 1=1 --** to exploit the SQL
    vulnerability and bypass the login mechanism, as seen in *Figure 6**.13*:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦**请求编辑器**打开，在底部窗口你将看到电子邮件。在电子邮件的最后一个字符后，添加**' OR 1=1 --**来利用SQL漏洞并绕过登录机制，如*图
    6.13*所示：
- en: '![Figure 6.13 – SQL Injection attack](image/Figure_06.13_B18829.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13 – SQL 注入攻击](image/Figure_06.13_B18829.jpg)'
- en: Figure 6.13 – SQL Injection attack
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – SQL 注入攻击
- en: 'Click on the **Send** button on the top right of the editor. The HTTP response
    will open, showcasing a successful HTTP response status code of **200 OK** along
    with a created **JSON Web Token** (**JWT**) authentication token, shown in *Figure
    6**.14*:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击编辑器右上角的**发送**按钮。HTTP 响应将打开，展示一个成功的 HTTP 响应状态码**200 OK**，以及一个创建的**JSON Web
    Token**（**JWT**）身份验证令牌，如*图 6.14*所示：
- en: '![Figure 6.14 – HTTP 200 response status](image/Figure_06.14_B18829.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.14 – HTTP 200 响应状态](image/Figure_06.14_B18829.jpg)'
- en: Figure 6.14 – HTTP 200 response status
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14 – HTTP 200 响应状态
- en: Important note
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'The SQL Injection vulnerability can be exploited directly from the login web
    page as well, by entering a login username along with the **'' OR 1 = 1 –** injection
    code, as seen in *Figure 6**.15*:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入漏洞也可以直接通过登录网页来利用，通过输入登录用户名并添加**' OR 1 = 1 --**注入代码，如*图 6.15*所示：
- en: '![Figure 6.15 – Login bypass](image/Figure_06.15_B18829.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.15 – 登录绕过](image/Figure_06.15_B18829.jpg)'
- en: Figure 6.15 – Login bypass
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15 – 登录绕过
- en: How it works…
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其工作原理…
- en: A Boolean value in SQL can be either **TRUE** or **FALSE**. In SQL, Boolean
    logic is used to combine numerous criteria in a **WHERE** clause to filter down
    a query’s set of results.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 中的布尔值可以是**TRUE**或**FALSE**。在 SQL 中，布尔逻辑用于将多个条件结合在**WHERE**子句中，以过滤查询结果集。
- en: 'The SQL Injection vulnerability comes into play when a page or parameter, such
    as the Juice Shop login page, connects to a backend database. As such, for the
    query added, in the statement '' OR **1=1 --**, the **1=1** condition is always
    a True query statement. When interpreted by the database, along with the OR statement
    added onto the username for the database to attempt to match any records of said
    username. The statement is also telling the database, if no match, to make the
    query true. A true statement will be the expected database input, even if the
    attacker does not have the correct username, which results in a successful login.
    On the backend, in the database, the SQL query would look like this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入漏洞在页面或参数（例如 Juice Shop 登录页面）连接到后端数据库时发挥作用。因此，对于添加的查询，在语句 ' OR **1=1 --**
    中，**1=1** 条件始终是一个 True 查询语句。当数据库解析时，加上的 OR 语句会让数据库尝试匹配任何该用户名的记录。语句还告知数据库，如果没有匹配，则使查询为真。即使攻击者没有正确的用户名，查询也会返回一个
    true 结果，从而成功登录。在后端数据库中，SQL 查询看起来会像这样：
- en: '[PRE5]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Then, followed by the **"--"** comment, it ignores any further query statements
    after the **True** statement. Thus, an attacker would never need to know the real
    password. The attacker inputs a single quote to close out the original query statement
    on the backend that’s looking for the input of the username. Then, the database
    server goes on to read the rest of the Boolean statement. In this simple scenario,
    the attacker will successfully bypass the authentication.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，紧接着**"--"**注释符，忽略了**True**语句后的所有其他查询语句。因此，攻击者永远不需要知道真实的密码。攻击者输入一个单引号来结束后端原始查询语句，原查询语句在寻找用户名输入时已关闭。接着，数据库服务器继续读取剩余的布尔语句。在这个简单的场景下，攻击者将成功绕过身份验证。
- en: The **' OR 1=1 --** query is one of the most common queries and statements used
    when initially testing potential vulnerabilities. In addition, adding **' --**
    will work in simple cases as it will also result in a **True** statement, and
    **--** will comment out the rest of the query statement that requires the password.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**'' OR 1=1 --** 查询是初步测试潜在漏洞时最常用的查询和语句之一。此外，添加**'' --** 在简单的情况下也会生效，因为它同样会产生一个**True**语句，并且**--**
    会注释掉查询语句中剩余的需要密码的部分。'
- en: There’s more…
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'To exploit SQL vulnerabilities, it will be very helpful to become familiar
    with databases and how to write database queries. All SQL servers have slightly
    different syntaxes. However, if you learn one, you will understand the underlying
    structure of all of them. Some of the most common SQL servers are MySQL Microsoft
    SQL Server, MySQL, PostgreSQL, and Oracle. While the injection attack used in
    this recipe is SQLite, other common bypass techniques are as such:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用 SQL 漏洞，熟悉数据库及如何编写数据库查询语句将非常有帮助。所有 SQL 服务器的语法略有不同。不过，如果你学会了其中一种，你将理解它们的基本结构。常见的
    SQL 服务器有 MySQL、Microsoft SQL Server、PostgreSQL 和 Oracle。虽然本示例使用的注入攻击是 SQLite，但其他常见的绕过技术如下：
- en: '**admin'' -**'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**admin'' -**'
- en: '**admin'' #**'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**admin'' #**'
- en: '**admin''/***'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**admin''/***'
- en: '**''** **or 1=1--+**'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**''** **或 1=1--+**'
- en: '**''** **or 1=1#**'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**''** **或 1=1#**'
- en: '**''** **or 1=1/***'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**''** **或 1=1/***'
- en: '**'')** **or ''1''=''1–**'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**'')** **或 ''1''=''1–**'
- en: '**'')** **or (''1''=''1–-**'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**'')** **或 (''1''=''1–-**'
- en: 'In addition to common SQL databases, **Lightweight Directory Access Protocol**
    (**LDAP**) is attacked in the same manner as showcased in this recipe. LDAP is
    a directory service based on a client-server model, which functions similarly
    to a database but contains attribute-based data. A bypass technique can be used
    for LDAP Injection in a similar way to SQL Injection:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 除了常见的 SQL 数据库之外，**轻量级目录访问协议** (**LDAP**) 也以类似于 SQL 注入的方式进行攻击。LDAP 是一种基于客户端-服务器模型的目录服务，类似于数据库，但包含基于属性的数据。可以采用类似于
    SQL 注入的绕过技术来进行 LDAP 注入：
- en: '[PRE6]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: See also
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: There are many tools that specialize in finding and exploiting SQL Injection
    vulnerabilities. One notable tool (and my personal favorite) is SQLMap. SQLMap
    allows you to fingerprint **database management systems** (**DBMS**), retrieve
    usernames and database tables or columns, and enumerate and exploit potentially
    existing SQL vulnerabilities. For more information about SQLMap, visit the Kali
    Linux website at www.kali.org/tools/sqlmap/.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多工具专门用于发现和利用 SQL 注入漏洞。其中一个著名的工具（也是我个人的最爱）是 SQLMap。SQLMap 允许你指纹识别**数据库管理系统**
    (**DBMS**)，获取用户名和数据库表或列，并列举和利用潜在存在的 SQL 漏洞。有关 SQLMap 的更多信息，请访问 Kali Linux 网站 [www.kali.org/tools/sqlmap/](https://www.kali.org/tools/sqlmap/)。
- en: For more information on LDAP Injection attacks, visit [https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection](https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 LDAP 注入攻击的更多信息，请访问 [https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection](https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection)。
