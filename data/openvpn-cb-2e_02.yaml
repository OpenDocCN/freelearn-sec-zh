- en: Chapter 2.  Client-server IP-only Networks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 客户端-服务器 IP 专用网络
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下主题：
- en: Setting up the public and private keys
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置公钥和私钥
- en: A simple configuration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单配置
- en: Server-side routing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端路由
- en: Adding IPv6 support
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 IPv6 支持
- en: Using `client-config-dir` files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `client-config-dir` 文件
- en: Routing - subnets on both sides
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由 - 双方的子网
- en: Redirecting the default gateway
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重定向默认网关
- en: Redirecting the IPv6 default gateway
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重定向 IPv6 默认网关
- en: Using an `ifconfig-pool` block
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `ifconfig-pool` 块
- en: Using the status file
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用状态文件
- en: The management interface
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理接口
- en: Proxy-arp
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Proxy-arp
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'The recipes in this chapter will cover the most commonly used deployment model
    for OpenVPN: a single server with multiple remote clients capable of routing IP
    traffic.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的配方将涵盖 OpenVPN 最常用的部署模型：一台服务器与多个远程客户端，能够路由 IP 流量。
- en: We will also look at several common routing configurations in addition to the
    use of the management interface at both the client and server side.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除了客户端和服务器端的管理接口使用外，我们还将查看几种常见的路由配置。
- en: The last recipe of this chapter will show how it is possible to avoid the use
    of network bridges for most practical use cases.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一个配方将展示如何避免在大多数实际用例中使用网络桥接。
- en: As a routed TUN-style setup is the most commonly used deployment model, some
    of the sample configuration files presented in this chapter will be reused throughout
    the rest of the book. In particular, the configuration files such as `basic-udp-server.conf`, `basic-udp-client.conf`, `basic-tcp-server.conf`,
    and `basic-tcp-client.conf` from the *Server-side routing* recipe will be reused
    often, as well as the Windows client configuration files `basic-udp-client.ovpn`
    and `basic-tcp-client.ovpn` from the *Using an ifconfig-pool block* recipe.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于路由的 TUN 样式设置是最常用的部署模型，本章中介绍的一些示例配置文件将在全书中重复使用。特别是，像 `basic-udp-server.conf`、`basic-udp-client.conf`、`basic-tcp-server.conf`
    和 `basic-tcp-client.conf` 这样的配置文件将在 *服务器端路由* 配方中频繁使用，此外，来自 *使用 ifconfig-pool 块*
    配方的 Windows 客户端配置文件 `basic-udp-client.ovpn` 和 `basic-tcp-client.ovpn` 也将经常被重用。
- en: Setting up the public and private keys
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置公钥和私钥
- en: Before we can set up a client/server VPN, we need to set up the public key infrastructure
    (PKI). The PKI comprises the certificate authority, the private keys, and the
    certificates (public keys) for both the client and server. We also need to generate
    a Diffie-Hellman parameter file, which is required for perfect forward secrecy.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们设置客户端/服务器 VPN 之前，我们需要设置公钥基础设施（PKI）。PKI 包括证书颁发机构、私钥以及客户端和服务器的证书（公钥）。我们还需要生成一个
    Diffie-Hellman 参数文件，这是实现完美前向保密所必需的。
- en: To set up PKI, we make use of the `easy-rsa` scripts. These scripts were originally
    supplied with the OpenVPN distribution itself, but nowadays, they can also be
    downloaded and installed separately.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 PKI，我们使用 `easy-rsa` 脚本。这些脚本最初是与 OpenVPN 分发包一起提供的，但如今也可以单独下载和安装。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: The PKI needs to be set up on a trusted computer. This can be the same as the
    computer on which the OpenVPN server is run, but from a security point of view,
    it is best if the PKI is kept completely separate from the rest of the OpenVPN
    services. One option is to keep the PKI certificate authority (CA) key located
    on a separate external disk, which is attached only when required. Another option
    would be to keep the CA private key on a separate computer that is not hooked
    up to any network at all.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: PKI 需要在受信任的计算机上设置。它可以与运行 OpenVPN 服务器的计算机相同，但从安全角度来看，最好将 PKI 完全与 OpenVPN 服务分开。一个选择是将
    PKI 证书颁发机构（CA）密钥保存在一个外部磁盘上，只有在需要时才连接。另一个选择是将 CA 私钥保存在一台完全不连接任何网络的计算机上。
- en: This recipe was done on Linux, but can also be done on a Mac OS machine. On
    Windows, the commands are very similar as well. The Linux `easy-rsa` scripts are
    meant to be run from a bash-like shell, so make sure you are not running csh/tcsh
    (UNIX shells).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方是在 Linux 上完成的，但也可以在 Mac OS 机器上完成。在 Windows 上，命令也非常相似。Linux 中的 `easy-rsa`
    脚本设计为在类 bash 的 shell 中运行，因此确保您没有在运行 csh/tcsh（UNIX shell）。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Create the directories for the PKI and copy over the `easy-rsa` distribution
    from your OpenVPN installation:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 PKI 创建目录，并将 `easy-rsa` 分发包从您的 OpenVPN 安装目录复制过来：
- en: '[PRE0]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that there is no need to run these commands as the `root` user, provided
    that the user is allowed to create the above directory path.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，只要允许用户创建上述目录路径，就不需要以`root`用户身份运行这些命令。
- en: 'Next, we set up the `vars` file. Create a file containing the following:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们设置`vars`文件。创建一个包含以下内容的文件：
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the `PKCS11_MODULE_PATH` and `PKCS11_PIN` entries are needed even
    if you are not using smart cards.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，即使您不使用智能卡，`PKCS11_MODULE_PATH`和`PKCS11_PIN`条目也是必需的。
- en: Also note that some `KEY_` variables are set to an empty value. This is required
    for generating certificates in a batch, as we shall see later on.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还需要注意的是，一些`KEY_`变量被设置为空值。这是批量生成证书时所必需的，稍后我们会看到。
- en: The default `KEY_SIZE` of 2048 bits is sufficiently secure for the next few
    years. A larger key size (4096 bits) is possible, but the tradeoff is a performance
    penalty. We shall generate a 4096 bit CA private key, as performance is not an
    issue here.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认的`KEY_SIZE`为2048位，足够保证未来几年内的安全性。虽然可以选择更大的密钥大小（4096位），但这样会带来性能损失。我们将生成一个4096位的CA私钥，因为在这里性能不是问题。
- en: Adjust the settings (`KEY_ORG`, `KEY_OU`, `KEY_EMAIL`) to reflect your organization.
    The meaning of these settings is explained in more details later.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整设置（`KEY_ORG`、`KEY_OU`、`KEY_EMAIL`）以反映您的组织。这些设置的含义将在后面更详细地解释。
- en: 'Source the `vars` file and generate the CA private key and certificate, using
    a 4096-bit modulus. Choose a strong password for the CA certificate. After that,
    simply press the *Enter* key every time the script asks for input:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 来源文件`vars`，并生成CA私钥和证书，使用4096位模数。为CA证书选择一个强密码。之后，每当脚本要求输入时，只需按*Enter*键：
- en: '[PRE2]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Sample output is shown in the following screenshot:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了示例输出：
- en: '![How to do it...](img/image00338.jpeg)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00338.jpeg)'
- en: 'Next, we build the server certificate. As we do not wish to include an e-mail
    address in every certificate, we now set the `KEY_EMAIL` variable to an empty
    value. When the script asks for input, press the *Enter* key. When the script
    asks for the CA private key (`ca.key`) password, enter the password for the CA
    certificate. Finally, when the script asks for a `[y/n]` answer, type `y`:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们构建服务器证书。由于我们不希望在每个证书中都包含电子邮件地址，因此我们将`KEY_EMAIL`变量设置为空值。当脚本要求输入时，按*Enter*键。当脚本要求输入CA私钥（`ca.key`）密码时，输入CA证书的密码。最后，当脚本要求输入`[y/n]`时，输入`y`：
- en: '[PRE3]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The first client certificate is generated in a batch. It is a very fast method
    for generating a client certificate, but it is not possible to set a password
    on the client''s private key file. It is still required to enter the `ca.key`
    password:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个客户端证书以批量方式生成。这是一种非常快速的生成客户端证书的方法，但无法在客户端的私钥文件上设置密码。仍然需要输入`ca.key`的密码：
- en: '[PRE4]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Sample output is shown in the following screenshot:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了示例输出：
- en: '![How to do it...](img/image00339.jpeg)'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00339.jpeg)'
- en: 'The second client certificate is generated with a password. Choose a strong
    password (but different from the CA certificate password!). The output is abbreviated
    for clarity:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个客户端证书生成时设置了密码。选择一个强密码（但与CA证书密码不同！）。为了简洁起见，输出已简化：
- en: '[PRE5]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, build the Diffie-Hellman parameter file for the server:![How to do it...](img/image00340.jpeg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，构建服务器的Diffie-Hellman参数文件：![如何操作...](img/image00340.jpeg)
- en: 'And finally, generate the `tls-auth` key file:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，生成`tls-auth`密钥文件：
- en: '[PRE6]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `easy-rsa` scripts are a handy set of wrapper scripts around some of the `openssl
    ca` commands. The `openssl ca` commands are commonly used to set up a PKI using
    X509 certificates. The `build-dh` script is a wrapper for the `openssl dh` command.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`easy-rsa`脚本是一组方便的包装脚本，封装了一些`openssl ca`命令。`openssl ca`命令通常用于使用X509证书设置公钥基础设施（PKI）。`build-dh`脚本是`openssl
    dh`命令的包装器。'
- en: There's more...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: The `easy-rsa` scripts provide a full PKI setup, supporting different platforms
    and many settings. Some of these are outlined here.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`easy-rsa`脚本提供了完整的PKI设置，支持不同平台和许多设置。这里概述了一些设置。'
- en: Using the easy-rsa scripts on Windows
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Windows上使用easy-rsa脚本
- en: 'To use the `easy-rsa` scripts on Windows, a command window (`cmd.exe`) is required
    and the starting `./` needs to be removed from all the commands, for example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上使用`easy-rsa`脚本，需要一个命令窗口（`cmd.exe`），并且需要去掉所有命令前的`./`，例如：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Some notes on the different variables
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于不同变量的一些说明
- en: 'The following variables are set in the `vars` file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下变量在`vars`文件中设置：
- en: '`KEY_SIZE=2048`: This is the cipher strength for all private keys. The longer
    the key size is, the stronger the encryption. Unfortunately, it also makes the
    encryption process slower.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KEY_SIZE=2048`：这是所有私钥的加密强度。密钥越长，加密越强。但遗憾的是，它也会使加密过程变慢。'
- en: '`CA_EXPIRE=3650`: This gives the number of days the CA certificate is considered
    valid, thus translating to a period of 10 years. For a medium-secure setup, this
    is fine; however, if stronger security is required, this number needs to be lowered.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CA_EXPIRE=3650`：这表示 CA 证书的有效天数，转换为 10 年。对于中等安全性配置，这是可以接受的；但是，如果需要更强的安全性，这个值需要降低。'
- en: '`KEY_EXPIRE=1000`: This gives the number of days for which the client of the
    server certificate is considered valid, thus translating to a period of almost
    3 years.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KEY_EXPIRE=1000`：这表示客户端证书在服务器上的有效天数，大约为 3 年。'
- en: '`KEY_COUNTRY="US"`, `KEY_PROVINCE=`, `KEY_CITY=`, `KEY_ORG="Cookbook 2.4"`, `KEY_EMAIL=openvpn@example.com`:
    These variables are all used to form the certificate **Distinguished Name** (**DN**).
    None of them are required, but both OpenVPN and OpenSSL suggest using at least `KEY_COUNTRY`
    to indicate where a certificate was issued.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KEY_COUNTRY="US"`、`KEY_PROVINCE=`、`KEY_CITY=`、`KEY_ORG="Cookbook 2.4"`、`KEY_EMAIL=openvpn@example.com`：这些变量用于形成证书的**区分名称**（**DN**）。虽然它们不是必需的，但
    OpenVPN 和 OpenSSL 都建议至少使用 `KEY_COUNTRY` 来指明证书的颁发地点。'
- en: See also
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: See [Chapter 4](part0048.xhtml#aid-1DOR01 "Chapter 4.  PKI, Certificates, and
    OpenSSL"), *PKI, Certificates, and OpenSSL*, for a lengthier introduction to the `easy-rsa`
    scripts and the `openssl` commands
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参见 [第 4 章](part0048.xhtml#aid-1DOR01 "第 4 章。PKI、证书和 OpenSSL")，*PKI、证书和 OpenSSL*，以了解
    `easy-rsa` 脚本和 `openssl` 命令的更详细介绍。
- en: A simple configuration
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单配置
- en: This recipe will demonstrate how to set up a connection in the client or server
    mode using certificates.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方将演示如何使用证书在客户端或服务器模式下建立连接。
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. Set up the client and server certificates using the
    previous recipe. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.9 and the client was running Fedora 22 Linux and OpenVPN 2.3.10.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在两台计算机上安装 OpenVPN 2.3.9 或更高版本。确保这两台计算机通过网络连接。使用前面的配方设置客户端和服务器证书。在这个例子中，服务器计算机运行
    CentOS 6 Linux 和 OpenVPN 2.3.9，客户端运行 Fedora 22 Linux 和 OpenVPN 2.3.10。
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务器配置文件：
- en: '[PRE8]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then save it as `example2-2-server.conf`.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后将其保存为 `example2-2-server.conf`。
- en: 'Copy over the public certificates and the server private key from the `/etc/openvpn/cookbook/keys`
    directory:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `/etc/openvpn/cookbook/keys` 目录复制公钥证书和服务器私钥：
- en: '[PRE9]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that there is no need to run the preceding commands as user `root`, provided
    that write access to these directories has been given.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，前述命令不需要以 `root` 用户身份运行，只要给予这些目录写权限即可。
- en: 'Start the server:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE10]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, create the client configuration file:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建客户端配置文件：
- en: '[PRE11]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Then save it as `example2-2-client.conf`.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后将其保存为 `example2-2-client.conf`。
- en: Transfer the files such as `ca.crt`, `client1.crt`, and `client1.key` to the
    client machine using a secure channel; for example, using the `scp` command:![How
    to do it...](img/image00341.jpeg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用安全通道（例如，使用 `scp` 命令）将 `ca.crt`、`client1.crt` 和 `client1.key` 等文件传输到客户端机器：![如何操作...](img/image00341.jpeg)
- en: 'Then, start the client:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，启动客户端：
- en: '[PRE12]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After the connection is established, we can verify that it is working by pinging
    the server (notice the IP address):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 连接建立后，我们可以通过 ping 服务器来验证连接是否正常（注意 IP 地址）：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the server starts, it configures the first available TUN interface with
    the IP address `10.200.0.1` and with a fake remote address of `10.200.0.2`. After
    that, the server listens on the UDP port `1194` for incoming connections.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器启动时，它会使用 IP 地址 `10.200.0.1` 配置第一个可用的 TUN 接口，并设置一个虚假的远程地址 `10.200.0.2`。然后，服务器会在
    UDP 端口 `1194` 上监听传入的连接。
- en: The client connects to the server on this port. After the initial TLS handshake,
    using both the client and server certificates, the client is assigned the IP address
    `10.200.0.6` (or rather the mini-network `10.200.0.4` - `10.200.0.7`). The client
    configures its first available TUN interface using this information, after which
    the VPN is established.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端通过此端口连接服务器。经过初步的 TLS 握手后，客户端使用客户端和服务器证书，分配了 IP 地址 `10.200.0.6`（或者更准确地说是子网
    `10.200.0.4` - `10.200.0.7`）。然后客户端使用这些信息配置其第一个可用的 TUN 接口，之后 VPN 就建立了。
- en: There's more...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'After the connection is established, you can query the `tun0` interface like
    this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 建立连接后，可以像这样查询 `tun0` 接口：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, look for the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，查找以下内容：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The IP address `10.200.0.5` is a placeholder address and can never be reached.
    Starting with OpenVPN 2.1, it has also become possible to assign linear addresses
    to the clients that allow you to have more clients in the same range of IP addresses.
    This will be explained in the next recipe.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: IP 地址 `10.200.0.5` 是一个占位地址，无法访问。从 OpenVPN 2.1 开始，也可以为客户端分配线性地址，这样可以在同一范围的 IP
    地址中拥有更多的客户端。此部分将在下一个食谱中解释。
- en: 'The first address is the VPN client address from a `/30` subnet, and the second
    address is the fake remote endpoint address. Each `/30` subnet has to start at
    a multiple of four, and the VPN client IP address is at the starting address plus
    two:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个地址是来自 `/30` 子网的 VPN 客户端地址，第二个地址是虚拟远程端点地址。每个 `/30` 子网必须从四的倍数开始，VPN 客户端的 IP
    地址是起始地址加二：
- en: '`10.200.0.[0-3]`, the VPN IP is `10.200.0.1`. Normally, this block is for the
    OpenVPN server itself.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10.200.0.[0-3]`，VPN IP 地址为 `10.200.0.1`。通常，这一块地址是用于 OpenVPN 服务器本身的。'
- en: '`10.200.0.[4-7]`, the client IP is `10.200.0.6`. Normally, this block is for
    the first client to connect.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10.200.0.[4-7]`，客户端 IP 地址为 `10.200.0.6`。通常，这一块地址是为第一个连接的客户端分配的。'
- en: '`10.200.0.[8-11]`, `[12-15]`, `[16-19]`, and so on are used for consecutive
    clients.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10.200.0.[8-11]`、`[12-15]`、`[16-19]` 等用于连续的客户端。'
- en: Because of the `/30` subnet for each address, this topology mode is known as **net30**.
    It is still the default topology mode, but this will change in the near future.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个地址使用 `/30` 子网，这种拓扑模式被称为 **net30**。它仍然是默认的拓扑模式，但在不久的将来将会改变。
- en: Server-side routing
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端路由
- en: This recipe will demonstrate how to set up server-side routing in client or
    server mode. With this setup, the OpenVPN client will be able to reach all the
    machines behind the OpenVPN server.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将演示如何在客户端或服务器模式下设置服务器端路由。通过此设置，OpenVPN 客户端将能够访问 OpenVPN 服务器后面的所有机器。
- en: Compared to the previous recipe, this recipe contains extra settings that are
    often used in production environments including the use of `linear` addresses
    (`topology subnet`).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一个食谱相比，本食谱包含了更多的设置，这些设置在生产环境中经常使用，包括使用 `linear` 地址（`topology subnet`）。
- en: The configuration files used in this recipe are useful building blocks for other
    recipes throughout this book; therefore, they are named `basic-udp-server.conf`, `basic-udp-client.conf`,
    and so on.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中使用的配置文件是本书其他食谱中的有用构建模块；因此，它们的命名为 `basic-udp-server.conf`、`basic-udp-client.conf`
    等。
- en: Getting ready
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. Set up the client and server certificates using the
    previous recipe. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.3.9 and the client was running Fedora 20 Linux and OpenVPN 2.3.9.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在两台计算机上安装 OpenVPN 2.3.9 或更高版本。确保这两台计算机通过网络连接。使用之前的食谱设置客户端和服务器证书。对于本食谱，服务器计算机运行
    CentOS 6 Linux 和 OpenVPN 2.3.9，客户端计算机运行 Fedora 20 Linux 和 OpenVPN 2.3.9。
- en: 'We use the following network layout here:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在此使用以下网络布局：
- en: '![Getting ready](img/image00342.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00342.jpeg)'
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Create the server configuration file:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务器配置文件：
- en: '[PRE16]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Then save it as `basic-udp-server.conf`. Note that in some Linux distributions,
    the group `nogroup` is used instead of `nobody`.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后将其保存为 `basic-udp-server.conf`。请注意，在某些 Linux 发行版中，使用 `nogroup` 组而不是 `nobody`。
- en: 'Copy over the `tls-auth` secret key file from the `/etc/openvpn/cookbook/keys`
    directory:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `/etc/openvpn/cookbook/keys` 目录复制 `tls-auth` 密钥文件：
- en: '[PRE17]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then start the server:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后启动服务器：
- en: '[PRE18]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Make sure IP-traffic forwarding is enabled on the server:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在服务器上启用 IP 流量转发：
- en: '[PRE19]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, create the client configuration file:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建客户端配置文件：
- en: '[PRE20]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Save it as `basic-udp-client.conf`.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为 `basic-udp-client.conf`。
- en: 'Transfer the `tls-auth` secret key file, `ta.key`, to the client machine using
    a secure channel, such as `scp`:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过安全通道（如 `scp`）将 `tls-auth` 密钥文件 `ta.key` 传输到客户端计算机：
- en: '[PRE21]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Start the client:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端：
- en: '[PRE22]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add a route to the server-side gateway, `gateway1`, so that all VPN traffic
    is sent back to the VPN server. In this recipe, we use a router that understands
    a Linux `ip route` like syntax:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向服务器端网关 `gateway1` 添加一条路由，以便将所有 VPN 流量发送回 VPN 服务器。在本食谱中，我们使用理解 Linux `ip route`
    语法的路由器：
- en: '[PRE23]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'After the VPN is established, verify that we are able to ping a machine on
    the remote server LAN:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: VPN 建立后，验证我们是否能够 ping 远程服务器 LAN 上的机器：
- en: '[PRE24]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'The server starts and configures the first available TUN interface with the
    IP address `10.200.0.1`. With the directive `topology subnet`, the fake remote
    address is also 10.200.0.1\. After that, the server listens on the UDP port `1194`
    for incoming connections. For security reasons, the OpenVPN process switches to
    user and group `nobody`. Even if a remote attacker was able to compromise the
    OpenVPN process, the security breach would be contained to the user `nobody` instead
    of the user `root`. When the `user` and `group` directives are used, it is wise
    to add the following as well:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器启动并使用IP地址`10.200.0.1`配置第一个可用的TUN接口。使用`topology subnet`指令，假远程地址也是10.200.0.1。之后，服务器在UDP端口`1194`上监听传入连接。出于安全考虑，OpenVPN进程会切换到用户和组`nobody`。即使远程攻击者能够入侵OpenVPN进程，安全漏洞也仅限于用户`nobody`，而不是用户`root`。当使用`user`和`group`指令时，最好也添加以下内容：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Otherwise, OpenVPN will not be able to restart itself correctly.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，OpenVPN将无法正确重启自身。
- en: 'Another security measure is the use of the following on the server side (and
    `ta.key 1` on the client side):'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 另一项安全措施是在服务器端使用以下内容（客户端使用`ta.key 1`）：
- en: '[PRE26]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This prevents the server from being overloaded by a so-called **Distributed
    Denial of Service** (**DDoS**) attack, as OpenVPN will just ignore those packets
    immediately if the HMAC is not correct.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以防止服务器受到所谓的**分布式拒绝服务（DDoS）**攻击，因为如果HMAC不正确，OpenVPN会立即忽略那些数据包。
- en: 'The following directive sets up a `keepalive` timer on both the client and
    the server side:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以下指令在客户端和服务器端都设置了`keepalive`定时器：
- en: '[PRE27]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Every 10 seconds, a packet is sent from the server to the client side and vice
    versa to ensure that the VPN tunnel is still up and running. If no reply is received
    after 60 seconds on the client side, the VPN connection is automatically restarted.
    On the server side, the timeout period is multiplied by two; hence the server
    will restart the VPN connection if no reply is received after 120 seconds.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 每10秒钟，服务器和客户端之间都会互相发送数据包，以确保VPN隧道仍然处于运行状态。如果客户端在60秒后没有收到回复，VPN连接会自动重新启动。在服务器端，超时期限会加倍；因此，如果120秒后没有收到回复，服务器会重新启动VPN连接。
- en: 'Finally, the following directives are very commonly used in a production setup,
    where the OpenVPN process continues to run in the background (daemonizes itself)
    after the operator logs out:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下指令在生产环境中非常常见，其中OpenVPN进程在操作员注销后继续在后台运行（使其成为守护进程）：
- en: '[PRE28]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: All output of the OpenVPN process is appended to the log file, `/var/log/openvpn.log`.
    You can use the `tail -f` command to monitor the output of the OpenVPN process.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 所有OpenVPN进程的输出都会附加到日志文件`/var/log/openvpn.log`中。你可以使用`tail -f`命令来监控OpenVPN进程的输出。
- en: The client connects to the server. After the initial TLS handshake, using both
    the client and server certificates, the client is assigned the IP address `10.200.0.2`.
    The client configures its first available TUN interface using this information
    and updates its routing table so that traffic for the server-side Site B's LAN
    is tunneled over the VPN.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端连接到服务器。经过初步的TLS握手后，使用客户端和服务器证书，客户端被分配了IP地址`10.200.0.2`。客户端使用这些信息配置其第一个可用的TUN接口，并更新其路由表，以便服务器端B站点的局域网流量通过VPN进行隧道化。
- en: There's more...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As the example files used in this recipe are reused later on, it is useful to
    explain a bit more about the options used.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本食谱中使用的示例文件将在后续中重复使用，因此有必要对使用的选项做更详细的解释。
- en: Linear addresses
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线性地址
- en: 'After the connection is established, you can query the `tun0` interface like
    this:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 连接建立后，你可以像这样查询`tun0`接口：
- en: '[PRE29]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, look for the following:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，查找以下内容：
- en: '[PRE30]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This is caused by the `topology subnet` directive, which is something new in
    OpenVPN 2.1\. This directive tells OpenVPN to assign only a single IP address
    to each client. With OpenVPN 2.0, the minimum number of IP addresses per client
    is four (as we can see in the previous recipe).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由于`topology subnet`指令引起的，这是OpenVPN 2.1中新加入的内容。该指令告诉OpenVPN只为每个客户端分配一个IP地址。对于OpenVPN
    2.0，每个客户端的最小IP地址数是四个（如我们在前面的食谱中看到的）。
- en: Using the TCP protocol
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用TCP协议
- en: 'In the previous example, we chose the UDP protocol. The configuration files
    in this recipe can easily be converted to use the TCP protocol by changing the
    following line:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们选择了UDP协议。本食谱中的配置文件可以通过更改以下行，轻松地转换为使用TCP协议：
- en: '[PRE31]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'It should be changed to the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 应该将其更改为以下内容：
- en: '[PRE32]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This should be done in both the client and server configuration files. Save
    these files as `basic-tcp-server.conf` and `basic-tcp-client.conf` for future
    use:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这应在客户端和服务器配置文件中都进行。将这些文件保存为 `basic-tcp-server.conf` 和 `basic-tcp-client.conf`
    以供将来使用：
- en: '[PRE33]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Server certificates and ns-cert-type server
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务器证书和 `ns-cert-type server`
- en: 'On the client side, the `remote-cert-tls server` directive is often used in
    combination with a server certificate that is built using the following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，`remote-cert-tls server` 指令通常与以下内容一起使用，结合使用由服务器证书构建的配置：
- en: '[PRE34]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This is done in order to prevent man-in-the-middle attacks. The idea is that
    a client will refuse to connect to a server that does not have a special server
    certificate. By doing this, it is no longer possible for a malicious client to
    pose as a server. This option also supports certificates with explicit key usage
    and extended key usage, based on the RFC 3280 TLS rules.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了防止中间人攻击。其思想是，客户端会拒绝连接到没有特殊服务器证书的服务器。通过这样做，恶意客户端就无法伪装成服务器。此选项还支持根据 RFC 3280
    TLS 规则，具有显式密钥使用和扩展密钥使用的证书。
- en: Older versions of OpenVPN used the `ns-cert-type server` directive. This option
    is still supported, but it will be deprecated in a future version of OpenVPN.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 旧版本的 OpenVPN 使用了 `ns-cert-type server` 指令。这个选项仍然被支持，但将来会在 OpenVPN 的版本中被废弃。
- en: Masquerading
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 伪装
- en: 'In this recipe, the gateway on the server-side LAN is configured with an extra
    route for the VPN traffic. Sometimes, this is not possible, in which case, the
    Linux `iptables` command can be used to set up masquerading:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，服务器端局域网的网关配置了一个额外的路由来处理 VPN 流量。有时，这种配置不可行，在这种情况下，可以使用 Linux `iptables`
    命令来设置伪装：
- en: '[PRE35]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This instructs the Linux kernel to rewrite all traffic that is coming from the
    subnet `10.200.0.0/24` (that is, our OpenVPN subnet) and that is leaving the Ethernet
    interface `eth0`. Each of these packets has its source address rewritten so that
    it appears as if it's coming from the OpenVPN server itself and not from the OpenVPN
    client. The `iptables` module keeps track of these rewritten packets so that when
    a return packet is received, the reverse is done and the packets are forwarded
    back to the OpenVPN client again. This is an easy method to enable routing to
    work, but there is a drawback when many clients are used, as it is no longer possible
    to distinguish traffic on Site B's LAN if it is coming from the OpenVPN server
    itself, from client1 via the VPN tunnel, or from clientN via the VPN tunnel.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这指示 Linux 内核重写来自子网 `10.200.0.0/24`（即我们的 OpenVPN 子网）的所有流量，并且这些流量将离开以太网接口 `eth0`。这些数据包的源地址被重写，使其看起来像是来自
    OpenVPN 服务器本身，而不是来自 OpenVPN 客户端。`iptables` 模块会跟踪这些被重写的数据包，以便当返回的数据包被接收时，执行反向操作，将数据包再次转发回
    OpenVPN 客户端。这是启用路由工作的简单方法，但当使用多个客户端时会有一个缺点：如果流量来自 OpenVPN 服务器本身，或来自通过 VPN 隧道的客户端1，或来自通过
    VPN 隧道的客户端N，就无法再区分出流量是来自站点 B 的 LAN。
- en: Adding IPv6 support
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加 IPv6 支持
- en: Support for IPv6 addresses is relatively new in OpenVPN. As IPv6 addresses are
    now being used more and more by companies and Internet Service Providers, this
    recipe provides a setup for using IPv6 for tunnel endpoints as well as using it
    inside the tunnel.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN 对 IPv6 地址的支持相对较新。随着越来越多的公司和互联网服务提供商开始使用 IPv6 地址，这篇食谱提供了一个使用 IPv6 作为隧道端点以及在隧道内使用它的设置。
- en: Getting ready
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe is a continuation of the previous one. Install OpenVPN 2.3.9 or
    higher on two computers. Make sure the computers are connected over a network.
    Set up the client and server certificates using the previous recipe. For this
    recipe, the server computer was running CentOS 6 Linux and OpenVPN 2.3.9 and the
    client was running Fedora 20 Linux and OpenVPN 2.3.9\. Keep the configuration
    file, `basic-udp-server.conf`, from the previous recipe at hand as well as the
    client configuration file, `basic-udp-client.conf`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇食谱是上一篇的延续。请在两台计算机上安装 OpenVPN 2.3.9 或更高版本。确保计算机通过网络连接。使用上一篇中的食谱设置客户端和服务器证书。在这个食谱中，服务器计算机运行
    CentOS 6 Linux 和 OpenVPN 2.3.9，客户端运行 Fedora 20 Linux 和 OpenVPN 2.3.9。保持上一篇中的配置文件
    `basic-udp-server.conf` 和客户端配置文件 `basic-udp-client.conf`。
- en: How to do it...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Modify the server configuration file, `basic-udp-server.conf`, by adding a
    line:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加一行，修改服务器配置文件 `basic-udp-server.conf`：
- en: '[PRE36]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Then save it as `example2-4-server.conf`.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后将其保存为 `example2-4-server.conf`。
- en: 'Start the server:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE37]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Start the client using the configuration file from the previous recipe:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用上一篇中的配置文件启动客户端：
- en: '[PRE38]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The output showing that OpenVPN has configured an IPv6 address is shown in boldface.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 显示OpenVPN配置IPv6地址的输出部分将用粗体显示。
- en: 'Verify that we can reach the server using the `ping6` command:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ping6`命令验证我们是否能到达服务器：
- en: '[PRE39]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How it works...
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: IPv6 support in OpenVPN works almost exactly like IPv4\. The addressing format
    is different and most options need an extra `-ipv6` suffix.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN中的IPv6支持几乎与IPv4完全相同。地址格式不同，大多数选项需要额外的`-ipv6`后缀。
- en: There's more...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are a couple of useful tricks to keep in mind when using client configuration
    files. Some of these tricks are explained here.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用客户端配置文件时，有一些有用的技巧需要记住。这里解释了一些技巧。
- en: IPv6 endpoints
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IPv6端点
- en: 'If the server `openvpnserver.example.com` resolves to an IPv6 address and the
    client has a valid IPv6 address, then the connection can be automatically established
    using IPv6\. This is achieved by changing the `proto udp` line in both client
    and server configurations to `proto udp6`. It is then also possible to specify
    an IPv6 address for the server, using the following command:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器`openvpnserver.example.com`解析为IPv6地址，并且客户端具有有效的IPv6地址，那么连接可以通过IPv6自动建立。通过将客户端和服务器配置中的`proto
    udp`行改为`proto udp6`，可以实现这一点。然后，也可以使用以下命令为服务器指定IPv6地址：
- en: '[PRE40]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Note that even with `proto udp6` in the server configuration file, IPv4 clients
    can still connect.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，即使在服务器配置文件中使用了`proto udp6`，IPv4客户端仍然可以连接。
- en: IPv6-only setup
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仅限IPv6的设置
- en: 'Even with OpenVPN 2.4, it is not yet possible to set up an IPv6-only VPN. You
    must always supply an (bogus) IPv4 address range for the VPN IP space. However,
    with OpenVPN 2.4, it is possible to set up an OpenVPN server that will accept
    requests only from IPv6-enabled clients. A new flag for the `bind` directive was
    added for this:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是OpenVPN 2.4，仍然无法设置仅限IPv6的VPN。你必须始终为VPN IP空间提供（虚假的）IPv4地址范围。但是，使用OpenVPN 2.4，确实可以设置一个只接受IPv6启用客户端请求的OpenVPN服务器。为此，`bind`指令添加了一个新标志：
- en: '[PRE41]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Using client-config-dir files
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用client-config-dir文件
- en: In a setup where a single server can handle many clients, it is sometimes necessary
    to set per-client options that overrule the global options. The `client-config-dir`
    option is very useful for this. It allows the administrator to assign a specific
    IP address to a client; to push specific options, such as compression and DNS
    server, to a client; or to temporarily disable a client altogether.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个服务器可以处理多个客户端的设置中，有时需要设置每个客户端的选项，以覆盖全局选项。`client-config-dir`选项对于此非常有用。它允许管理员为客户端分配特定的IP地址；将特定的选项（如压缩和DNS服务器）推送到客户端；或者临时禁用某个客户端。
- en: Getting ready
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe is a continuation of the previous one. Install OpenVPN 2.3.9 or
    higher on two computers. Make sure the computers are connected over a network.
    Set up the client and server certificates using the previous recipe. For this
    recipe, the server computer was running CentOS 6 Linux and OpenVPN 2.3.9 and the
    client was running Fedora 20 Linux and OpenVPN 2.3.9\. Keep the server configuration
    file, `basic-udp-server.conf`, at hand along with the client configuration file, `basic-udp-client.conf`,
    from the *Server-side routing* recipe.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程是前一个教程的延续。请在两台计算机上安装OpenVPN 2.3.9或更高版本。确保计算机通过网络连接。使用前面的教程设置客户端和服务器证书。在此教程中，服务器计算机运行的是CentOS
    6 Linux和OpenVPN 2.3.9，客户端计算机运行的是Fedora 20 Linux和OpenVPN 2.3.9。将服务器配置文件`basic-udp-server.conf`与客户端配置文件`basic-udp-client.conf`（来自*服务器端路由*教程）放在一起。
- en: How to do it...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Modify the server configuration file, `basic-udp-server.conf`, by adding a
    line:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下行来修改服务器配置文件`basic-udp-server.conf`：
- en: '[PRE42]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Then save it as `example2-5-server.conf`.
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后将其保存为`example2-5-server.conf`。
- en: 'Next, create the directory for the `client-config` files and place a file in
    there with the name of the client certificate. This file needs to contain a single
    line with the IP address for the client listed twice:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建`client-config`文件的目录，并将客户端证书命名为该目录中的一个文件。此文件需要包含一行，其中列出了客户端的IP地址两次：
- en: '[PRE43]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This name can be retrieved from the client certificate file using the following:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用以下命令从客户端证书文件中获取该名称：
- en: '[PRE44]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Start the server:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE45]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Start the client using the configuration file from the previous recipe:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前一个教程中的配置文件启动客户端：
- en: '[PRE46]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: How it works...
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When a client connects to the server with its certificate and with the certificate's
    common name `client1`, the OpenVPN server checks whether there is a corresponding
    client configuration file (also known as a CCD file) in the `client-config-dir`
    directory. If it exists, it is read in as an extra set of options for that particular
    client. In this recipe, we use it to assign a specific IP address to a client
    (although there are more flexible ways to do that). The client is now always assigned
    the IP address `10.200.0.7`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端通过其证书及证书的公共名称`client1`连接到服务器时，OpenVPN 服务器检查是否在`client-config-dir`目录中存在对应的客户端配置文件（也称为
    CCD 文件）。如果存在，它将作为该客户端的额外选项读取。在本食谱中，我们使用它为客户端分配一个特定的 IP 地址（尽管有更多灵活的方式可以做到这一点）。此时，客户端总是被分配
    IP 地址`10.200.0.7`。
- en: The client configuration file contains a single line, `ifconfig-push 10.200.0.7
    10.200.0.`7, which instructs the OpenVPN server to push the client IP address `10.200.0.7`
    to this particular client. The IP address needs to be listed twice, which is mostly
    due to the legacy of `topology net30` mode.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端配置文件包含一行`ifconfig-push 10.200.0.7 10.200.0.7`，该行指示 OpenVPN 服务器将客户端 IP 地址`10.200.0.7`推送到这个特定客户端。IP
    地址需要列出两次，这主要是由于`topology net30`模式的遗留问题。
- en: In this mode, which is still the default in OpenVPN 2.3, a remote endpoint address
    is always needed and it needs to be within a /30 network range of the client's
    VPN IP address. In `topology subnet` mode, it suffices to list the client's VPN
    IP address twice, or to list the client's VPN IP address followed by a netmask.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模式下，OpenVPN 2.3 中仍然是默认模式，需要始终指定一个远程端点地址，并且该地址必须在客户端 VPN IP 地址的 /30 网络范围内。在`topology
    subnet`模式下，仅需列出客户端的 VPN IP 地址两次，或者列出客户端的 VPN IP 地址后跟子网掩码。
- en: There's more...
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are a couple of useful tricks to keep in mind when using client configuration
    files. Some of these tricks are explained here.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 使用客户端配置文件时，有几个有用的小技巧需要记住。这里解释了一些这些技巧。
- en: The default configuration file
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认配置文件
- en: 'If the following conditions are met, then the `DEFAULT` file is read and processed
    instead:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果满足以下条件，则会读取并处理`DEFAULT`文件：
- en: A `client-config-dir` directive is specified
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定了一个`client-config-dir`指令。
- en: There is no matching client file for the client's certificate in that directory
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在该目录中没有与客户端证书匹配的客户端文件。
- en: A file called `DEFAULT` does exist in that directory
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在该目录中确实存在一个名为`DEFAULT`的文件。
- en: Please note that this name is case-sensitive.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个名称区分大小写。
- en: Troubleshooting
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'Troubleshooting configuration problems with CCD files is a recurring topic
    on the OpenVPN mailing lists. The most common configuration errors are as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 CCD 文件中的配置问题是 OpenVPN 邮件列表中的一个常见话题。最常见的配置错误如下：
- en: Always specify the full path in the `client-config-dir` directive
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`client-config-dir`指令中始终指定完整路径。
- en: Make sure the directory is accessible and the CCD file, is readable to the user
    which is used to run OpenVPN (`nobody` or `openvpn` in most cases)
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保目录可访问，并且 CCD 文件对运行 OpenVPN 的用户可读（大多数情况下为`nobody`或`openvpn`）。
- en: Make sure that the right filename is used for the CCD file, without any extensions
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保 CCD 文件使用正确的文件名，并且没有任何扩展名。
- en: Options allowed in a client-config-dir file
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 客户端配置文件中允许的选项。
- en: 'The following configuration options are allowed in a CCD file:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: CCD 文件中允许以下配置选项：
- en: '`push`: This option is used for pushing DNS servers, WINS servers, routes,
    and so on'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`push`：此选项用于推送 DNS 服务器、WINS 服务器、路由等。'
- en: '`push-reset`: This option is used to overrule global push options'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`push-reset`：此选项用于覆盖全局推送选项。'
- en: '`iroute`: This option is used for routing client subnets to the server'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`iroute`：此选项用于将客户端子网路由到服务器。'
- en: '`ifconfig-push`: This option is used for assigning a specific IP address, as
    done in this recipe'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ifconfig-push`：此选项用于分配特定的 IP 地址，如本食谱所示。'
- en: '`disable`: This option is used for temporarily disabling a client altogether'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`disable`：此选项用于临时禁用客户端。'
- en: '`config`: This option is used for including another configuration file'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`：此选项用于包含另一个配置文件。'
- en: Routing - subnets on both sides
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由 - 双方的子网
- en: This recipe will demonstrate how to set up server-side and client-side routing
    in client/server mode. With this setup, the OpenVPN client will be able to reach
    all the machines behind the OpenVPN server, and the server will be able to reach
    all the machines behind the client.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将演示如何在客户端/服务器模式中设置服务器端和客户端路由。通过这种设置，OpenVPN 客户端将能够访问 OpenVPN 服务器后面的所有机器，服务器也能够访问客户端后面的所有机器。
- en: Getting ready
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: This recipe uses the PKI files created in the first recipe of this chapter.
    Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.9 and the client was running Fedora 20 Linux and OpenVPN
    2.3.9\. Keep the server configuration file, `basic-udp-server.conf`, handy along
    with the client configuration file, `basic-udp-client.conf`, from the *Server-side
    routing* recipe.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用本章第一篇教程中创建的PKI文件。在两台计算机上安装OpenVPN 2.3.9或更高版本。确保计算机之间通过网络连接。对于本教程，服务器计算机运行的是CentOS
    6 Linux和OpenVPN 2.3.9，而客户端运行的是Fedora 20 Linux和OpenVPN 2.3.9。请保留服务器配置文件`basic-udp-server.conf`，以及来自*服务器端路由*教程的客户端配置文件`basic-udp-client.conf`。
- en: 'We use the following network layout:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00343.jpeg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00343.jpeg)'
- en: How to do it...
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Modify the server configuration file, `basic-udp-server.conf`, by adding these
    lines:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下行来修改服务器配置文件`basic-udp-server.conf`：
- en: '[PRE47]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Then save it as `example2-6-server.conf`.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后将其保存为`example2-6-server.conf`。
- en: 'Next, create the directory for the client configuration files:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建客户端配置文件的目录：
- en: '[PRE48]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Place a file in this directory with the name of the client certificate. This
    file will contain a single line:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此目录中放置一个文件，文件名为客户端证书的名称。该文件将包含一行内容：
- en: '[PRE49]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The name of the client certificate can be retrieved from the client certificate
    file using the following command:'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用以下命令从客户端证书文件中提取客户端证书的名称：
- en: '[PRE50]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Thus, for this recipe, the client configuration file needs to be named `client1`,
    without an extension.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，对于本教程，客户端配置文件需要命名为`client1`，没有扩展名。
- en: 'Start the server:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE51]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Start the client:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端：
- en: '[PRE52]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'After the VPN is established, we need to set up routing on both sides. Enable
    the IP traffic forwarding feature on the server:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: VPN建立后，我们需要在两端设置路由。启用服务器上的IP流量转发功能：
- en: '[PRE53]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Add a route to LAN B''s Gateway to point to the OpenVPN server itself:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一条指向LAN B网关的路由，指向OpenVPN服务器本身：
- en: '[PRE54]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Here, `10.198.1.1` is the LAN IP address of the OpenVPN server used in this
    recipe.
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，`10.198.1.1`是本教程中使用的OpenVPN服务器的LAN IP地址。
- en: 'Now set up routing on the client side:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在客户端端设置路由：
- en: '[PRE55]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'And similarly, add a route for the LAN A Gateway:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，添加一条指向LAN A网关的路由：
- en: '[PRE56]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Here, `192.168.4.5` is the LAN IP address of the OpenVPN client used in this
    recipe.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，`192.168.4.5`是本教程中使用的OpenVPN客户端的LAN IP地址。
- en: 'Now, we verify that we can ping a machine on the remote server LAN:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们验证是否可以ping通远程服务器LAN上的一台机器：
- en: '[PRE57]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'We verify the same vice versa:'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们验证相同的操作反向执行：
- en: '[PRE58]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: How it works...
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When a client connects to the server with its certificate and with the certificate''s
    common name, `client1`, the OpenVPN server reads the client configuration file
    (also known as a CCD file) in the `client-config-dir` directory. The following
    directive in this file tells the OpenVPN server that the subnet `192.168.4.0/24`
    is reachable through the client `client1`:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端使用其证书和证书的公共名称`client1`连接到服务器时，OpenVPN服务器会读取`client-config-dir`目录中的客户端配置文件（也称为CCD文件）。该文件中的以下指令告诉OpenVPN服务器，子网`192.168.4.0/24`可以通过客户端`client1`访问：
- en: '[PRE59]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This directive has nothing to do with a kernel routing table and is only used
    internally by the OpenVPN server process.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 该指令与内核路由表无关，仅由OpenVPN服务器进程内部使用。
- en: 'The following server directive is used by OpenVPN to configure the routing
    table of the operating system so that all of the traffic intended for the subnet
    `192.168.4.0/24` is forwarded to the interface with the IP address `10.200.0.1`,
    which is the VPN IP of the server:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 以下服务器指令由OpenVPN使用，以配置操作系统的路由表，使所有面向子网`192.168.4.0/24`的流量都转发到IP地址为`10.200.0.1`的接口，该地址是服务器的VPN
    IP：
- en: '[PRE60]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: With the appropriate routing set up on both ends, site-to-site routing is now
    possible.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在两端设置了适当的路由后，现在可以实现站点到站点的路由。
- en: There's more...
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: When routing client-side traffic to and from multiple clients, there are several
    caveats to be aware of.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在路由客户端之间的多个客户端流量时，有几个需要注意的事项。
- en: Masquerading
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 地址伪装
- en: We could have used masquerading on both ends as well, but with multiple clients
    it becomes very hard to keep track of the network traffic.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以在两端都使用地址伪装，但在有多个客户端的情况下，很难跟踪网络流量。
- en: Client-to-client subnet routing
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 客户端到客户端的子网路由
- en: 'If another VPN client needs to reach the subnet `192.168.4.0/24` behind client `client1`,
    the server configuration file needs to be extended with the following:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如果另一个VPN客户端需要通过客户端`client1`访问子网`192.168.4.0/24`，则需要扩展服务器配置文件，添加以下内容：
- en: '[PRE61]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: This instructs all clients that subnet `192.168.4.0/24` is reachable through
    the VPN tunnel, except for client `client1`. The client `client1` itself is excluded
    due to the matching `iroute` entry.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这指示所有客户端，子网`192.168.4.0/24`可以通过VPN隧道访问，除了客户端`client1`。由于匹配的`iroute`条目，`client1`本身被排除在外。
- en: No route statements in a CCD file
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CCD文件中没有路由声明
- en: Note that you cannot use the route directive inside a CCD file. This is a long-standing
    missing feature of OpenVPN. It is possible to achieve similar behavior using a
    `learn-address` script, as we will learn in [Chapter 5](part0060.xhtml#aid-1P71O1
    "Chapter 5. Scripting and Plugins"), *Scripting and Plugins*.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您不能在CCD文件中使用路由指令。这是OpenVPN的一个长期缺失的功能。通过使用`learn-address`脚本，我们可以实现类似的行为，正如我们在[第5章](part0060.xhtml#aid-1P71O1
    "第5章. 脚本与插件")，*脚本与插件*中将要学习的那样。
- en: See also
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Complete site-to-site setup* recipe from [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1.  Point-to-Point Networks"), *Point-to-Point Networks*, where it is
    explained how to connect two remote LANs via a VPN tunnel using a point-to-point
    setup
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](part0015.xhtml#aid-E9OE1 "第1章. 点对点网络")，*点对点网络*中的*完整的站点到站点设置*配方，详细解释了如何通过VPN隧道使用点对点设置连接两个远程局域网。'
- en: The *Using a learn-address script* recipe from [Chapter 5](part0060.xhtml#aid-1P71O1
    "Chapter 5. Scripting and Plugins"), *Scripting and Plugins*, where it is explained
    how to use a `learn-address` script to dynamically set and remove server-side
    routes
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第5章](part0060.xhtml#aid-1P71O1 "第5章. 脚本与插件")，*脚本与插件*中的*使用learn-address脚本*配方，解释了如何使用`learn-address`脚本动态设置和删除服务器端路由。'
- en: Redirecting the default gateway
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重定向默认网关
- en: A very common use of a VPN is to route all of the traffic over a secure tunnel.
    This allows one to safely access a network or even the Internet itself from within
    a hostile environment (for example, a poorly protected, but properly trojaned
    Internet cafÃ©teria).
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: VPN的一个非常常见的用途是将所有流量通过安全隧道进行路由。这使得在敌对环境中（例如，一个保护不当、但已被正确植入木马的网吧）也能安全地访问网络甚至是互联网本身。
- en: In this recipe, we will set up OpenVPN to do exactly this. This recipe is very
    similar to the *Server-side routing* recipe, but there are some pitfalls when
    redirecting all of the traffic over a VPN tunnel.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将设置OpenVPN来实现这一点。此配方与*服务器端路由*配方非常相似，但在将所有流量通过VPN隧道进行重定向时会有一些陷阱。
- en: Getting ready
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The network layout used in this recipe is the same as in the *Server-side routing*
    recipe.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方中使用的网络布局与*服务器端路由*配方中的相同。
- en: This recipe uses the PKI files created in the first recipe of this chapter.
    Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.9 and the client was running Fedora 20 Linux and OpenVPN
    2.3.9\. Keep the server configuration file, `basic-udp-server.conf`, at hand along
    with the client configuration file, `basic-udp-client.conf`, from the *Server-side
    routing* recipe.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方使用了本章第一个配方中创建的PKI文件。请在两台计算机上安装OpenVPN 2.3.9或更高版本。确保两台计算机已经通过网络连接。对于本配方，服务器计算机运行的是CentOS
    6 Linux和OpenVPN 2.3.9，而客户端计算机运行的是Fedora 20 Linux和OpenVPN 2.3.9。请将服务器配置文件`basic-udp-server.conf`和客户端配置文件`basic-udp-client.conf`与*服务器端路由*配方一起准备好。
- en: How to do it...
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file by adding a line to the `basic-udp-server.conf`
    file:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向`basic-udp-server.conf`文件添加一行来创建服务器配置文件：
- en: '[PRE62]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Save it as `example2-7-server.conf`.
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为`example2-7-server.conf`。
- en: 'Start the server:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE63]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'In another server terminal, enable IP-traffic forwarding:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个服务器终端中，启用IP流量转发：
- en: '[PRE64]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Start the client:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端：
- en: '[PRE65]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'You will observe something like this:'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将会看到类似如下内容：
- en: '![How to do it...](img/image00344.jpeg)'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00344.jpeg)'
- en: After the VPN is established, verify that all of the traffic is going over the
    tunnel:![How to do it...](img/image00345.jpeg)
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: VPN建立后，验证所有流量是否都通过隧道进行路由：![如何操作...](img/image00345.jpeg)
- en: The first address in the `traceroute` output is the address of the OpenVPN server,
    hence all of the traffic is routed over the tunnel.
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`traceroute`输出中的第一个地址是OpenVPN服务器的地址，因此所有的流量都会通过隧道进行路由。'
- en: How it works...
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When the client connects to the OpenVPN server, a special redirect statement
    is pushed out by the server to the OpenVPN client:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端连接到 OpenVPN 服务器时，服务器会向 OpenVPN 客户端推送一条特殊的重定向语句：
- en: '[PRE66]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The configuration option `def1` tells the OpenVPN client to add three routes
    to the client operating system:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 配置选项 `def1` 告诉 OpenVPN 客户端向客户端操作系统添加三条路由：
- en: '[PRE67]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The first route is an explicit route from the client to the OpenVPN server via
    the LAN interface. This route is needed as otherwise all the traffic for the OpenVPN
    server itself would go through the tunnel.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 第一路由是从客户端通过 LAN 接口到 OpenVPN 服务器的显式路由。需要这个路由，否则所有针对 OpenVPN 服务器本身的流量都会通过隧道。
- en: The other two routes are a clever trick to overrule the default route so that
    all of the traffic is sent through the tunnel instead of to the default LAN gateway.
    The existing default route to the LAN gateway is not deleted due to the `def1`
    parameter.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两条路由是一个巧妙的技巧，用来覆盖默认路由，使所有流量通过隧道发送，而不是发送到默认的局域网网关。由于 `def1` 参数，现有的到局域网网关的默认路由并不会被删除。
- en: There's more...
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: There are many parameters and flags related to the `redirect-gateway` directive.
    A subset of these parameters is listed here as well as some other special use
    cases.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `redirect-gateway` 指令相关的有许多参数和标志。这里列出了一部分这些参数以及一些其他的特殊使用情况。
- en: Redirect-gateway parameters
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Redirect-gateway 参数
- en: 'Originally, OpenVPN supported only the following directive:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，OpenVPN 只支持以下指令：
- en: '[PRE68]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: This is used to delete the original default route and replace it with a route
    to the OpenVPN server. This may seem like a clean solution, but in some cases,
    OpenVPN was unable to determine the existing default route. This often happened
    to clients connecting through mobile connections. This also used to create routing
    lockups, where all of the traffic was routed through the tunnel, including the
    packets sent by the OpenVPN client itself.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 该指令用于删除原始默认路由，并用指向 OpenVPN 服务器的路由替代。这看起来像是一种干净的解决方案，但在某些情况下，OpenVPN 无法确定现有的默认路由。这通常发生在通过移动网络连接的客户端上。它还可能导致路由死锁，所有流量都会通过隧道传输，包括
    OpenVPN 客户端本身发送的包。
- en: 'With the current version of OpenVPN, there are several flags for the `redirect-gateway`
    directive:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前版本的 OpenVPN 中，`redirect-gateway` 指令有几个标志：
- en: '`local`: This flag tells OpenVPN to not set a direct route from the client
    to the server. It is useful only if the client and server are in the same LAN,
    such as when securing wireless networks.'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local`：此标志告诉 OpenVPN 不要设置从客户端到服务器的直接路由。它仅在客户端和服务器处于同一局域网（如保护无线网络时）时有用。'
- en: '`block-local`: This flag instructs OpenVPN to block all of the network access
    to the LAN after the VPN tunnel is established. This is achieved by routing all
    of the LAN traffic into the tunnel itself, except for the traffic to the OpenVPN
    server itself.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`block-local`：此标志指示 OpenVPN 在建立 VPN 隧道后，阻止对局域网的所有网络访问。通过将所有局域网流量路由到隧道中，除了指向
    OpenVPN 服务器本身的流量，来实现这一点。'
- en: '`bypass-dhcp`: This flag adds a direct route to the local DHCP server. If the
    local DHCP server is on a separate subnet, this will ensure that the DHCP addresses
    assigned to the non-VPN interfaces will continue to be refreshed. This option
    is picked up automatically by a Windows client. On other operating systems, a
    plugin or script is required.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bypass-dhcp`：此标志添加一条到本地 DHCP 服务器的直接路由。如果本地 DHCP 服务器位于不同的子网，此选项将确保分配给非 VPN
    接口的 DHCP 地址会持续更新。Windows 客户端会自动识别此选项。其他操作系统则需要插件或脚本来处理。'
- en: '`bypass-dns`: This flag adds a direct route to the local DNS server. In large-scale
    networks, the DNS server is often not found on the local subnet that the client
    is connected to. If the route to this DNS server is altered to go through the
    VPN tunnel after the client has connected, this will cause, at the very least,
    a serious performance penalty. More likely, the entire DNS server will become
    unreachable. It is picked up by a Windows client automatically and requires a
    plugin or script on other operating systems.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bypass-dns`：此标志添加一条到本地 DNS 服务器的直接路由。在大规模网络中，DNS 服务器通常不在客户端连接的本地子网内。如果在客户端连接后，将此
    DNS 服务器的路由修改为通过 VPN 隧道传输，这至少会导致严重的性能损失。更可能的是，整个 DNS 服务器将变得不可达。Windows 客户端会自动检测到这一点，其他操作系统则需要插件或脚本来处理。'
- en: '`!ipv4`: This flag was added in OpenVPN 2.4 and it instructs OpenVPN to not
    redirect any IPv4 traffic over the VPN tunnel. It is useful only in combination
    with the flag `ipv6`. We will go into detail more in the next recipe.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`!ipv4`：此标志在 OpenVPN 2.4 中新增，指示 OpenVPN 不通过 VPN 隧道重定向任何 IPv4 流量。它仅与 `ipv6`
    标志一起使用时有用。我们将在下一篇教程中更详细地讨论。'
- en: '`ipv6`: This flag was added in OpenVPN 2.4 and it instructs OpenVPN to also
    redirect all IPv6 traffic over the VPN tunnel. We will go into more detail in
    the next recipe.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ipv6`：此标志在 OpenVPN 2.4 中新增，指示 OpenVPN 也将所有 IPv6 流量通过 VPN 隧道重定向。我们将在下一篇教程中详细讨论。'
- en: The redirect-private option
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`redirect-private` 选项'
- en: Apart from the `redirect-gateway` directive, OpenVPN has a second, comparatively
    less well-known, option called `redirect-private`. This option takes the same
    parameters as the `redirect-gateway` directive, but it instructs OpenVPN to make
    no changes to the default routes at all. It is used most often in combination
    with the `bypass-dhcp`, `bypass-dns`, `ipv6`, and `block-local` flags.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `redirect-gateway` 指令，OpenVPN 还有第二个相对较少为人知的选项，叫做 `redirect-private`。此选项与
    `redirect-gateway` 指令接受相同的参数，但它指示 OpenVPN 完全不更改默认路由。它通常与 `bypass-dhcp`、`bypass-dns`、`ipv6`
    和 `block-local` 标志一起使用。
- en: Split tunneling
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分割隧道
- en: 'In some cases, the `redirect-gateway` parameter is a bit too restrictive. You
    might want to add a few routes to local networks and route all other traffic over
    the VPN tunnel. The OpenVPN `route` directive has a few special parameters for
    this:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，`redirect-gateway` 参数可能过于严格。你可能想要向本地网络添加一些路由，并将所有其他流量通过 VPN 隧道路由。OpenVPN
    `route` 指令有几个特殊的参数可以用于此目的：
- en: '`net_gateway`: This is a special gateway representing the LAN gateway address
    that OpenVPN determined when starting. For example, to add a direct route to the
    LAN `192.168.4.0`/`24`, you would add the following to the client configuration
    file:'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`net_gateway`：这是一个特殊的网关，表示 OpenVPN 启动时确定的 LAN 网关地址。例如，要向 LAN `192.168.4.0`/`24`
    添加一条直接路由，你可以在客户端配置文件中添加以下内容：'
- en: '[PRE69]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '`vpn_gateway`: This is a special gateway representing the VPN gateway address.
    If you want to add a route that explicitly sends traffic for a particular subnet
    over the VPN tunnel, overruling any local routes, you would add the following
    option:'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vpn_gateway`：这是一个特殊的网关，表示 VPN 网关地址。如果你想添加一条路由，明确地将特定子网的流量通过 VPN 隧道发送，覆盖任何本地路由，你可以添加以下选项：'
- en: '[PRE70]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: See also
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Server-side routing* recipe, where the basic steps of setting up server-side
    routing is explained
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*服务器端路由* 教程，其中解释了设置服务器端路由的基本步骤'
- en: Redirecting the IPv6 default gateway
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重定向 IPv6 默认网关
- en: With the advent of IPv6 networks, it is becoming increasingly important to be
    able to set up a VPN that will secure both IPv4 and IPv6 traffic. If only IPv4
    traffic is secured over a VPN tunnel, then it is still possible for traffic to
    leak out over IPv6\. In this recipe, we will set up OpenVPN to secure all IPv6
    traffic as well. Support for this was added in OpenVPN 2.4.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 IPv6 网络的出现，设置一个能保障 IPv4 和 IPv6 流量的 VPN 变得越来越重要。如果只有 IPv4 流量通过 VPN 隧道加密，那么
    IPv6 流量仍可能泄露。在本教程中，我们将配置 OpenVPN 来保障所有 IPv6 流量的安全。OpenVPN 2.4 添加了对这一功能的支持。
- en: Getting ready
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The network layout used in this recipe is the same as in the *Server-side routing*
    recipe.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中使用的网络布局与 *服务器端路由* 教程中使用的相同。
- en: This recipe uses the PKI files created in the first recipe of this chapter.
    Install OpenVPN 2.4 or higher on two computers. Make sure the computers are connected
    over a network. For this recipe, the server computer was running CentOS 6 Linux
    and OpenVPN 2.4 and the client was running Fedora 20 Linux and OpenVPN 2.4\. For
    the server, keep the IPv6 configuration file, `example2-4-server.conf`, from the *Adding
    IPv6 support* recipe at hand. For the client, keep the configuration file, `basic-udp-client.conf`,
    from the *Server-side routing* recipe at hand.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用的是本章第一篇教程中创建的 PKI 文件。在两台计算机上安装 OpenVPN 2.4 或更高版本。确保这两台计算机通过网络连接。对于本教程，服务器计算机运行的是
    CentOS 6 Linux 和 OpenVPN 2.4，客户端计算机运行的是 Fedora 20 Linux 和 OpenVPN 2.4。对于服务器，保持手头有
    *添加 IPv6 支持* 教程中的 IPv6 配置文件 `example2-4-server.conf`。对于客户端，保持手头有 *服务器端路由* 教程中的配置文件
    `basic-udp-client.conf`。
- en: How to do it...
  id: totrans-347
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file by adding a line to the `example2-4-server.conf`
    file:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在 `example2-4-server.conf` 文件中添加一行来创建服务器配置文件：
- en: '[PRE71]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Save it as `example2-8-server.conf`.
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为 `example2-8-server.conf`。
- en: 'Start the server:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE72]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'In another server terminal, enable IP-traffic forwarding:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个服务器终端中，启用 IP 流量转发：
- en: '[PRE73]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Start the client:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动客户端：
- en: '[PRE74]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: How it works...
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When the client connects to the OpenVPN server, a special redirect statement
    is pushed out by the server to the OpenVPN client:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端连接到OpenVPN服务器时，服务器会将一个特殊的重定向语句推送到OpenVPN客户端：
- en: '[PRE75]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The configuration flag `ipv6` tells the OpenVPN client to redirect all of the
    IPv6 traffic over the tunnel, by adding three routes to the client operating system:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 配置标志`ipv6`告诉OpenVPN客户端将所有IPv6流量重定向通过隧道，通过向客户端操作系统添加三条路由：
- en: '[PRE76]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: This effectively redirects all of the IPv6 traffic over the VPN tunnel.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 这有效地将所有IPv6流量重定向通过VPN隧道。
- en: The second flag `!ipv4`, tells the OpenVPN client to not redirect IPv4 traffic.
    This was added to this example to demonstrate that it is also possible to redirect
    IPv6 traffic only.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个标志`!ipv4`告诉OpenVPN客户端不重定向IPv4流量。此标志被添加到此示例中，以演示仅重定向IPv6流量也是可能的。
- en: There's more...
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'It is possible to achieve the same behavior by adding the following lines to
    the server configuration file:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向服务器配置文件添加以下几行，也可以实现相同的行为：
- en: '[PRE77]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'This is supported in OpenVPN 2.3 as well. However, there is a very important
    caveat to this: if the IPv6 address of the server is in the same range as any
    of the preceding addresses, then this setup will fail, as all of the traffic for
    the preceding IPv6 networks will be redirected over the tunnel. To overcome this
    problem, the flag `ipv6` was introduced in OpenVPN 2.4.'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN 2.3 也支持这一功能。然而，这里有一个非常重要的警告：如果服务器的IPv6地址与任何前述地址在同一范围内，那么此设置将失败，因为所有前述IPv6网络的流量将被重定向通过隧道。为了解决这个问题，OpenVPN
    2.4引入了`ipv6`标志。
- en: Using an ifconfig-pool block
  id: totrans-368
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`ifconfig-pool`块
- en: In this recipe, we will use an `ifconfig-pool` block to separate regular VPN
    clients from administrative VPN clients. This makes it easier to set up different
    firewall rules for administrative users.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将使用`ifconfig-pool`块将普通VPN客户端与管理员VPN客户端分开。这样更容易为管理员用户设置不同的防火墙规则。
- en: Getting ready
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: This recipe uses the PKI files created in the first recipe of this chapter.
    Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.9 and the regular VPN client was running Windows 7 64
    bit and OpenVPN 2.3.11 and was assigned to the `192.168.200.0` network. The VPN
    client Admin was running Fedora 20 Linux and OpenVPN 2.3.9 and was on the `192.168.202.0`
    network. Keep the client configuration file, `basic-udp-client.conf`, from the *Server-side
    routing* recipe at hand.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱使用了本章第一个食谱中创建的PKI文件。在两台计算机上安装OpenVPN 2.3.9或更高版本。确保两台计算机通过网络连接。对于本食谱，服务器计算机运行CentOS
    6 Linux和OpenVPN 2.3.9，普通VPN客户端运行Windows 7 64位和OpenVPN 2.3.11，并分配到`192.168.200.0`网络。VPN客户端Admin运行Fedora
    20 Linux和OpenVPN 2.3.9，并位于`192.168.202.0`网络。保留来自*服务器端路由*食谱的客户端配置文件`basic-udp-client.conf`。
- en: 'We use the following network layout:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00346.jpeg)'
  id: totrans-373
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00346.jpeg)'
- en: How to do it...
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务器配置文件：
- en: '[PRE78]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Then save it as `example2-9-server.conf`.
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后将其保存为`example2-9-server.conf`。
- en: 'Start the server:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE79]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The administrative VPN client will be assigned a special IP address using a
    client-configuration file:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理员VPN客户端将通过客户端配置文件分配一个特殊的IP地址：
- en: '[PRE80]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Note that the client VPN address is listed twice. This is not a typo; for more
    details on this, refer to the previous recipe.
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，客户端VPN地址列出了两次。这不是打字错误；有关更多详细信息，请参阅前面的食谱。
- en: Note that the `clients` directory needs to be world-readable, as the OpenVPN
    server process will run as user `nobody` after starting up.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，`clients`目录需要对所有人可读，因为OpenVPN服务器进程启动后将作为用户`nobody`运行。
- en: 'Next, start the Linux client using the configuration file from the earlier
    recipe:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用之前食谱中的配置文件启动Linux客户端：
- en: '[PRE81]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: The IP address that is assigned to the administrative client is highlighted
    for clarity.
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了清晰起见，突出显示分配给管理员客户端的IP地址。
- en: 'Create a configuration file for the Windows client:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建Windows客户端的配置文件：
- en: '[PRE82]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Then save it as `basic-udp-client.ovpn`.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将其保存为`basic-udp-client.ovpn`。
- en: Note
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note the use of the forward slash (`/`), which is easier to use than the backslash
    (`\`), as the backslash needs to be repeated twice each time.
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意使用正斜杠 (`/`)，它比反斜杠 (`\`) 更易于使用，因为反斜杠每次都需要重复两次。
- en: Transfer the `ca.crt`, `client2.crt`, and `client2.key` files along with the `tls-auth`
    secret key file, `ta.key`, to the Windows machine using a secure channel, such
    as `winscp` or the PuTTY `pscp` command-line tool.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ca.crt`、`client2.crt`、`client2.key`文件以及`tls-auth`密钥文件`ta.key`通过安全渠道（如`winscp`或PuTTY的`pscp`命令行工具）传输到Windows机器上。
- en: Start the Windows client using the OpenVPN GUI:![How to do it...](img/image00347.jpeg)
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用OpenVPN GUI启动Windows客户端：![如何操作...](img/image00347.jpeg)
- en: Note
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that this client's private key file is protected using a password or
    passphrase. After both the clients are connected, we verify that they can ping
    each other and the server (assuming that no firewalls are blocking access).
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住，这个客户端的私钥文件是通过密码或密码短语保护的。两个客户端连接后，我们验证它们是否能够相互ping通并与服务器通信（假设没有防火墙阻止访问）。
- en: 'On the Admin Client:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在管理客户端上：
- en: '[PRE83]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'And on the regular client:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在常规客户端上：
- en: '[PRE84]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: How it works...
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'A server configuration file normally uses the following directive to configure
    a range of IP addresses for the clients:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器配置文件通常使用以下指令为客户端配置一系列IP地址：
- en: '[PRE85]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'This directive is internally expanded to the following:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 该指令在内部扩展为以下内容：
- en: '[PRE86]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: So, by not using the `server` directive, but by specifying our own `ifconfig-pool`
    range, we can override this behavior. We then use a CCD file to assign an IP address
    to the administrative client, which falls outside of the `ifconfig-pool` range.
    By using the appropriate `route` and `push "route"` statements, we ensure that
    all clients are able to ping each other.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，通过不使用`server`指令，而是指定我们自己的`ifconfig-pool`范围，我们可以覆盖此行为。然后，我们使用CCD文件将IP地址分配给管理客户端，该地址位于`ifconfig-pool`范围之外。通过使用适当的`route`和`push
    "route"`语句，我们确保所有客户端能够相互ping通。
- en: Note that we also need to explicitly push the topology in this case, as this
    is no longer done automatically by the `server` directive.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这种情况下，我们还需要明确地推送拓扑，因为`server`指令不再自动执行此操作。
- en: There's more..
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are many details to consider when setting up the default configuration
    files.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 设置默认配置文件时需要考虑许多细节。
- en: Configuration files on Windows
  id: totrans-409
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows上的配置文件
- en: 'The OpenVPN GUI application on Windows always starts in the directory:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: Windows上的OpenVPN GUI应用程序始终在以下目录启动：
- en: '[PRE87]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Or, `C:\Program Files(x86)\..`. when using the 32-bit version of OpenVPN on
    64-bit versions of Windows. Thus, the directory paths in the `basic-udp-client.ovpn`
    configuration file can be omitted:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，当在64位Windows版本上使用32位版本的OpenVPN时，路径为`C:\Program Files(x86)\..`。因此，可以省略`basic-udp-client.ovpn`配置文件中的目录路径：
- en: '[PRE88]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Client-to-client access
  id: totrans-414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 客户端之间的访问
- en: 'With this setup, the VPN clients can connect to each other even though we did
    not make use of the following directive in the server-side configuration:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此设置，即使我们没有在服务器端配置文件中使用以下指令，VPN客户端仍然可以互相连接：
- en: '[PRE89]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: This is possible due to the `route` and `push "route"` statements in the server
    configuration file. The advantage of not using `client-to-client` is that it is
    still possible to filter out unwanted traffic using `iptables` or another firewalling
    solution.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过服务器配置文件中的`route`和`push "route"`语句实现的。不使用`client-to-client`的优点是，仍然可以使用`iptables`或其他防火墙解决方案来过滤掉不需要的流量。
- en: 'If there is no need for the administrative clients to connect to the regular
    VPN clients (or vice versa), then the netmask can be adjusted to:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有必要让管理客户端连接到常规VPN客户端（或反之亦然），那么可以将子网掩码调整为：
- en: '[PRE90]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Now, the networks are completely separated.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，网络完全分隔开了。
- en: Using the TCP protocol
  id: totrans-421
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用TCP协议
- en: 'In this example, we chose the UDP protocol. The client configuration file in
    this recipe can easily be converted to use TCP protocol by changing the line:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们选择了UDP协议。这个配方中的客户端配置文件可以通过更改以下行轻松转换为使用TCP协议：
- en: '[PRE91]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Change it to the following:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 将其更改为以下内容：
- en: '[PRE92]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Save this file as `basic-tcp-client.ovpn` for future use.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`basic-tcp-client.ovpn`以供将来使用。
- en: Using the status file
  id: totrans-427
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用状态文件
- en: OpenVPN offers several options to monitor the clients connected to a server.
    The most commonly used method is using a status file. This recipe will show how
    to use and read the OpenVPN's status file.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN提供了几种方法来监视连接到服务器的客户端。最常用的方法是使用状态文件。这个配方将展示如何使用和读取OpenVPN的状态文件。
- en: Getting ready
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The network layout used in this recipe is the same as in the *Server-side routing*
    recipe. This recipe uses the PKI files created in the first recipe of this chapter.
    Install OpenVPN 2.3.9 or higher on two computers. Make sure the computers are
    connected over a network. For this recipe, the server computer was running CentOS
    6 Linux and OpenVPN 2.3.9\. The first client was running Fedora 20 Linux and OpenVPN
    2.3.9\. The second client was running Windows 7 64 bit and OpenVPN 2.3.11\. For
    the Linux server, keep the server configuration file `basic-udp-server.conf` from
    the *Server-side routing* recipe at hand. For the Linux client, keep the client
    configuration file `basic-udp-client.conf` from the same recipe at hand. For the
    Windows client, keep the corresponding client configuration file, `basic-udp-client.ovpn`,
    from the previous recipe at hand.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中使用的网络布局与*服务器端路由*食谱中相同。本食谱使用了本章第一篇食谱中创建的PKI文件。在两台计算机上安装 OpenVPN 2.3.9 或更高版本。确保两台计算机通过网络连接。在本食谱中，服务器计算机运行
    CentOS 6 Linux 和 OpenVPN 2.3.9，第一台客户端计算机运行 Fedora 20 Linux 和 OpenVPN 2.3.9，第二台客户端计算机运行
    Windows 7 64 位和 OpenVPN 2.3.11。对于 Linux 服务器，请随时准备好*服务器端路由*食谱中的`basic-udp-server.conf`文件。对于
    Linux 客户端，请随时准备好同一食谱中的`basic-udp-client.conf`文件。对于 Windows 客户端，请随时准备好上一食谱中的`basic-udp-client.ovpn`配置文件。
- en: How to do it...
  id: totrans-431
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server configuration file by adding a line to the `basic-udp-server.conf`
    file:'
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向`basic-udp-server.conf`文件添加一行来创建服务器配置文件：
- en: '[PRE93]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Save it as `example2-10-server.conf`.
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为`example2-10-server.conf`。
- en: 'Start the server:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE94]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'First, start the Linux client:'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，启动 Linux 客户端：
- en: '[PRE95]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'After the VPN is established, list the contents of the `openvpn.status` file:'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: VPN 建立后，列出`openvpn.status`文件的内容：
- en: '[PRE96]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'A sample output is shown in the following screenshot:'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图展示了一个示例输出：
- en: '![How to do it...](img/image00348.jpeg)'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00348.jpeg)'
- en: Transfer the `ca.crt`, `client2.crt`, and `client2.key` files along with the `tls-auth`
    secret key file, `ta.key`, to the Windows machine using a secure channel, such
    as `winscp` or PuTTY's `pscp` command-line tool.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用安全通道（如`winscp`或 PuTTY 的`pscp`命令行工具）将`ca.crt`、`client2.crt`、`client2.key`文件和`tls-auth`秘钥文件`ta.key`传输到
    Windows 计算机。
- en: 'Start the Windows client on the command line:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行上启动 Windows 客户端：
- en: '[PRE97]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Remember that this client's private key file is protected using a password or
    passphrase.
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请记住，该客户端的私钥文件是通过密码或密码短语进行保护的。
- en: 'List the contents of the status file again on the server:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器上再次列出状态文件的内容：
- en: '[PRE98]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'A sample output is shown in the following screenshot:'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图展示了一个示例输出：
- en: '![How to do it...](img/image00349.jpeg)'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00349.jpeg)'
- en: How it works...
  id: totrans-451
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Each time a client connects to the OpenVPN server, the status file is updated
    with the connection information. The **OpenVPN ** **CLIENT** **LIST** and **ROUTING **
    **TABLE** tables are the most interesting ones, as they provide the following
    information:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 每次客户端连接到 OpenVPN 服务器时，状态文件都会更新连接信息。**OpenVPN CLIENT LIST**和**ROUTING TABLE**是最为关键的两个表格，因为它们提供了以下信息：
- en: Which clients are connected
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪些客户端已连接
- en: From which IP address the clients are connecting
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端是从哪个IP地址连接的
- en: The number of bytes each client has received and transferred
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个客户端接收和传输的字节数
- en: The time at which the client connected
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端连接的时间
- en: In addition, the routing table also shows which networks are routed to each
    client.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，路由表还显示了哪些网络被路由到每个客户端。
- en: There's more...
  id: totrans-458
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There are three things to keep in mind when using status files:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 使用状态文件时有三点需要记住：
- en: Status parameters
  id: totrans-460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 状态参数
- en: 'The `status` directive takes two parameters:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '`status`指令需要两个参数：'
- en: The filename of the status file.
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态文件的文件名。
- en: Optionally, the refresh frequency for updating the status file. The default
    value of 60 seconds should suffice for most situations.
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选地，更新状态文件的刷新频率。默认值为 60 秒，通常足够应对大多数情况。
- en: Disconnecting clients
  id: totrans-464
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 断开连接的客户端
- en: 'Note that when a client disconnects the status file, it is not updated immediately.
    OpenVPN first tries to reconnect to the client based on the `keepalive` parameters
    in the server configuration file. The server configuration file in this recipe
    uses:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当客户端断开连接时，状态文件不会立即更新。OpenVPN 会首先尝试根据服务器配置文件中的`keepalive`参数重新连接客户端。本食谱中的服务器配置文件使用：
- en: '[PRE99]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: This tells the server that it will ping the client every 10 seconds. If it does
    not get a response after 60 seconds * 2, the connection is restarted. The OpenVPN
    server will double the value of the second argument. The server will also tell
    the client to ping every 10 seconds and to restart the connection after 60 seconds
    if it does not get any response.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉服务器它将每10秒钟向客户端发送一次ping。如果在60秒* 2后没有收到响应，则连接将重新启动。OpenVPN服务器将加倍第二个参数的值。服务器还会告诉客户端每10秒钟ping一次，如果在60秒内没有收到任何响应，则重新启动连接。
- en: Explicit-exit-notify
  id: totrans-468
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Explicit-exit-notify
- en: 'One of the lesser-known options of OpenVPN is the following directive:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVPN的一个不太为人知的选项是以下指令：
- en: '[PRE100]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: This can be set on the client side so that when the client disconnects, it will
    send an explicit **OCC_EXIT** message to the server (if at all possible). This
    will speed up the removal of disconnected clients. The optional parameter N indicates
    the number of times the message will be sent. By default, only a single **OCC_EXIT**
    message is sent, which can cause problems as the UDP protocol does not guarantee
    the delivery of packets.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在客户端端设置，使得当客户端断开连接时，它会向服务器发送一个明确的**OCC_EXIT**消息（如果可能）。这将加速断开客户端的移除。可选参数N表示消息发送的次数。默认情况下，只发送一次**OCC_EXIT**消息，这可能会导致问题，因为UDP协议不保证数据包的传输。
- en: The management interface
  id: totrans-472
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理接口
- en: This recipe shows how an OpenVPN client is managed using the management interface
    from the server side.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了如何通过服务器端的管理接口管理OpenVPN客户端。
- en: Getting ready
  id: totrans-474
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: The network layout used in this recipe is the same as in the *Server-side routing*
    recipe. This recipe uses the PKI files created in the first recipe of this chapter.
    For this recipe, the server computer was running CentOS 6 Linux and OpenVPN 2.3.9\.
    The client was running Windows 7 64 bit and OpenVPN 2.3.10\. For the server, keep
    the server configuration file, `basic-udp-server.conf`, from the *Server-side
    routing* recipe at hand. For the Windows client, keep the corresponding client
    configuration file, `basic-udp-client.ovpn`, from the previous recipe at hand.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例中使用的网络布局与*服务器端路由*示例相同。本示例使用的是本章第一篇示例中创建的PKI文件。对于本示例，服务器计算机运行的是CentOS 6 Linux和OpenVPN
    2.3.9，客户端运行的是Windows 7 64位和OpenVPN 2.3.10。对于服务器，保持`basic-udp-server.conf`配置文件，参考*服务器端路由*示例。对于Windows客户端，保持相应的客户端配置文件`basic-udp-client.ovpn`，参考前面的示例。
- en: How to do it...
  id: totrans-476
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Start the server using the default server configuration file:'
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用默认的服务器配置文件启动服务器：
- en: '[PRE101]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Create a configuration file for the Windows client by adding a line to the `basic-udp-client.ovpn`
    file:'
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`basic-udp-client.ovpn`文件中添加一行来为Windows客户端创建配置文件：
- en: '[PRE102]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Save it as `example2-11.ovpn`.
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为`example2-11.ovpn`。
- en: Transfer the `ca.crt`, `client2.crt`, and `client2.key` files along with the `tls-auth`
    secret key file, `ta.key`, to the Windows machine using a secure channel, such
    as `winscp` or the PuTTY `pscp` command-line tool.
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用安全通道（例如`winscp`或PuTTY的`pscp`命令行工具）将`ca.crt`、`client2.crt`、`client2.key`文件以及`tls-auth`密钥文件`ta.key`传输到Windows计算机。
- en: 'The OpenVPN GUI does not support this particular configuration of the management
    interface. Therefore, we start the Windows client on the command line:'
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenVPN GUI不支持这种特定的管理接口配置。因此，我们通过命令行启动Windows客户端：
- en: '[PRE103]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: The OpenVPN client will now ask for a password for the management interface.
    Pick a good password. After that, it will ask for the private key passphrase.
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: OpenVPN客户端现在将要求输入管理接口的密码。选择一个好的密码。之后，它将要求输入私钥密码。
- en: 'After the VPN is established, we can connect from the server to the management
    interface of the OpenVPN client using the telnet program on the server:'
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VPN建立后，我们可以通过服务器上的telnet程序从服务器连接到OpenVPN客户端的管理接口：
- en: '[PRE104]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Use *Ctrl* + *]* or quit to exit the `telnet` program.
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *]*或退出命令退出`telnet`程序。
- en: How it works...
  id: totrans-489
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When the OpenVPN client connects to the server, a special management interface
    is set up using the directive:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 当OpenVPN客户端连接到服务器时，使用以下指令设置一个特殊的管理接口：
- en: '[PRE105]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'It has the following parameters:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 它有以下参数：
- en: The `tunnel` parameter to bind the management interface to the VPN tunnel itself.
    This is useful for testing purposes and some advanced client setups. On the server
    side, it is best to always specify `127.0.0.1` for the management IP.
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tunnel`参数将管理接口绑定到VPN隧道本身。这对于测试目的和一些高级客户端设置非常有用。在服务器端，最好始终为管理IP指定`127.0.0.1`。'
- en: The port `23000` on which the management interface will be listening.
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理接口将监听的端口`23000`。
- en: The last parameter is the password file or the special keyword `stdin` to indicate
    that the management interface password will be specified when OpenVPN starts up.
    Note that this password is completely unrelated to the private key passphrases
    or any other user management passwords that OpenVPN uses.
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后的参数是密码文件或特殊关键字`stdin`，表示在 OpenVPN 启动时会指定管理接口密码。请注意，这个密码与 OpenVPN 使用的私钥密码或任何其他用户管理密码无关。
- en: 'After the management interface comes up, the server operator can connect to
    it using telnet and can query the client. The client can type the following:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 管理接口启动后，服务器操作员可以使用 telnet 连接到它并查询客户端。客户端可以输入以下内容：
- en: '[PRE106]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: This effectively shuts itself down as if the user has stopped it! This shows
    how important it is to protect the management interface and its password.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上会使其关闭，仿佛用户已停止它！这显示了保护管理接口及其密码的重要性。
- en: There's more...
  id: totrans-499
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: The management interface can also be run on the OpenVPN server itself. In that
    case, it is possible to list the connected clients, disconnect them, or perform
    a variety of other OpenVPN administrative tasks.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 管理接口也可以在 OpenVPN 服务器本身运行。在这种情况下，可以列出连接的客户端，断开它们，或执行各种其他 OpenVPN 管理任务。
- en: It is expected that the management interface will become more important in future
    versions of OpenVPN, both on the client and the server side, as the preferred
    method for programmatically interacting with the OpenVPN software.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 预计在未来的 OpenVPN 版本中，管理接口将变得更加重要，无论是在客户端还是服务器端，它都将是与 OpenVPN 软件进行程序交互的首选方法。
- en: See Also
  id: totrans-502
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Management interface* recipe in [Chapter 3](part0038.xhtml#aid-147LC1 "Chapter 3. Client-server
    Ethernet-style Networks"), *Client-server Ethernet-style Networks*, explains the
    use of the server-side management interface in more detail
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 3 章](part0038.xhtml#aid-147LC1 "第 3 章. 客户端-服务器以太网风格网络")中的*管理接口*章节详细解释了服务器端管理接口的使用。'
- en: Proxy ARP
  id: totrans-504
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理 ARP
- en: In this recipe, we will use the `proxy-arp` feature of the Linux kernel to make
    the VPN clients appear as part of the server-side LAN. This eliminates the need
    to use bridging, which is desirable in most cases.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将使用 Linux 内核的`proxy-arp`功能，使 VPN 客户端看起来像是服务器端局域网的一部分。这消除了使用桥接的需求，这在大多数情况下是理想的。
- en: Getting ready
  id: totrans-506
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备开始
- en: This recipe uses the PKI files created in the first recipe of this chapter.
    For this recipe, the server computer was running CentOS 6 Linux and OpenVPN 2.3.9\.
    The client was running Windows 7 64 bit and OpenVPN 2.3.10\. For the server, keep
    the server configuration file, `basic-udp-server.conf`, from the *Server-side
    routing* recipe at hand. For the Windows client, keep the corresponding client
    configuration file, `basic-udp-client.ovpn`, from the *Using an ifconfig-pool
    block* recipe at hand.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱使用本章第一篇食谱中创建的 PKI 文件。对于此食谱，服务器计算机运行 CentOS 6 Linux 和 OpenVPN 2.3.9，客户端运行
    Windows 7 64 位和 OpenVPN 2.3.10。对于服务器，保持`basic-udp-server.conf`配置文件在手，来自*服务器端路由*食谱。对于
    Windows 客户端，保持相应的客户端配置文件`basic-udp-client.ovpn`在手，来自*使用 ifconfig-pool 块*食谱。
- en: 'We use the following network layout:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下网络布局：
- en: '![Getting ready](img/image00350.jpeg)'
  id: totrans-509
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00350.jpeg)'
- en: How to do it...
  id: totrans-510
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the server config file by adding the following lines to the `basic-udp-server.conf`
    file:'
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将以下内容添加到`basic-udp-server.conf`文件中来创建服务器配置文件：
- en: '[PRE107]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Save it as `example2-12-server.conf`.
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其保存为`example2-12-server.conf`。
- en: 'Create the `proxyarp-connect.sh` script:'
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`proxyarp-connect.sh`脚本：
- en: '[PRE108]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Then create the `proxyarp-disconnect.sh` script:'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后创建`proxyarp-disconnect.sh`脚本：
- en: '[PRE109]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Make sure that both the scripts are executable:'
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保这两个脚本是可执行的：
- en: '[PRE110]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Start the server:'
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：
- en: '[PRE111]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Then, start the Windows client using the OpenVPN GUI:![How to do it...](img/image00351.jpeg)
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用 OpenVPN GUI 启动 Windows 客户端：![如何操作...](img/image00351.jpeg)
- en: 'After a client has successfully connected, the `arp` table on the OpenVPN server
    will have a new entry:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端成功连接后，OpenVPN 服务器上的`arp`表将新增一条条目：
- en: '[PRE112]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'From a machine on the server-side LAN, we can now ping the VPN client:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 从服务器端局域网的机器上，现在我们可以 ping VPN 客户端：
- en: '[PRE113]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Note that no special routing is required on Site B's LAN. The VPN client truly
    appears as being on the LAN itself.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Site B 的局域网无需特别的路由配置。VPN 客户端真正表现得像是在该局域网中。
- en: How it works...
  id: totrans-528
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `proxy-arp` feature is supported by most UNIX and Linux kernels. It is used
    most often for connecting dial-in clients to a LAN, and nowadays, also by ADSL
    and cable Internet providers. When the OpenVPN client connects, an IP address
    is borrowed from Site B's LAN range. This IP address is assigned to the OpenVPN
    client. At the same time, a special ARP entry is made on the OpenVPN server to
    tell the rest of the network that the OpenVPN server acts as a proxy for `10.198.1.130`.
    This means that when another machine on Site B's LAN wants to know where to find
    the host with `10.198.1.130`, then the OpenVPN server will respond (with its own
    MAC address).
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '`proxy-arp` 功能被大多数 UNIX 和 Linux 内核支持。它最常用于将拨号客户端连接到局域网，现在也被 ADSL 和有线互联网服务提供商使用。当
    OpenVPN 客户端连接时，来自站点 B 的局域网地址段中的一个 IP 地址会被借用，并分配给 OpenVPN 客户端。同时，OpenVPN 服务器上会创建一个特殊的
    ARP 条目，通知网络其他设备，OpenVPN 服务器充当 `10.198.1.130` 的代理。这意味着，当站点 B 上的另一台机器想知道如何找到 `10.198.1.130`
    时，OpenVPN 服务器会用自己的 MAC 地址做出响应。'
- en: There's more...
  id: totrans-530
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'A `proxy-arp` setup has its own set of applications as well as challenges.
    Some of them are listed here:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '`proxy-arp` 配置有其独特的应用场景和挑战。以下列出了一些：'
- en: TAP-style networks
  id: totrans-532
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TAP 风格的网络
- en: The `proxy-arp` feature can also be used in a TAP-style network. In combination
    with an external DHCP server, it provides almost the same functionality as that
    of an Ethernet bridging solution without the drawbacks of Ethernet bridging itself.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '`proxy-arp` 功能也可以在 TAP 风格的网络中使用。与外部 DHCP 服务器结合使用时，它提供了几乎与以太网桥接解决方案相同的功能，同时避免了以太网桥接本身的缺点。'
- en: User nobody
  id: totrans-534
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户 nobody
- en: 'Note that in this example we did not use:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在本例中我们并未使用：
- en: '[PRE114]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: We did this because it would have prevented the  `proxyarp-*` scripts from working.
    In order to execute the `/sbin/arp` command, root privileges are required. Therefore,
    it is not possible to switch to user `nobody` after the OpenVPN server has started.
    Alternatively, one can configure `sudo` access to the `/sbin/arp` command to circumvent
    this.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之所以这么做，是因为这会阻止 `proxyarp-*` 脚本的正常工作。为了执行 `/sbin/arp` 命令，需要根用户权限。因此，在 OpenVPN
    服务器启动后，无法切换到用户 `nobody`。作为替代方案，可以配置 `sudo` 访问权限来执行 `/sbin/arp` 命令，从而绕过这个问题。
- en: Broadcast traffic might not always work
  id: totrans-538
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 广播流量可能并不总是有效
- en: Sending broadcast traffic over a network where `proxy-arp` is used is tricky.
    For most purposes (for example, Windows Network Neighborhood browsing), `proxy-arp`
    will work. For some applications that require all the clients to be a member of
    a full broadcast domain, using `proxy-arp` might not suffice. In that case, Ethernet
    bridging is a better solution.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 `proxy-arp` 的网络上发送广播流量是棘手的。对于大多数用途（例如，Windows 网络邻居浏览），`proxy-arp` 会有效。对于一些需要所有客户端都属于完整广播域的应用程序，使用
    `proxy-arp` 可能无法满足要求。在这种情况下，使用以太网桥接是一个更好的解决方案。
- en: See also
  id: totrans-540
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Checking broadcast and non-IP traffic* recipe from [Chapter 3](part0038.xhtml#aid-147LC1
    "Chapter 3. Client-server Ethernet-style Networks"), *Client-server Ethernet-style
    Networks*
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第 3 章](part0038.xhtml#aid-147LC1 "第 3 章 客户端-服务器以太网风格网络")的 *检查广播和非 IP 流量*
    配方，*客户端-服务器以太网风格网络*
