- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Setting Up Isolated Penetration Testing Lab Environments on AWS
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS上设置隔离的渗透测试实验室环境
- en: If you have worked on real-world projects and systems running in the cloud,
    you are probably aware that actual network environments generally involve more
    than a single cloud resource. To ensure that critical resources are not exposed
    and directly accessible from resources outside of the network environment, cloud
    resources are grouped and proper network configuration involving security groups,
    network access control lists, and routing rules is implemented as well. With a
    segmented network architecture, attackers may need to compromise a less secure
    system first and then use this compromised system to pivot to critical resources
    in internal networks. This technique, known as **pivoting**, involves using the
    right set of tools along with the correct sequence of steps, which can be mastered
    through practice. If only we had a lab environment where we could try out various
    tools and techniques for pivoting! Well, I have some good news for you – we will
    be setting up a **pivoting lab** on AWS in this chapter!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经在云端的真实项目和系统中工作过，你可能已经意识到，实际的网络环境通常涉及的不仅仅是单一的云资源。为了确保关键资源不被暴露并且无法直接从网络环境外部的资源访问，云资源会被分组，并且会实现涉及安全组、网络访问控制列表和路由规则的适当网络配置。通过分段的网络架构，攻击者可能需要先攻破一个不太安全的系统，然后利用这个被攻破的系统作为跳板，转向内部网络中的关键资源。这种技巧被称为**跳板攻击**，它涉及使用正确的工具集并按照正确的步骤顺序执行，通过实践可以掌握。如果我们有一个实验环境，能够尝试各种跳板工具和技术该有多好！好消息来了——我们将在本章中在AWS上设置一个**跳板实验室**！
- en: In case you are wondering what a pivoting lab is, it is a type of penetration
    testing lab where the focus is on moving from one compromised system to another
    within a target network and leveraging the compromised systems (as stepping stones)
    to gain access to other systems and resources. After setting up the pivoting lab,
    we will then perform a penetration testing simulation to verify if the lab environment
    has been configured correctly.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在想什么是跳板实验室，它是一种渗透测试实验室，重点是从一个被攻破的系统跳到目标网络中的另一个系统，并利用这些被攻破的系统（作为跳板）访问其他系统和资源。设置好跳板实验室后，我们将进行渗透测试模拟，验证实验室环境是否正确配置。
- en: 'That said, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我们将覆盖以下主题：
- en: Leveraging Terraform to automatically set up the lab environment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Terraform自动设置实验室环境
- en: Validating network connectivity and security
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证网络连接和安全性
- en: Setting up the attacker VM instance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置攻击者虚拟机实例
- en: Simulating penetration testing in the isolated network environment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在隔离的网络环境中模拟渗透测试
- en: Cleaning up
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理
- en: Without further ado, let’s begin!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 话不多说，我们开始吧！
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before we start, we must have the following ready:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，必须准备好以下内容：
- en: An **Amazon Web** **Services** account
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**Amazon Web** **Services**账户
- en: Any text editor (such as Notepad++, Visual Studio Code, or Sublime Text) where
    we can temporarily store specific values (for example, our local machine’s IP
    address) used in the hands-on solutions in this chapter
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何文本编辑器（如Notepad++、Visual Studio Code或Sublime Text），我们可以暂时存储在本章中使用的特定值（例如，我们本地机器的IP地址）
- en: You may proceed with the next steps once these are ready.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些准备好，你就可以继续进行下一步了。
- en: Important note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Make sure you read the available documentation, along with the FAQs, to have
    a solid understanding of what is free (and what is not free) when creating resources
    in AWS. In addition to this, make sure you *don’t* use any existing AWS account
    with production (or staging) environment resources for the hands-on exercises
    and solutions in this book. It is strongly recommended that you create a *new*
    AWS account specifically for launching intentionally vulnerable resources. This
    will ensure that your production (or staging) environment resources remain separate
    and secure.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你阅读了相关文档及常见问题解答，以充分了解在AWS中创建资源时哪些是免费的（哪些不是）。此外，确保你*不要*使用任何已有的AWS账户进行本书中的实际操作和解决方案，特别是用于生产（或预发布）环境的资源。强烈建议你为启动故意存在漏洞的资源专门创建一个*新的*AWS账户。这将确保你的生产（或预发布）环境资源保持独立且安全。
- en: 'The source code and other files used for each chapter are available in this
    book’s GitHub repository: [https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/](https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每章使用的源代码和其他文件可以在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/](https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/)。
- en: Leveraging Terraform to automatically set up the lab environment
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用 Terraform 自动搭建实验室环境
- en: In this chapter, we will have a network environment in AWS that mimics the peered
    network setup we prepared in *[Chapter 4](B19755_04.xhtml)*, *Setting Up Isolated
    Penetration Testing Lab Environments on GCP*, and *[Chapter 5](B19755_05.xhtml)*,
    *Setting Up Isolated Penetration Testing Lab Environments on Azure*. It is important
    to note that while the chapter titles are very similar, the design of the lab
    environments in these chapters has significant differences.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在 AWS 中创建一个网络环境，模拟我们在 *[第 4 章](B19755_04.xhtml)*，*在 GCP 上设置隔离的渗透测试实验室环境*，以及
    *[第 5 章](B19755_05.xhtml)*，*在 Azure 上设置隔离的渗透测试实验室环境* 中准备的对等网络配置。需要注意的是，尽管章节标题非常相似，但这些章节中的实验室环境设计存在显著差异。
- en: 'Like the previous chapters, we will use Terraform to set up the lab environment
    using various types of resources and components in our AWS account. We must familiarize
    ourselves with the key AWS concepts and services before proceeding with the hands-on
    portion of this chapter. Once we have a solid understanding of the relevant AWS
    concepts and services, it will be much easier to interpret and tweak the Terraform
    configuration code. In case you are not yet familiar with the concepts, services,
    and resource types specific to AWS, here’s a quick overview to help you:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 和之前的章节一样，我们将使用 Terraform 在 AWS 账户中通过各种资源和组件来搭建实验室环境。在进入本章的实践部分之前，我们必须先熟悉一些关键的
    AWS 概念和服务。一旦我们对相关的 AWS 概念和服务有了深入的理解，解释和调整 Terraform 配置代码将变得更加容易。如果你还不熟悉 AWS 特定的概念、服务和资源类型，下面是一个简要的概述，帮助你快速入门：
- en: '**Amazon Elastic Compute Cloud** (**Amazon EC2**): Amazon EC2 is a computing
    service that allows users to rent virtual servers (also known as instances or
    EC2 instances) where users can run, deploy, and manage various types of applications.
    You can think of an EC2 instance as your laptop running in the cloud. Just like
    your laptop, an EC2 instance provides a virtual computing environment where you
    can install and run your desired operating system, applications, and software.
    However, unlike a physical laptop machine, an EC2 instance can easily be scaled
    up or down based on your computing needs. In addition to this, EC2 instances can
    be accessed and managed remotely from anywhere with an internet connection. If
    you are wondering how these instances are accessed, the assigned public and private
    IP addresses are used to communicate and access an EC2 instance. The **public
    IP address** of the instance allows the instance to access resources on the internet
    and receive requests from external sources. On the other hand, the **private IP
    address** is used for communication between resources within the same network
    environment.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊弹性计算云** (**Amazon EC2**): Amazon EC2 是一项计算服务，允许用户租用虚拟服务器（也称为实例或 EC2 实例），在这些服务器上运行、部署和管理各种类型的应用程序。你可以将
    EC2 实例看作是在云中运行的笔记本电脑。就像你的笔记本电脑一样，EC2 实例提供了一个虚拟计算环境，你可以在其中安装和运行所需的操作系统、应用程序和软件。然而，与物理笔记本电脑不同，EC2
    实例可以根据你的计算需求轻松扩展或缩减。除此之外，EC2 实例可以从任何有互联网连接的地方远程访问和管理。如果你想知道如何访问这些实例，分配的公共和私有 IP
    地址用于与 EC2 实例进行通信和访问。实例的 **公共 IP 地址** 允许该实例访问互联网资源并接收外部请求。另一方面，**私有 IP 地址** 用于同一网络环境内资源之间的通信。'
- en: '**Security group**: A security group acts as a virtual firewall for resources
    (such as EC2 instances) inside a network environment. Security group rules are
    used to define inbound and outbound traffic to and from the resources within the
    security group. For example, if all outbound traffic is denied by the security
    group of an EC2 instance, then we won’t be able to initiate external communication
    from within the EC2 instance. Similarly, if all inbound traffic is denied by the
    security group of an EC2 instance, then the EC2 instance (protected by the security
    group) won’t be able to receive incoming connections or accept incoming communication.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全组**：安全组充当网络环境中资源（如 EC2 实例）的虚拟防火墙。安全组规则用于定义资源之间的进出流量。例如，如果 EC2 实例的安全组拒绝所有出站流量，那么我们将无法从
    EC2 实例内部发起外部通信。同样，如果 EC2 实例的安全组拒绝所有入站流量，那么该 EC2 实例（由安全组保护）将无法接收传入连接或接受传入通信。'
- en: '**Amazon Virtual Private Cloud** (**Amazon VPC**): Amazon VPC is a service
    that allows users to create and define isolated virtual private network environments
    in the AWS cloud. In this network environment, users can launch various types
    of resources (including EC2 instances). VPCs can have one or more **subnets**
    (subnetworks). Subnets have smaller address ranges within the VPC and are smaller
    networks that are part of the larger VPC network. Depending on how the network
    is configured, a subnet can be a public subnet or a private subnet. A **public
    subnet** is configured to allow instances within the subnet to communicate directly
    with the internet. On the other hand, resources (such as instances) within a **private
    subnet** cannot communicate directly with the internet and resources do not have
    public IP addresses by default. The configuration of public and private subnets
    allows for the separation of resources based on security requirements and the
    need for direct internet access:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon 虚拟私有云**（**Amazon VPC**）：Amazon VPC 是一项服务，允许用户在 AWS 云中创建和定义隔离的虚拟私有网络环境。在这个网络环境中，用户可以启动各种类型的资源（包括
    EC2 实例）。VPC 可以拥有一个或多个 **子网**（子网络）。子网在 VPC 内有较小的地址范围，是 VPC 网络的一部分，属于较小的网络。根据网络的配置，子网可以是公有子网或私有子网。**公有子网**的配置允许子网中的实例直接与互联网通信。另一方面，**私有子网**中的资源（如实例）无法直接与互联网通信，且默认情况下资源没有公共
    IP 地址。公有子网和私有子网的配置允许根据安全要求和对直接互联网访问的需求来分离资源：'
- en: '![](image/B19755_06_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_06_01.jpg)'
- en: Figure 6.1 – Sample VPC setup
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 示例 VPC 设置
- en: In *Figure 6**.1*, we have a sample VPC with a public subnet and a private subnet.
    Inside the public subnet, we have two EC2 instances, **EC2 INSTANCE 01** and **EC2
    INSTANCE 02**, that can communicate directly with the internet – with inbound
    and outbound traffic routed through the associated **INTERNET GATEWAY**. In the
    private subnet, we have a single EC2 instance (**EC2 INSTANCE 03**). The instance
    in the private subnet will not have a public IP address by default and will have
    outbound internet access routed through a **NAT GATEWAY** resource in the public
    subnet. Since direct access from the internet to the resource(s) in the private
    subnet of the VPC is prevented, it is important to note that **INSTANCE 03** is
    not reachable from resources outside of the VPC. Finally, since instances within
    the same VPC can communicate with each other in a typical VPC configuration (regardless
    of whether they are in a public subnet or a private subnet), **INSTANCE 03** should
    be reachable from **INSTANCE 01** and **INSTANCE 02**. Of course, this is under
    the assumption that the necessary network configuration, security groups, and
    routing settings are properly configured to allow the desired communication. What
    if **INSTANCE 01** and/or **INSTANCE 02** is/are compromised by an attacker? This
    would mean that the attacker can now attack **INSTANCE 03** through the compromised
    instance(s) in the public subnet (since **INSTANCE 03** is reachable from **INSTANCE
    01** or **INSTANCE 02**).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图6.1*中，我们有一个包含公共子网和私有子网的示例VPC。在公共子网中，我们有两个EC2实例，**EC2实例01**和**EC2实例02**，它们可以直接与互联网通信——入站和出站流量通过关联的**互联网网关**进行路由。在私有子网中，我们有一个EC2实例（**EC2实例03**）。私有子网中的实例默认没有公网IP地址，且通过公共子网中的**NAT网关**资源路由出站互联网访问。由于VPC中私有子网的资源不允许直接从互联网访问，因此需要注意，**实例03**无法从VPC外部的资源访问。最后，由于同一VPC中的实例在典型配置下可以相互通信（无论它们位于公共子网还是私有子网），因此**实例03**应当能够从**实例01**和**实例02**访问。当然，这建立在正确配置必要的网络配置、安全组和路由设置以允许所需通信的前提下。如果**实例01**和/或**实例02**被攻击者攻陷了呢？这意味着攻击者现在可以通过在公共子网中被攻陷的实例攻击**实例03**（因为**实例03**可以从**实例01**或**实例02**访问）。
- en: Important note
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Server configuration, network design, and firewall configuration play an important
    role in shaping the options available for deploying shells and executing pivoting
    techniques during a penetration testing exercise. The effectiveness of these techniques
    depends on what is allowed by the network’s design. For example, restrictive firewall
    rules along with tightly configured network segmentation can limit the use of
    certain shells (making the exploitation process a bit more challenging).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器配置、网络设计和防火墙配置在渗透测试中部署shell和执行横向渗透技术时起着重要作用。这些技术的有效性取决于网络设计所允许的内容。例如，严格的防火墙规则和精细配置的网络分段可能会限制某些shell的使用（使得攻击过程更加具有挑战性）。
- en: 'At this point, we should have a better understanding of the relevant AWS concepts
    and services we will work with in this chapter. Now, let’s discuss what our lab
    environment would look like. The lab environment we will set up in this chapter
    will have a **VPC peering connection**, similar to what is shown in *Figure 6**.2*:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们应该对本章将要使用的相关AWS概念和服务有了更好的理解。接下来，让我们讨论一下我们的实验环境应该是什么样的。本章中我们将设置的实验环境将包含一个**VPC对等连接**，类似于*图6.2*中所示的内容：
- en: '![](image/B19755_06_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_06_02.jpg)'
- en: Figure 6.2 – What our lab environment should look like
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – 我们实验环境应该是什么样子
- en: The VPC peering connection enables traffic to flow securely between the peered
    VPCs (using the private IP addresses of the resources deployed inside the VPCs).
    In the first VPC network, we will have two EC2 (VM) instances, which will serve
    as the target resources. In the second VPC network, we will have the attacker
    instance set up and ready. Out of the two target instances, only one of these
    instances should be directly reachable from the attacker instance. In addition
    to this, the traffic from the outside world (that is, outside of the peered network
    environment) should not reach the resources that have been deployed inside the
    network environment. This will help make sure that only authorized users can access
    the resources that have been deployed in the lab environment. Given that the target
    VM instances are configured to be vulnerable, we can’t afford to have random attackers
    compromise our lab environment.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: VPC对等连接使得通过VPC内资源的私有IP地址，可以在对等的VPC之间安全地传输流量。在第一个VPC网络中，我们将有两个EC2（虚拟机）实例，作为目标资源。在第二个VPC网络中，我们将设置并准备好攻击者实例。在这两个目标实例中，只有一个实例应该可以从攻击者实例直接访问。除此之外，外部世界的流量（即，来自对等网络环境外的流量）不应当能够访问已部署在网络环境内的资源。这将帮助确保只有授权的用户能够访问已部署在实验环境中的资源。由于目标虚拟机实例被配置为有漏洞，我们不能允许随机攻击者破坏我们的实验环境。
- en: Note
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To keep things simple, the lab environment we will set up in this chapter will
    not have a private subnet. Both target EC2 instances will be deployed in a public
    subnet – removing the need for a NAT gateway (or a NAT instance) to help us reduce
    the overall cost of running the lab environment. Instead of a typical VPC network
    setup comprised of public and private subnets, we will only have public subnets,
    where network flow and connectivity are managed through customized security group
    rules. After completing this chapter, feel free to build more complex network
    architectures by introducing new public and private subnets, as well as new peered
    VPC networks containing resources which can not directly be accessed from the
    attacker VM instance. I will leave that to you as an exercise!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，本章中我们搭建的实验环境将不会有私有子网。两个目标EC2实例将被部署在公共子网中——这也省去了设置NAT网关（或NAT实例）的需要，从而帮助我们降低运行实验环境的总体成本。与典型的由公共和私有子网组成的VPC网络设置不同，我们将只有公共子网，通过自定义安全组规则来管理网络流量和连接。完成本章后，欢迎通过引入新的公共和私有子网，以及新的对等VPC网络，来构建更复杂的网络架构，其中包含无法直接从攻击者虚拟机实例访问的资源。我会把这个留给你作为练习！
- en: 'Now that we have a better idea of what our lab environment will look like,
    let’s proceed with using Terraform to set up our lab environment:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对实验环境有了更清晰的了解，接下来让我们使用Terraform来搭建实验环境：
- en: 'Navigate to the official GitHub repository of this book using the following
    URL:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下URL导航到本书的官方GitHub仓库：
- en: '[PRE0]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We should find multiple folders containing the corresponding files and source
    code for each of the chapters of this book:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们应该能找到多个文件夹，每个文件夹包含本书各章对应的文件和源代码：
- en: '![](image/B19755_06_03.jpg)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_03.jpg)'
- en: Figure 6.3 – Navigating to the ch06 directory
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.3 – 导航到ch06目录
- en: Navigate to the **ch06** directory, as highlighted in *Figure 6**.3*. Inside
    the **ch06** directory, we should find a **pentest_lab.zip** file. Click the **pentest_lab.zip**
    file link afterward.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 导航到**ch06**目录，如*图6.3*所示。在**ch06**目录中，我们应该能找到一个**pentest_lab.zip**文件。接着点击**pentest_lab.zip**文件的链接。
- en: Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are wondering what is inside the **pentest_lab.zip** file, it contains
    the Terraform code for setting up the *entire* lab environment for this chapter.
    In this chapter, we will simply download the code and run **terraform apply**
    to set up the infrastructure. This will allow us to focus more on the other aspects
    when we start building and testing the pivoting lab environment.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道**pentest_lab.zip**文件里有什么，它包含了用于搭建本章*整个*实验环境的Terraform代码。在这一章中，我们只需下载代码并运行**terraform
    apply**来搭建基础设施。这样，我们可以在构建和测试中继实验环境时，更多地关注其他方面。
- en: Next, right-click on the **Download** or **Raw** button, as highlighted in *Figure
    6**.4*:![](image/B19755_06_04.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，右键点击**Download**或**Raw**按钮，如*图6.4*所示：![](image/B19755_06_04.jpg)
- en: Figure 6.4 – Copying the link address of the pentest_lab.zip file
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.4 – 复制pentest_lab.zip文件的链接地址
- en: Select **Copy Link Address** from the list of options available in the context
    menu. Store the string value in a text editor on your local machine.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从右键菜单中选择**复制链接地址**，将该字符串值保存在本地机器上的文本编辑器中。
- en: 'Now, let’s open a new browser tab and navigate to the **AWS Management Console**
    using the following link: [https://aws.amazon.com/console/](https://aws.amazon.com/console/).
    Make sure you sign in to your AWS account before proceeding with the next steps.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们打开一个新的浏览器标签页，并使用以下链接访问**AWS管理控制台**：[https://aws.amazon.com/console/](https://aws.amazon.com/console/)。在继续下一步之前，确保你已登录到AWS账户。
- en: Type **shell** in the search bar and then select **CloudShell** from the list
    of results (as highlighted in *Figure 6**.5*):![](image/B19755_06_05.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入**shell**，然后从搜索结果中选择**CloudShell**（如*图6.5*所示）：![](image/B19755_06_05.jpg)
- en: Figure 6.5 – Navigating to the CloudShell console
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.5 – 导航到CloudShell控制台
- en: Alternatively, you may simply locate and click the **CloudShell** button located
    at the top-left corner of the AWS Management Console (near the region selection
    drop-down menu).
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，你可以直接在AWS管理控制台的左上角找到并点击**CloudShell**按钮（位于区域选择下拉菜单旁边）。
- en: Locate and click the **Open in new browser tab** button, as highlighted in *Figure
    6**.6*:![](image/B19755_06_06.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位并点击**在新浏览器标签页中打开**按钮，如*图6.6*所示：![](image/B19755_06_06.jpg)
- en: Figure 6.6 – Opening CloudShell in a new browser tab
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.6 – 在新浏览器标签页中打开CloudShell
- en: This will open a CloudShell environment within a new browser tab. When you see
    the **Welcome to AWS CloudShell** pop-up window, simply click the **Close** button.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将会在新浏览器标签页中打开CloudShell环境。当你看到**Welcome to AWS CloudShell**弹出窗口时，点击**关闭**按钮。
- en: 'In the Terminal of our CloudShell environment (right after the **$** sign),
    run the following commands to create the **pentest_lab** project directory and
    navigate to the new directory as well:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CloudShell环境的终端（**$**符号后）中，运行以下命令来创建**pentest_lab**项目目录并进入该目录：
- en: '[PRE1]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, download the **pentest_lab.zip** file from this book’s GitHub repository
    to the **pentest_lab** directory inside the CloudShell environment using the following
    commands:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用以下命令从本书的GitHub存储库下载**pentest_lab.zip**文件到CloudShell环境中的**pentest_lab**目录：
- en: '[PRE2]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Feel free to set the **$DOWNLOAD_URL** variable value with the download link
    you copied to the editor on your local machine. Make sure that the **$DOWNLOAD_URL**
    variable value is correct and properly pointing to the **pentest_lab.zip** file.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以自由地在本地机器的编辑器中设置**$DOWNLOAD_URL**变量值，填入你复制的下载链接。确保**$DOWNLOAD_URL**变量值正确且指向**pentest_lab.zip**文件。
- en: 'At this point, the **pentestlab.zip** file should have been downloaded from
    the GitHub repository to our CloudShell environment (inside the **pentest_lab**
    directory). Now, it’s time to open it! Extract the Terraform configuration files
    using the **unzip** command:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，**pentest_lab.zip**文件应已从GitHub存储库下载到我们的CloudShell环境中（位于**pentest_lab**目录内）。现在，是时候解压它了！使用**unzip**命令解压Terraform配置文件：
- en: '[PRE3]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This should extract several **.tf** files for setting up the entire lab environment
    for this chapter.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会解压多个**.tf**文件，用于设置本章的整个实验环境。
- en: Note
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Feel free to check the content of each file using the **cat** or **less** command.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用**cat**或**less**命令检查每个文件的内容。
- en: 'Delete the **pentest_lab.zip** file afterward:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后删除**pentest_lab.zip**文件：
- en: '[PRE4]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With the configuration files ready, let’s use the **terraform init** command
    to initialize the Terraform working directory:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置文件准备好后，使用**terraform init**命令初始化Terraform工作目录：
- en: '[PRE5]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you encounter a **no space left on device** error while running Terraform,
    feel free to run **du -h --max-depth=1 ~** to see which directory inside your
    CloudShell environment is taking up a bit of space. Once you have identified the
    directory, feel free to perform the necessary cleanup steps before proceeding
    to the next set of steps in this chapter. Make sure that you have a backup of
    the files and directories you are planning to delete before the actual deletion
    steps.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在运行Terraform时遇到**no space left on device**错误，可以运行**du -h --max-depth=1 ~**命令来查看CloudShell环境中哪个目录占用了较多空间。确认该目录后，可以进行必要的清理操作，再继续进行本章的下一步操作。在删除文件和目录之前，确保你已经备份了所有需要删除的文件和目录。
- en: 'Let’s run **terraform plan** to preview the changes to be performed by Terraform:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行**terraform plan**命令，预览Terraform将要进行的更改：
- en: '[PRE6]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This command should complete without any errors.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该命令应顺利完成，无任何错误。
- en: 'Next, let’s use the **terraform apply** command to implement the changes:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们使用**terraform apply**命令来实现更改：
- en: '[PRE7]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If the **terraform apply** command runs without any errors, we are ready to
    proceed to the next section. If you encounter issues (for example, the **Unable
    to modify EC2 VPC Peering Connection Options** error), simply run the **terraform
    apply -auto-approve** command again:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果**terraform apply**命令运行没有任何错误，我们就可以继续进行下一部分。如果遇到问题（例如，出现**Unable to modify
    EC2 VPC Peering Connection Options**错误），只需再次运行**terraform apply -auto-approve**命令：
- en: '![](image/B19755_06_07.jpg)'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_07.jpg)'
- en: Figure 6.7 – Results after running the terraform apply command
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.7 – 运行terraform apply命令后的结果
- en: In addition to the network environment, running the **terraform apply** command
    will also create three EC2 instances – a **t2.micro** target instance labeled
    **target-vm-01**, a **t2.micro** target instance labeled **target-vm-02**, and
    a **t3.medium** attacker instance labeled **vm-kali**. Each of these instances
    will have its corresponding public and private IP addresses, similar to what is
    shown in *Figure 6**.7*. Make sure you copy the output values (that is, the public
    and private IP addresses under **Outputs**) to the text editor on your local machine.
    Note that you will get a different set of IP addresses after running the **terraform**
    **apply** command.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了网络环境，运行**terraform apply**命令还将创建三个EC2实例——一个**t2.micro**目标实例标记为**target-vm-01**，一个**t2.micro**目标实例标记为**target-vm-02**，以及一个**t3.medium**攻击者实例标记为**vm-kali**。每个实例将有其对应的公共和私有IP地址，类似于*图6.7*中显示的内容。确保将输出值（即**Outputs**下的公共和私有IP地址）复制到本地机器上的文本编辑器中。请注意，运行**terraform
    apply**命令后，您将获得一组不同的IP地址。
- en: Note
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Feel free to review the configuration of the resources that were deployed using
    the **terraform show** command. Note that if we were to include a private subnet
    and launch another target VM instance inside it, then we would need a few more
    resources defined in our Terraform code (such as a NAT gateway in the public subnet)
    that would increase the cost of running this lab environment.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 随时查看使用**terraform show**命令部署的资源配置。请注意，如果我们要包含一个私有子网并在其中启动另一个目标虚拟机实例，那么我们需要在Terraform代码中定义一些额外的资源（例如公共子网中的NAT网关），这些资源将增加运行此实验环境的成本。
- en: 'Before proceeding to the next section, let’s quickly check what we have so
    far. In *Figure 6**.8*, we can see that after running the **terraform apply**
    command, we should have two target instances (**target-vm-01** and **target-vm-02**)
    in the first VPC network (**Target VPC**) and one attacker instance (**vm-kali**)
    in the second VPC network (**Attacker VPC**):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入下一部分之前，让我们快速检查一下目前的配置。在*图6.8*中，我们可以看到，在运行**terraform apply**命令之后，应该会在第一个VPC网络（**Target
    VPC**）中创建两个目标实例（**target-vm-01**和**target-vm-02**），在第二个VPC网络（**Attacker VPC**）中创建一个攻击者实例（**vm-kali**）：
- en: '![](image/B19755_06_08.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_06_08.jpg)'
- en: Figure 6.8 – What we have at the moment
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 – 当前状态
- en: The two VPC networks are connected through a peering connection, which allows
    traffic from the attacker instance to reach the target instances. Of course, as
    we will see later, additional layers of security (such as the security group used
    by the second target instance) will prevent traffic from the attacker instance
    (**vm-kali**) from directly reaching the second target instance (**target-vm-02**).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 两个VPC网络通过对等连接相连，这允许攻击者实例的流量到达目标实例。当然，正如我们稍后会看到的那样，额外的安全层（例如第二个目标实例使用的安全组）将阻止攻击者实例（**vm-kali**）的流量直接到达第二个目标实例（**target-vm-02**）。
- en: Note
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are other networking components and resources we can configure in AWS
    to manage the network flow and connectivity inside the lab environment. These
    include **network ACLs**, **load balancers**, and **route table configuration**,
    along with various types of **firewalls** and **gateways**. We will not discuss
    these in detail in this book so feel free to check out the *Further reading* section
    for more information about these topics.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS中，我们可以配置其他网络组件和资源来管理实验环境中的网络流量和连接性。这些包括**网络ACLs**、**负载均衡器**、**路由表配置**，以及各种类型的**防火墙**和**网关**。本书中我们不会详细讨论这些内容，欢迎查阅*进一步阅读*部分以获取更多相关信息。
- en: Validating network connectivity and security
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证网络连接性和安全性
- en: When building a pivoting lab, we must test and validate the network connectivity
    of the environment. This will help ensure that the network configuration, necessary
    routes, and firewall rules have been set up to facilitate the movement of traffic
    between different segments and systems in the network.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建转发实验室时，我们必须测试和验证环境的网络连接性。这将有助于确保网络配置、必要的路由和防火墙规则已经设置好，以促进不同网络段和系统之间的流量移动。
- en: Important note
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Even if we use automation tools to build the lab infrastructure, it is still
    possible to encounter network connectivity issues.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们使用自动化工具来构建实验室基础设施，仍然有可能遇到网络连接问题。
- en: 'There are a variety of ways to validate network connectivity and security.
    In this section, we will test and validate network connectivity the *manual way*
    and the *automated way*. That said, this section is divided into the following
    subparts:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以验证网络连接性和安全性。在本节中，我们将以*手动方式*和*自动化方式*测试和验证网络连接性。具体来说，本节分为以下子部分：
- en: '*Part 1 of 3 – Authorizing the use of the* *serial console*'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 1 部分，共 3 部分 – 授权使用* *串行控制台*'
- en: '*Part 2 of 3 – Manually verifying network connectivity with* *ping tests*'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 2 部分，共 3 部分 – 使用* *ping 测试*手动验证网络连接性'
- en: '*Part 3 of 3 – Using the Reachability Analyzer to validate* *network connectivity*'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 3 部分，共 3 部分 – 使用可达性分析器验证* *网络连接性*'
- en: Without further ado, let’s begin.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 事不宜迟，让我们开始吧。
- en: Part 1 of 3 – Authorizing the use of the serial console
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 1 部分，共 3 部分 – 授权使用串行控制台
- en: 'There are different ways to access an EC2 instance. One of the options would
    be to use the **EC2 serial console**, which helps us access EC2 instances and
    troubleshoot various issues (for example, boot and network configuration issues).
    Before we can access EC2 instances through the EC2 serial console, we need to
    enable it first:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 EC2 实例有不同的方法。一个选项是使用**EC2 串行控制台**，它帮助我们访问 EC2 实例并排除各种问题（例如，启动和网络配置问题）。在通过
    EC2 串行控制台访问 EC2 实例之前，我们需要首先启用它：
- en: Navigate to the EC2 console by typing **ec2 instances** in the search bar and
    then selecting **Instances** from the list of results (under **Features**).
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在搜索栏中输入**ec2 实例**，然后从结果列表中选择**实例**（在**功能**下）来导航到 EC2 控制台。
- en: Toggle the checkbox *on* (that is, mark it with a check) to select **vm-kali**
    and then click the **Connect** button. This will redirect you to the **Connect
    to** **instance** page.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换复选框*开启*（即标记复选框）以选择**vm-kali**，然后点击**连接**按钮。这将把你重定向到**连接到** **实例**页面。
- en: In the last tab (**EC2 serial console**), if you have not authorized the use
    of the EC2 serial console in your account, simply click the **Manage access**
    button, as highlighted in *Figure 6**.9*:![](image/B19755_06_09.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一个标签页（**EC2 串行控制台**）中，如果你尚未在账户中授权使用 EC2 串行控制台，只需点击**管理访问权限**按钮，如*图 6.9*所示：![](image/B19755_06_09.jpg)
- en: Figure 6.9 – Account not yet authorized to use the EC2 serial console
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.9 – 账户尚未授权使用 EC2 串行控制台
- en: After clicking the **Manage access** button, simply toggle the **Allow** checkbox
    *on* (that is, mark it with a check) and then click the **Update** button to authorize
    the use of the EC2 serial console in your AWS account.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**管理访问权限**按钮后，只需切换**允许**复选框*开启*（即标记复选框），然后点击**更新**按钮，以授权在你的 AWS 账户中使用 EC2
    串行控制台。
- en: Navigate back to the list of EC2 instances (using the sidebar). Toggle the checkbox
    *on* to select **vm-kali** and then click the **Connect** button. This will redirect
    you to the **Connect to** **instance** page.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 EC2 实例列表（通过侧边栏）。切换复选框*开启*以选择**vm-kali**，然后点击**连接**按钮。这将把你重定向到**连接到** **实例**页面。
- en: In the last tab (**EC2 serial console**), click the **Connect** button to access
    the instance via the **EC2** **serial console**.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一个标签页（**EC2 串行控制台**）中，点击**连接**按钮，通过**EC2** **串行控制台**访问实例。
- en: Note
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Inside the serial console, if you are seeing a blank black screen, simply press
    the *Enter* key to see the **root@kali:~#** command prompt. If you are having
    issues accessing the attacker VM instance (**vm-kali**), feel free to reboot the
    EC2 instance and then try accessing it again via the EC2 serial console.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在串行控制台中，如果看到空白的黑屏，只需按下*Enter*键，即可看到**root@kali:~#**命令提示符。如果你在访问攻击者虚拟机实例（**vm-kali**）时遇到问题，可以重新启动
    EC2 实例，然后再次通过 EC2 串行控制台尝试访问。
- en: Part 2 of 3 – Manually verifying network connectivity with ping tests
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 2 部分，共 3 部分 – 使用 ping 测试手动验证网络连接性
- en: 'Using the **ping** command, we will quickly test the network connectivity between
    the different resources that have been deployed inside our lab network:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**ping**命令，我们将快速测试我们实验室网络内已部署的不同资源之间的网络连接性：
- en: Continuing where we left off in the previous part, let’s check if we can ping
    the first target VM instance, **target-vm-01**, from the attacker VM instance,
    **vm-kali**, using its private IP address (similar to what we have in *Figure
    6**.10*):![](image/B19755_06_010.jpg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着上一步的内容，让我们检查是否能够通过攻击者虚拟机实例**vm-kali**的私有IP地址ping通第一个目标虚拟机实例**target-vm-01**（类似于*图
    6**.10*所示）：![](image/B19755_06_010.jpg)
- en: Figure 6.10 – Pinging the first target instance from the attacker instance (diagram)
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.10 – 从攻击者实例ping通第一个目标实例（示意图）
- en: Here, we are expecting the first target VM instance, **target-vm-01**, to be
    reachable from the attacker VM instance, **vm-kali**.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们预计第一个目标虚拟机实例**target-vm-01**将可以从攻击者虚拟机实例**vm-kali**访问。
- en: 'With this in mind, let’s run the following command (in the EC2 serial console):'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 考虑到这一点，让我们在EC2串行控制台中运行以下命令：
- en: '[PRE8]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Make sure you replace **<TARGET VM 01 PRIVATE IP>** with the private IP address
    of the first target VM instance (the **vm_target_private_ip** output value after
    running **terraform** **apply** previously):'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将**<TARGET VM 01 PRIVATE IP>**替换为第一个目标虚拟机实例的私有IP地址（即运行**terraform** **apply**后得到的**vm_target_private_ip**输出值）：
- en: '![](image/B19755_06_011.jpg)'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_011.jpg)'
- en: Figure 6.11 – Pinging the first target instance from the attacker instance
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.11 – 从攻击者实例ping通第一个目标实例
- en: As shown in *Figure 6**.11*, we can ping the first target VM instance, **target-vm-01**,
    from the attacker VM instance, **vm-kali**, using its private IP address.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如*图 6**.11*所示，我们可以通过攻击者虚拟机实例**vm-kali**的私有IP地址ping通第一个目标虚拟机实例**target-vm-01**。
- en: Note
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Feel free to use *Ctrl* + *C* to stop the **ping** command.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，可以使用*Ctrl* + *C*来停止**ping**命令。
- en: Now, let’s check if we can ping the second target VM instance, **target-vm-02**,
    from the attacker VM instance, **vm-kali**, using its private IP address (similar
    to what is shown in *Figure 6**.12*):![](image/B19755_06_012.jpg)
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们检查是否能够通过攻击者虚拟机实例**vm-kali**的私有IP地址ping通第二个目标虚拟机实例**target-vm-02**（类似于*图
    6**.12*所示）：![](image/B19755_06_012.jpg)
- en: Figure 6.12 – Pinging the second target instance from the attacker instance
    (diagram)
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.12 – 从攻击者实例ping通第二个目标实例（示意图）
- en: Here, we are expecting the second target VM instance, **target-vm-02**, to *not*
    be reachable from the attacker VM instance, **vm-kali**.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们预计第二个目标虚拟机实例**target-vm-02**将*无法*从攻击者虚拟机实例**vm-kali**访问。
- en: 'That said, let’s run the following command:'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 话虽如此，让我们运行以下命令：
- en: '[PRE9]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Make sure you replace **<TARGET VM 02 PRIVATE IP>** with the private IP address
    of the second target VM instance:'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将**<TARGET VM 02 PRIVATE IP>**替换为第二个目标虚拟机实例的私有IP地址：
- en: '![](image/B19755_06_013.jpg)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_013.jpg)'
- en: Figure 6.13 – Pinging the second target instance from the attacker instance
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.13 – 从攻击者实例ping通第二个目标实例
- en: As shown in *Figure 6**.13*, we are not able to ping the second target VM instance,
    **target-vm-02**, from the attacker VM instance, **vm-kali**, using its private
    IP address.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如*图 6**.13*所示，我们无法通过攻击者虚拟机实例**vm-kali**的私有IP地址ping通第二个目标虚拟机实例**target-vm-02**。
- en: Note
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Why is that? That’s because we configured the security group used by **target-vm-02**
    to only be accessible from the resources using the security group used by **target-vm-01**.
    In other words, we can only access the second target VM instance (**target-vm-02**)
    from the first target VM instance (**target-vm-01**). Note that there are various
    ways we can prevent the attacker VM traffic from reaching the second target VM
    instance. Another possible approach would be to introduce a private subnet in
    VPC 01, and then launch the second target VM instance in the private subnet. In
    addition to this, we could also create a new VPC, set up VPC peering between the
    new VPC and VPC 01, and then launch the second target VM instance in the new VPC.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会这样？这是因为我们配置了**target-vm-02**使用的安全组，使其仅能通过使用**target-vm-01**的安全组的资源访问。换句话说，我们只能通过第一个目标虚拟机实例（**target-vm-01**）访问第二个目标虚拟机实例（**target-vm-02**）。请注意，还有多种方法可以防止攻击者虚拟机的流量到达第二个目标虚拟机实例。另一种可能的方式是，在VPC
    01中引入一个私有子网，然后在该私有子网中启动第二个目标虚拟机实例。除此之外，我们还可以创建一个新的VPC，设置新VPC与VPC 01之间的VPC对等连接，然后在新的VPC中启动第二个目标虚拟机实例。
- en: Navigate back to the list of EC2 instances. Toggle the checkbox *on* to select
    **target-vm-01** and then click the **Connect** button. This will redirect you
    to the **Connect to** **instance** page.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 EC2 实例列表。将复选框切换到 *开启* 状态，选择 **target-vm-01**，然后点击 **连接** 按钮。这将把您重定向到 **连接到实例**
    页面。
- en: In the first tab (**EC2 Instance Connect**), locate and click the **Connect**
    button to access the instance via **EC2** **Instance Connect**.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个标签页（**EC2 实例连接**）中，找到并点击 **连接** 按钮，通过 **EC2 实例连接** 访问该实例。
- en: Now, let’s check if we can ping the second target VM instance, **target-vm-02**,
    from the first target VM instance, **target-vm-01**, using its private IP address
    (similar to what is shown in *Figure 6**.14*):![](image/B19755_06_014.jpg)
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们检查能否通过第一个目标 VM 实例 **target-vm-01** 的私有 IP 地址 ping 第二个目标 VM 实例 **target-vm-02**（类似于
    *图 6.14* 中所示）:![](image/B19755_06_014.jpg)
- en: Figure 6.14 – Pinging the second target instance from the first target instance
    (diagram)
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.14 – 从第一个目标实例 ping 第二个目标实例（示意图）
- en: Here, we are expecting the second target VM instance, **target-vm-02**, to be
    reachable from the first target instance, **target-vm-01**.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们期望第一个目标实例 **target-vm-01** 可以访问第二个目标 VM 实例 **target-vm-02**。
- en: 'That said, let’s run the following command:'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 话虽如此，让我们运行以下命令：
- en: '[PRE10]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Make sure you replace **<TARGET VM 02 PRIVATE IP>** with the private IP address
    of the second target VM instance:'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将 **<TARGET VM 02 PRIVATE IP>** 替换为第二个目标 VM 实例的私有 IP 地址：
- en: '![](image/B19755_06_015.jpg)'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_015.jpg)'
- en: Figure 6.15 — Pinging the second target instance from the first target instance
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.15 — 从第一个目标实例 ping 第二个目标实例
- en: As shown in *Figure 6**.15*, we can ping the second target VM instance, **target-vm-02**,
    from the first target VM instance, **target-vm-02**, using its private IP address.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如 *图 6.15* 所示，我们可以通过第一个目标 VM 实例 **target-vm-01** 的私有 IP 地址 ping 第二个目标 VM 实例
    **target-vm-02**。
- en: Note
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Optionally, we can try to ping the second target VM instance, **target-vm-02**,
    from the first target VM instance, **target-vm-01**, using its public IP address.
    Since the VM instances are not reachable from outside the network environment,
    we should not be able to ping the second target VM instance, **target-vm-02**,
    using its public IP address.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，我们可以尝试通过第一个目标 VM 实例 **target-vm-01** 的公有 IP 地址 ping 第二个目标 VM 实例 **target-vm-02**。由于
    VM 实例无法从外部网络环境访问，我们不应该能够通过公有 IP 地址 ping 到第二个目标 VM 实例 **target-vm-02**。
- en: Part 3 of 3 – Using the Reachability Analyzer to validate network connectivity
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 3 部分，共 3 部分 – 使用可达性分析器验证网络连接性
- en: 'In addition to the initial network connectivity tests we have just performed,
    we will also use the **VPC Reachability Analyzer** – a network diagnostics tool
    provided by AWS – to help us detect and troubleshoot network misconfigurations
    that could lead to connectivity issues. As we will see in the succeeding set of
    steps, using it is straightforward:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们刚刚执行的初步网络连接测试外，我们还将使用 **VPC 可达性分析器** —— AWS 提供的网络诊断工具 —— 来帮助我们检测和排查可能导致连接问题的网络配置错误。正如我们在接下来的步骤中所看到的，使用该工具非常简单：
- en: Navigate to the **VPC Reachability Analyzer** console by typing **vpc reachability
    analyzer** in the search bar and then selecting **VPC Reachability Analyzer**
    from the list of results (under **Features**).
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在搜索栏中输入 **vpc reachability analyzer**，然后从结果列表中选择 **VPC Reachability Analyzer**（在
    **功能** 下）来导航到 **VPC 可达性分析器** 控制台。
- en: Click the **Create and analyze** **path** button.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建并分析** **路径** 按钮。
- en: 'On the **Reachability Analyzer > Create and analyze path** page, specify the
    following form field values:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **可达性分析器 > 创建并分析路径** 页面，指定以下表单字段值：
- en: '**Path configuration** > **Name** **tag**: **attacker-to-target-01**'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径配置** > **名称** **标签**: **attacker-to-target-01**'
- en: '**Path Source** > **Source** **type**: **Instances**'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径来源** > **来源** **类型**: **实例**'
- en: '**Path Source** > **Source**: Select **vm-kali**'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径来源** > **来源**: 选择 **vm-kali**'
- en: '**Path destination** > **Destination** **type**: **Instances**'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径目的地** > **目的地** **类型**: **实例**'
- en: '**Path destination** > **Destination**: Select **target-vm-01**'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径目的地** > **目的地**: 选择 **target-vm-01**'
- en: '**Protocol**: **TCP**'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协议**: **TCP**'
- en: Important note
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Make sure you verify and check the instance IDs of the resources involved in
    the reachability check. Feel free to open another browser tab and navigate to
    the EC2 console to quickly check the instance IDs of the resources involved in
    the analysis.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 确保验证和检查参与可达性检查的资源的实例 ID。您可以打开另一个浏览器标签页，导航到 EC2 控制台，快速检查参与分析的资源的实例 ID。
- en: Click the **Create and analyze path** button afterward.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击**创建并分析路径**按钮。
- en: Note
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Wait for about 2-3 minutes for the analysis to complete. Feel free to grab a
    cup of coffee or tea while waiting! You may click the refresh button in case the
    user interface is not updating automatically.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 等待大约2-3分钟，直到分析完成。等候期间可以喝杯咖啡或茶！如果用户界面没有自动更新，你可以点击刷新按钮。
- en: Once the analysis has finished, we should see that **Reachability status** is
    set to **Reachable**.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析完成后，我们应该看到**可达性状态**设置为**可达**。
- en: Toggle *on* the checkbox of the analysis we ran to view the diagram under **Analysis
    explorer** > **Path details**, similar to what we have in *Figure 6**.16*:![](image/B19755_06_016.jpg)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换*开启*我们运行的分析的复选框，以查看**分析浏览器** > **路径详情**下的图表，类似于*图 6.16*所示：![](image/B19755_06_016.jpg)
- en: Figure 6.16 – Analysis explorer > Path details
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.16 – 分析浏览器 > 路径详情
- en: Using the **Analysis explorer**, we should be able to analyze and evaluate the
    network reachability and connectivity between different resources within the VPC
    environment in AWS. Here, we can see that the first target VM instance, **target-vm-01**,
    is reachable from the attacker instance, **vm-kali**, as well as the network traffic
    passed through the VPC network peering connection. If you have time, you may use
    the VPC Reachability Analyzer to verify that we can’t ping the second target VM
    instance (**target-vm-02**) from the attacker VM instance (**vm-kali**).
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用**分析浏览器**，我们应该能够分析并评估AWS中VPC环境内不同资源之间的网络可达性和连通性。在这里，我们可以看到第一个目标虚拟机实例，**target-vm-01**，可以从攻击者实例**vm-kali**访问，并且网络流量通过VPC网络对等连接传输。如果你有时间，可以使用VPC可达性分析器来验证我们无法从攻击者虚拟机实例（**vm-kali**）ping第二个目标虚拟机实例（**target-vm-02**）。
- en: In addition to using the solutions discussed in this section, note that there
    are several other ways to test network connectivity inside the lab network environment.
    Feel free to experiment with other tools such as **telnet**, **nmap**, and **traceroute**
    when troubleshooting network connectivity.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用本节中讨论的解决方案外，请注意还有其他几种方法可以测试实验网络环境中的网络连通性。在排查网络连通性问题时，随时可以尝试使用其他工具，如**telnet**、**nmap**和**traceroute**。
- en: At this point, we should have a better idea of how the network is set up and
    configured. In the next section, we will proceed with setting up and configuring
    the attacker VM instance to prepare it for the penetration testing simulation
    at the end of this chapter.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一步，我们应该已经对网络的设置和配置有了更清晰的了解。在下一部分，我们将继续设置和配置攻击者虚拟机实例，以为本章末的渗透测试模拟做好准备。
- en: Important note
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you are planning to take a break for more than an hour, it might be a good
    idea to clean up and delete the lab environment first (refer to the *Cleaning
    up* section at the end of this chapter) and then bring it back up when you can
    continue working on the succeeding sections of this chapter. This will help you
    avoid paying for the time several unused cloud resources are running. While the
    IP addresses of the resources in the lab environment may change (after bringing
    the lab environment back up), the overall network and security configuration of
    the lab environment should more or less be the same.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划休息超过一个小时，最好先清理并删除实验环境（参见本章最后的*清理*部分），然后等你准备好继续处理本章后续部分时再重新启动实验环境。这样可以避免为几乎没有使用的云资源运行时支付费用。虽然实验环境中的资源IP地址可能会发生变化（在重新启动实验环境后），但实验环境的整体网络和安全配置应该大致相同。
- en: Setting up the attacker VM instance
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置攻击者虚拟机实例
- en: In this section, we will be setting up our attacker EC2 instance. Compared to
    *[Chapter 4](B19755_04.xhtml)*, *Setting Up Isolated Penetration Testing Lab Environments
    on GCP*, and *[Chapter 5](B19755_05.xhtml)*, *Setting Up Isolated Penetration
    Testing Lab Environments on Azure*, our attacker instance setup in this chapter
    will be much simpler as we will only work with a Terminal.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中，我们将设置我们的攻击者EC2实例。与*第4章*（*在GCP上设置隔离渗透测试实验环境*）和*第5章*（*在Azure上设置隔离渗透测试实验环境*）相比，本章中的攻击者实例设置会简单得多，因为我们只需要使用终端。
- en: 'That being said, let’s proceed with setting up the attacker VM instance:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们继续设置攻击者虚拟机实例：
- en: Navigate to the list of EC2 instances (using the sidebar). Toggle the checkbox
    *on* to select **vm-kali** and then click the **Connect** button. This will redirect
    you to the **Connect to** **instance** page.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 EC2 实例列表（使用侧边栏）。勾选 **vm-kali** 的复选框，然后点击 **Connect** 按钮。这将把你重定向到 **Connect
    to** **instance** 页面。
- en: In the last tab (**EC2 serial console**), click the **Connect** button to access
    the instance via the **EC2** **serial console**.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一个标签页（**EC2 serial console**）中，点击 **Connect** 按钮，通过 **EC2** **serial console**
    访问实例。
- en: Note
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Inside the serial console, if you are seeing a blank black screen, simply press
    the *Enter* key to see the **root@kali:~#** command prompt. If you are having
    issues accessing the attacker VM instance, **vm-kali**, feel free to reboot the
    EC2 instance and then try accessing it again via the EC2 serial console. In addition
    to this, make sure that there are no other open sessions to the instance that
    could potentially interfere with the serial console connection.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在串行控制台中，如果你看到一个空白的黑屏，只需按 *Enter* 键即可看到 **root@kali:~#** 命令提示符。如果你无法访问攻击者虚拟机实例
    **vm-kali**，可以尝试重新启动 EC2 实例，并再次通过 EC2 串行控制台访问它。此外，确保没有其他打开的会话干扰串行控制台连接。
- en: 'Since we will be using Metasploit later, we’ll need to verify if we can use
    **msfconsole** inside the attacker VM instance. That said, let’s run the following
    command:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们稍后将使用 Metasploit，因此我们需要验证是否可以在攻击者虚拟机实例中使用 **msfconsole**。也就是说，让我们运行以下命令：
- en: '[PRE11]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Running this command will return **msfconsole not found**. Looks like we need
    to do some essential installation and setup work first!
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行此命令会返回 **msfconsole not found**。看起来我们需要先做一些必要的安装和设置工作！
- en: 'Now, let’s update the package lists and then install the default set of packages
    for Kali Linux using the following commands:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们更新软件包列表，然后使用以下命令安装 Kali Linux 的默认软件包：
- en: '[PRE12]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Feel free to tweak the installation and setup commands as needed (just in case!).
    If these commands worked just fine, then we can proceed with the next set of steps.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果需要，您可以根据需要调整安装和设置命令（以防万一！）。如果这些命令运行正常，那么我们可以继续进行下一步。
- en: Note
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'This step may take 20-30 minutes to complete. Feel free to check the following
    link while waiting: [https://www.kali.org/docs/general-use/metapackages/](https://www.kali.org/docs/general-use/metapackages/).
    Once installation has finished, feel free to run the **clear** command to clear
    the screen.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤可能需要 20-30 分钟才能完成。在等待时，您可以查看以下链接：[https://www.kali.org/docs/general-use/metapackages/](https://www.kali.org/docs/general-use/metapackages/)。安装完成后，随时运行
    **clear** 命令清除屏幕。
- en: 'Let’s run the **which msfconsole** command again to verify if we can use **msfconsole**
    inside the attacker VM instance:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行 **which msfconsole** 命令，验证是否可以在攻击者虚拟机实例中使用 **msfconsole**：
- en: '[PRE13]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This should return **/usr/bin/msfconsole**. Looks like we’re ready for showtime!
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会返回 **/usr/bin/msfconsole**。看起来我们准备好开始了！
- en: 'Now, let’s prepare the **username.txt** and **passwords.txt** files we will
    use to perform a sample SSH brute-force attack. Let’s start by creating two blank
    files using the **touch** command:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们准备 **username.txt** 和 **passwords.txt** 文件，我们将用它们进行示例 SSH 暴力破解攻击。首先，使用
    **touch** 命令创建两个空文件：
- en: '[PRE14]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the following command to open the empty **/root/usernames.txt** file using
    Vim:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以使用 Vim 打开空的 **/root/usernames.txt** 文件：
- en: '[PRE15]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Feel free to type **:set nu** and then press the *Enter* key to show the line
    numbers inside the editor.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 随时输入 **:set nu**，然后按 *Enter* 键，以显示编辑器中的行号。
- en: Next, press the *i* key to switch to **insert mode** so that we can edit the
    file.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按 *i* 键切换到 **insert mode**，以便我们可以编辑文件。
- en: Note
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In case you have forgotten already, **insert mode** in Vim allows us to type
    and make changes as we would in a regular text editor. In this mode, we can freely
    add, delete, or modify characters without affecting the surrounding text.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经忘记了，Vim 中的 **insert mode** 允许我们像在普通文本编辑器中一样输入和修改内容。在此模式下，我们可以自由地添加、删除或修改字符，而不会影响周围的文本。
- en: 'Type or paste the following block of code into our **usernames.txt** file:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码块输入或粘贴到我们的 **usernames.txt** 文件中：
- en: '[PRE16]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here, we have an intentionally simplified list of usernames to speed up the
    simulation process. In real penetration testing activities, we would use a more
    extensive list of usernames. This would include commonly used usernames, default
    usernames specific to certain systems or applications, and, potentially, custom
    usernames.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里我们有一个故意简化的用户名列表，以加速后续的模拟过程。在实际的渗透测试活动中，我们会使用更为广泛的用户名列表。这将包括常见的用户名、特定系统或应用程序的默认用户名，以及可能的自定义用户名。
- en: Press the *Esc* key to switch to **normal mode**. Type **:wq!**. Press *Enter*
    afterward. This will save the changes you’ve made to **usernames.txt** and then
    exit Vim as well.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Esc*键切换到**正常模式**。输入**:wq!**，然后按*Enter*键。这将保存你对**usernames.txt**所做的更改，并退出Vim。
- en: Note
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To refresh your memory, **normal mode** in Vim allows us to navigate through
    the text, execute commands, and perform various operations on the file. In this
    mode, specific keystrokes (such as **:wq!**) can be used to move the cursor, search
    for text, copy and paste, and perform editing actions such as deleting, replacing,
    and undoing changes. For instance, **w** represents the *write* command (which
    saves changes to the file), and **q** represents the *quit* command (which exits
    the editor). Finally, the exclamation point, **!**, is simply an optional modifier
    that forces the command to execute, even if there are unsaved changes along with
    other warnings.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你回忆，**正常模式**下，Vim允许我们在文本中导航，执行命令，进行各种文件操作。在这个模式下，可以使用特定的按键（如**:wq!**）来移动光标、搜索文本、复制粘贴，以及执行删除、替换、撤销更改等编辑操作。例如，**w**表示*保存*命令（即保存文件更改），**q**表示*退出*命令（即退出编辑器）。最后，感叹号**!**是一个可选修饰符，强制命令执行，即使存在未保存的更改或其他警告。
- en: 'Run the following command to open the empty **/root/passwords.txt** file using
    Vim:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令，使用Vim打开空的**/root/passwords.txt**文件：
- en: '[PRE17]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Feel free to type **:set nu** and then press the *Enter* key to show the line
    numbers inside the editor.
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 随时输入**:set nu**，然后按*Enter*键，在编辑器中显示行号。
- en: Next, press the *i* key to switch to **insert mode** so that we can edit the
    file.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按*i*键切换到**插入模式**，以便我们可以编辑文件。
- en: 'Type or paste the following block of code into our **passwords.txt** file:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码块输入或粘贴到我们的**passwords.txt**文件中：
- en: '[PRE18]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, we have an intentionally simplified list of passwords to speed up the
    simulation process later.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里我们有一个故意简化的密码列表，以加速后续的模拟过程。
- en: Press the *Esc* key to switch to **normal mode**. Type **:wq!**. Press *Enter*
    afterward. This will save the changes you’ve made to **passwords.txt** and then
    exit Vim as well.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Esc*键切换到**正常模式**。输入**:wq!**，然后按*Enter*键。这将保存你对**passwords.txt**所做的更改，并退出Vim。
- en: Now that we have everything ready, we can proceed with performing a penetration
    testing simulation inside our lab environment!
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切准备就绪，我们可以开始在实验环境中进行渗透测试模拟！
- en: Simulating penetration testing in the isolated network environment
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在隔离的网络环境中模拟渗透测试
- en: Given that our lab environment in AWS has been set up successfully, we can now
    proceed with having a penetration testing simulation to verify that everything
    has been configured correctly. Of course, we will work with a simplified penetration
    testing process as our primary goal is to assess if the lab environment has been
    set up and configured properly.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的AWS实验环境已成功搭建，我们现在可以进行渗透测试模拟，验证一切是否已正确配置。当然，我们将使用简化的渗透测试流程，因为我们的主要目标是评估实验环境是否已正确设置和配置。
- en: 'Before we start the simulation, let’s quickly discuss the relevant concepts,
    terminologies, and tools we need to know for this section:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始模拟之前，让我们快速讨论一下这个部分需要了解的相关概念、术语和工具：
- en: '**Network pivoting**: Network pivoting refers to the technique of using a compromised
    system as a gateway to access other interconnected systems or segments within
    a network. Using various network pivoting techniques and tools, an attacker can
    extend their reach, navigate through internal resources, and potentially escalate
    privileges.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络枢纽**：网络枢纽指的是使用一个已被攻陷的系统作为网关，访问网络中其他互联的系统或区域。通过使用各种网络枢纽技术和工具，攻击者可以扩展其访问范围，在内部资源中导航，甚至可能提升权限。'
- en: '**Lateral movement**: Lateral movement refers to the act of an attacker moving
    horizontally across systems within the same network (or domain) after gaining
    initial access. It involves exploiting vulnerabilities, leveraging credentials,
    and using various techniques to access and compromise additional systems within
    the same environment.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**横向渗透**：横向渗透指的是攻击者在获得初始访问权限后，在同一网络（或域）内横向移动的行为。它涉及利用漏洞、利用凭证以及使用各种技术访问和攻破同一环境中的其他系统。'
- en: '**Meterpreter**: Meterpreter is an advanced payload within the Metasploit Framework
    that provides an extensive range of capabilities, including interactive command
    execution, privilege escalation, and network pivoting. Leveraging a Meterpreter
    session provides the attacker with an interactive shell that helps with various
    information gathering and advanced post-exploitation tasks for ethical hacking
    requirements. We can think of a Meterpreter session as an advanced SSH shell with
    several additional powerful capabilities specifically designed for penetration
    testing and security research.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Meterpreter**：Meterpreter 是 Metasploit 框架中的一种高级有效载荷，提供了广泛的功能，包括交互式命令执行、权限提升和网络转移。通过
    Meterpreter 会话，攻击者可以获得交互式 shell，帮助进行各种信息收集和高级后期利用任务，满足道德黑客的需求。我们可以将 Meterpreter
    会话视为一种高级的 SSH shell，具有多个额外强大的功能，专门用于渗透测试和安全研究。'
- en: '**Metasploit post/multi/manage/autoroute module**: The **post/multi/manage/autoroute**
    module is a specialized module within the Metasploit Framework that helps establish
    network routes from compromised systems to other target subnets. This module is
    particularly useful for lateral movement and network pivoting during post-exploitation
    activities.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Metasploit post/multi/manage/autoroute 模块**：**post/multi/manage/autoroute**
    模块是 Metasploit 框架中的一个专业模块，用于帮助在被攻破的系统和其他目标子网之间建立网络路由。这个模块对于横向渗透和网络转移在后期利用过程中尤为重要。'
- en: As we delve deeper into cybersecurity, we will encounter other advanced methods
    and techniques for network pivoting and lateral movement. There’s more to learn,
    but these should do the trick for now!
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们在网络安全领域的深入，我们将遇到更多先进的网络转移和横向渗透方法与技术。虽然还有更多内容可以学习，但目前这些方法已经足够有效！
- en: Important note
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is unethical and illegal to attack cloud resources owned by another user
    or company. Before proceeding, make sure you read the *Examining the considerations
    when building penetration testing lab environments in the cloud* section of *[Chapter
    1](B19755_01.xhtml)*, *Getting Started with Penetration Testing Labs in the Cloud*,
    since we will be simulating the attack process to validate if misconfigurations
    and vulnerabilities present in the applications and services running in the target
    VM instance are exploitable.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击属于其他用户或公司拥有的云资源是不道德且非法的。在继续之前，请确保阅读 *[第 1 章](B19755_01.xhtml)* 中的 *在云中构建渗透测试实验环境时的注意事项*
    部分，*开始使用云中的渗透测试实验室*，因为我们将模拟攻击过程，以验证目标虚拟机实例中运行的应用程序和服务中的配置错误和漏洞是否可以被利用。
- en: 'That said, this section is divided into the following subparts:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，本节内容分为以下几个子部分：
- en: '*Part 1 of 3 – Obtaining the* *first flag*'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 1 部分 / 3 – 获取* *第一个标志*'
- en: '*Part 2 of 3 – Pivoting to attack* *other resources*'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 2 部分 / 3 – 向攻击* *其他资源* 的转移'
- en: '*Part 3 of 3 – Using the Reachability Analyzer to validate* *network connectivity*'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 3 部分 / 3 – 使用可达性分析器验证* *网络连通性*'
- en: With these aspects in mind, we can now start the penetration testing simulation.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些因素，我们现在可以开始渗透测试模拟。
- en: Part 1 of 3 – Obtaining the first flag
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 1 部分 / 3 – 获取第一个标志
- en: 'Follow these steps:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: Continuing where we left off in the previous section, let’s check and scan the
    open ports on the first target EC2 instance (**target-vm-01**):![](image/B19755_06_017.jpg)
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一节的基础上，我们继续进行操作，检查并扫描第一个目标 EC2 实例（**target-vm-01**）的开放端口：![](image/B19755_06_017.jpg)
- en: Figure 6.17 – Scanning the first target instance with Nmap
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.17 – 使用 Nmap 扫描第一个目标实例
- en: Similar to what is shown in *Figure 6**.17*, we’ll initiate the Nmap scan from
    the attacker instance (**vm-kali**), which is deployed in another VPC. Make sure
    that you can access and run commands inside the attacker instance via the **EC2**
    **serial console**.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 *图 6.17* 中所示类似，我们将从攻击者实例（**vm-kali**）发起 Nmap 扫描，该实例部署在另一个 VPC 中。确保您能够通过 **EC2**
    **串行控制台** 访问并在攻击者实例中运行命令。
- en: 'Once you are ready to perform the scan, run the following command:'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦准备好进行扫描，运行以下命令：
- en: '[PRE19]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Make sure you replace **<TARGET VM 01 PRIVATE IP>** with the private IP address
    of the first target VM instance. If you are wondering where you can get this value,
    it’s probably in the text editor on your local machine (after you copied the output
    values to the text editor after running the **terraform apply** command earlier):'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请确保将 **<TARGET VM 01 PRIVATE IP>** 替换为第一个目标虚拟机实例的私有 IP 地址。如果您在想这个值从哪里获取，它可能已经存在于您本地计算机上的文本编辑器中（在您之前运行
    **terraform apply** 命令后将输出值复制到文本编辑器中）：
- en: '![](image/B19755_06_018.jpg)'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_018.jpg)'
- en: Figure 6.18 – Result after running the nmap command
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.18 – 运行 nmap 命令后的结果
- en: After a few seconds, we should see the results that are returned after running
    this command. We should see that port **22** is open, similar to what is shown
    in *Figure 6**.18*!
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 几秒钟后，我们应该看到运行此命令后的返回结果。我们应该会看到端口 **22** 已打开，类似于 *图 6.18* 中所示的情况！
- en: Note
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You might have noticed that the private IP address of the first target machine
    we used in our example (in *Figure 6**.18*) has changed! Behind the scenes, the
    lab environment used in this chapter was destroyed and rebuilt (a couple of times)
    to manage the cost of running the lab during long periods of inactivity. That
    said, the private IP address of an EC2 instance should remain the same unless
    the instance has been deleted and then recreated. On your end, make sure you use
    the actual private IP address values of your EC2 instances as you will most likely
    get a different IP address value after running the **terraform apply** and **terraform**
    **show** commands.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，我们示例中使用的第一个目标机器的私有 IP 地址（在 *图 6.18* 中）发生了变化！在幕后，本章所使用的实验环境已被销毁并重建（几次），以便管理在长时间不活动期间运行实验室的成本。也就是说，EC2
    实例的私有 IP 地址应该保持不变，除非该实例被删除并重新创建。请确保您使用的是实际的 EC2 实例的私有 IP 地址，因为在运行 **terraform
    apply** 和 **terraform show** 命令后，您很可能会得到不同的 IP 地址值。
- en: 'Now, execute the following command to launch the Metasploit Framework console:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，执行以下命令以启动 Metasploit 框架控制台：
- en: '[PRE20]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will launch the Metasploit Framework console, similar to what we have
    in *Figure 6**.19*:'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将启动 Metasploit 框架控制台，类似于我们在 *图 6.19* 中看到的内容：
- en: '![](image/B19755_06_019.jpg)'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_019.jpg)'
- en: Figure 6.19 – The Metasploit Framework console
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.19 – Metasploit 框架控制台
- en: Note that you might get a different loading screen (or loading text) after running
    **msfconsole**.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，运行 **msfconsole** 后，您可能会看到不同的加载屏幕（或加载文本）。
- en: Note
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: It may take a minute or two for **msfconsole** to be ready.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**msfconsole** 可能需要一两分钟才能准备好。'
- en: 'Run the following command to search for the **auxiliary/scanner/ssh/ssh_login**
    module:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来搜索 **auxiliary/scanner/ssh/ssh_login** 模块：
- en: '[PRE21]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This should yield the following results:'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会返回以下结果：
- en: '![](image/B19755_06_020.jpg)'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_020.jpg)'
- en: Figure 6.20 – Results after running search ssh_login
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.20 – 运行 search ssh_login 后的结果
- en: Here, we have two matching modules – **SSH Login Check Scanner** (**auxiliary/scanner/ssh/ssh_login**)
    and **SSH Public Key Login** **Scanner** (**auxiliary/scanner/ssh/ssh_login_pubkey**).
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们有两个匹配的模块 – **SSH 登录检查扫描器**（**auxiliary/scanner/ssh/ssh_login**）和 **SSH
    公钥登录** **扫描器**（**auxiliary/scanner/ssh/ssh_login_pubkey**）。
- en: 'Now, run the following command to select and use the **auxiliary/scanner/ssh/ssh_login**
    module:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行以下命令来选择并使用 **auxiliary/scanner/ssh/ssh_login** 模块：
- en: '[PRE22]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: After running the command, our prompt should change to **auxiliary(scanner/ssh/ssh_login)
    >**, indicating that we have successfully selected the auxiliary SSH login scanner
    module. From here, we can configure the module options and execute the scanner
    to check if we can gain access to the target system using different username and
    password combinations.
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行命令后，我们的提示符应该会更改为 **auxiliary(scanner/ssh/ssh_login) >**，表示我们已成功选择了辅助 SSH 登录扫描器模块。从这里开始，我们可以配置模块选项，并执行扫描器检查是否可以通过不同的用户名和密码组合访问目标系统。
- en: 'Let’s quickly check the settings and options we have using the following command:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用以下命令快速检查我们拥有的设置和选项：
- en: '[PRE23]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This should return a list of module options, similar to what is shown in *Figure
    6**.21*:'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该返回一个模块选项列表，类似于 *图 6.21* 中所示：
- en: '![](image/B19755_06_021.jpg)'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_021.jpg)'
- en: Figure 6.21 – Output after executing the show options command
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.21 – 执行 show options 命令后的输出
- en: 'Out of these options, we will set the following values: **USER_FILE** (not
    shown in the screenshot) for the filename where the usernames are stored, **PASS_FILE**
    for the filename where the passwords are stored, **RHOSTS** (not shown in the
    screenshot) for the target resource(s) to be scanned by the SSH login scanner
    module, **THREADS** (not shown in the screenshot) for the number of threads, and
    **VERBOSE** (not shown in the screenshot) for the verbosity level.'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这些选项中，我们将设置以下值：**USER_FILE**（截图中未显示）作为存储用户名的文件名，**PASS_FILE**作为存储密码的文件名，**RHOSTS**（截图中未显示）作为被SSH登录扫描仪模块扫描的目标资源，**THREADS**（截图中未显示）作为线程数，**VERBOSE**（截图中未显示）作为详细级别。
- en: 'Run the following commands (one command at a time) to configure our scanner:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令（每次一个命令）来配置我们的扫描仪：
- en: '[PRE24]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Make sure you replace **<TARGET VM 01 PRIVATE IP>** with the private IP address
    of the first target EC2 instance (**target-vm-01**).
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将**<TARGET VM 01 PRIVATE IP>**替换为第一个目标EC2实例（**target-vm-01**）的私有IP地址。
- en: Important note
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Be careful when specifying the **RHOSTS** configuration value as we do not want
    to accidentally attack a random resource outside of our lab environment.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 小心指定**RHOSTS**配置值，因为我们不希望意外攻击到实验环境以外的随机资源。
- en: With everything ready, let’s proceed with running the SSH login scanner:![](image/B19755_06_022.jpg)
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切准备就绪后，让我们继续运行SSH登录扫描仪：![](image/B19755_06_022.jpg)
- en: Figure 6.22 – Scanning the first target instance with the SSH login scanner
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.22 - 使用SSH登录扫描仪扫描第一个目标实例
- en: Like the Nmap scan we performed previously, we will scan the first target EC2
    instance (**target-vm-01**) using the SSH login scanner from the attacker instance
    (**vm-kali**), similar to what is shown in *Figure 6**.22*.
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 像我们之前执行的Nmap扫描一样，我们将使用攻击者实例（**vm-kali**）上的SSH登录扫描仪扫描第一个目标EC2实例（**target-vm-01**），类似于*图6.22*所示。
- en: 'Once you are ready to perform the scan, run the following command:'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦准备好执行扫描，运行以下命令：
- en: '[PRE25]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This will yield the following set of logs:'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将生成以下一组日志：
- en: '![](image/B19755_06_023.jpg)'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_023.jpg)'
- en: Figure 6.23 – Logs after running the SSH login scanner
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.23 - 运行SSH登录扫描仪后的日志
- en: After several failed attempts, we can see that we were able to successfully
    authenticate using **adminuser** as the username and **password** as the password!
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在几次失败的尝试之后，我们看到成功使用**adminuser**作为用户名和**password**作为密码进行了认证！
- en: Note
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This step may take a few minutes to complete. Feel free to grab a cup of coffee
    or tea while waiting!
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤可能需要几分钟才能完成。等候时可以随便喝杯咖啡或茶！
- en: 'List the existing sessions by running the following command:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令列出现有会话：
- en: '[PRE26]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This should return a single active session, similar to what is shown in *Figure
    6**.24*:'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该返回一个活动会话，类似于*图6.24*所示：
- en: '![](image/B19755_06_024.jpg)'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_024.jpg)'
- en: Figure 6.24 – List of sessions
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.24 - 会话列表
- en: Here, we have the **Connection** column, which shows us a few additional details
    about the active session (that is, the attacker instance is connected to the first
    target instance).
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们有**连接**列，它显示了关于活动会话的一些额外信息（即攻击者实例已连接到第一个目标实例）。
- en: 'Run the following command to interact with the first session (ID = 1):'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令与第一个会话（ID = 1）进行交互：
- en: '[PRE27]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This will allow you to interact with the session (to the first VM instance,
    **vm-target-01**) and execute commands within it.
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将允许您与会话（到第一个虚拟机实例，**vm-target-01**）进行交互，并在其中执行命令。
- en: 'Once you are inside the session, run the following command to check the username
    of the current user:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入会话后，运行以下命令查看当前用户的用户名：
- en: '[PRE28]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This should return the following output:'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该返回以下输出：
- en: '![](image/B19755_06_025.jpg)'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_025.jpg)'
- en: Figure 6.25 – Result after using the whoami command
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.25 - 使用whoami命令后的结果
- en: In *Figure 6**.25*, we can see that running the **whoami** command yields **adminuser**
    as output, indicating that we are currently logged in as the **adminuser** user.
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在*图6.25*中，我们可以看到运行**whoami**命令后输出**adminuser**，这表明我们当前以**adminuser**用户身份登录。
- en: 'Elevate privileges to **root** by running the following command:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令提升权限到**root**：
- en: '[PRE29]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Wasn’t that a bit too easy? Looks like **passwordless sudo** allowed us to use
    the **su** (switch/substitute user) command to switch to the **root** account
    without requiring the root user’s password. Passwordless sudo is more common than
    you might think as system administrators and engineers often leverage it to streamline
    automated tasks and ensure operational convenience.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 这是不是有点太简单了？看起来**无密码 sudo**允许我们使用**su**（切换/替代用户）命令切换到**root**账户，而无需输入root用户的密码。无密码sudo比你想象的更常见，因为系统管理员和工程师通常利用它来简化自动化任务并确保操作便利性。
- en: 'Run the following command to check the username of the current user:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令检查当前用户的用户名：
- en: '[PRE30]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This should give us the following output:'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会给我们以下输出：
- en: '![](image/B19755_06_026.jpg)'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_026.jpg)'
- en: Figure 6.26 – Result after using the whoami command after sudo su
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.26 – 在使用whoami命令之后的结果（sudo su）
- en: In *Figure 6**.26*, we can see that running the **whoami** command (after **sudo
    su**) yields the **root** as the output, indicating that we are currently logged
    in as the **root** user.
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在*图 6**.26*中，我们可以看到运行**whoami**命令（在**sudo su**之后）会显示**root**，这表明我们当前是以**root**用户身份登录的。
- en: 'Now that we have root access, let’s locate the first flag by running the following
    command:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 既然我们已经拥有root权限，让我们通过运行以下命令来找到第一个标志：
- en: '[PRE31]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This will search the entire filesystem for files starting with **flag**. After
    a few minutes, we should get a list of results that includes a **/****root/flag.txt**
    file:'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将搜索整个文件系统中以**flag**开头的文件。几分钟后，我们应该会得到一个包含**/root/flag.txt**文件的结果列表：
- en: '[PRE32]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Looks like we found the flag file!
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 看起来我们找到了标志文件！
- en: 'Now, let’s check the contents of **/root/flag.txt**:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们查看**/root/flag.txt**的内容：
- en: '[PRE33]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This should give us **FLAG # 1!**. Good job!'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '这应该会给我们**FLAG # 1!**。做得好！'
- en: Next, press *Ctrl* + *Z* to run the session in background mode. When prompted
    with **Background session 1? [y/N]**, enter **y** to proceed.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按*Ctrl* + *Z*以将会话置于后台模式。当系统提示**Background session 1? [y/N]**时，输入**y**以继续。
- en: Important note
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Note that it should be *Ctrl* + *Z* (background session) and *not* *Ctrl* +
    *C* (abort session).
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，它应该是*Ctrl* + *Z*（后台会话），而*不是* *Ctrl* + *C*（中止会话）。
- en: Part 2 of 3 – Pivoting to attack other resources
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2部分/3 – 转向攻击其他资源
- en: 'Follow these steps:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'Let’s list the existing sessions by running the following command:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过运行以下命令列出现有会话：
- en: '[PRE34]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Running this command should return a single session connecting the attacker
    instance (**vm-kali**) and the first target instance (**target-vm-01**):'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行此命令应该返回一个连接攻击者实例（**vm-kali**）和第一个目标实例（**target-vm-01**）的单一会话：
- en: '![](image/B19755_06_027.jpg)'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_027.jpg)'
- en: Figure 6.27 – A session connecting the attacker instance and the first target
    instance
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.27 – 一个会话连接攻击者实例和第一个目标实例
- en: At this point, we have one session connecting the attacker instance (**vm-kali**)
    with the first target instance (**target-vm-01**), similar to what is shown in
    *Figure 6**.27*. In this context, a **session** refers to an active and interactive
    connection between the attacker’s machine (where Metasploit is running) and a
    compromised target system. When a successful exploit or payload is delivered to
    a vulnerable target, it can establish a session, granting the attacker various
    levels of control and access to the compromised system. In our case, after running
    the SSH Login Scanner on the first target instance (**target-vm-01**) previously,
    a session was established automatically between the attacker instance (**vm-kali**)
    and the first target instance (**target-vm-01**).
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此时，我们有一个会话连接了攻击者实例（**vm-kali**）和第一个目标实例（**target-vm-01**），类似于*图 6**.27*中所示。在这种情况下，**会话**指的是攻击者机器（运行Metasploit）和被攻破的目标系统之间的一个活动且互动的连接。当成功的漏洞利用或有效载荷被传递到一个脆弱的目标时，它可以建立一个会话，给予攻击者对被攻破系统的不同层级控制和访问权限。在我们的案例中，在之前对第一个目标实例（**target-vm-01**）运行SSH登录扫描器后，攻击者实例（**vm-kali**）和第一个目标实例（**target-vm-01**）之间自动建立了一个会话。
- en: 'Next, run the following commands (one command at a time) to use the first session
    to prepare an upgraded **meterpreter** session:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行以下命令（逐个命令执行）以使用第一个会话准备一个升级的**meterpreter**会话：
- en: '[PRE35]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This should open a second session, similar to what we have in *Figure 6**.28*:'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会打开一个第二个会话，类似于我们在*图 6**.28*中看到的：
- en: '![](image/B19755_06_028.jpg)'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_028.jpg)'
- en: Figure 6.28 – Opening an upgraded session
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.28 – 打开一个升级的会话
- en: 'Since we executed **sessions -i 2**, we will be able to use and interact with
    the upgraded session (known as a Meterpreter session) and execute additional commands
    within it. Compared to a “normal” shell, the Metasploit **Meterpreter** session
    offers a wider range of capabilities and features, including filesystem access,
    privilege escalation, process manipulation, pivoting, and more. These enhancements
    over a normal shell allow for advanced post-exploitation activities such as lateral
    movement within the network, persistence on the compromised system, data exfiltration,
    and comprehensive reconnaissance. With Meterpreter, penetration testers and ethical
    hackers have a more powerful toolset at their disposal that enables them to perform
    more thorough assessments and simulate real-world attack scenarios:'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们执行了**sessions -i 2**，我们将能够使用并与升级后的会话（即Meterpreter会话）进行交互，并在其中执行额外的命令。与“普通”shell相比，Metasploit的**Meterpreter**会话提供了更广泛的功能和特性，包括文件系统访问、权限提升、进程操作、横向移动等。这些相对于普通shell的增强功能使得高级的后渗透活动成为可能，如网络中的横向移动、在被攻陷系统上的持久化、数据泄露和全面侦察。使用Meterpreter，渗透测试人员和道德黑客拥有一个更强大的工具集，使他们能够进行更全面的评估并模拟现实世界的攻击场景：
- en: '![](image/B19755_06_029.jpg)'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_029.jpg)'
- en: Figure 6.29 – Two sessions connecting the attacker instance and the first target
    instance
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.29 - 攻击者实例和第一个目标实例之间的两条会话连接
- en: Now, we have two sessions connecting the attacker instance and the first target
    instance (with one of the sessions being a Meterpreter session).
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们有两条会话连接了攻击者实例和第一个目标实例（其中一条会话为Meterpreter会话）。
- en: 'Let’s check the network configuration using the following command:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用以下命令检查网络配置：
- en: '[PRE36]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This should yield the following output:'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会产生以下输出：
- en: '![](image/B19755_06_030.jpg)'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_030.jpg)'
- en: Figure 6.30 – Results after running ipconfig
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.30 - 运行ipconfig后的结果
- en: Given the following configuration, we should be able to derive the **SUBNET**
    value of **10.0.1.0** (which we’ll use later when we configure the **autoroute**
    module).
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定以下配置，我们应该能够推导出**SUBNET**值为**10.0.1.0**（稍后我们将在配置**autoroute**模块时使用该值）。
- en: Next, press *Ctrl* + *Z* to run the session in background mode. When prompted
    with **Background session 2? [y/N]**, enter **y** to proceed.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按*Ctrl* + *Z*将会话设置为后台模式。当出现**Background session 2? [y/N]**提示时，输入**y**以继续。
- en: 'Run the following commands to search for, select, and use the **autoroute**
    module (one command at a time):'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令逐一搜索、选择并使用**autoroute**模块（每次执行一个命令）：
- en: '[PRE37]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Let’s quickly check the settings and options we have using the following command:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们快速检查使用以下命令时的设置和选项：
- en: '[PRE38]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This should return a list of module options, similar to what is shown in *Figure
    6**.31*:'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会返回一个模块选项列表，类似于*图6.31*所示：
- en: '![](image/B19755_06_031.jpg)'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_031.jpg)'
- en: Figure 6.31 – Output after executing the show options command
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.31 - 执行show options命令后的输出
- en: We will specify the configuration values for the **SESSION** and **SUBNET**
    module options shortly.
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将很快指定**SESSION**和**SUBNET**模块选项的配置值。
- en: 'Configure the **SESSION** setting and set it to **2**:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置**SESSION**设置并将其设置为**2**：
- en: '[PRE39]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Configure the **SUBNET** setting and set it to **10.0.1.0/24**:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置**SUBNET**设置并将其设置为**10.0.1.0/24**：
- en: '[PRE40]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Let’s quickly check the settings and options we have using the following command:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们快速检查使用以下命令时的设置和选项：
- en: '[PRE41]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This should return a list of module options, similar to what we have in *Figure
    6**.32*:'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会返回一个模块选项列表，类似于我们在*图6.32*中看到的：
- en: '![](image/B19755_06_032.jpg)'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_032.jpg)'
- en: Figure 6.32 – Output after executing the show options command
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.32 - 执行show options命令后的输出
- en: Looks like our **post/multi/manage/autoroute** module configuration is ready
    to go!
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 看起来我们的**post/multi/manage/autoroute**模块配置已经准备就绪！
- en: 'Now, let’s execute the **autoroute** module:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们执行**autoroute**模块：
- en: '[PRE42]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This should yield the following set of logs:'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会产生以下日志集：
- en: '![](image/B19755_06_033.jpg)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_06_033.jpg)'
- en: Figure 6.33 – Logs after running the autoroute module
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.33 - 运行autoroute模块后的日志
- en: Now that we have executed the **autoroute** module, we should be able to pivot
    and reach other resources or networks that are accessible from the first target
    VM instance (**target-vm-01**).
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经执行了**autoroute**模块，应该能够进行横向移动，访问从第一个目标虚拟机实例（**target-vm-01**）可访问的其他资源或网络。
- en: Part 3 of 3 – Obtaining the second flag
  id: totrans-361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3部分 第3章 - 获取第二个标志
- en: 'Follow these steps:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤操作：
- en: 'Run the following command to select and use the **auxiliary/scanner/portscan/tcp**
    module:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以选择并使用**auxiliary/scanner/portscan/tcp**模块：
- en: '[PRE43]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This time, we will be scanning the second target instance for open ports, similar
    to what is shown in *Figure 6**.34*:'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一次，我们将扫描第二个目标实例的开放端口，类似于*图6.34*中所示的内容：
- en: '![](image/B19755_06_034.jpg)'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_034.jpg)'
- en: Figure 6.34 – Using the TCP port scanner on the second target instance
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.34 – 在第二个目标实例上使用TCP端口扫描器
- en: Even if the attacker instance (**vm-kali**) does not have direct access to the
    second target EC2 instance, we should be able to run the TCP port scanner on the
    second target EC2 instance (**target-vm-02**) *through* the first target EC2 instance
    (**target-vm-01**). *Amazing, right?*
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使攻击者实例（**vm-kali**）无法直接访问第二个目标EC2实例，我们仍然可以通过第一个目标EC2实例（**target-vm-01**）*间接*运行TCP端口扫描器对第二个目标EC2实例（**target-vm-02**）进行扫描。*太神奇了，是吧？*
- en: Note
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that only the traffic from the first target instance (**target-vm-01**)
    is allowed by the security group of the second target instance (**target-vm-02**).
    This means that we won’t be able to *directly* scan the second target instance
    (**target-vm-02**) from the attacker instance (**vm-kali**).
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，只有第一个目标实例（**target-vm-01**）的流量才被第二个目标实例（**target-vm-02**）的安全组允许。这意味着我们无法*直接*从攻击者实例（**vm-kali**）扫描第二个目标实例（**target-vm-02**）。
- en: 'Configure the **RHOSTS** setting and set it to the private IP address of the
    second target VM instance (**target-vm-02**):'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置**RHOSTS**设置，并将其设置为第二个目标虚拟机实例（**target-vm-02**）的私有IP地址：
- en: '[PRE44]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Make sure you replace **<TARGET VM 02 PRIVATE IP>** with the private IP address
    of the second target VM instance. If you are wondering where you can get this
    value, it’s *probably* in the text editor on your local machine (after you copied
    the output values to the text editor after running the **terraform apply** command
    earlier).
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将**<TARGET VM 02 PRIVATE IP>**替换为第二个目标虚拟机实例的私有IP地址。如果你想知道在哪里可以获取此值，它*可能*就在你本地机器的文本编辑器中（在你执行**terraform
    apply**命令并将输出值复制到文本编辑器后）。
- en: Important note
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Be careful when specifying the **RHOSTS** configuration value as we do not want
    to accidentally attack a random resource outside of our lab environment.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定**RHOSTS**配置值时要小心，因为我们不希望意外攻击到实验室环境之外的随机资源。
- en: 'Now, let’s use the following command to proceed with the scan:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令继续进行扫描：
- en: '[PRE45]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This should yield a set of logs, similar to what we have in *Figure 6**.35*:'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会生成一组日志，类似于我们在*图6.35*中看到的内容：
- en: '![](image/B19755_06_035.jpg)'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_035.jpg)'
- en: Figure 6.35 – Results after running the scanner
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.35 – 运行扫描器后的结果
- en: After running the scanner, we can see that port **22** of the second target
    VM instance (**target-vm-02**) is open.
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行扫描器后，我们可以看到第二个目标虚拟机实例（**target-vm-02**）的端口**22**是开放的。
- en: Note
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This step may take around 3-5 minutes to complete.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤可能需要大约3到5分钟完成。
- en: 'Run the following command using the **auxiliary/scanner/ssh/ssh_login** module:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**auxiliary/scanner/ssh/ssh_login**模块运行以下命令：
- en: '[PRE46]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Configure the **RHOSTS** setting and set it to the private IP address of the
    second target VM instance (**target-vm-02**):'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置**RHOSTS**设置，并将其设置为第二个目标虚拟机实例（**target-vm-02**）的私有IP地址：
- en: '[PRE47]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Make sure you replace **<TARGET VM 02 PRIVATE IP>** with the private IP address
    of the second target VM instance (**target-vm-02**).
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将**<TARGET VM 02 PRIVATE IP>**替换为第二个目标虚拟机实例（**target-vm-02**）的私有IP地址。
- en: Important note
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Be careful when specifying the **RHOSTS** configuration value as we do not want
    to accidentally attack a random resource outside of our lab environment.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定**RHOSTS**配置值时要小心，因为我们不希望意外攻击到实验室环境之外的随机资源。
- en: 'Next, let’s verify if we’ve set all the relevant options and configuration
    settings:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们验证是否设置了所有相关的选项和配置设置：
- en: '[PRE48]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This should return a list of module options, similar to what we have in *Figure
    6**.36*:'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该返回一个模块选项列表，类似于我们在*图6.36*中看到的内容：
- en: '![](image/B19755_06_036.jpg)'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_036.jpg)'
- en: Figure 6.36 – show options
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.36 – 显示选项
- en: Given that we have just set and updated the **RHOSTS** value to the private
    IP address of the second VM instance, all relevant configuration settings have
    been set already (since we are reusing most of the previous configurations that
    we set when we first used the module).
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们刚刚将**RHOSTS**值设置为第二个虚拟机实例的私有IP地址，所有相关的配置设置已经完成（因为我们正在重用在第一次使用模块时设置的大部分先前配置）。
- en: Now, let’s proceed with running the SSH login scanner on the second target EC2
    instance (**target-vm-02**):![](image/B19755_06_037.jpg)
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们继续在第二个目标 EC2 实例（**target-vm-02**）上运行 SSH 登录扫描器：![](image/B19755_06_037.jpg)
- en: Figure 6.37 – Using the SSH login scanner on the second target instance
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.37 – 在第二个目标实例上使用 SSH 登录扫描器
- en: Even if the attacker instance (**vm-kali**) does not have direct access to the
    second target EC2 instance, we should be able to run the SSH login scanner on
    the second target EC2 instance (**target-vm-02**) *through* the first target EC2
    instance (**target-vm-01**).
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使攻击者实例（**vm-kali**）无法直接访问第二个目标 EC2 实例，我们也应该能够通过第一个目标 EC2 实例（**target-vm-01**）*间接*运行
    SSH 登录扫描器。
- en: 'Once you are ready to perform the scan, run the following command:'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦准备好进行扫描，运行以下命令：
- en: '[PRE49]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This will yield the following set of logs:'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将生成以下一组日志：
- en: '![](image/B19755_06_038.jpg)'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_038.jpg)'
- en: Figure 6.38 – Logs after running the SSH login scanner on the second target
    instance
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.38 – 在第二个目标实例上运行 SSH 登录扫描器后的日志
- en: After trying several username and password combinations, we can see that we
    were able to successfully authenticate using **adminuser2** as the username and
    **password** as the password!
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尝试了几个用户名和密码组合后，我们看到成功使用 **adminuser2** 作为用户名，**password** 作为密码进行了身份验证！
- en: Note
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This step may take around 3-5 minutes to complete.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 这个步骤可能需要大约 3-5 分钟才能完成。
- en: 'List the existing sessions by running the following command:'
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令列出现有会话：
- en: '[PRE50]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This should return three active sessions, similar to what is shown in *Figure
    6**.39*:'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会返回三个活跃会话，类似于 *图 6.39* 中所示：
- en: '![](image/B19755_06_039.jpg)'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_039.jpg)'
- en: Figure 6.39 – List of active sessions
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.39 – 活跃会话列表
- en: 'Here, we can see that we have a third active session, which allows us to access
    (and control) the second target instance (**vm-target-02**):'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们看到有第三个活跃会话，它允许我们访问（并控制）第二个目标实例（**vm-target-02**）：
- en: '![](image/B19755_06_040.jpg)'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_040.jpg)'
- en: Figure 6.40 – A new session that accesses the second target instance
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.40 – 访问第二个目标实例的新会话
- en: At this point, we have two sessions connecting the attacker instance (**vm-kali**)
    with the first target instance (**target-vm-01**) and one session connecting the
    first target instance with the second target instance (**target-vm-02**).
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此时，我们有两个会话连接攻击者实例（**vm-kali**）和第一个目标实例（**target-vm-01**），以及一个会话连接第一个目标实例和第二个目标实例（**target-vm-02**）。
- en: 'Now, let’s access the second target instance (**target-vm-02**) using the following
    command:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令访问第二个目标实例（**target-vm-02**）：
- en: '[PRE51]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This will allow us to interact with the session and execute commands.
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将允许我们与会话互动并执行命令。
- en: 'Run the following command to check the username of the current user:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来检查当前用户的用户名：
- en: '[PRE52]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: This should yield **adminuser2** as the output, indicating that we are currently
    logged in as the **adminuser2** user.
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会返回 **adminuser2**，表示我们当前以 **adminuser2** 用户身份登录。
- en: 'Elevate privileges to **root** by running the following command:'
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令提升权限至 **root**：
- en: '[PRE53]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Note
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Looks like passwordless sudo has been configured for **adminuser2**! If you
    are wondering how this was configured, simply locate and check the **user_data**
    attribute of the **aws_instance** resource blocks in our Terraform configuration
    code (in CloudShell).
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来已经为 **adminuser2** 配置了无密码 sudo！如果你想知道这是如何配置的，只需在我们的 Terraform 配置代码（在 CloudShell
    中）中找到并检查 **aws_instance** 资源块的 **user_data** 属性。
- en: 'Run the following command to check the username of the current user:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来检查当前用户的用户名：
- en: '[PRE54]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'This should give us the following output:'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会给我们以下输出：
- en: '![](image/B19755_06_041.jpg)'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_06_041.jpg)'
- en: Figure 6.41 – Result after running the whoami command after sudo su
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.41 – 运行 sudo su 后执行 whoami 命令的结果
- en: In *Figure 6**.41*, we can see that running the **whoami** command (after **sudo
    su**) yields **root** as the output, indicating that we are currently logged in
    as the **root** user.
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 *图 6.41* 中，我们可以看到在运行 **sudo su** 后执行 **whoami** 命令的输出为 **root**，表示我们当前以 **root**
    用户身份登录。
- en: 'Let’s locate the second flag by running the following command:'
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过运行以下命令来定位第二个标志：
- en: '[PRE55]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'This will search the entire filesystem for files starting with **flag**. After
    a few minutes, we should get a list of results that includes a **/****root/flag.txt**
    file:'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将搜索整个文件系统，查找以 **flag** 开头的文件。几分钟后，我们应该会得到一个结果列表，其中包括 **/****root/flag.txt**
    文件：
- en: '[PRE56]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Looks like we found the flag file!
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 看起来我们找到了标志文件！
- en: Note
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This step may take around 2-4 minutes to complete.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 这个步骤可能需要大约2-4分钟来完成。
- en: 'Now, let’s check the contents of **/root/flag.txt**:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们检查**/root/flag.txt**的内容：
- en: '[PRE57]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'This should give us **FLAG #** **2!**.'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '这应该会给我们带来**FLAG #** **2!**。'
- en: Next, press *Ctrl* + *Z* to run the session in background mode. When prompted
    with **Background session 3? [y/N]**, enter **y** to proceed.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按*Ctrl* + *Z*将会话切换到后台模式。当提示**Background session 3? [y/N]**时，输入**y**以继续。
- en: 'Finally, let’s exit **msfconsole** using the following command:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们使用以下命令退出**msfconsole**：
- en: '[PRE58]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: That’s pretty much it! At this point, we have completed the penetration testing
    simulation.
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 就这些！到目前为止，我们已经完成了渗透测试模拟。
- en: 'Right now, you are probably excited to try out other pivoting techniques! Given
    that we have automated the setup process, we can simply run the following command
    to rebuild the target environment:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能很想尝试其他的跳板技术！由于我们已经自动化了设置过程，我们可以简单地运行以下命令来重建目标环境：
- en: '[PRE59]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Running this command will destroy and recreate the resources identified by **<RESOURCE
    ADDRESS>**, along with other resources related to or dependent on it. Given that
    penetration testing activities may leave the infrastructure in an unstable or
    misconfigured state, rebuilding the infrastructure will return it to the desired
    state.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令将销毁并重建由**<RESOURCE ADDRESS>**标识的资源，以及与其相关或依赖的其他资源。由于渗透测试活动可能会使基础设施处于不稳定或配置错误的状态，重建基础设施将使其恢复到所需状态。
- en: Cleaning up
  id: totrans-450
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理中
- en: Wait a minute... we are not done yet! Cleaning up the cloud resources we created
    or deployed is a crucial step when working with penetration testing lab environments.
    If we don’t clean up and delete the resources we created right away, we might
    end up paying for unused cloud resources.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下……我们还没完成呢！清理我们创建或部署的云资源是在渗透测试实验环境中工作时的关键步骤。如果我们不立即清理和删除创建的资源，我们可能会为未使用的云资源付费。
- en: At a minimum, we will be paying for the time the **t3.medium** EC2 instance
    (for the attacker instance) and the two **t2.micro** EC2 instances (for the target
    instances) are running. Note that there are other costs we should consider as
    well, including data transfer fees, storage costs for any persistent data used
    by the instances (such as EBS volumes attached to the EC2 instances), potential
    charges for additional AWS services utilized in the lab environment (for example,
    monitoring logs), and any applicable taxes or fees associated with AWS usage.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 最少情况下，我们将支付**t3.medium** EC2实例（攻击者实例）和两个**t2.micro** EC2实例（目标实例）运行的时间费用。请注意，我们还需要考虑其他成本，包括数据传输费用、实例使用的任何持久性数据的存储费用（如附加到EC2实例的EBS卷）、实验环境中使用的其他AWS服务的潜在费用（例如，监控日志）以及与AWS使用相关的任何适用税费或费用。
- en: Note
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Since the overall cost when running these resources depends on several parameters,
    it is best to refer to the pricing documentation page provided by the cloud platform:
    [https://aws.amazon.com/ec2/pricing/on-demand/](https://aws.amazon.com/ec2/pricing/on-demand/).
    You may also use the **AWS Pricing Calculator** to help you estimate the cost
    of running resources on AWS. You can access the AWS Pricing Calculator here: [https://calculator.aws/](https://calculator.aws/).'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 由于运行这些资源的整体成本取决于多个参数，最好参考云平台提供的定价文档页面：[https://aws.amazon.com/ec2/pricing/on-demand/](https://aws.amazon.com/ec2/pricing/on-demand/)。你还可以使用**AWS定价计算器**来帮助估算在AWS上运行资源的成本。你可以在这里访问AWS定价计算器：[https://calculator.aws/](https://calculator.aws/)。
- en: 'That being said, let’s proceed with deleting the resources we created in this
    chapter:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们继续删除在本章中创建的资源：
- en: 'In the AWS CloudShell Terminal, navigate to the **~/pentest_lab** directory
    and then use **terraform destroy** to clean up the resources we created earlier:'
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWS CloudShell终端中，导航到**~/pentest_lab**目录，然后使用**terraform destroy**来清理我们之前创建的资源：
- en: '[PRE60]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Feel free to run the **terraform destroy** command a few times in case some
    resources fail to delete (or take a bit of time to delete). Alternatively, you
    may delete resources manually using the user interface if all else fails.
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果某些资源删除失败（或需要一些时间删除），可以随时运行**terraform destroy**命令几次。或者，如果一切都失败，你也可以通过用户界面手动删除资源。
- en: Note
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This step may take 10-15 minutes to complete. Feel free to grab a snack while
    waiting!
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 这个步骤可能需要10-15分钟才能完成。等待时可以随便吃点零食！
- en: 'Verify that the resources have been destroyed successfully using the following
    command:'
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令验证资源是否已成功销毁：
- en: '[PRE61]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: This should return an empty response since all the resources should have been
    deleted successfully.
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于所有资源应该已经成功删除，因此此操作应返回空响应。
- en: Important note
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Make sure you leverage the **AWS Billing Dashboard** to conduct a comprehensive
    audit of your AWS account. It offers features such as **Cost Explorer** for visualizing
    spending patterns, detailed billing reports for service breakdowns, and budgeting
    tools with alerts to help users proactively manage expenses. Using the different
    features of the AWS Billing Dashboard will help ensure that all resources have
    been properly deleted and minimize the risk of unintended costs.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 确保利用**AWS账单仪表板**对您的AWS账户进行全面审计。它提供了**成本探索器**等功能，用于可视化开支模式，详细的账单报告，用于服务细分，以及带有提醒的预算工具，帮助用户主动管理费用。使用AWS账单仪表板的不同功能将帮助确保所有资源已正确删除，并减少意外费用的风险。
- en: That’s pretty much it! At this point, we should have a good idea of how to prepare
    penetration testing lab environments on AWS. Feel free to tweak the Terraform
    configuration code and evolve the current lab environment setup so that you have
    more target resources and subnets (along with a more complex network configuration
    setup).
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！此时，我们应该已经对如何在AWS上准备渗透测试实验室环境有了清晰的了解。您可以自由调整Terraform配置代码，并扩展当前实验室环境的设置，以便拥有更多的目标资源和子网（以及更复杂的网络配置设置）。
- en: Summary
  id: totrans-467
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed how to set up a pivoting lab on AWS where we can
    practice pivoting techniques. We started by using Terraform to automatically build
    a simple environment with an attacker instance, along with two target instances.
    We then tested the network connectivity and security of the lab to validate the
    network configuration specified in the Terraform code. Lastly, we performed a
    penetration testing simulation to verify if the lab environment had been set up
    properly.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何在AWS上设置一个跳板实验室，在这个实验室中，我们可以练习跳板技术。我们从使用Terraform自动构建一个简单的环境开始，该环境包括一个攻击者实例和两个目标实例。然后，我们测试了实验室的网络连接性和安全性，以验证Terraform代码中指定的网络配置。最后，我们进行了渗透测试模拟，以验证实验室环境是否已正确设置。
- en: Now that we’ve finished this chapter, we will shift our focus to preparing an
    IAM privilege escalation lab environment in the next chapter. If you are wondering
    how an IAM privilege escalation lab is (mis)configured, then the next chapter
    is for you!
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了本章内容，接下来我们将重点准备IAM权限提升实验室环境。如果你想知道IAM权限提升实验室是如何（错误地）配置的，那么下一章将会很适合你！
- en: Further reading
  id: totrans-470
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For additional information on the topics covered in this chapter, you may find
    the following resources helpful:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多本章所涉及的主题，以下资源可能会对您有所帮助：
- en: '*Amazon Virtual Private Cloud – What is VPC* *peering?* ([https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html))'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Amazon虚拟私有云 – 什么是VPC* *对等连接*？([https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html))'
- en: '*Amazon Virtual Private Cloud – What is Network Access* *Analyzer?* ([https://docs.aws.amazon.com/vpc/latest/network-access-analyzer/what-is-network-access-analyzer.html](https://docs.aws.amazon.com/vpc/latest/network-access-analyzer/what-is-network-access-analyzer.html))'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Amazon虚拟私有云 – 什么是网络访问* *分析器？* ([https://docs.aws.amazon.com/vpc/latest/network-access-analyzer/what-is-network-access-analyzer.html](https://docs.aws.amazon.com/vpc/latest/network-access-analyzer/what-is-network-access-analyzer.html))'
- en: '*New – VPC Reachability* *Analyzer* ([https://aws.amazon.com/blogs/aws/new-vpc-insights-analyzes-reachability-and-visibility-in-vpcs/](https://aws.amazon.com/blogs/aws/new-vpc-insights-analyzes-reachability-and-visibility-in-vpcs/))'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*新增 – VPC可达性* *分析器* ([https://aws.amazon.com/blogs/aws/new-vpc-insights-analyzes-reachability-and-visibility-in-vpcs/](https://aws.amazon.com/blogs/aws/new-vpc-insights-analyzes-reachability-and-visibility-in-vpcs/))'
- en: '*AWS Architecture Blog – Reduce Cost and Increase Security with Amazon VPC*
    *Endpoints* ([https://aws.amazon.com/blogs/architecture/reduce-cost-and-increase-security-with-amazon-vpc-endpoints/](https://aws.amazon.com/blogs/architecture/reduce-cost-and-increase-security-with-amazon-vpc-endpoints/))'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*AWS架构博客 – 使用Amazon VPC* *终端节点* 降低成本并提高安全性 ([https://aws.amazon.com/blogs/architecture/reduce-cost-and-increase-security-with-amazon-vpc-endpoints/](https://aws.amazon.com/blogs/architecture/reduce-cost-and-increase-security-with-amazon-vpc-endpoints/))'
- en: '*AWS Architecture Blog – One to Many: Evolving VPC* *Design* ([https://aws.amazon.com/blogs/architecture/one-to-many-evolving-vpc-design/](https://aws.amazon.com/blogs/architecture/one-to-many-evolving-vpc-design/))'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*AWS架构博客 – 一对多：演进的VPC* *设计* ([https://aws.amazon.com/blogs/architecture/one-to-many-evolving-vpc-design/](https://aws.amazon.com/blogs/architecture/one-to-many-evolving-vpc-design/))'
- en: '*AWS re:Invent 2022 – Advanced VPC design and new Amazon VPC* *capabilities*
    ([https://www.youtube.com/watch?v=cbUNbK8ZdA0](https://www.youtube.com/watch?v=cbUNbK8ZdA0))'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*AWS re:Invent 2022 – 高级VPC设计和新的Amazon VPC* *功能* ([https://www.youtube.com/watch?v=cbUNbK8ZdA0](https://www.youtube.com/watch?v=cbUNbK8ZdA0))'
- en: '*Upgrading shells to* *Meterpreter* ([https://docs.metasploit.com/docs/pentesting/metasploit-guide-upgrading-shells-to-meterpreter.html](https://docs.metasploit.com/docs/pentesting/metasploit-guide-upgrading-shells-to-meterpreter.html))'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将shell升级为* *Meterpreter* ([https://docs.metasploit.com/docs/pentesting/metasploit-guide-upgrading-shells-to-meterpreter.html](https://docs.metasploit.com/docs/pentesting/metasploit-guide-upgrading-shells-to-meterpreter.html))'
- en: '*Pivoting in* *Metasploit* ([https://docs.metasploit.com/docs/using-metasploit/intermediate/pivoting-in-metasploit.html](https://docs.metasploit.com/docs/using-metasploit/intermediate/pivoting-in-metasploit.html))'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在* *Metasploit* *中进行枢纽转移* ([https://docs.metasploit.com/docs/using-metasploit/intermediate/pivoting-in-metasploit.html](https://docs.metasploit.com/docs/using-metasploit/intermediate/pivoting-in-metasploit.html))'
- en: '*Network* *Segmentation* ([https://www.vmware.com/topics/glossary/content/network-segmentation.html](https://www.vmware.com/topics/glossary/content/network-segmentation.html))'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*网络* *分割* ([https://www.vmware.com/topics/glossary/content/network-segmentation.html](https://www.vmware.com/topics/glossary/content/network-segmentation.html))'
- en: 'Part 3: Exploring Advanced Strategies and Best Practices in Lab Environment
    Design'
  id: totrans-481
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3部分：探索实验室环境设计中的高级策略和最佳实践
- en: In this part, you will explore the various strategies and best practices for
    building penetration testing lab environments in the cloud.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分中，您将探索在云中构建渗透测试实验室环境的各种策略和最佳实践。
- en: 'This part contains the following chapters:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '*[Chapter 7](B19755_07.xhtml)*, *Setting Up* *an IAM Privilege Escalation Lab*'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*[第7章](B19755_07.xhtml)*，*建立* *IAM特权升级实验室*'
- en: '*[Chapter 8](B19755_08.xhtml)*, *Designing and Building a Vulnerable Active
    Directory Lab*'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*[第8章](B19755_08.xhtml)*，*设计和构建一个易受攻击的活动目录实验室*'
- en: '*[Chapter 9](B19755_09.xhtml)*, *Recommended Strategies and Best Practices*'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*[第9章](B19755_09.xhtml)*，*推荐策略和最佳实践*'
