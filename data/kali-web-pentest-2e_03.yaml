- en: Using Proxies, Crawlers, and Spiders
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代理、爬虫和蜘蛛
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Finding files and folders with Dirb
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Dirb 查找文件和文件夹
- en: Finding files and folders with ZAP
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ZAP 查找文件和文件夹
- en: Using Burp Suite to view and alter requests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Burp Suite 查看和修改请求
- en: Using Burp Suite's intruder to find files and folders
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Burp Suite 的入侵者查找文件和文件夹
- en: Using the ZAP proxy to view and alter requests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ZAP 代理查看和修改请求
- en: Using ZAP spider
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ZAP 蜘蛛
- en: Using Burp Suite to spider a website
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Burp Suite 对网站进行爬虫扫描
- en: Repeating requests with Burp Suite's repeater
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Burp Suite 的重放器重复请求
- en: Using WebScarab
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 WebScarab
- en: Identifying relevant files and directories from crawling results
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从爬取结果中识别相关的文件和目录
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: A penetration test may be performed using different approaches called black,
    grey, and white box. Black box is when the testing team doesn't have any previous
    information about the application to test except the URL of the server; white
    box is when the team has all information about the target, its infrastructure,
    software versions, test users, development information, and so on; and gray box
    is a point in between.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试可以采用不同的方式进行，分别为黑盒、灰盒和白盒。黑盒是指测试团队除了服务器的 URL 外，对应用程序没有任何先验信息；白盒是指团队拥有目标的所有信息，包括其基础设施、软件版本、测试用户、开发信息等；灰盒则介于两者之间。
- en: For both black and gray box approaches, a reconnaissance phase, as we saw in
    the previous chapter, is necessary for the testing team to discover the information
    that could be provided by the application's owner in a white box approach.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于黑盒和灰盒方法，正如我们在前一章中所见，侦察阶段是必要的，测试团队需要通过这个阶段来发现应用程序所有者在白盒方法中可能提供的信息。
- en: Continuing with the reconnaissance phase in a web penetration test, we will
    need to browse every link included in a web page and have a record of every file
    displayed by it. There are tools that help us to automate and accelerate this
    task; they are called web crawlers or web spiders. These tools browse a web page
    following all links and references to external files, sometimes filling in forms
    and sending them to servers, saving all requests and responses made and giving
    us the opportunity to analyze them offline.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Web 渗透测试的侦察阶段，我们需要浏览网页中的每个链接，并记录每个显示的文件。我们可以使用工具来自动化并加速这一任务，这些工具称为网络爬虫或 Web
    蜘蛛。这些工具会浏览网页，跟随所有链接和外部文件的引用，有时会填写表单并将其提交到服务器，保存所有请求和响应，给我们提供离线分析的机会。
- en: In this chapter, we will cover the use of some proxies, spiders, and crawlers
    included in Kali Linux and will also see what files and directories would be interesting
    to look for in a common web page.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 Kali Linux 中一些代理、蜘蛛和爬虫的使用，并了解在常见网页中可能需要寻找的文件和目录。
- en: Finding files and folders with DirBuster
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 DirBuster 查找文件和文件夹
- en: DirBuster is a tool created to discover, by brute force or by comparison with
    a wordlist, the existing files and directories in a web server. We will use it
    in this recipe to search for a specific list of files and directories.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: DirBuster 是一个工具，通过暴力破解或与字典文件比较来发现 Web 服务器中存在的文件和目录。在本教程中，我们将使用它来查找特定的文件和目录列表。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will use a text file that contains the list of words that we will ask DirBuster
    to look for. Create a text file, `dir_dictionary.txt`, containing the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个包含我们将要求 DirBuster 查找的单词列表的文本文件。创建一个名为 `dir_dictionary.txt` 的文本文件，其中包含以下内容：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'DirBuster is an application made in Java; it can be called from Kali''s main
    menu or from a terminal using the `dirbuster` command. The following are the steps
    required to make such call:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: DirBuster 是一个用 Java 编写的应用程序；可以通过 Kali 的主菜单或使用 `dirbuster` 命令从终端调用它。以下是进行此类调用所需的步骤：
- en: Navigate to Applications | 03 - Web Application Analysis | Web Crawlers & Directory
    Bruteforcing | Dirbuster.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至应用程序 | 03 - Web 应用分析 | 网络爬虫与目录暴力破解 | Dirbuster。
- en: In the DirBuster window, set the target URL to `http://192.168.56.11/`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 DirBuster 窗口中，将目标 URL 设置为 `http://192.168.56.11/`。
- en: Set the number of threads to 20 to have a decent testing speed.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将线程数设置为 20，以确保有一个不错的测试速度。
- en: Select List based brute force and click on Browse.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择基于列表的暴力破解，并点击浏览。
- en: In the browsing window, select the file we just created (`dir_dictionary.txt`).
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览窗口中，选择我们刚刚创建的文件（`dir_dictionary.txt`）。
- en: Uncheck the Be Recursive option.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消勾选“递归”选项。
- en: 'For this recipe, we will leave the rest of options at their defaults:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于本教程，我们将其他选项保持默认设置：
- en: '![](assets/8279f370-4fc1-4133-a036-94b5c7577e99.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8279f370-4fc1-4133-a036-94b5c7577e99.png)'
- en: Click on Start.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击启动。
- en: 'If we go to the Results tab, we will see that DirBuster has found at least
    two of the files in our dictionary: `cgi-bin` and `phpmyadmin`. The response code
    200 means that the file or directory exists and can be read. `phpmyadmin` is a
    web-based MySQL database administrator; finding a directory with this name tells
    us that there is a **database management system** (**DBMS**) in the server and
    it may contain relevant information about the application and its users:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们进入结果标签，我们会看到 DirBuster 至少找到了我们字典中的两个文件：`cgi-bin` 和 `phpmyadmin`。响应代码 200
    意味着文件或目录存在并且可以读取。`phpmyadmin` 是一个基于 Web 的 MySQL 数据库管理工具；找到这个名称的目录告诉我们服务器中可能存在一个**数据库管理系统**（**DBMS**），并且可能包含有关应用程序及其用户的相关信息：
- en: '![](assets/0e2847d8-74a9-4507-9be4-8550702de7aa.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0e2847d8-74a9-4507-9be4-8550702de7aa.png)'
- en: How it works...
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: DirBuster is a mixture of a crawler and brute forcer; it follows all links in
    the pages it finds but also tries different names for possible files. These names
    may be in a file similar to the one we used or may be automatically generated
    by DirBuster using the option of Pure Brute Force and setting the character set
    and minimum and maximum lengths for the generated words.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: DirBuster 是爬虫和暴力破解工具的结合体；它会跟踪页面中的所有链接，同时也会尝试不同的文件名。这些文件名可能与我们使用的文件相似，或者可能是 DirBuster
    通过纯暴力破解选项自动生成的，设置字符集以及生成单词的最小和最大长度。
- en: 'To determine if a file exists or not, DirBuster uses the response codes from
    the server. The most common responses are listed as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定文件是否存在，DirBuster 使用来自服务器的响应代码。最常见的响应如下所示：
- en: '200 OK: The file exists and the user can read it'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 200 OK：文件存在，用户可以读取
- en: '404 File not found: The file does not exist in the server'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 404 File not found：文件在服务器中不存在
- en: '301 Moved permanently: This is a redirect to a given URL'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 301 Moved permanently：这是一个重定向到指定 URL 的响应
- en: '401 Unauthorized: Authentication is required to access this file'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 401 Unauthorized：访问该文件需要认证
- en: '403 Forbidden: Request was valid but the server refuses to respond'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 403 Forbidden：请求有效，但服务器拒绝响应
- en: See also
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: '`dirb` is a command-line tool included in Kali Linux that also takes a dictionary
    file to forcefully browse into a server to identify existing files and directories.
    To see its syntax and options, open a terminal and enter the `# dirb` command.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`dirb` 是 Kali Linux 中的一个命令行工具，它同样使用字典文件强制浏览服务器，以识别现有的文件和目录。要查看其语法和选项，可以打开终端并输入
    `# dirb` 命令。'
- en: Finding files and folders with ZAP
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ZAP 查找文件和文件夹
- en: OWASP **Zed Attack Proxy** (**ZAP**) is a very versatile tool for web security
    testing. It has a proxy, passive and active vulnerability scanners, fuzzer, spider,
    HTTP request sender, and some other interesting features. In this recipe, we will
    use the recently added **Forced Browse**, which is the implementation of DirBuster
    inside ZAP.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP **Zed Attack Proxy**（**ZAP**）是一个功能非常强大的网络安全测试工具。它包括代理、被动和主动漏洞扫描器、模糊测试器、爬虫、HTTP
    请求发送器以及一些其他有趣的功能。在本食谱中，我们将使用最近添加的**强制浏览**功能，它是 ZAP 内部实现的 DirBuster。
- en: Getting ready
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe to work, we need to use ZAP as a proxy for our web browser:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使本食谱生效，我们需要将 ZAP 作为我们的网络浏览器的代理：
- en: Start OWASP ZAP from Kali Linux menu and, from the application's menu, navigate
    to Applications | 03 - Web Application Analysis | owasp-zap.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Kali Linux 菜单启动 OWASP ZAP，然后从应用程序菜单中依次导航到应用程序 | 03 - Web 应用分析 | owasp-zap。
- en: 'Next, we''ll change ZAP''s proxy settings. By default, it uses port `8080`,
    but that may interfere with other proxies like Burp Suite if we have them running
    at the same time. In ZAP, go to Tools | Options | Local Proxies and change the
    port to `8088`:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将更改 ZAP 的代理设置。默认情况下，它使用 `8080` 端口，但如果我们同时运行其他代理（如 Burp Suite），这可能会产生冲突。在
    ZAP 中，依次进入工具 | 选项 | 本地代理，并将端口更改为 `8088`：
- en: '![](assets/b7bd2177-ba9e-490d-96bd-625631c5d713.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b7bd2177-ba9e-490d-96bd-625631c5d713.png)'
- en: Now, in Firefox, go to the main menu and navigate to Preferences | Advanced
    | Network; in Connection, click on Settings.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 Firefox 中，进入主菜单，依次导航到首选项 | 高级 | 网络；在连接设置中，点击设置。
- en: 'Choose a Manual proxy configuration and set `127.0.0.1` as the HTTP Proxy and
    `8088` as the Port. Check the option to use the same proxy for all protocols and
    then click on OK:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择手动代理配置，并设置 `127.0.0.1` 为 HTTP 代理，`8088` 为端口。勾选“对所有协议使用相同的代理”选项，然后点击 OK：
- en: '![](assets/f280dfe4-d64e-4950-826e-b31fcdc6d7b7.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f280dfe4-d64e-4950-826e-b31fcdc6d7b7.png)'
- en: 'We can also use the FoxyProxy plugin to set up multiple proxy settings and
    switch between them with just a click:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以使用 FoxyProxy 插件来设置多个代理配置，并通过点击切换它们：
- en: '![](assets/6bccb89a-f271-4aff-ab2c-519b97c3a930.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6bccb89a-f271-4aff-ab2c-519b97c3a930.png)'
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Now that we have the browser and proxy configured, we are ready to scan a server
    for existing folders using the following steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置好了浏览器和代理，准备好按照以下步骤扫描服务器以查找现有文件夹：
- en: Having configured the proxy properly, browse to `http://192.168.56.11/WackoPicko`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置好代理后，浏览到 `http://192.168.56.11/WackoPicko`。
- en: We will see ZAP reacting to this action by showing the tree structure of the
    host
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将看到 ZAP 对此操作的反应，通过显示主机的树形结构
- en: we just visited.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们刚刚访问的。
- en: 'Now, in ZAP''s upper-left panel (the Sites tab), right-click on the `WackoPicko`
    folder inside the `http://192.168.56.11` site. Then, in the context menu, navigate
    to Attack | Forced Browse directory (and children); this will do a recursive scan:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 ZAP 的左上角面板（Sites 标签）中，右键点击 `http://192.168.56.11` 网站中的 `WackoPicko` 文件夹。然后，在右键菜单中，导航到攻击
    | 强制浏览目录（及其子目录）；这将执行递归扫描：
- en: '![](assets/a12cf8a7-bc71-4c33-85ce-2014873f86cb.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a12cf8a7-bc71-4c33-85ce-2014873f86cb.png)'
- en: 'In the bottom panel, we will see that the Forced Browse tab is displayed. Here
    we can see the progress of the scan and its results:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在底部面板中，我们可以看到显示了 Forced Browse 标签。在这里我们可以看到扫描的进度及其结果：
- en: '![](assets/ae09b5ab-4904-4918-910a-a36b5a3bc85a.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ae09b5ab-4904-4918-910a-a36b5a3bc85a.png)'
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: A proxy is an application that acts as an intermediary between a client and
    a server or a group of servers providing different services. The client requests
    a service from the proxy and this has the ability to forward the request to the
    appropriate server and get the response back from the client.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 代理是一个充当客户端与服务器或提供不同服务的服务器群之间中介的应用程序。客户端向代理请求服务，代理具有将请求转发给适当的服务器并从服务器获取响应的能力。
- en: When we configure our browser to use ZAP as a proxy, it doesn't send the requests
    directly to the server that hosts the pages we want to see but rather to the address
    we defined. In this case the one where ZAP is listening. Then, ZAP forwards the
    request to the server but not without registering and analyzing the information
    we sent.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们配置浏览器使用 ZAP 作为代理时，它并不会直接将请求发送到托管我们要查看的页面的服务器，而是发送到我们定义的地址。在这个案例中，就是 ZAP 正在监听的地址。然后，ZAP
    将请求转发给服务器，但不会在没有记录和分析我们发送的信息的情况下直接转发。
- en: ZAP's Forced Browse works the same way that DirBuster does; it takes the dictionary
    we configured and sends requests to the server, as if it were trying to browse
    to the files in the list. If the files exist, the server will respond accordingly;
    if they don't exist or aren't accessible by our current user, the server will
    return an error.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ZAP 的 Forced Browse 与 DirBuster 的工作原理相同；它会使用我们配置的字典，向服务器发送请求，就像是在尝试访问列表中的文件一样。如果文件存在，服务器会作出响应；如果文件不存在或当前用户无法访问，服务器会返回错误。
- en: See also
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参见
- en: Another very useful proxy included in Kali Linux is Burp Suite. It also has
    some very interesting features; one that can be used as an alternative for the
    Forced Browse we just used is Burp's Intruder. Although it is not specifically
    intended for that purpose, it is a versatile tool worth checking out.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常有用的代理工具是 Kali Linux 中包含的 Burp Suite。它也有一些非常有趣的功能；其中一个可以作为我们刚刚使用的 Forced
    Browse 的替代工具，就是 Burp 的 Intruder。尽管它并不是专门为此目的设计的，但它是一个多功能的工具，值得一试。
- en: Using Burp Suite to view and alter requests
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Burp Suite 查看和修改请求
- en: Burp Suite is more than a simple web proxy. It is a full-featured web application
    testing kit. It has a proxy, request repeater, fuzzer, request automation, string
    encoder and decoder, vulnerability scanners (in the Pro version), plugins to extend
    its functionality, and other useful features.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite 不仅仅是一个简单的 Web 代理工具，它是一个功能全面的 Web 应用测试工具包。它包含代理、请求重放器、模糊测试工具、请求自动化、字符串编码和解码器、漏洞扫描器（在专业版中提供）、插件以扩展功能，以及其他有用的功能。
- en: In this recipe, we will use Burp Suite's proxy features to intercept a request
    between the browser and the server and alter its contents.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 Burp Suite 的代理功能，拦截浏览器与服务器之间的请求并修改其内容。
- en: Getting ready
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Start Burp Suite from the applications menu, Applications | 03 - Web Application
    Analysis | Burpsuite, or by typing the command from the terminal, and set up the
    browser to use it as proxy on port `8080`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从应用菜单启动 Burp Suite，路径为应用 | 03 - Web 应用分析 | Burpsuite，或者通过终端输入命令启动，并将浏览器配置为通过
    `8080` 端口使用它作为代理。
- en: How to do it...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To make things a little more interesting, let''s use this interception/modification
    technique to bypass a basic protection mechanism. Perform the following steps:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让事情更有趣一点，让我们使用这个拦截/修改技巧绕过一个基本的保护机制。请执行以下步骤：
- en: Browse to OWASP Bricks and go to the exercise Upload 2 (`http://192.168.56.11/owaspbricks/upload-2`).
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到 OWASP Bricks 并进入练习 Upload 2（`http://192.168.56.11/owaspbricks/upload-2`）。
- en: 'Request interception is enabled by default in Burp Suite; if the page won''t
    load, go to Burp Suite then to Proxy | Intercept and click on the pressed button, Intercept
    is on:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Burp Suite 默认启用了请求拦截；如果页面无法加载，请转到 Burp Suite 然后选择 Proxy | Intercept 并点击按下的按钮，拦截已开启：
- en: '![](assets/20ca9e43-3e41-4bdc-b610-3ec58c225daa.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/20ca9e43-3e41-4bdc-b610-3ec58c225daa.png)'
- en: 'Here we have a file upload form that is supposed to upload only images. Let''s
    try to upload one. Click on Browse and select any image file (PNG, JPG, or BMP):'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里我们有一个文件上传表单，应该只允许上传图像。让我们尝试上传一个。点击浏览并选择任何图像文件（PNG、JPG 或 BMP）：
- en: '![](assets/fda352e1-668d-4c9a-8a93-6d3084600234.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fda352e1-668d-4c9a-8a93-6d3084600234.png)'
- en: 'After clicking Open, click Upload and verify that the file was uploaded:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击打开后，点击上传并验证文件是否上传成功：
- en: '![](assets/f7aab7b5-7141-4430-8e32-7bcdf9c3d42b.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f7aab7b5-7141-4430-8e32-7bcdf9c3d42b.png)'
- en: 'Now let''s try to see what happens if we upload a different type of file, let''s
    say, an HTML file:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们尝试看看如果我们上传另一种类型的文件，会发生什么，比如说，HTML 文件：
- en: '![](assets/e00b83b1-746b-4c14-b453-ae8adb97907c.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e00b83b1-746b-4c14-b453-ae8adb97907c.png)'
- en: Looks like, as mentioned in the exercise description, the server is validating
    the file type being uploaded. To bypass this restriction, we first enable the
    request interception in Burp Suite.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看起来，如练习描述所说，服务器正在验证上传的文件类型。为了绕过这个限制，我们首先在 Burp Suite 中启用请求拦截。
- en: Browse for the HTML file and try to upload it again.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到 HTML 文件并再次尝试上传它。
- en: 'Burp will capture the request:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Burp 会捕获请求：
- en: '![](assets/5b75346a-1c6d-4a1c-a3c7-b35bfc5d7bd0.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5b75346a-1c6d-4a1c-a3c7-b35bfc5d7bd0.png)'
- en: Here we can see a `POST` request that is `multipart` (first `Content-Type` header)
    and the delimiter for each part is a long series of dashes (-) and a long number.
    Next, in the first part, we have the file we want to upload with its information
    and its own `Content-Type`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到一个 `POST` 请求，它是 `multipart`（第一个 `Content-Type` 头部），每个部分的分隔符是一长串的破折号
    (-) 和一个长数字。接下来，在第一部分，我们可以看到我们要上传的文件以及它的信息和它自己的 `Content-Type`。
- en: 'We know the server only accepts images, so let''s change the header for one
    that says that the file we are uploading is an image:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们知道服务器只接受图像文件，所以让我们更改头部，将其改为表示我们上传的文件是图像的类型：
- en: '![](assets/9f201db4-cfcf-4f99-b0da-1f55cb9bd5bd.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9f201db4-cfcf-4f99-b0da-1f55cb9bd5bd.png)'
- en: Next, we submit the request by clicking Forward if we want to continue intercepting
    requests, or by disabling the interceptions if we don't.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们通过点击“转发”提交请求，如果我们希望继续拦截请求，或者如果不希望拦截，则禁用拦截。
- en: 'And the upload was successful. If we roll our mouse pointer over the here word
    we will see that it is a link to our file:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传成功了。如果我们将鼠标指针移动到这里的单词上，我们会看到它是指向我们文件的链接：
- en: '![](assets/7d4cea11-997d-4ddb-b9a4-9370b5f3aa00.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7d4cea11-997d-4ddb-b9a4-9370b5f3aa00.png)'
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we used Burp Suite as a proxy to capture a request after it
    passed the validation mechanisms established client-side by the application, that
    is, in the browser, and then modified such request content by changing the `Content-Type`
    header and used that to bypass the file type restrictions in the application.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个案例中，我们使用 Burp Suite 作为代理捕获一个请求，捕获该请求时它已经通过了应用程序在客户端（即浏览器）建立的验证机制，然后修改了该请求的内容，通过更改
    `Content-Type` 头部来绕过应用程序中的文件类型限制。
- en: '`Content-Type` is a standard HTTP header set by the client, particularly in
    `POST` and `PUT` requests, to indicate to the server the type of data it is receiving.
    It''s not uncommon for web applications to use this field and the file''s extension
    to filter out dangerous or unauthorized types in applications that allow users
    to upload files. As we just saw, this sole protective measure is insufficient
    when it comes to preventing a user to upload malicious content to the server.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`Content-Type` 是由客户端设置的标准 HTTP 头部，特别是在 `POST` 和 `PUT` 请求中，用于向服务器指示它接收的数据类型。在允许用户上传文件的应用程序中，Web
    应用程序通常使用此字段和文件扩展名来筛选出危险或未经授权的类型。正如我们刚才看到的，仅凭这个保护措施不足以防止用户上传恶意内容到服务器。'
- en: Being able to intercept and modify requests is a highly important aspect of
    any web application penetration test, not only to bypass some client-side validation—as
    we did in this recipe—but to study what kind of information is sent and to try
    to understand the inner workings of the application. We also may need to add,
    remove, or replace some values for our convenience based on that understanding.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 能够拦截和修改请求是任何 web 应用渗透测试中非常重要的一个方面，不仅可以绕过一些客户端验证—正如我们在这个示例中所做的那样—还可以研究发送了哪些信息，并尝试理解应用的内部工作原理。我们还可能需要根据对这些内容的理解，为了方便起见，添加、删除或替换一些值。
- en: See also
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: 'It is very important for a penetration tester to understand how the HTTP protocol
    works. For a better understanding of the different HTTP methods refer to:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试人员必须理解 HTTP 协议的工作原理。要更好地理解不同的 HTTP 方法，请参考：
- en: '[https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)'
- en: '[https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)'
- en: Using Burp Suite's Intruder to find files and folders
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Burp Suite 的 Intruder 查找文件和文件夹
- en: Burp Intruder is a tool that allows us to replay a request automatically, altering
    parts of such request accordingly to lists of inputs that we can set or generate
    according to configurable rules.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Intruder 是一个工具，可以让我们自动重放请求，按照我们设置或根据可配置规则生成的输入列表来修改请求的部分内容。
- en: Although it's not its main purpose, we can use Intruder to find existing yet
    nonreferenced files and folders as we can do with previously seen tools such as
    DirBuster and ZAP's Forced Browse.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这不是它的主要用途，但我们可以使用 Intruder 来查找现有但未被引用的文件和文件夹，就像我们之前使用的工具 DirBuster 和 ZAP 的
    Forced Browse 一样。
- en: In this recipe, we will undertake our first exercise with Burp Suite's Intruder
    and will use it to browse directories in our vulnerable virtual machine forcefully
    by using a name list included in Kali Linux.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将进行首次使用 Burp Suite Intruder 的练习，并利用它通过 Kali Linux 中包含的名称列表强制浏览我们易受攻击的虚拟机中的目录。
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何进行操作...
- en: 'Let''s assume we have already set Burp Suite as a proxy for our browser and
    have visited WackoPicko (`http://192.168.56.11/WackoPicko`). Refer to the following
    steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经将 Burp Suite 设置为浏览器的代理，并且访问了 WackoPicko（`http://192.168.56.11/WackoPicko`）。请参考以下步骤：
- en: 'In the Target or Proxy tabs, find a request to the WackoPicko''s root URL,
    right-click on it, and select Send to Intruder:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Target 或 Proxy 选项卡中，找到发送到 WackoPicko 根 URL 的请求，右键单击该请求并选择 Send to Intruder：
- en: '![](assets/f5078678-4c85-4c3c-acbb-d251e99d8294.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f5078678-4c85-4c3c-acbb-d251e99d8294.png)'
- en: Then change to the Intruder tab and then to the Positions tab; you'll see some
    fields in the request highlighted and surrounded by § symbols. These are the inputs
    Intruder is going to change on every request. Click on the Clear button to remove
    all of them.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后切换到 Intruder 选项卡，再切换到 Positions 选项卡；你将看到请求中的一些字段被高亮显示，并被 § 符号包围。这些是 Intruder
    在每个请求中将要修改的输入。点击 Clear 按钮以删除它们。
- en: 'After the last `/` in the URL we add any character, say an `a` for example,
    select it, and click on Add. So this character becomes an insertion point for
    the list of inputs:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 URL 中最后一个 `/` 后，我们添加任何字符，例如 `a`，然后选择它并点击 Add。这样，这个字符就成为输入列表的插入点：
- en: '![](assets/631e34e1-baa1-41a0-9bfa-fdf168124b58.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/631e34e1-baa1-41a0-9bfa-fdf168124b58.png)'
- en: Now change to the Payloads tab. We have only one insertion point, so we will
    have only one Payload set to configure. The Payload type is kept as a Simple list
    and we are loading the payloads from a file.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在切换到 Payloads 选项卡。我们只有一个插入点，因此我们将只有一个 Payload 集需要配置。Payload 类型保持为简单列表，并且我们从文件中加载
    payloads。
- en: 'Now click on the Load button so we can load the payload list from a file and
    select the file `/usr/share/wordlists/dirb/small.txt`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击 Load 按钮，这样我们可以从文件中加载 payload 列表，选择文件 `/usr/share/wordlists/dirb/small.txt`：
- en: '![](assets/5af72c8b-981c-4dc1-8e43-b83e3ae45f8c.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5af72c8b-981c-4dc1-8e43-b83e3ae45f8c.png)'
- en: 'To start sending requests to the server, click on Start attack. If you are
    using the free version of Burp Suite, you will receive a warning about some limitations
    in Intruder; accept them and the attack will start:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始向服务器发送请求，点击 Start attack。如果你正在使用 Burp Suite 的免费版本，你将收到关于 Intruder 一些限制的警告；接受这些限制，攻击将开始：
- en: '![](assets/0b90c929-56a7-4161-8821-86ca94623f60.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0b90c929-56a7-4161-8821-86ca94623f60.png)'
- en: If we sort the results by status (by clicking on the column header), we can
    see the lowest number on top; remember that 200 is the response code for an existent
    and accessible file or directory, redirections are 300, and errors are in the
    range of 400 and 500.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们按状态排序结果（通过点击列标题），可以看到最小的数字排在最前面；记住，200是表示文件或目录存在且可访问的响应代码，重定向是300，错误位于400和500之间。
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'What Intruder does is it modifies a request in the specific positions we tell
    it to and replaces the values in those positions with the payloads defined in
    the Payloads section. Payloads may be, among other things:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Intruder 做的是，它修改我们指定的特定位置的请求，并将这些位置的值替换为在 Payloads 部分中定义的有效负载。有效负载可能是以下几种：
- en: 'Simple list: A list that can be taken from a file, pasted from the clipboard,
    or written down in the textbox'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单列表：一个可以从文件中获取、从剪贴板粘贴或在文本框中手动输入的列表
- en: 'Runtime file: Intruder can take the payload from a file being read at runtime,
    so if the file is very large, it won''t be loaded fully into memory'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行时文件：Intruder 可以从在运行时读取的文件中获取有效负载，因此如果文件非常大，它不会完全加载到内存中
- en: 'Numbers: Generates a list of numbers that may be sequential or random and presented
    in hexadecimal or decimal form'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字：生成一个数字列表，数字可以是顺序的或随机的，并以十六进制或十进制形式呈现
- en: 'Username generator: Takes a list of email addresses and extracts possible usernames
    from it'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名生成器：从电子邮件地址列表中提取可能的用户名
- en: 'Bruteforcer: Takes a character set and uses it to generate all permutations
    inside the length limits specified'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴力破解器：使用一个字符集，并利用它生成所有在指定长度限制内的排列组合
- en: 'These payloads are sent by Intruder in different ways, which are specified
    by the attack type in the Positions tab. Attack types differ in the way the payloads
    are combined and permuted in the payload markers:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这些有效负载通过 Intruder 以不同的方式发送，这些方式由 Positions 标签中的攻击类型指定。攻击类型根据有效负载在标记位置中组合和排列的方式不同：
- en: 'Sniper: With a single set of payloads, it places each payload value in every
    position marked one at a time.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 狙击手：使用一组有效负载，它会将每个有效负载值依次放置到每个标记位置。
- en: 'Battering ram: Like Sniper, it uses one set of payloads; the difference is
    that it sets the same value to all positions on each request.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 撞锤：与 Sniper 类似，使用一组有效负载；区别在于它将相同的值设置到每个请求的所有位置。
- en: 'Pitchfork: Uses multiple payload sets and puts one item of each set in each
    marked positions. Useful when we have predefined sets of data that should not
    be mixed, for example testing username/password pairs already known.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 齿轮叉：使用多个有效负载集，并将每个集中的一个项目放置在每个标记位置。适用于我们有预定义的数据集并且这些数据集不应混合的情况，例如测试已知的用户名/密码对。
- en: 'Cluster bomb: Tests multiple payloads one against another so that every possible
    permutation is tested.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群炸弹：测试多个有效负载彼此之间的所有可能组合。
- en: As for the results, we can see that there are a couple of existing files with
    names matching the ones in the list (`account` and `action`) and that there's
    a directory named `admin`, which probably contains the pages that perform administrative
    functions in the application, like adding users or content.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 关于结果，我们可以看到有几个现有文件的名称与列表中的文件名称匹配（`account` 和 `action`），并且有一个名为 `admin` 的目录，可能包含执行应用程序管理功能的页面，例如添加用户或内容。
- en: Using the ZAP proxy to view and alter requests
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ZAP 代理查看和修改请求
- en: OWASP ZAP, similar to Burp Suite, is also more than a web proxy. It not only
    intercepts traffic; it also has lots of features like the crawler we used in previous
    chapters, a vulnerability scanner, a fuzzer, and a Brute Force. It also has a
    scripting engine that can be used to automate activities or to create new functionality.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP ZAP 类似于 Burp Suite，也不仅仅是一个网络代理。它不仅拦截流量，还有很多其他功能，比如我们在之前章节中使用的爬虫、漏洞扫描器、模糊测试工具和暴力破解工具。它还有一个脚本引擎，可以用来自动化任务或创建新的功能。
- en: In this recipe, we will begin the use of OWASP ZAP as a web proxy, intercept
    a request, and send it to the server after changing some values.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将开始使用 OWASP ZAP 作为 Web 代理，拦截请求，并在更改一些值后将其发送到服务器。
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Start ZAP and configure the browser to use it as a proxy. Further, carry out
    the following steps:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 ZAP 并配置浏览器使用它作为代理。接下来，执行以下步骤：
- en: 'Go to OWASP Bricks in the `vm_1` and select content exercise number four (`http://192.168.56.11/owaspbricks/content-4/`):'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 `vm_1` 中的 OWASP Bricks 并选择内容练习第四项（`http://192.168.56.11/owaspbricks/content-4/`）：
- en: '![](assets/549072b7-a06b-4d9e-9f79-efc7d62d8659.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/549072b7-a06b-4d9e-9f79-efc7d62d8659.png)'
- en: We can see that the immediate response of the page is an error saying that the
    user does not exist. There is also SQL code displayed, showing that the application
    is comparing a field (`ua`) with a string that is the User-Agent header sent by
    the browser.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到页面的即时响应是一个错误，表示用户不存在。还显示了SQL代码，表明应用程序正在将一个字段（`ua`）与浏览器发送的用户代理头字符串进行比较。
- en: A User-Agent string is a piece of information sent by the browser in every request
    header to identify itself to the server. This usually contains the name and version
    of the browser, the base operating system, and the HTML rendering engine.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 用户代理字符串是浏览器在每个请求头中发送的一段信息，用于向服务器标识自己。通常，它包含浏览器的名称和版本、基础操作系统和HTML渲染引擎。
- en: 'As the User-Agent is set by the browser when sending the request, we cannot
    do much to change it from within the application. We will use OWASP ZAP to capture
    the request and set whatever text we want it to contain as the User-Agent. First,
    enable the interception (called break) in the proxy by clicking on the green circle
    (turns red on mouse-over) in the toolbar. This will intercept all requests going
    through the proxy:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于用户代理是由浏览器在发送请求时设置的，我们无法在应用程序内部做太多更改。我们将使用OWASP ZAP来捕获请求，并设置我们想要的用户代理文本。首先，通过点击工具栏中的绿色圆圈（鼠标悬停时变红）来启用代理中的拦截（称为break）。这将拦截所有通过代理的请求：
- en: '![](assets/16bcab57-a396-41bf-8e65-7359ba1ed690.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/16bcab57-a396-41bf-8e65-7359ba1ed690.png)'
- en: After enabling the breaks, go to the browser and refresh the page. Go back to
    ZAP; a new Break tab will appear beside the Request and Response tabs.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用拦截后，去浏览器并刷新页面。回到ZAP，新的Break标签将出现在Request和Response标签旁边。
- en: 'In the Break tab, we see the request the browser is making when we refresh
    the page. Here we can change any part of the request; for this exercise we will
    only change the User-Agent value, for example, changing it to `123456`:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Break标签中，我们可以看到刷新页面时浏览器发出的请求。在这里，我们可以更改请求的任何部分；对于本练习，我们只会更改用户代理值，例如，将其更改为`123456`：
- en: '![](assets/52eeae19-c90f-4e59-8cf3-76e62cc252b0.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/52eeae19-c90f-4e59-8cf3-76e62cc252b0.png)'
- en: Submit the request by clicking on the Play icon (blue triangle). This will pause
    again when a new request is made; if you don't want to continue breaking on every
    request, use the red circle button to disable interception.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击播放图标（蓝色三角形）提交请求。每当发出新请求时，它会再次暂停；如果你不想继续在每个请求上进行拦截，可以使用红色圆圈按钮来禁用拦截。
- en: 'Now let''s go to the browser again and see the response:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们再次进入浏览器查看响应：
- en: '![](assets/0abfdc11-b7e4-4fc0-869d-24b7753db78a.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0abfdc11-b7e4-4fc0-869d-24b7753db78a.png)'
- en: The error still says the user doesn't exist, but the value we introduced is
    now displayed in the clue code. In future chapters. we will learn how to take
    advantage of features like this and use them to extract information from the database.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 错误信息仍然显示用户不存在，但我们输入的值现在在线索代码中显示出来。在后续章节中，我们将学习如何利用像这样的功能，并用它们从数据库中提取信息。
- en: How it works...
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: In this recipe, we used the ZAP proxy to intercept a valid request in which
    the server analyzed the header section. We modified the header and verified that
    the server actually took the value we would provide.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用ZAP代理拦截了一个有效的请求，服务器分析了头部部分。我们修改了头部并验证了服务器实际上接受了我们提供的值。
- en: First, we made a test request and discovered that the User-Agent header was
    being used by the server. Knowing that, we made a valid request and intercepted
    it with the proxy; this allowed us to see the request once it left the browser.
    Then we changed the header so the User-Agent contained the information we wanted
    it to contain and submitted the request to the server, which took and displayed
    the value we provided.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们发出了一个测试请求，发现服务器正在使用用户代理头。了解这一点后，我们发出了一个有效的请求并通过代理拦截了它；这使我们能够看到请求在离开浏览器后。然后，我们更改了头部，使用户代理包含我们希望它包含的信息，并将请求提交给服务器，服务器接收并显示了我们提供的值。
- en: Another option to change the User-Agent without the need to intercept and manually
    change requests is to use the User-Agent Switcher Firefox extension we installed
    in [Chapter 1](b5aed3bb-313a-47ca-bc62-af4d938f7a3f.xhtml), *Setting Up Kali Linux
    and the Testing Lab*. The problem with this is that we would need to set up a
    different user agent in the extension every time we wanted to test a different
    value, which is very impractical in a penetration test.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个无需拦截和手动修改请求的方式是使用我们在 [第 1 章](b5aed3bb-313a-47ca-bc62-af4d938f7a3f.xhtml)
    中安装的 User-Agent Switcher Firefox 扩展程序，*设置 Kali Linux 和测试实验室*。这样做的问题是，每次我们想要测试不同的值时，都需要在扩展程序中设置一个不同的用户代理，这在渗透测试中非常不便。
- en: Using ZAP spider
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ZAP 蜘蛛
- en: In web applications, a crawler or spider is a tool that automatically goes through
    a website following all links in it and sometimes filling in and sending forms;
    this allows us to get a complete map of all of the referenced pages within the
    site and record the requests made to get them and their responses.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Web 应用程序中，爬虫或蜘蛛是一种自动浏览网站的工具，它会跟随网站中的所有链接，有时还会填写并提交表单；这使我们能够获取网站内所有被引用页面的完整地图，并记录为获取这些页面所做的请求及其响应。
- en: In this recipe, we will use ZAP's spider to crawl a directory in our vulnerable
    virtual machine `vm_1` and we will check on the information it captures.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 ZAP 的蜘蛛爬取我们脆弱虚拟机 `vm_1` 中的一个目录，并查看它捕获到的信息。
- en: How to do it...
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will use BodgeIt (`http://192.168.56.11/bodgeit/`) to illustrate how ZAP''s
    spider works. Refer to the following steps:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 BodgeIt (`http://192.168.56.11/bodgeit/`) 来演示 ZAP 的蜘蛛是如何工作的。请参照以下步骤：
- en: In the Sites tab, open the folder corresponding to the test site (`http://192.168.56.11`
    in this book).
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Sites 标签中，打开与测试网站对应的文件夹（本书中为 `http://192.168.56.11`）。
- en: Right-click on GET:bodgeit.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 GET:bodgeit。
- en: 'From the drop-down menu select Attack | Spider:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择 Attack | Spider：
- en: '![](assets/305e1f1e-7093-45d9-8d00-e03741a356b1.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/305e1f1e-7093-45d9-8d00-e03741a356b1.png)'
- en: 'In the Spider dialog, we can tell if the crawling will be recursive (spider
    inside the directories found), set the starting point, and other options. For
    now, we leave all default options as they are and click Start Scan:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Spider 对话框中，我们可以查看爬虫是否为递归模式（即爬取在找到的目录内部），设置起始点和其他选项。暂时，我们保留所有默认选项不变，点击开始扫描：
- en: '![](assets/b3117ada-7de6-4cda-83a5-9027994c6250.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b3117ada-7de6-4cda-83a5-9027994c6250.png)'
- en: 'Results will appear in the bottom panel in the Spider tab:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将在底部面板的 Spider 标签中显示：
- en: '![](assets/50cf4f60-6865-4d45-be2f-17e1475d53e3.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/50cf4f60-6865-4d45-be2f-17e1475d53e3.png)'
- en: 'If we want to analyze the requests and responses of individual files, we go
    to the Sites tab, open the site folder, and look at the files and folders inside
    it:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要分析单个文件的请求和响应，我们可以前往 Sites 标签，打开网站文件夹，查看其中的文件和文件夹：
- en: '![](assets/cb016fbf-78c3-4716-8e18-392ef39266c7.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cb016fbf-78c3-4716-8e18-392ef39266c7.png)'
- en: How it works...
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Like any other crawler, ZAP's spider follows every link it finds in every page
    included in the scope requested and the links inside it. Also, this spider follows
    the form responses, redirects, and URLs included in `robots.txt` and `sitemap.xml`
    files, then it stores all requests and responses for later analysis and use.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 像其他爬虫一样，ZAP 的蜘蛛会跟踪它在每个请求的范围内页面中找到的每个链接，以及该页面中的链接。此外，这个蜘蛛还会跟踪表单响应、重定向以及 `robots.txt`
    和 `sitemap.xml` 文件中包含的 URL，然后它会存储所有请求和响应，供后续分析和使用。
- en: There's more
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多
- en: 'After crawling a website or directory, we may want to use the stored requests
    to perform some tests. Using ZAP''s capabilities, we will be able to do the following,
    among other things:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在爬取一个网站或目录后，我们可能想要使用存储的请求进行一些测试。利用 ZAP 的功能，我们将能够执行以下操作，当然这只是其中的一部分：
- en: Repeat the requests modifying some data
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复请求，修改部分数据
- en: Perform active and passive vulnerability scans
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行主动和被动漏洞扫描
- en: Fuzz the input variables looking for possible attack vectors
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模糊化输入变量，寻找可能的攻击向量
- en: Open the requests in the browser
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在浏览器中打开请求
- en: Using Burp Suite to spider a website
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Burp Suite 对网站进行爬虫
- en: With similar functionalities to ZAP, and with some distinctive features and
    a more easy-to-use interface, Burp Suite is the most used tool for application
    security testing. Burp Suite can do much more than just crawl a website, but for
    now, as a part of the reconnaissance phase, we will cover only its spidering features.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 与 ZAP 功能类似，并且具有一些独特功能以及更易用的界面，Burp Suite 是最常用的应用安全测试工具。Burp Suite 能做的不仅仅是爬取网站，但目前我们只会介绍它的爬虫功能，这是侦察阶段的一部分。
- en: Getting ready
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Start Burp Suite by going to Kali's Applications menu, then click on 03 - Web
    Application Analysis | Burpsuite.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 通过转到Kali的应用程序菜单并点击03 - Web应用程序分析 | Burpsuite来启动Burp Suite。
- en: Then, configure the browser to use it as proxy through the port `8080`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，配置浏览器通过端口`8080`使用它作为代理。
- en: How to do it...
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Burp Suite''s proxy is configured by default to intercept all requests, this
    time we want to browse without interruptions so we need to disable it (Proxy |
    Intercept | Intercept is on). Then proceed with the following steps:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite的代理默认配置为拦截所有请求，这时我们想在没有中断的情况下浏览，所以我们需要禁用它（代理 | 拦截 | 拦截已开启）。然后继续以下步骤：
- en: Once using Burp Suite's proxy, in your browser go to bWAPP (`http://192.168.56.11/bWAPP`);
    this will register the site and directory on Burp's Target and Proxy tabs.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦使用Burp Suite的代理，在浏览器中访问bWAPP（`http://192.168.56.11/bWAPP`）；这将注册Burp的目标和代理标签中的网站和目录。
- en: 'Go to Target | Site map and right-click on the `bWAPP` folder inside `http://192.168.56.11`,
    then select Spider this branch from the context menu:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到目标 | 网站地图，右键单击`http://192.168.56.11`中的`bWAPP`文件夹，然后从上下文菜单中选择“蜘蛛此分支”：
- en: '![](assets/dcb4cfbb-4704-4afb-b5e7-f0c30d1402aa.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dcb4cfbb-4704-4afb-b5e7-f0c30d1402aa.png)'
- en: An alert will pop up asking if you want to scan an out-of-scope element (only
    if you haven't added it to the scope). Click Yes to add it and the spidering will
    start.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 会弹出一个警告，询问是否要扫描超出范围的元素（仅当您没有将其添加到范围中时）。点击“是”将其添加到范围中，然后蜘蛛抓取将开始。
- en: 'At some point, the spider will find a registration or login form; when this
    happens Burp Suite will show you a dialog asking for information on how to fill
    the form''s fields. We can ignore it and spider will continue, or we can submit
    some test values and the spider will fill in those values:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在某个时刻，蜘蛛会发现一个注册或登录表单；当这种情况发生时，Burp Suite会弹出一个对话框，询问如何填写表单的字段。我们可以忽略它，蜘蛛会继续，或者我们可以提交一些测试值，蜘蛛会填写这些值：
- en: '![](assets/f4faf15a-48b8-4e74-84f9-b7655adb807b.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f4faf15a-48b8-4e74-84f9-b7655adb807b.png)'
- en: 'We can check the spider status in the Spider tab. We can also stop it by clicking
    on the Spider is running button. Let''s stop it now:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在“蜘蛛”标签中查看蜘蛛的状态。我们也可以通过点击“蜘蛛正在运行”按钮来停止它。现在让我们停止它：
- en: '![](assets/d52d7be1-4791-42ab-87a2-96c65b0c4d8d.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d52d7be1-4791-42ab-87a2-96c65b0c4d8d.png)'
- en: 'We can also see how the branch in the Target tab is being populated as the
    spider finds new pages and directories:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以看到，随着蜘蛛找到新页面和目录，目标标签中的分支是如何被填充的：
- en: '![](assets/02abf294-303e-4660-aed6-8a65e3c04478.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/02abf294-303e-4660-aed6-8a65e3c04478.png)'
- en: How it works...
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它的工作原理...
- en: Burp's Spider follows the same methodology as other spiders, but it operates
    in a slightly different way. We could have it running while we browse the site
    and it will add the links we follow that match the scope definition to the crawling
    queue.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Burp的蜘蛛遵循与其他蜘蛛相同的方法，但它的操作方式稍有不同。我们可以在浏览网站时让它运行，它会将我们跟踪的符合范围定义的链接添加到爬虫队列中。
- en: Just like in ZAP, we can use Burp's crawling results to perform any operation
    we can perform on any request, like scanning (if we have the paid version), repeat,
    compare, fuzz, and view in browser, among others.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在ZAP中一样，我们可以使用Burp的抓取结果执行我们可以对任何请求进行的任何操作，例如扫描（如果我们有付费版本）、重复、比较、模糊测试和在浏览器中查看等。
- en: There's more
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多
- en: Spidering is a mostly automated process where spiders do very little or no checking
    on the links they are following. In applications with flawed authorization controls
    or exposed sensitive links and forms, this could cause the spider to send a request
    to an action or page that performs a sensitive task that could damage the application
    or its data. Hence, it is very important that spidering is done with extreme care,
    taking advantage of all the exclusion/inclusion filtering features the tool of
    choice provides, ensuring that there is no sensitive information or high-risk
    tasks within the spider scope, and preferably as a last resort to browsing manually
    through the site.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 蜘蛛抓取通常是一个自动化的过程，蜘蛛几乎不对它们跟踪的链接进行任何检查。在具有缺陷的授权控制或暴露敏感链接和表单的应用程序中，这可能导致蜘蛛发送请求到执行敏感任务的操作或页面，这些任务可能会破坏应用程序或其数据。因此，非常重要的是，抓取必须非常小心地进行，利用所选工具提供的所有排除/包含过滤功能，确保抓取范围内没有敏感信息或高风险任务，并且最好在没有其他选择的情况下作为最后手段通过手动浏览网站。
- en: Repeating requests with Burp Suite's repeater
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burp Suite的Repeater重复请求
- en: When analyzing spider's results and testing possible inputs to forms, it may
    be useful to send different versions of the same request, changing specific values.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析蜘蛛爬取的结果并测试表单的可能输入时，发送相同请求的不同版本并更改特定值可能很有用。
- en: In this recipe, we will learn how to use Burp's Repeater to send requests multiple
    times with different values.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何使用 Burp 的 Repeater 多次发送带有不同值的请求。
- en: Getting ready
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: We begin this recipe from the point we left the previous one. It is necessary
    to have the `vm_1` virtual machine running, Burp Suite started in our Kali machine,
    and the browser properly configured to use it as a proxy.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从上一个配方的结束点开始本次操作。需要确保 `vm_1` 虚拟机正在运行，在我们的 Kali 机器上启动 Burp Suite，并且浏览器正确配置以将其作为代理使用。
- en: How to do it...
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For this recipe, we will use OWASP Bricks. The following are the steps required:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将使用 OWASP Bricks。以下是所需的步骤：
- en: Go to the first of the content exercises (`http://192.168.56.11/owaspbricks/content-1/`).
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到第一个内容练习（`http://192.168.56.11/owaspbricks/content-1/`）。
- en: 'In Burp Suite, go to Proxy | History, locate a `GET` request that has an `id=0`
    or `id=1` at the end of the URL, right-click on it, and from the menu select Send
    to Repeater:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Burp Suite 中，转到 Proxy | History，找到 URL 末尾带有 `id=0` 或 `id=1` 的 `GET` 请求，右键点击它，并从菜单中选择
    Send to Repeater：
- en: '![](assets/b3f9dfd4-569c-4c26-954e-b32ee4f38c98.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b3f9dfd4-569c-4c26-954e-b32ee4f38c98.png)'
- en: Now we switch to the Repeater tab.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们切换到 Repeater 标签页。
- en: 'In Repeater, we can see the original request on the left side. Let''s click
    on Go to view the server''s response on the right side:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Repeater 中，我们可以在左侧看到原始请求。点击 Go 以查看右侧服务器的响应：
- en: '![](assets/1cf74ecb-4f5e-41f9-b26a-ee6311bc3280.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1cf74ecb-4f5e-41f9-b26a-ee6311bc3280.png)'
- en: Analyzing the request and response, we can see that the parameter we sent (`id=1`)
    was used by the server to look for a user with that same ID, and the information
    is displayed in the response's body.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 分析请求和响应，我们可以看到服务器使用我们发送的参数（`id=1`）来查找具有相同 ID 的用户，并在响应体中显示该信息。
- en: 'So, this page in the server expects a parameter called ID, with a numeric parameter
    that represents a user ID. Let''s see what happens if the application receives
    a letter instead of a number:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，服务器上的此页面期望一个名为 ID 的参数，包含一个表示用户 ID 的数字参数。我们来看看如果应用程序收到一个字母而不是数字会发生什么：
- en: '![](assets/6e976070-c6cf-49bc-bce4-e8c4c037d4ad.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6e976070-c6cf-49bc-bce4-e8c4c037d4ad.png)'
- en: The response is an error showing information about the database (MySQL), the
    parameter types expected, the internal path of the file, and the line of code
    that caused the error. This displaying of detailed technical information by itself
    suggests a security risk.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 响应是一个错误，显示了关于数据库（MySQL）的信息、预期的参数类型、文件的内部路径以及导致错误的代码行。这种详细技术信息的显示本身就表明存在安全风险。
- en: 'So, if the expected value is a number, let''s see what happens if we send an
    arithmetic operation. Change the `id` value to `2-1`:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所以，如果预期值是一个数字，看看如果我们发送一个算术运算会发生什么。将 `id` 值更改为 `2-1`：
- en: '![](assets/e51ba563-ceb1-4d6d-bef8-79d760cb3aef.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e51ba563-ceb1-4d6d-bef8-79d760cb3aef.png)'
- en: As can be seen, the operation was executed by the server and it returned the
    information corresponding to the user ID `1`, which is the result of our operation.
    This suggests that this application may be vulnerable to injection attacks. We'll
    dig more into them in [Chapter 6](680e9e0d-a892-4c37-b2ad-ce8d27d462b5.xhtml),
    *Exploiting Injection Vulnerabilities*.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如所见，服务器执行了该操作，并返回了与用户 ID `1` 相对应的信息，这就是我们操作的结果。这表明该应用程序可能容易受到注入攻击。我们将在[第6章](680e9e0d-a892-4c37-b2ad-ce8d27d462b5.xhtml)，*利用注入漏洞*
    中深入探讨它们。
- en: How it works...
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Burp Suite's Repeater allows us to test different inputs and scenarios for the
    same HTTP request manually and to analyze the responses the server gives to each
    of them. This is a very useful feature when testing for vulnerabilities, as one
    can study how the application is reacting to the various inputs it is given and
    act accordingly to identify or exploit possible weaknesses in configuration, programming,
    or design.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite 的 Repeater 允许我们手动测试相同 HTTP 请求的不同输入和场景，并分析服务器对每个请求的响应。这是测试漏洞时非常有用的功能，因为可以研究应用程序如何对不同输入作出反应，并相应采取措施识别或利用配置、编程或设计上的潜在弱点。
- en: Using WebScarab
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 WebScarab
- en: WebScarab is another web proxy full of features that may be interesting to penetration
    testers. In this recipe, we will use it to spider a website.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: WebScarab 是另一个功能丰富的 Web 代理，可能对渗透测试人员非常有用。在这个配方中，我们将使用它来爬取一个网站。
- en: Getting ready
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In its default configuration, WebScarab uses port `8008` to capture HTTP requests,
    so we need to configure our browser to use that port in the localhost as a proxy.
    We follow steps similar to those of the OWASP ZAP and Burp Suite configurations
    in the browser; in this case the port must be `8008`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在其默认配置中，WebScarab使用端口`8008`来捕获HTTP请求，因此我们需要配置浏览器使用本地主机的该端口作为代理。我们按照OWASP ZAP和Burp
    Suite在浏览器中的配置步骤进行；在这种情况下，端口必须是`8008`。
- en: How to do it...
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'WebScarab can be found in Kali''s Applications menu; go to 03 - Web Application
    Analysis | webscarab. Alternatively, from the terminal, run the `webscarab` command.
    Proceed with the following steps:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: WebScarab可以在Kali的应用程序菜单中找到；转到03 - Web Application Analysis | webscarab。或者，从终端运行`webscarab`命令。按照以下步骤进行：
- en: Browse to the BodgeIt application of `vulnerable_vm` (`http://192.168.56.11/bodgeit/`).
    We will see that it appears in the Summary tab of WebScarab.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到`vulnerable_vm`的BodgeIt应用程序（`http://192.168.56.11/bodgeit/`）。我们将看到它出现在WebScarab的Summary选项卡中。
- en: 'Now we right-click on the `bodgeit` folder and select Spider tree from the
    menu:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，右键单击`bodgeit`文件夹，从菜单中选择Spider tree：
- en: '![](assets/ff8fbe5e-2b52-4a26-af74-80585ca76f06.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ff8fbe5e-2b52-4a26-af74-80585ca76f06.png)'
- en: 'All requests will appear in the bottom half of the Summary and the tree will
    be filled as the spider finds new files:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有请求将显示在Summary的底部，树将随着蜘蛛发现新文件而填充：
- en: '![](assets/dae7de2f-d086-4d20-8d62-d68f5c618d1b.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dae7de2f-d086-4d20-8d62-d68f5c618d1b.png)'
- en: The Summary also shows some relevant information about each particular file,
    like if it has an injection or possible injection vulnerability, if it sets a
    cookie, if it contains a form, and if the form contains hidden fields. It also
    indicates the presence of comments in the code or file uploads.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要还显示了关于每个特定文件的一些相关信息，例如它是否存在注入或可能的注入漏洞，是否设置了cookie，是否包含表单，以及表单是否包含隐藏字段。它还指示代码中是否存在注释或文件上传。
- en: 'If we right-click on any of the requests in the bottom half we will see the
    operations we can perform on them. We will analyze a request, find the path `/bodgeit/search.jsp`,
    right-click on it, and select Show conversation. A new window will pop up showing
    the response and request in various formats:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们右键单击底部一些请求，我们将看到可以执行的操作。我们将分析一个请求，找到路径`/bodgeit/search.jsp`，右键单击它，然后选择Show
    conversation。会弹出一个新窗口，显示各种格式的响应和请求：
- en: '![](assets/a71c6a38-923b-4074-985e-fbc54b6c48d9.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a71c6a38-923b-4074-985e-fbc54b6c48d9.png)'
- en: 'Now click on the Spider tab:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击Spider选项卡：
- en: '![](assets/71897eef-fbd7-499b-9c37-bf090c426d1f.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/71897eef-fbd7-499b-9c37-bf090c426d1f.png)'
- en: In this tab, we can adjust the regular expressions of what the spider fetches
    by using the Allowed Domains and Forbidden Paths textboxes. We can also refresh
    the results by using Fetch Tree. We can also stop the spider by clicking the Stop
    button.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个选项卡中，我们可以通过使用Allowed Domains和Forbidden Paths文本框来调整蜘蛛获取的正则表达式。我们还可以通过使用Fetch
    Tree来刷新结果。我们还可以通过单击Stop按钮来停止蜘蛛。
- en: How it works...
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它的工作原理...
- en: WebScarab's spider, as with those of ZAP and Burp Suite, is useful to discover
    all referenced files in a website or directory without having to browse all possible
    links manually and to analyze in depth the requests made to the server, as well
    as to use them to perform more sophisticated tests.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 与ZAP和Burp Suite的蜘蛛一样，WebScarab的蜘蛛对于发现网站或目录中所有引用的文件非常有用，而无需手动浏览所有可能的链接，并深入分析发送到服务器的请求，以及使用它们执行更复杂的测试。
- en: Identifying relevant files and directories from crawling results
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从爬取结果中识别相关文件和目录
- en: We already crawled a full application's directory and have the list of all referenced
    files and directories inside it. The natural next step is to identify which of
    those contains relevant information or represents an opportunity to have a greater
    chance of finding vulnerabilities.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经爬取了完整应用程序的目录，并且列出了其中所有引用的文件和目录。自然的下一步是确定哪些文件包含相关信息或者代表找到漏洞的更大机会。
- en: More than a recipe, this will be a catalog of common names, suffixes, or prefixes
    used for files and directories that usually lead to information useful to the
    penetration tester or to the exploitation of vulnerabilities that may end in complete
    system compromise.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 更多的是一个方法，这将是一个常见名称、后缀或前缀的目录，通常包含有关于渗透测试人员有用的信息，或者可以导致完全系统妥协的漏洞利用的目录。
- en: How to do it...
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Here are the steps:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是步骤：
- en: 'The first thing we want to look for are the login and registration pages, the
    ones that could give us the chance to become legitimate users of the application
    or to impersonate one by guessing usernames and passwords. Some examples of names
    or partial names are:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先想要寻找的是登录和注册页面，这些页面可能让我们有机会成为应用程序的合法用户，或者通过猜测用户名和密码来冒充一个用户。一些名称或部分名称的示例包括：
- en: Account
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 账户
- en: Auth
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证
- en: Login
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录
- en: Logon
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录
- en: Registration
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册
- en: Register
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册
- en: Signup
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册
- en: Signin
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录
- en: 'Other common sources of usernames, passwords, and design vulnerabilities related
    to this type of information, are password recovery pages:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与此类信息相关的用户名、密码和设计漏洞的其他常见来源是密码恢复页面：
- en: Change
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改
- en: Forgot
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忘记
- en: Lost-password
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忘记密码
- en: Password
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码
- en: Recover
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恢复
- en: Reset
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重置
- en: 'Next, we need to identify if there is an administrative section of the application
    or some set of functions that may allow us to perform high-privileged tasks on
    it. For example, we may look for:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要确定是否有应用程序的管理部分或一些功能集，可能允许我们在其上执行高权限任务。例如，我们可能会寻找：
- en: Admin
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员
- en: Config
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置
- en: Manager
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员
- en: Root
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根目录
- en: 'Other interesting directories are **Content Management Systems** (**CMS**)
    administration, databases, or application servers:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他有趣的目录包括**内容管理系统** (**CMS**) 管理、数据库或应用程序服务器：
- en: '`admin-console`'
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin-console`'
- en: '`adminer`'
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adminer`'
- en: '`administrator`'
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`administrator`'
- en: '`couch`'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`couch`'
- en: '`manager`'
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manager`'
- en: '`Mylittleadmin`'
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mylittleadmin`'
- en: '`phpMyAdmin`'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`phpMyAdmin`'
- en: '`SqlWebAdmin`'
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SqlWebAdmin`'
- en: '`wp-admin`'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp-admin`'
- en: 'Testing and development versions of applications are usually less protected
    and more prone to vulnerabilities than final releases, so they are a good target
    in our search for weak points. These directories'' names may include:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序的测试版和开发版通常比最终版本保护较少，更容易出现漏洞，因此它们是我们寻找弱点的好目标。这些目录的名称可能包括：
- en: Alpha
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试版
- en: Beta
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试版
- en: Dev
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发
- en: Development
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发
- en: QA
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: QA
- en: Test
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: 'Web server information and configuration files can sometimes provide valuable
    information about the frameworks, software versions, and particular settings that
    may be exploitable:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Web 服务器信息和配置文件有时可以提供关于框架、软件版本和可能被利用的特定设置的有价值信息：
- en: '`config.xml`'
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.xml`'
- en: '`info`'
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info`'
- en: '`phpinfo`'
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`phpinfo`'
- en: '`server-status`'
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server-status`'
- en: '`web.config`'
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.config`'
- en: Also, all directories and files marked with disallow in `robots.txt` may be
    useful.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，`robots.txt` 中标记为 disallow 的所有目录和文件也可能有用。
- en: How it works...
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何工作...
- en: Some of the names listed previously and their variations in the language the
    target application was created in may allow us access to restricted sections of
    the site, which is a very important step in a penetration test; we cannot find
    vulnerabilities in places if we ignore they exist. Some of them will provide us
    with information about the server, its configuration, and the developing frameworks
    used. Some others, like the Tomcat manager and JBoss administration pages, if
    wrongfully configured, will let us (or a malicious user) take control of the web
    server.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 之前列出的一些名称及其在目标应用程序所使用的语言中的变体，可能允许我们访问网站的受限部分，这在渗透测试中是一个非常重要的步骤；如果我们忽视它们的存在，就无法发现漏洞。它们中的一些会提供关于服务器、其配置以及使用的开发框架的信息。其他一些，如
    Tomcat 管理员页面和 JBoss 管理页面，如果配置不当，可能会让我们（或恶意用户）控制 Web 服务器。
