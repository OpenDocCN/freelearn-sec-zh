- en: Gaining Network Access
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取网络访问
- en: In this chapter, we will be getting insights into how to gain access to a compromised
    system using various techniques and covert channels. We will learn about various
    skills required to gain access to a compromised system including password cracking,
    generating backdoors, and employing deceptive social engineering techniques.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将深入了解如何利用各种技术和隐蔽通道获取对被入侵系统的访问权限。我们将学习获取对被入侵系统访问权限所需的各种技能，包括密码破解、生成后门和使用欺骗性社会工程技术。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中涵盖以下主题：
- en: Gaining remote access
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取远程访问
- en: Cracking passwords
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破解密码
- en: Creating backdoors using Backdoor Factory
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用后门工厂创建后门
- en: Exploiting remote services using Metasploit
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Metasploit利用远程服务
- en: Hacking embedded devices using RouterSploit
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RouterSploit黑客嵌入式设备
- en: Social engineering using SET
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SET进行社会工程
- en: Gaining remote access
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取远程访问
- en: So far in this book, we have seen various techniques and tools that could be
    used to gather information about the target and enumerate services running on
    the system. We also glanced at the vulnerability assessment process using OpenVAS.
    Having followed these phases, we should now have sufficient information about
    our target in order to actually compromise the system and gain access.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，我们已经看到了各种技术和工具，可以用来收集有关目标的信息并枚举系统上运行的服务。我们还瞥见了使用OpenVAS进行漏洞评估的过程。在遵循了这些阶段之后，我们现在应该已经有足够的信息来实际上入侵系统并获取访问权限。
- en: 'Gaining access to a remote system can be achieved in either of the two possible
    ways as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下两种方式之一实现对远程系统的访问：
- en: Direct access
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接访问
- en: Target behind the router
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由器后面的目标
- en: Direct access
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接访问
- en: '![](img/07e148ba-258f-4361-ba21-5c7b0e1d1d62.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07e148ba-258f-4361-ba21-5c7b0e1d1d62.png)'
- en: In this type, the attacker has direct access to the target system. The attacker
    essentially knows the IP address of the target system and connects to it remotely.
    The attacker then exploits an existing vulnerability on the target system which
    gives further access.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种类型中，攻击者直接访问目标系统。攻击者基本上知道目标系统的IP地址并远程连接到它。攻击者然后利用目标系统上的现有漏洞来进一步获取访问权限。
- en: Target behind router
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由器后面的目标
- en: '![](img/d8a21e20-2101-4e33-b0bc-818cebe7a0ca.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8a21e20-2101-4e33-b0bc-818cebe7a0ca.jpg)'
- en: In this scenario, the target machine is behind a router or a firewall with **Network
    Address Translation** (**NAT**) enabled. The target system has private IP address
    and isn't directly accessible over the internet. The attacker can only reach to
    the public interface of the router/firewall but won't be able to reach to the
    target system. In this case, the attacker will have to send the victim some kind
    of payload either through email or messenger and once the victim opens the payload,
    it will create a reverse connection back to the attacker passing through the router/firewall.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，目标机器位于启用了**网络地址转换**（**NAT**）的路由器或防火墙后面。目标系统具有私有IP地址，并且不能直接通过互联网访问。攻击者只能到达路由器/防火墙的公共接口，但无法到达目标系统。在这种情况下，攻击者将不得不通过电子邮件或信使向受害者发送某种有效载荷，一旦受害者打开有效载荷，它将通过路由器/防火墙返回到攻击者的反向连接。
- en: Cracking passwords
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 破解密码
- en: 'Password is one of the basic mechanism used for authenticating a user into
    a system. During our information gathering and enumeration phase, we may come
    across various services running on the target which are password-protected such
    as SSH, FTP, and so on. In order to gain access to these services, we will want
    to crack passwords using some of the following techniques:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 密码是用于将用户认证到系统中的基本机制之一。在我们的信息收集和枚举阶段，我们可能会遇到目标上运行的各种受密码保护的服务，如SSH、FTP等。为了获取对这些服务的访问权限，我们将使用以下一些技术来破解密码：
- en: '**Dictionary attack**: In a dictionary attack, we feed the password cracker
    a file with a large number of words. The password cracker then tries all the words
    from the supplied file as probable passwords on the target system. If matched,
    we are presented with the correct password. In Kali Linux, there are several word-lists
    which can be used for password cracking. These word-lists are located in `/usr/share/wordlists` as
    shown in the following image:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字典攻击**：在字典攻击中，我们向密码破解器提供一个包含大量单词的文件。密码破解器然后尝试将提供的文件中的所有单词作为目标系统上的可能密码。如果匹配成功，我们将得到正确的密码。在Kali
    Linux中，有几个可以用于密码破解的字典。这些字典位于`/usr/share/wordlists`中，如下图所示：'
- en: '![](img/1edc9e1f-b289-4e44-a010-ad8a88884d4f.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1edc9e1f-b289-4e44-a010-ad8a88884d4f.png)'
- en: '**Brute-force attack**: If password isn''t any of the words from the word-list
    we provided, then we might have to launch a brute-force attack. In a brute-force
    attack, we first specify the minimum length, maximum length, and a custom character
    set. The password cracker then tries all permutations and combinations formed
    out of this character set as a probable password on the target. However, this
    process is resource and time-consuming.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**暴力破解攻击**：如果密码不是我们提供的字典中的任何一个单词，那么我们可能需要发起一个暴力破解攻击。在暴力破解攻击中，我们首先指定最小长度、最大长度和自定义字符集。密码破解器然后尝试使用这个字符集中形成的所有排列和组合作为目标上的可能密码。然而，这个过程需要大量资源和时间。'
- en: '**Rainbow tables**: A password is never stored on a system in plain-text format.
    It is always hashed using some kind of algorithm in order to make it unreadable.
    Rainbow tables have pre-computed hashes for passwords within the given character-set.
    If we have password hashes from the target system then we could feed them to the
    rainbow tables. The rainbow tables will try for a possible match in their existing
    hash tables. This method works very fast as compared to brute-force but requires
    a huge amount of computing resources and storage space to store the rainbow tables.
    Also, the rainbow tables get defeated if the password hashes are stored with a
    salt.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**彩虹表**：密码从不以纯文本格式存储在系统中。它始终使用某种算法进行哈希处理，以使其无法读取。彩虹表中包含给定字符集内密码的预先计算的哈希值。如果我们从目标系统获得密码哈希值，那么我们可以将它们输入到彩虹表中。彩虹表将尝试在其现有哈希表中寻找可能的匹配项。这种方法的速度比暴力破解要快得多，但需要大量的计算资源和存储空间来存储彩虹表。此外，如果密码哈希值与盐一起存储，彩虹表将被击败。'
- en: Identifying hashes
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别哈希
- en: 'As we learned in the previous section, passwords are never stored in a plain-text
    format and are always hashed using some kind of algorithm. In order to crack the
    password hash, we first must identify what algorithm has been used to hash the
    password. Kali Linux has a tool called `hash-identifier` which takes a password
    hash as an input and tells us the probable hash algorithm used, as shown in the
    following image:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一节中学到的，密码从不以纯文本格式存储，而是始终使用某种算法进行哈希处理。为了破解密码哈希，我们首先必须确定使用了什么算法来对密码进行哈希处理。Kali
    Linux有一个名为`hash-identifier`的工具，它以密码哈希作为输入，并告诉我们可能使用的哈希算法，如下图所示：
- en: '![](img/5ea1c199-1562-47f2-9a65-33191e305d05.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/5ea1c199-1562-47f2-9a65-33191e305d05.png)
- en: Cracking Windows passwords
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 破解Windows密码
- en: Windows operating system stores passwords in a file called **Security Accounts
    Manager** (**SAM**) and the type of hashing algorithm used is LM or NTLM.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Windows操作系统将密码存储在一个名为**安全帐户管理器**（**SAM**）的文件中，使用的哈希算法类型是LM或NTLM。
- en: We first exploit an SMB vulnerability in a remote Windows system and get Meterpreter
    access using Metasploit as shown in the following image. The Meterpreter has a
    very useful utility called `mimikatz` which can be used to dump hashes or even
    plain-text passwords from the compromised system. We initiate this tool using
    command `load mimikatz`. Then we use a command `kerberos` to reveal plain-text
    credentials. We get to know that the user `shareuser` has a password `admin`.
    Using the `msv` command we can also dump the raw hashes from the compromised system.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先利用远程Windows系统中的SMB漏洞，并使用Metasploit获得Meterpreter访问，如下图所示。Meterpreter有一个非常有用的实用程序称为`mimikatz`，可以用来从受损系统中转储哈希或甚至纯文本密码。我们使用命令`load
    mimikatz`来启动此工具。然后我们使用命令`kerberos`来显示纯文本凭据。我们得知用户`shareuser`的密码是`admin`。使用`msv`命令，我们还可以从受损系统中转储原始哈希。
- en: '![](img/e48e8443-7460-457a-a3da-5963f34ca50e.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/e48e8443-7460-457a-a3da-5963f34ca50e.png)
- en: Password profiling
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码分析
- en: We have already learned about the dictionary attacks in the previous section.
    During a particular engagement with an organization we may identify a certain
    pattern that is used for all the passwords. So, we may want to have a word-list
    inline with a particular pattern. Password profiling helps us generate word-lists
    aligned with the specific pattern.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们已经了解了字典攻击。在与组织的特定参与过程中，我们可能会确定所有密码都使用某种特定模式。因此，我们可能希望有一个与特定模式相匹配的单词列表。密码分析帮助我们生成与特定模式对齐的单词列表。
- en: Kali Linux has a tool called crunch which helps us generate word-lists using
    custom patterns.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux有一个名为crunch的工具，可以帮助我们使用自定义模式生成单词列表。
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding syntax will generate a word-list with words of minimum length
    `3`, maximum length `5`, and containing all possible permutations and combinations
    from the character-set `0123456789abcedefghijklmnopqrstuvwxyz`. For further help,
    we can refer to crunch help using `man crunch` command, as shown in the following
    image:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语法将生成一个单词列表，其中单词的最小长度为`3`，最大长度为`5`，并包含来自字符集`0123456789abcedefghijklmnopqrstuvwxyz`的所有可能的排列和组合。有关更多帮助，我们可以使用`man
    crunch`命令参考crunch帮助，如下图所示：
- en: '![](img/28d696ec-ba0d-464c-bc8c-74169eb15601.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/28d696ec-ba0d-464c-bc8c-74169eb15601.png)
- en: Password cracking with Hydra
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Hydra进行密码破解
- en: 'Hydra is a very powerful and efficient password cracking tool that is part
    of the default Kali Linux installation. Hydra is capable of cracking passwords
    for various protocols such as FTP, SSH, HTTP, and so on. Hydra can be launched
    from the Terminal as shown in the following image:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Hydra是默认Kali Linux安装的一个非常强大和高效的密码破解工具。Hydra能够破解各种协议的密码，如FTP、SSH、HTTP等。Hydra可以从终端启动，如下图所示：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding command would launch a password cracking attack against the FTP
    server running on IP address `192.168.25.129` and try out all passwords from the
    word-list `passlist.txt`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将对运行在IP地址`192.168.25.129`上的FTP服务器发起密码破解攻击，并尝试使用单词列表`passlist.txt`中的所有密码。
- en: '![](img/8336a925-45e9-433d-ae5e-7b330f546345.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/8336a925-45e9-433d-ae5e-7b330f546345.png)
- en: Creating backdoors using Backdoor Factory
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用后门工厂创建后门
- en: A quick look at the dictionary meaning of the word *backdoor* gives us *achieved
    by using indirect or dishonest means*. In the computing world, backdoors are something
    which are hidden and are used to get covert entry into the system. For example,
    if we get a plain executable file from some unknown person, we may get suspicious.
    However, if we get a genuine-looking installer then we might execute it. However,
    that installer might have a hidden backdoor which may open up our system to the
    attacker.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 快速查看单词*后门*的词典含义给我们带来了*通过间接或不诚实手段实现*。在计算世界中，后门是隐藏的，用于秘密进入系统的东西。例如，如果我们从某个不知名的人那里得到一个普通的可执行文件，我们可能会感到怀疑。但是，如果我们得到一个看起来很真实的安装程序，我们可能会执行它。然而，该安装程序可能有一个隐藏的后门，可能会打开我们的系统给攻击者。
- en: 'Creating a backdoor typically involves patching a genuine looking executable
    with our shellcode. Kali Linux has a special tool `backdoor-factory` which helps
    us create backdoors. The `backdoor-factory` can be launched from the Terminal
    as shown in the following image:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 创建后门通常涉及使用我们的shellcode对真实的可执行文件进行修补。Kali Linux有一个特殊的工具`backdoor-factory`，可以帮助我们创建后门。`backdoor-factory`可以从终端启动，如下图所示：
- en: '![](img/b8828717-27b8-4953-9444-5adcae216d36.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8828717-27b8-4953-9444-5adcae216d36.png)'
- en: 'We now execute the command as shown in the following image:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们执行如下图所示的命令：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This command would open the file `putty.exe` located at `/root/Desktop`, inject
    reverse TCP shell into the executable, and configure the backdoor to connect to
    IP address `192.168.25.128` on port `8080`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将打开位于`/root/Desktop`的`putty.exe`文件，将反向TCP shell注入可执行文件，并配置后门连接到IP地址`192.168.25.128`的端口`8080`。
- en: '![](img/449ab564-d3ff-4dc3-ac34-02f899f8c991.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/449ab564-d3ff-4dc3-ac34-02f899f8c991.png)'
- en: Exploiting remote services using Metasploit
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Metasploit利用远程服务
- en: 'Before we go ahead and exploit the services on remote target system, we must
    know what all the services are running and what their exact versions are. We can
    do a quick Nmap scan to list service version information as shown in the following
    image:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续利用远程目标系统上的服务之前，我们必须知道所有服务正在运行的情况以及它们的确切版本是什么。我们可以通过快速进行Nmap扫描来列出服务版本信息，如下图所示：
- en: '![](img/1f5eb0a3-9ef4-43cf-b24e-866fbdbc4d18.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f5eb0a3-9ef4-43cf-b24e-866fbdbc4d18.png)'
- en: The preceding result shows there are many services running which we can exploit
    using Metasploit.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的结果显示有许多正在运行的服务，我们可以利用Metasploit进行攻击。
- en: Exploiting vsftpd
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用vsftpd
- en: From the Nmap scan and enumeration, we got to know that our target is running
    an FTP server. The server version is vsftpd 2.3.4 and is active on port `21`.
    We open the Metasploit framework using the `msfconsole` command and then search
    for any exploit matching vsftp as shown in the following image.  Metasploit has
    an exploit `vsftpd_234_backdoor` which we can use to compromise the target.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Nmap扫描和枚举，我们得知我们的目标正在运行FTP服务器。服务器版本是vsftpd 2.3.4，活动在端口`21`上。我们使用`msfconsole`命令打开Metasploit框架，然后搜索与vsftp匹配的任何漏洞，如下图所示。Metasploit有一个`vsftpd_234_backdoor`漏洞，我们可以用来攻击目标。
- en: '![](img/259023a6-5f31-4e3f-9422-fc5126c83c4c.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/259023a6-5f31-4e3f-9422-fc5126c83c4c.png)'
- en: We select the vsftp exploit and set the `RHOST` parameter as the IP address
    of the target. Then we run the exploit as shown in the following image. The exploit
    was successful and it opened up a command shell. Using the `whoami` command, we
    could know that we have got root access to our target.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择vsftp漏洞，并将`RHOST`参数设置为目标的IP地址。然后我们运行漏洞，如下图所示。漏洞利用成功，并打开了一个命令shell。使用`whoami`命令，我们可以知道我们已经获得了对目标的root访问权限。
- en: '![](img/864c6961-227f-4496-9ba0-5c1aedfa92a4.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/864c6961-227f-4496-9ba0-5c1aedfa92a4.png)'
- en: Exploiting Tomcat
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Tomcat
- en: 'From the Nmap scan and enumeration, we got to know that our target is running
    an Apache Tomcat web server. It is active on port `8180`. We can hit the target
    IP on port `8180` through the browser and see the web server default page as shown
    in the following image:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Nmap扫描和枚举，我们得知我们的目标正在运行Apache Tomcat Web服务器。它在端口`8180`上活动。我们可以通过浏览器在端口`8180`上击中目标IP，并查看Web服务器的默认页面，如下图所示：
- en: '![](img/48a49955-7d12-40fc-8b78-f2862cef598b.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48a49955-7d12-40fc-8b78-f2862cef598b.png)'
- en: 'Now we open up the Metasploit console and search for any exploits matching
    Tomcat server as shown in the following image:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们打开Metasploit控制台，并搜索与Tomcat服务器匹配的任何漏洞，如下图所示：
- en: '![](img/db477a4a-6134-4a36-a98a-e6b744834105.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db477a4a-6134-4a36-a98a-e6b744834105.png)'
- en: We'll use the exploit `tomcat_mgr_deploy` as shown in the following image. We
    implicitly select the exploit payload as `java/meterpreter/reverse_tcp`  and then
    configure other options such as RHOST, LHOST, the default username/password, and
    the target port.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`tomcat_mgr_deploy`漏洞，如下图所示。我们隐式选择`java/meterpreter/reverse_tcp`作为漏洞载荷，然后配置其他选项，如RHOST、LHOST、默认用户名/密码和目标端口。
- en: '![](img/5dfde7ad-287c-411e-b0a6-7ac4d00c3cca.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5dfde7ad-287c-411e-b0a6-7ac4d00c3cca.png)'
- en: The exploit was successful and it gave us a Meterpreter session.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞利用成功，并给我们一个Meterpreter会话。
- en: Hacking embedded devices using RouterSploit
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用RouterSploit黑客嵌入式设备
- en: In the previous section, we learned how Metasploit can be effectively used for
    exploiting remote services. The targets were mainly Windows and Linux operating
    systems. The number of internet-connected devices is rapidly increasing. These
    devices have embedded firmware which are also prone to attacks.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们学习了如何有效地使用Metasploit来利用远程服务。目标主要是Windows和Linux操作系统。互联网连接设备的数量正在迅速增加。这些设备具有嵌入式固件，也容易受到攻击。
- en: 'RouterSploit is a command-line tool which can be used for exploiting embedded
    devices. However, it isn''t part of the default Kali Linux installation. We can
    install RouterSploit using the command `apt-get install routersploit`. Once installed
    it can be launched from the Terminal by typing in `routersploit` as shown in the
    following image:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: RouterSploit是一个命令行工具，可用于攻击嵌入式设备。但它不是默认安装在Kali Linux中的一部分。我们可以使用`apt-get install
    routersploit`命令安装RouterSploit。安装后，可以通过在终端中输入`routersploit`来启动它，如下图所示：
- en: '![](img/24f5b3ff-54d5-4500-95ed-006fc1b4bcf0.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24f5b3ff-54d5-4500-95ed-006fc1b4bcf0.png)'
- en: RouterSploit has an interface very similar to that of the Metasploit console.
    We can quickly scan the target device using the `scanners/autopwn` option as shown
    in the following image. We simply set the target IP address and run the scanner.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: RouterSploit具有与Metasploit控制台非常相似的界面。我们可以使用`scanners/autopwn`选项快速扫描目标设备，如下图所示。我们只需设置目标IP地址并运行扫描程序。
- en: '![](img/fb3bd827-da78-4682-8653-49bc1cabbf03.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb3bd827-da78-4682-8653-49bc1cabbf03.png)'
- en: Social engineering using SET
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SET进行社会工程学
- en: In the very first section of this chapter we saw two possible scenarios of exploitation.
    Either the attacker has direct access to the target system or the target system
    is behind the router/firewall and the attacker can reach only till the public
    interface of router/firewall.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一节中，我们看到了两种可能的利用场景。攻击者要么直接访问目标系统，要么目标系统在路由器/防火墙后面，攻击者只能达到路由器/防火墙的公共接口。
- en: In the case of the second scenario, the attacker has to send some kind of payload
    to the victim and trick him into executing the payload. Once executed, it will
    establish a reverse connection back to the attacker. This is a covert technique
    and involves the use of social engineering.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二种情况下，攻击者必须向受害者发送某种有效载荷，并诱使他执行有效载荷。一旦执行，它将建立一个反向连接返回给攻击者。这是一种隐秘的技术，涉及社会工程的使用。
- en: Kali Linux offers an excellent framework for performing various social engineering
    attacks. The social engineering toolkit can be accessed at Applications | Exploitation
    Tools | SET.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux提供了一个执行各种社会工程攻击的优秀框架。社会工程工具包可以在“应用程序|利用工具|SET”中访问。
- en: 'The initial screen of SET gives various options related to social engineering
    attacks as shown in the following image:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: SET的初始屏幕显示了与社会工程攻击相关的各种选项，如下图所示：
- en: '![](img/a49ffa50-d0a5-4aa3-b225-17994962a780.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a49ffa50-d0a5-4aa3-b225-17994962a780.png)'
- en: 'We select option `1) Social-Engineering Attacks` and then we are presented
    with an array of attacks as shown in the following image:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择选项`1)社会工程攻击`，然后会出现一系列攻击，如下图所示：
- en: '![](img/1284b55e-b5ec-44aa-8020-e6fe449da437.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: 'SET会自动启动Metasploit并开始监听。一旦我们的受害者下载并执行有效载荷，一个Meterpreter会话就会打开，如下图所示： '
- en: 'We select option `4) Create a Payload and Listener` and then select the payload
    `Windows Shell Reverse_TCP`. Then we set the IP address and port for the listener
    as shown in the following image:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择选项`4)创建有效载荷和监听器`，然后选择有效载荷`Windows Shell Reverse_TCP`。然后我们设置监听器的IP地址和端口，如下图所示：
- en: '![](img/af9b11b1-991a-4554-9aaf-b6d01256f4f9.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af9b11b1-991a-4554-9aaf-b6d01256f4f9.png)'
- en: 'SET automatically launches Metasploit and starts the listener. As soon as our
    victim downloads and executes the payload, a Meterpreter session opens up as shown
    in the following image:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/1284b55e-b5ec-44aa-8020-e6fe449da437.png)'
- en: '![](img/1a408fa9-ea5b-49e6-9798-ca58e1745269.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a408fa9-ea5b-49e6-9798-ca58e1745269.png)'
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we covered various tools and techniques for getting access to
    our target system including cracking passwords, creating backdoors, exploiting
    services, and launching social engineering attacks.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了各种工具和技术，用于获取对目标系统的访问权限，包括破解密码、创建后门、利用服务和发动社会工程攻击。
