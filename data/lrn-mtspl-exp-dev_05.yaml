- en: Chapter 5. Vulnerability Scanning and Information Gathering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。漏洞扫描和信息收集
- en: 'In the previous chapter, we covered the various functions of Meterpreter and
    the approach that should be adopted for client exploitation. Now we slowly move
    on to the exploitation principles in depth, with the first phase as information
    gathering. We explain the various techniques through which we can gather information
    of our victim for pre-attack analysis. This information is used to know our victim
    better and gather platform-rich information for attacking the system. The rise
    in the amount of vulnerabilities has made us shift to using automated vulnerability
    scanners. This chapter is aimed at mastering the art of vulnerability scanning,
    which is the first step towards exploitation. Some of the modules that would be
    covered are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了Meterpreter的各种功能以及应对客户端利用应采取的方法。现在我们慢慢深入探讨利用原则，首先是信息收集阶段。我们解释了通过哪些技术可以收集我们受害者的信息，用于攻击前的分析。随着漏洞数量的增加，我们已经开始使用自动化漏洞扫描工具。本章旨在掌握漏洞扫描的艺术，这是利用的第一步。将涵盖的一些模块如下：
- en: Information gathering through Metasploit
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Metasploit进行信息收集
- en: Working with Nmap
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Nmap
- en: Working with Nessus
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Nessus
- en: Report importing in Metasploit
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Metasploit中导入报告
- en: Information Gathering through Metasploit
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Metasploit进行信息收集
- en: Information gathering is a process of collecting information about a victim
    through various techniques. This is basically divided into two steps of footprinting
    and scanning. A lot of information is available publicly about an organization
    through the organization's website, business news, job portals, disgruntled employees,
    and so on. A malicious user may be able to find domain names belonging to an organization,
    remote access information, network architecture, public IP addresses, and much
    more through this phase.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 信息收集是通过各种技术收集有关受害者的信息的过程。基本上分为足迹和扫描两个步骤。关于组织的许多信息都可以在组织的网站、商业新闻、职位门户网站、不满的员工等公开获取。恶意用户可能能够通过这个阶段找到属于组织的域名、远程访问信息、网络架构、公共IP地址等更多信息。
- en: 'Metasploit is a very strong tool and has a collection of some of the powerful
    tools in its kit for information gathering and analysis. Some of these include:
    Nmap, Nessus with Postgres support for porting the report, followed by exploitation
    using the gathered information through Metasploit, and so on. Metasploit is already
    integrated with Postgres, which indirectly helps in storing penetration testing
    results for longer duration during the testing phase. The information gathering
    phase is considered so important because attackers use these tools to gather important
    information for compromising their victim. The Metasploit auxiliary modules have
    various scans from ARP to SYN, and even service-based scans such as HTTP, SMB,
    SQL, and SSH. These actually help in fingerprinting the service version and even
    some information about probable platforms on which the service is being used.
    So, through these specifications our attack domain gets further restricted in
    hitting the victim really hard.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit是一个非常强大的工具，其中包含一些用于信息收集和分析的强大工具。其中一些包括：Nmap，Nessus与Postgres支持用于传输报告，然后利用Metasploit收集的信息进行利用等。Metasploit已经集成了Postgres，这在测试阶段间接有助于存储渗透测试结果更长的时间。信息收集阶段被认为非常重要，因为攻击者使用这些工具来收集有关破坏受害者的重要信息。Metasploit辅助模块有各种扫描，从ARP到SYN，甚至基于服务的扫描，如HTTP、SMB、SQL和SSH。这些实际上有助于对服务版本进行指纹识别，甚至一些关于可能使用服务的平台的信息。因此，通过这些规格，我们的攻击域受到了进一步限制，以便更有效地打击受害者。
- en: '![Information Gathering through Metasploit](img/3589_05_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![通过Metasploit进行信息收集](img/3589_05_01.jpg)'
- en: Image take from [http://s3.amazonaws.com/readers/2010/12/20/spyware_1.jpg](http://s3.amazonaws.com/readers/2010/12/20/spyware_1.jpg)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[http://s3.amazonaws.com/readers/2010/12/20/spyware_1.jpg](http://s3.amazonaws.com/readers/2010/12/20/spyware_1.jpg)
- en: We move on to some hands on information gathering with the help of Metasploit.
    Let us suppose we are the attacker, and we have a domain which has to be exploited.
    The first step should be to retrieve all the information about the domain for
    our malicious purpose. `Whois` is one of the best methods for information gathering.
    It is widely used for querying databases that store registered users of an Internet
    resource such as domain name, IP address, and so on.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续通过Metasploit进行一些实际的信息收集。假设我们是攻击者，我们有一个需要利用的域。第一步应该是为了恶意目的检索有关该域的所有信息。`Whois`是信息收集的最佳方法之一。它被广泛用于查询存储互联网资源的注册用户的数据库，如域名、IP地址等。
- en: Open `msfconsole` and type in `whois <domain name>`. For example, here we are
    using my own domain name `whois <techaditya.in>`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`msfconsole`并输入`whois <domain name>`。例如，这里我们使用我的域名`whois <techaditya.in>`。
- en: '![Information Gathering through Metasploit](img/3589_05_02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![通过Metasploit进行信息收集](img/3589_05_02.jpg)'
- en: We can see the amount of information gathered related to our domain. In Metasploit,
    there are a lot of auxiliary scanners, which are very useful for information gathering
    through e-mail harvesting. E-mail harvesting is a very useful tool to get the
    e-mail IDs associated with a particular domain.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到与我们的域相关的大量信息。在Metasploit中，有许多辅助扫描器，非常适用于通过电子邮件收集信息。电子邮件收集是一个非常有用的工具，可以获取与特定域相关的电子邮件ID。
- en: For using the e-mail collector auxiliary module type in `use auxiliary/gather/search_email_collector`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用电子邮件收集辅助模块，请输入`use auxiliary/gather/search_email_collector`。
- en: '![Information Gathering through Metasploit](img/3589_05_03.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![通过Metasploit进行信息收集](img/3589_05_03.jpg)'
- en: Let's have a look at the available options. For this, type in `show options`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看可用的选项。为此，输入`show options`。
- en: '![Information Gathering through Metasploit](img/3589_05_04.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![通过Metasploit进行信息收集](img/3589_05_04.jpg)'
- en: We can see that the domain is blank and we have to set the domain address. So
    just type in `set domain <domain name>`; for example, we are using `set domain
    techaditya.in` here.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到域是空白的，我们需要设置域地址。只需输入`set domain <domain name>`；例如，我们在这里使用`set domain techaditya.in`。
- en: '![Information Gathering through Metasploit](img/3589_05_05.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![通过Metasploit进行信息收集](img/3589_05_05.jpg)'
- en: Now let us run the auxiliary module; just type in `run` and it will show the
    results.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们运行辅助模块；只需输入`run`，它就会显示结果。
- en: '![Information Gathering through Metasploit](img/3589_05_06.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![通过Metasploit进行信息收集](img/3589_05_06.jpg)'
- en: With these steps, we have gathered a lot of information publicly available about
    our victim.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些步骤，我们已经收集了关于我们受害者的许多公开信息。
- en: Active Information Gathering
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主动信息收集
- en: Now let us move on to some active information gathering for exploitation of
    our victim. Another useful auxiliary scanner is the telnet version scanner. To
    use this, type in `use auxiliary/scanner/telnet/telnet_version`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们进行一些主动信息收集，以便利用我们的受害者。另一个有用的辅助扫描器是telnet版本扫描器。要使用它，输入`use auxiliary/scanner/telnet/telnet_version`。
- en: '![Active Information Gathering](img/3589_05_07.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![主动信息收集](img/3589_05_07.jpg)'
- en: After that type in `show options` to see the available options.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 之后输入`show options`以查看可用选项。
- en: '![Active Information Gathering](img/3589_05_08.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![主动信息收集](img/3589_05_08.jpg)'
- en: We can see that the `RHOSTS` option is empty and we have set the target IP address
    for scanning the telnet version, so type in `set RHOSTS<target IP address>`. For
    example, here we type `set RHOSTS 192.168.0.103`, and after that type in `run`
    for scanning.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`RHOSTS`选项为空，我们已经设置了用于扫描telnet版本的目标IP地址，因此输入`set RHOSTS<target IP address>`。例如，在这里我们输入`set
    RHOSTS 192.168.0.103`，然后输入`run`进行扫描。
- en: '![Active Information Gathering](img/3589_05_09.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![主动信息收集](img/3589_05_09.jpg)'
- en: Our victim has been scanned and we can see the telnet version of his machine.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的受害者已经被扫描，我们可以看到他的机器的telnet版本。
- en: Another scanner we would use for finding out whether a **Remote Desktop** connection
    (**RDP**) is available is the RDP scanner. But for this purpose, we have to know
    the port number for the Remote Desktop connection, which is 3389, also known as
    the RDP port. Type in `use auxiliary/scanner/rdp/ms12_020_check` and then `show
    options` to see the detailed options for usage.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用另一个扫描器来查找**远程桌面**连接（**RDP**）是否可用，即RDP扫描器。但是，为此，我们必须知道远程桌面连接的端口号，即3389，也称为RDP端口。输入`use
    auxiliary/scanner/rdp/ms12_020_check`，然后输入`show options`以查看详细的使用选项。
- en: '![Active Information Gathering](img/3589_05_10.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![主动信息收集](img/3589_05_10.jpg)'
- en: We can see the options and the ports which are predefined from 1-10000\. We
    do not need to scan all ports, so we define the port number on which RDP runs
    by default. After this, we set the `RHOST` as our target address. Type in `set
    PORTS 3389` and press *Enter*, then type `set RHOST 192.168.11.46`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到预定义的选项和端口范围为1-10000。我们不需要扫描所有端口，因此我们定义RDP默认运行的端口号。之后，我们将`RHOST`设置为我们的目标地址。输入`set
    PORTS 3389`并按*Enter*，然后输入`set RHOST 192.168.11.46`。
- en: '![Active Information Gathering](img/3589_05_11.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![主动信息收集](img/3589_05_11.jpg)'
- en: Once we have all the options set, type in `run`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置好所有选项，输入`run`。
- en: '![Active Information Gathering](img/3589_05_12.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![主动信息收集](img/3589_05_12.jpg)'
- en: We can see in the result that TCP port 3389, which is used for Remote Desktop
    connection, is open.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到结果中TCP端口3389是开放的，用于远程桌面连接。
- en: Working with Nmap
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nmap
- en: Nmap is a powerful security scanner developed by *Gordon Lyon*, and is used
    for host, service, and open ports detection on a computer network. It has many
    features such as stealth scan, aggressive scan, firewall evasion scan, and has
    the ability to fingerprint operating systems. It has its own Nmap Scripting Engine,
    which can be used along with the Lua programming language to write the customized
    scripts.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap是由*Gordon Lyon*开发的强大安全扫描仪，用于在计算机网络上检测主机、服务和开放端口。它具有许多功能，如隐身扫描、侵略性扫描、防火墙规避扫描，并且具有指纹识别操作系统的能力。它有自己的Nmap脚本引擎，可以与Lua编程语言一起使用来编写定制脚本。
- en: We start from basic techniques on Nmap scanning using Metasploit.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从使用Metasploit进行Nmap扫描的基本技术开始。
- en: Scanning a single target—running Nmap with no command options will perform a
    basic scan on the target address. The target can be given as an IPV4 address or
    its hostname. Let's see how it works. Open terminal or `msfconsole`, and type
    `nmap <target>`, for example, `nmap 192.168.11.29`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描单个目标——在目标地址上运行Nmap而不使用命令选项将对目标地址执行基本扫描。目标可以是IPV4地址或其主机名。让我们看看它是如何工作的。打开终端或`msfconsole`，输入`nmap
    <target>`，例如，`nmap 192.168.11.29`。
- en: '![Working with Nmap](img/3589_05_13.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![使用Nmap](img/3589_05_13.jpg)'
- en: The scan result shows the status of detected ports on the target. The result
    is classified into three different columns namely `PORT`, `STATE`, and `SERVICE`.
    `PORT` column shows the port number, the `STATE` column shows the status of the
    port, whether it is open or closed, and the `SERVICE` shows the type of service
    that is running on that port.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描结果显示了目标上检测到的端口的状态。结果分为三列，即`PORT`、`STATE`和`SERVICE`。`PORT`列显示端口号，`STATE`列显示端口的状态，即开放或关闭，`SERVICE`显示在该端口上运行的服务类型。
- en: 'The response of the ports are classified into six different status messages
    which are: open, close, filtered, unfiltered, open filtered, and closed filtered.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 端口的响应被分类为六种不同的状态消息，分别是：开放、关闭、过滤、未过滤、开放过滤和关闭过滤。
- en: 'The following are some different types of Nmap scan options for scanning multiple
    hosts:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于扫描多个主机的不同类型的Nmap扫描选项：
- en: '**Scanning multiple targets**: Nmap scans for multiple hosts at the same time.
    The easiest way to do this is by putting all the targets in a string separated
    by a space. Type in `nmap <Target Target>`, for example, `nmap 192.168.11.46 192.168.11.29`.![Working
    with Nmap](img/3589_05_14.jpg)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扫描多个目标**：Nmap可以同时扫描多个主机。最简单的方法是将所有目标放在一个由空格分隔的字符串中。输入`nmap <目标 目标>`，例如，`nmap
    192.168.11.46 192.168.11.29`。![使用Nmap](img/3589_05_14.jpg)'
- en: We can see the results for both the IP addresses.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到两个IP地址的结果。
- en: '**Scanning a list of targets**: Suppose we have a large number of target computers
    to scan. Then the easiest way to scan all the targets would be by putting all
    the targets in a text file. We just need to separate all targets by a new line
    or space. For example, here we have created a list named `list.txt`.![Working
    with Nmap](img/3589_05_15.jpg)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扫描目标列表**：假设我们有大量目标计算机要扫描。那么扫描所有目标的最简单方法是将所有目标放入一个文本文件中。我们只需要用新行或空格分隔所有目标。例如，这里我们创建了一个名为`list.txt`的列表。![使用Nmap](img/3589_05_15.jpg)'
- en: Now for scanning the whole list, type in `nmap –iL <list.txt>`. Here, the syntax
    `–iL` is used to instruct Nmap to extract the list of targets from the `list.txt`,
    for example, `nmap –iL list.txt`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在要扫描整个列表，请键入`nmap –iL <list.txt>`。在这里，语法`–iL`用于指示Nmap从`list.txt`中提取目标列表，例如，`nmap
    –iL list.txt`。
- en: '![Working with Nmap](img/3589_05_16.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![使用Nmap](img/3589_05_16.jpg)'
- en: We now move on to the various Nmap discovery options. So how does Nmap actually
    work? Whenever Nmap performs a scan, it delivers an ICMP echo request to the destination
    for checking whether the host is alive or dead. This process saves much time for
    Nmap when it scans multiple hosts at a time. Sometimes ICMP requests are blocked
    by firewalls, so as a secondary check Nmap tries to connect to default open ports,
    such as 80 and 443, which are used by the web server or HTTP.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在转向各种Nmap发现选项。那么Nmap实际上是如何工作的呢？每当Nmap执行扫描时，它会向目的地发送ICMP回显请求，以检查主机是活着还是死了。当Nmap同时扫描多个主机时，这个过程可以为Nmap节省大量时间。有时防火墙会阻止ICMP请求，因此作为次要检查，Nmap尝试连接默认开放的端口，例如80和443，这些端口由Web服务器或HTTP使用。
- en: Nmap discovery options
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nmap发现选项
- en: Now we will move on to various Nmap command options, which can be used for host
    discovery on a scenario basis.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将转向各种Nmap命令选项，这些选项可以根据场景进行主机发现。
- en: '![Nmap discovery options](img/3589OS_05_17.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![Nmap发现选项](img/3589OS_05_17.jpg)'
- en: In the previous screenshot we can see all the scanning options available in
    Nmap. Let us test a few, since the complete coverage of commands is beyond the
    scope of this book.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个屏幕截图中，我们可以看到Nmap中提供的所有扫描选项。让我们测试一些，因为本书的完整命令覆盖范围超出了本书的范围。
- en: '**Ping only scan**: This scan is used for finding the live hosts in a network.
    For executing the ping only scan, we use the command `nmap –sP <Target>`; for
    example, here we set `nmap –sP 192.168.11.2-60`.![Nmap discovery options](img/3589_05_18.jpg)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅Ping扫描**：此扫描用于查找网络中的活动主机。要执行仅Ping扫描，我们使用命令`nmap –sP <Target>`；例如，这里我们设置`nmap
    –sP 192.168.11.2-60`。![Nmap发现选项](img/3589_05_18.jpg)'
- en: In the result we see that four hosts are up. So this scan saves time for performing
    a scan in a large network, and identifies all the live hosts, leaving the inactive
    ones.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果中，我们看到有四台主机是活动的。因此，这种扫描可以节省在大型网络中执行扫描的时间，并识别所有活动主机，留下不活动的主机。
- en: '**TCP ACK ping**: This scan sends TCP ACK packets to the target. This method
    is used to discover hosts by collecting TCP responses from hosts (depends on TCP
    three-way handshake). When ICMP requests are blocked by the firewall, this method
    is useful for gathering information. For performing this scan, we use the command
    `nmap –PA <target>`; for example, here we set `nmap –PA 192.168.11.46`.![Nmap
    discovery options](img/3589_05_19.jpg)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TCP ACK ping**：此扫描向目标发送TCP ACK数据包。此方法用于通过收集主机的TCP响应来发现主机（取决于TCP三次握手）。当防火墙阻止ICMP请求时，此方法对于收集信息很有用。要执行此扫描，我们使用命令`nmap
    –PA <target>`；例如，这里我们设置`nmap –PA 192.168.11.46`。![Nmap发现选项](img/3589_05_19.jpg)'
- en: '**ICMP echo ping**: This option sends ICMP requests to the target for checking
    whether the host replies or not. This type of scan works best on the local network
    where ICMP packets are easily transmitted over the network. But many hosts do
    not respond to ICMP packet requests for security reasons. The command for this
    option is `nmap –PE 192.168.11.46`.![Nmap discovery options](img/3589_05_20.jpg)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ICMP回显扫描**：此选项向目标发送ICMP请求，以检查主机是否回复。这种类型的扫描在本地网络上效果最佳，因为ICMP数据包可以轻松地在网络上传输。但出于安全原因，许多主机不会响应ICMP数据包请求。此选项的命令是`nmap
    –PE 192.168.11.46`。![Nmap发现选项](img/3589_05_20.jpg)'
- en: '**Force reverse DNS resolution**: This scan is useful for performing reconnaissance
    on a target. Nmap will try to resolve the reverse DNS information of the target
    address. It reveals juicy information about the target IP address as you can see
    in the following screenshot. The command we used for scanning is `nmap –R <Target>`;
    for example, here we set `nmap –R 66.147.244.90`.![Nmap discovery options](img/3589_05_21.jpg)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强制反向DNS解析**：此扫描对于对目标执行侦察很有用。Nmap将尝试解析目标地址的反向DNS信息。它会显示有关目标IP地址的有趣信息，如下面的屏幕截图所示。我们用于扫描的命令是`nmap
    –R <Target>`；例如，这里我们设置`nmap –R 66.147.244.90`。![Nmap发现选项](img/3589_05_21.jpg)'
- en: Nmap advanced scanning options
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nmap高级扫描选项
- en: 'Now let us see some advanced scanning options. These are mainly used for bypassing
    firewall and finding services that are not common. The list of options are shown
    in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一些高级扫描选项。这些主要用于绕过防火墙并找到不常见的服务。选项列表显示在下面的屏幕截图中：
- en: '![Nmap advanced scanning options](img/3589OS_05_22.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![Nmap高级扫描选项](img/3589OS_05_22.jpg)'
- en: 'We will explain some of them as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以下一些选项解释如下：
- en: '**TCP SYN scan**: TCP SYN scan attempts to identify ports by sending a SYN
    packet to the target and waiting for a response. A SYN packet is basically sent
    to indicate that a new connection is to be established. This type of scan is also
    known as the stealth scan because it does not attempt to open a full-fledged connection
    to the remote host. For performing this scan, we use the command `nmap –sS <target>`;
    for example, here we are using `nmap –sS 192.168.0.104`.![Nmap advanced scanning
    options](img/3589_05_23.jpg)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TCP SYN扫描**：TCP SYN扫描尝试通过向目标发送SYN数据包并等待响应来识别端口。SYN数据包基本上是发送以指示要建立新连接。这种类型的扫描也被称为隐形扫描，因为它不尝试与远程主机建立完整的连接。要执行此扫描，我们使用命令`nmap
    –sS <target>`；例如，这里我们使用`nmap –sS 192.168.0.104`。![Nmap高级扫描选项](img/3589_05_23.jpg)'
- en: '**TCP null scan**: This type of scan sends packets without TCP flags enabled.
    This is done by setting the header to zero. This type of scan is used for fooling
    a firewalled system in getting a response from them. The command for null scan
    is `nmap –sN <target>`; for example, here we are using `nmap –sN 192.168.0.103`.![Nmap
    advanced scanning options](img/3589_05_24.jpg)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP空扫描：这种类型的扫描发送没有启用TCP标志的数据包。这是通过将标头设置为零来实现的。这种类型的扫描用于愚弄受防火墙系统。空扫描的命令是`nmap
    -sN <target>`；例如，这里我们使用`nmap -sN 192.168.0.103`。![Nmap高级扫描选项](img/3589_05_24.jpg)
- en: '**Custom TCP scan**: This type of scan performs a custom scan using one or
    more TCP header flags. Any combination of flags can be used in this scan. The
    various types of TCP flags are shown in the following figure:![Nmap advanced scanning
    options](img/3589OS_05_25.jpg)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义TCP扫描：这种类型的扫描使用一个或多个TCP头标志执行自定义扫描。在此扫描中可以使用任意组合的标志。各种类型的TCP标志如下图所示：![Nmap高级扫描选项](img/3589OS_05_25.jpg)
- en: Any combination of these flags can be used with this scan. The command used
    is `nmap –scanflags SYNURG <target>`; for example, here we set `nmap –scanflags
    SYNURG 192.168.0.102`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用这种扫描的任意组合标志。使用的命令是`nmap -scanflags SYNURG <target>`；例如，这里我们设置`nmap -scanflags
    SYNURG 192.168.0.102`。
- en: '![Nmap advanced scanning options](img/3589_05_26.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![Nmap高级扫描选项](img/3589_05_26.jpg)'
- en: Port scanning options
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 端口扫描选项
- en: Next we move on to some more scanning techniques for specific ports, a range
    of ports, and port scanning based on protocols, names, and so on.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍一些针对特定端口、一系列端口和基于协议、名称等进行端口扫描的更多技术。
- en: '![Port scanning options](img/3589OS_05_27.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![端口扫描选项](img/3589OS_05_27.jpg)'
- en: '**Fast scan**: In this scan, Nmap does a quick scan for only 100 ports out
    of the 1000 most common ports. Thus, the Nmap scanning speed gets tremendously
    increased by reducing the number of ports during the scan. The command used for
    fast scan is `nmap –F <Target >`; for example, here we are using `nmap –F 192.168.11.46`.![Port
    scanning options](img/3589_05_28.jpg)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速扫描：在这种扫描中，Nmap仅对1000个最常见的端口中的100个端口进行快速扫描。因此，通过在扫描过程中减少端口数量，Nmap的扫描速度得到了极大的提高。快速扫描的命令是`nmap
    -F <Target>`；例如，这里我们使用`nmap -F 192.168.11.46`。![端口扫描选项](img/3589_05_28.jpg)
- en: '**Scan ports by name**: Scanning ports by name is very easy and we just have
    to specify the port name during the scan. The command used is `nmap –p (portname)
    <target>`; for example, here we are using `nmap –p http 192.168.11.57`.![Port
    scanning options](img/3589_05_29.jpg)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按名称扫描端口：按名称扫描端口非常简单，我们只需在扫描过程中指定端口名称。使用的命令是`nmap -p (portname) <target>`；例如，这里我们使用`nmap
    -p http 192.168.11.57`。![端口扫描选项](img/3589_05_29.jpg)
- en: '**Performing a sequential port scan**: With the help of the sequential port
    scanner, Nmap scans its target by a sequential port order. This technique is quite
    useful for evading firewall and **Intrusion Prevention System**. The command used
    is `nmap –r <target>`; for example, here we are using `nmap –r 192.168.11.46`.![Port
    scanning options](img/3589_05_30.jpg)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行顺序端口扫描：借助顺序端口扫描程序，Nmap按顺序端口顺序扫描其目标。这种技术对于规避防火墙和入侵防范系统非常有用。使用的命令是`nmap -r <target>`；例如，这里我们使用`nmap
    -r 192.168.11.46`。![端口扫描选项](img/3589_05_30.jpg)
- en: 'We sometimes face problems when we receive filtered port results while scanning.
    This case arises when a system is protected by a firewall or Intrusion prevention
    systems. Nmap has some features that help to bypass these protection mechanisms
    as well. We have listed a few options in the following table:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有时在扫描时我们会遇到接收到经过过滤的端口结果的问题。当系统受到防火墙或入侵防范系统的保护时会出现这种情况。Nmap还具有一些功能，可以帮助绕过这些保护机制。我们在下表中列出了一些选项：
- en: '![Port scanning options](img/3589OS_05_31.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![端口扫描选项](img/3589OS_05_31.jpg)'
- en: 'We will explain some of them as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将解释其中一些如下：
- en: '**Fragment Packets**: By using this option, Nmap sends very small 8 byte packets.
    This option is very useful for evading improperly configured firewall systems.
    The command used is `nmap –f <target>`; for example, here we are using `nmap –f
    192.168.11.29`.![Port scanning options](img/3589_05_32.jpg)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分段数据包：通过使用此选项，Nmap发送非常小的8字节数据包。这个选项对规避配置不当的防火墙系统非常有用。使用的命令是`nmap -f <target>`；例如，这里我们使用`nmap
    -f 192.168.11.29`。![端口扫描选项](img/3589_05_32.jpg)
- en: '**Idle Zombie Scan**: This is a very unique scanning technique in which Nmap
    uses a zombie host for scanning the target. It means, here Nmap uses two IP addresses
    for performing a scan. The command used is `nmap –sI <Zombie host> <Target>`;
    for example, here we are using `nmap –sI 192.168.11.29 192.168.11.46`.![Port scanning
    options](img/3589_05_33.jpg)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空闲僵尸扫描：这是一种非常独特的扫描技术，Nmap在其中使用僵尸主机来扫描目标。这意味着，这里Nmap使用两个IP地址执行扫描。使用的命令是`nmap
    -sI <Zombie host> <Target>`；例如，这里我们使用`nmap -sI 192.168.11.29 192.168.11.46`。![端口扫描选项](img/3589_05_33.jpg)
- en: '**Spoof MAC Address**: This technique is useful when a firewalled-system detects
    a scanning process via the system''s MAC address, and blacklists those MAC addresses.
    But Nmap has a feature of spoofing MAC addresses. MAC addresses can be spoofed
    via three different arguments, which are listed in the following screenshot:![Port
    scanning options](img/3589OS_05_34.jpg)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欺骗MAC地址：当受防火墙系统检测到通过系统的MAC地址进行扫描时，并将这些MAC地址列入黑名单时，这种技术非常有用。但是Nmap具有欺骗MAC地址的功能。MAC地址可以通过三种不同的参数进行欺骗，这些参数在下图中列出：![端口扫描选项](img/3589OS_05_34.jpg)
- en: The command used for this is `nmap –spoof-mac <Argument> <Target>`; for example,
    here we are using `nmap –spoof-mac Apple 192.168.11.29`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 用于此的命令是`nmap -spoof-mac <Argument> <Target>`；例如，这里我们使用`nmap -spoof-mac Apple
    192.168.11.29`。
- en: '![Port scanning options](img/3589_05_35.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![端口扫描选项](img/3589_05_35.jpg)'
- en: 'After learning different types of scanning techniques, next we move on to how
    we can save the Nmap output results in various ways and formats. The options are
    listed in the following figure:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 学习了不同类型的扫描技术之后，接下来我们将介绍如何以各种方式和格式保存Nmap输出结果。选项列在下图中：
- en: '![Port scanning options](img/3589OS_05_36.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![端口扫描选项](img/3589OS_05_36.jpg)'
- en: Let us save an Nmap output result in an XML file. The command used is `nmap
    –oX <scan.xml> <Target>`; for example, here we are using `nmap –oN scan.txt 192.168.11.46`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将Nmap输出结果保存在一个XML文件中。使用的命令是`nmap –oX <scan.xml> <Target>`；例如，这里我们使用的是`nmap
    –oN scan.txt 192.168.11.46`。
- en: '![Port scanning options](img/3589_05_37.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![端口扫描选项](img/3589_05_37.jpg)'
- en: Working with Nessus
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nessus
- en: Nessus is a proprietary vulnerability scanner, which is available freely for
    noncommercial usage. It detects vulnerabilities, misconfigurations, default credentials
    on target systems, and is used in various compliance audits as well.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Nessus是一款专有的漏洞扫描工具，可免费用于非商业用途。它可以检测目标系统上的漏洞、配置错误、默认凭据，并且还用于各种合规审计。
- en: For starting Nessus in Metasploit, open `msfconsole` and type `load nessus`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Metasploit中启动Nessus，打开`msfconsole`并输入`load nessus`。
- en: '![Working with Nessus](img/3589_05_38.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![使用Nessus](img/3589_05_38.jpg)'
- en: Let us use the Nessus `help` command by typing `nessus_help`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过输入`nessus_help`来使用Nessus的`help`命令。
- en: '![Working with Nessus](img/3589_05_39.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![使用Nessus](img/3589_05_39.jpg)'
- en: We have a list of various Nessus command-line options. Next we connect to Nessus
    from our localhost for starting the scans. For connecting to localhost, the command
    used is `nessus_connect <Your Username>:<Your Password>@localhost:8834 <ok>`,
    and here we are using `nessus_connect hacker:toor@localhost:8834 ok`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有各种Nessus命令行选项的列表。接下来，我们从本地主机连接到Nessus以开始扫描。要连接到本地主机，使用的命令是`nessus_connect
    <Your Username>:<Your Password>@localhost:8834 <ok>`，这里我们使用的是`nessus_connect hacker:toor@localhost:8834
    ok`。
- en: '![Working with Nessus](img/3589_05_40.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![使用Nessus](img/3589_05_40.jpg)'
- en: After getting successfully connected to Nessus on its default port, we will
    now check the Nessus scanning policies. For this, we type in `nessus_policy_list`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 成功连接到Nessus的默认端口后，我们现在将检查Nessus扫描策略。为此，我们输入`nessus_policy_list`。
- en: '![Working with Nessus](img/3589_05_41.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![使用Nessus](img/3589_05_41.jpg)'
- en: Here we can see four policies of Nessus; the first is external network scan,
    which is used for scanning network vulnerabilities externally. The second is internal
    network scan, which is used for scanning network vulnerabilities internally. The
    third is Web App Tests, which is used for scanning web application for vulnerabilities.
    The fourth one is PCI-DSS (Payment Card Industry-data Security Standard) audits,
    which is used in the Payment Card Industry as the data security standard.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到Nessus的四种策略；第一种是外部网络扫描，用于外部扫描网络漏洞。第二种是内部网络扫描，用于内部扫描网络漏洞。第三种是Web应用程序测试，用于扫描Web应用程序的漏洞。第四种是PCI-DSS（支付卡行业数据安全标准）审计，用于支付卡行业的数据安全标准。
- en: Now we are going to scan our victim machine. For scanning a machine we have
    to create a new scan, and the command used is `nessus_new_scan <policy ID> <scan
    name> <Target IP>`; for example, here we are using `nessus_new_scan -2 WindowsXPscan
    192.168.0.103`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将扫描我们的受害者机器。要扫描一台机器，我们必须创建一个新的扫描，使用的命令是`nessus_new_scan <policy ID> <scan
    name> <Target IP>`；例如，这里我们使用的是`nessus_new_scan -2 WindowsXPscan 192.168.0.103`。
- en: '![Working with Nessus](img/3589_05_42.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![使用Nessus](img/3589_05_42.jpg)'
- en: We can check the status of the scanning process by typing in `nessus_scan_status`;
    it will show us the status of the scanning process, whether it has completed or
    not.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过输入`nessus_scan_status`来检查扫描过程的状态；它将显示扫描过程的状态，无论是否已完成。
- en: '![Working with Nessus](img/3589_05_43.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![使用Nessus](img/3589_05_43.jpg)'
- en: After completing the scanning process, now it is time to check for the report
    list, so type in `nessus_report_list`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 完成扫描过程后，现在是时候检查报告列表了，因此输入`nessus_report_list`。
- en: '![Working with Nessus](img/3589_05_44.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![使用Nessus](img/3589_05_44.jpg)'
- en: We can see the report with its **ID**. Its **Status** is marked as **completed**.
    For opening the report we use the command `nessus_report_hosts <report ID>`; for
    example, here we are using `nessus_report_hosts dc4583b5-22b8-6b1a-729e-9c92ee3916cc301e45e2881c93dd`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到带有**ID**的报告。其**状态**标记为**已完成**。要打开报告，我们使用命令`nessus_report_hosts <report
    ID>`；例如，这里我们使用的是`nessus_report_hosts dc4583b5-22b8-6b1a-729e-9c92ee3916cc301e45e2881c93dd`。
- en: '![Working with Nessus](img/3589_05_45.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![使用Nessus](img/3589_05_45.jpg)'
- en: In the previous screenshot, we can see the result for the machine with the IP
    `192.168.0.103` that has a total severity of `41`. This means the total number
    of vulnerabilities is 41.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张截图中，我们可以看到IP为`192.168.0.103`的机器的结果，其严重程度总共为`41`。这意味着漏洞总数为41。
- en: 'The following are the classifications of the different vulnerabilities:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是不同漏洞的分类：
- en: Sev 0 indicates high-level vulnerabilities, which are 4
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sev 0表示高级漏洞，共有4个
- en: Sev 1 indicates medium-level vulnerabilities, which are 28
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sev 1表示中级漏洞，共有28个
- en: Sev 2 indicates low-level vulnerabilities, which are 4
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sev 2表示低级漏洞，共有4个
- en: Sev 3 indicates informational vulnerabilities, which are 9
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sev 3表示信息性漏洞，共有9个
- en: We may see the vulnerabilities in detail with the protocol name and services
    using the command `nessus_report_hosts_ports <Target IP> <Report ID>`; for example,
    here we are using `nessus_report_host_ports 192.168.0.103 dc4583b5-22b8-6b1a-729e-9c92ee3916cc301e45e2881c93dd`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用命令`nessus_report_hosts_ports <Target IP> <Report ID>`来详细查看协议名称和服务的漏洞；例如，这里我们使用的是`nessus_report_host_ports
    192.168.0.103 dc4583b5-22b8-6b1a-729e-9c92ee3916cc301e45e2881c93dd`。
- en: '![Working with Nessus](img/3589_05_46.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![使用Nessus](img/3589_05_46.jpg)'
- en: Report importing in Metasploit
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Metasploit中导入报告
- en: Importing a report of vulnerability scanners into the Metasploit database is
    a very useful feature provided by Metasploit. In this chapter, we used two scanners,
    which are Nmap and Nessus. We already saw the various scanning techniques of Nmap
    used in different circumstances. Now we will see how to import an Nmap report
    via `msfconsole` in PostgreSQL database.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 将漏洞扫描仪的报告导入Metasploit数据库是Metasploit提供的一个非常有用的功能。在本章中，我们使用了两个扫描仪，即Nmap和Nessus。我们已经看到了Nmap在不同情况下使用的各种扫描技术。现在我们将看到如何通过`msfconsole`将Nmap报告导入到PostgreSQL数据库中。
- en: Scan any host and save the Nmap report in XML format because `msfconsole` does
    not support TXT format. So here we already have a scan report in XML format named
    `scan.xml`. Now the first thing we have to do is to check the database for connectivity
    with the `msfconsole` using the command `db_status`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描任何主机并将Nmap报告保存为XML格式，因为`msfconsole`不支持TXT格式。所以这里我们已经有一个名为`scan.xml`的XML格式扫描报告。现在我们要做的第一件事是使用命令`db_status`检查与`msfconsole`的数据库连接状态。
- en: '![Report importing in Metasploit](img/3589_05_47.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![在Metasploit中导入报告](img/3589_05_47.jpg)'
- en: Our database is connected with `msfconsole` and now it's time to import the
    Nmap report. We use the command `db_import <report path with name>`; for example,
    here we are importing our report from the desktop, so we are giving `db_import
    /root/Desktop/scan.xml`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据库已连接到`msfconsole`，现在是时候导入Nmap报告了。我们使用命令`db_import <报告路径及名称>`；例如，在这里我们正在从桌面导入我们的报告，所以我们输入`db_import
    /root/Desktop/scan.xml`。
- en: '![Report importing in Metasploit](img/3589_05_48.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![在Metasploit中导入报告](img/3589_05_48.jpg)'
- en: After successfully importing the report into the database, we may access it
    from `msfconsole`. We can see the host details by typing `host <hostname on which
    nmap scan performed>`; for example, here we are using `host 192.168.0.102`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 成功将报告导入数据库后，我们可以从`msfconsole`中访问它。我们可以通过输入`host <进行nmap扫描的主机名>`来查看主机的详细信息；例如，在这里我们使用`host
    192.168.0.102`。
- en: '![Report importing in Metasploit](img/3589_05_49.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![在Metasploit中导入报告](img/3589_05_49.jpg)'
- en: Here we have some important information about the host such as the MAC address
    and the operating system version. Now after selecting the hosts, let us check
    for the open port details and the services running on those ports. The command
    used is `services <hostname>`; for example, here we are using `services 192.168.0.102`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于主机的重要信息，比如MAC地址和操作系统版本。现在在选择主机之后，让我们检查一下开放端口的详细信息以及运行在这些端口上的服务。使用的命令是`services
    <hostname>`；例如，在这里我们使用`services 192.168.0.102`。
- en: '![Report importing in Metasploit](img/3589_05_50.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![在Metasploit中导入报告](img/3589_05_50.jpg)'
- en: What we have here is all the information of open ports and services running
    on the victim machine. Now we can search for exploits for further attacks, which
    we already did in the previous chapter.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里有受害机上开放端口和运行服务的所有信息。现在我们可以搜索用于进一步攻击的漏洞利用，这是我们在上一章中已经做过的。
- en: Next we will learn to import the report of Nessus in `msfconsole`. It is as
    simple as importing the Nmap report using the same command, which is `db_import
    <report name with file location>`; for example, here we are using `db_import /root/Desktop/Nessus_scan.nessus`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何在`msfconsole`中导入Nessus的报告。与导入Nmap报告使用相同的命令一样简单，即`db_import <报告名称及文件位置>`；例如，在这里我们使用`db_import
    /root/Desktop/Nessus_scan.nessus`。
- en: '![Report importing in Metasploit](img/3589_05_51.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![在Metasploit中导入报告](img/3589_05_51.jpg)'
- en: We can see that the report has been successfully imported for host 192.168.0.103,
    and now we can check the vulnerabilities for this host by typing in `vulns <hostname>`;
    for example, here we are using `vulns 192.168.0.103`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到已成功导入了主机192.168.0.103的报告，现在我们可以通过输入`vulns <hostname>`来检查此主机的漏洞；例如，在这里我们使用`vulns
    192.168.0.103`。
- en: '![Report importing in Metasploit](img/3589_05_52.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![在Metasploit中导入报告](img/3589_05_52.jpg)'
- en: Now we can see the vulnerabilities of the victim machine; according to these
    vulnerabilities, we can search for exploits, payloads, and auxiliary modules for
    performing further attacks.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到受害机的漏洞；根据这些漏洞，我们可以搜索用于执行进一步攻击的漏洞利用、有效载荷和辅助模块。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we have covered the various techniques for gathering information
    against a victim using the modules of Metasploit. We covered some freely available
    tools along with some auxiliary scanners. Using some of the auxiliary scanners
    we were actually able to fingerprint a particular running service. Through Nmap
    we learned to perform a network scan for live systems, firewall protected systems,
    and the various other scanning techniques which can be used in different scenarios.
    We saw that Nessus is a very big tool, which can be used for vulnerability assessment
    of a victim machine. We also learned to import Nmap and Nessus reports into Metasploit.
    With this chapter, we are already one step ahead in exploiting our victim, and
    will move on to covering client-side exploitation in the next chapter.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了使用Metasploit模块对受害者进行信息收集的各种技术。我们介绍了一些免费的工具以及一些辅助扫描器。使用一些辅助扫描器，我们实际上能够对特定运行服务进行指纹识别。通过Nmap，我们学会了对活动系统、受防火墙保护的系统以及其他各种不同场景中可以使用的各种扫描技术进行网络扫描。我们看到Nessus是一个非常强大的工具，可以用于对受害机进行漏洞评估。我们还学会了将Nmap和Nessus报告导入Metasploit。通过本章，我们已经在利用我们的受害者方面迈出了一大步，并将在下一章中继续介绍客户端利用。
- en: References
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'The following are some helpful references that shed further light on some of
    the topics covered in this chapter:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些有用的参考资料，可以进一步了解本章涉及的一些主题：
- en: '[https://pentestlab.wordpress.com/2013/02/17/metasploit-storing-pen-test-results/](https://pentestlab.wordpress.com/2013/02/17/metasploit-storing-pen-test-results/)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://pentestlab.wordpress.com/2013/02/17/metasploit-storing-pen-test-results/](https://pentestlab.wordpress.com/2013/02/17/metasploit-storing-pen-test-results/)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Information_Gathering](http://www.offensive-security.com/metasploit-unleashed/Information_Gathering)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Information_Gathering](http://www.offensive-security.com/metasploit-unleashed/Information_Gathering)'
- en: '[http://www.firewalls.com/blog/metasploit_scanner_stay_secure/](http://www.firewalls.com/blog/metasploit_scanner_stay_secure/)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.firewalls.com/blog/metasploit_scanner_stay_secure/](http://www.firewalls.com/blog/metasploit_scanner_stay_secure/)'
- en: '[http://www.mustbegeek.com/security/ethical-hacking/](http://www.mustbegeek.com/security/ethical-hacking/)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.mustbegeek.com/security/ethical-hacking/](http://www.mustbegeek.com/security/ethical-hacking/)'
- en: '[http://backtrack-wifu.blogspot.in/2013/01/an-introduction-to-information-gathering.html](http://backtrack-wifu.blogspot.in/2013/01/an-introduction-to-information-gathering.html)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://backtrack-wifu.blogspot.in/2013/01/an-introduction-to-information-gathering.html](http://backtrack-wifu.blogspot.in/2013/01/an-introduction-to-information-gathering.html)'
- en: '[http://www.offensive-security.com/metasploit-unleashed/Nessus_Via_Msfconsole](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Nessus_Via_Msfconsole)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.offensive-security.com/metasploit-unleashed/Nessus_Via_Msfconsole](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Nessus_Via_Msfconsole)'
- en: '[http://en.wikipedia.org/wiki/Nmap](http://en.wikipedia.org/wiki/Nmap)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/Nmap](http://en.wikipedia.org/wiki/Nmap)'
- en: '[http://en.wikipedia.org/wiki/Nessus_(software)](http://en.wikipedia.org/wiki/Nessus_(software))'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/Nessus_(software)](http://en.wikipedia.org/wiki/Nessus_(software))'
