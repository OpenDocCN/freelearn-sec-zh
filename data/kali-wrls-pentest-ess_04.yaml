- en: Chapter 4. WEP Cracking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。WEP破解
- en: In this chapter, we will cover the **Wired Equivalent Privacy** (**WEP**) protocol
    and its vulnerabilities, showing how to crack the WEP keys with some of the tools
    included in Kali Linux, namely, the Aircrack-ng suite and Fern WiFi Cracker.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍**有线等效隐私**（**WEP**）协议及其漏洞，展示如何使用Kali Linux中包含的一些工具，即Aircrack-ng套件和Fern
    WiFi Cracker来破解WEP密钥。
- en: 'We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Introduction to WEP
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WEP介绍
- en: WEP cracking with Aircrack-ng
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Aircrack-ng破解WEP
- en: WEP cracking with automated tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自动化工具破解WEP
- en: An introduction to WEP
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WEP简介
- en: The WEP protocol was introduced with the original 802.11 standard as a means
    to provide authentication and encryption to wireless LAN implementations. It is
    based on the **RC4** (**Rivest Cipher 4**) stream cypher with a **preshared secret
    key** (**PSK**) of 40 or 104 bits, depending on the implementation. A 24 bit pseudo-random
    **Initialization Vector** (**IV**) is concatenated with the preshared key to generate
    the per-packet keystream used by RC4 for the actual encryption and decryption
    processes. Thus, the resulting keystream could be 64 or 128 bits long.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: WEP协议是在最初的802.11标准中引入的，作为为无线局域网实现提供身份验证和加密的手段。它基于**RC4**（**Rivest Cipher 4**）流密码，使用40位或104位的**预共享密钥**（**PSK**），具体取决于实现。24位伪随机**初始化向量**（**IV**）与预共享密钥连接在一起，用于生成RC4用于实际加密和解密过程的每个数据包密钥流。因此，生成的密钥流可能是64位或128位长。
- en: 'In the encryption phase, the keystream is XORed with the plaintext data to
    obtain the encrypted data, while in the decryption phase the encrypted data is
    XORed with the keystream to obtain the plaintext data. The encryption process
    is shown in the following diagram:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在加密阶段，密钥流与明文数据进行异或运算，以获得加密数据，而在解密阶段，加密数据与密钥流进行异或运算，以获得明文数据。加密过程如下图所示：
- en: '![An introduction to WEP](img/B04527_04_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![WEP简介](img/B04527_04_01.jpg)'
- en: Attacks against WEP
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 针对WEP的攻击
- en: First of all, we must say that WEP is an insecure protocol and has been deprecated
    by the Wi-Fi Alliance. It suffers from various vulnerabilities related to the
    generation of the keystreams, to the use of IVs and to the length of the keys.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须说WEP是一个不安全的协议，并已被Wi-Fi联盟弃用。它存在与密钥流的生成、IV的使用和密钥长度相关的各种漏洞。
- en: The IV is used to add randomness to the keystream, trying to avoid the reuse
    of the same keystream to encrypt different packets. This purpose has not been
    accomplished in the design of WEP, because the IV is only 24 bits long (with 2^24
    = 16,777,216 possible values) and it is transmitted in clear-text within each
    frame. Thus, after a certain period of time (depending on the network traffic)
    the same IV, and consequently the same keystream, will be reused, allowing the
    attacker to collect the relative cypher texts and perform statistical attacks
    to recover the plain texts and the key.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: IV用于向密钥流添加随机性，试图避免重用相同的密钥流来加密不同的数据包。WEP的设计并未实现这一目的，因为IV只有24位长（具有2^24 = 16,777,216个可能的值），并且在每个帧中以明文形式传输。因此，在一定时间后（取决于网络流量），将重用相同的IV，因此也将重用相同的密钥流，使攻击者能够收集相关的密文并执行统计攻击以恢复明文和密钥。
- en: The first well-known attack against WEP was the **Fluhrer, Mantin and Shamir**
    (**FMS**) attack, back in 2001\. The FMS attack relies on the way WEP generates
    the keystreams and on the fact that it also uses *weak* IVs to generate weak keystreams,
    making possible for an attacker to collect a sufficient number of packets encrypted
    with these keystreams, analyze them, and recover the key.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 针对WEP的第一个著名攻击是2001年的**Fluhrer, Mantin and Shamir**（**FMS**）攻击。FMS攻击依赖于WEP生成密钥流的方式，以及它还使用*weak*
    IV来生成弱密钥流，使得攻击者能够收集足够数量的使用这些密钥流加密的数据包，对其进行分析，并恢复密钥。
- en: The number of IVs to be collected to complete the FMS attack is about 250,000
    for 40-bit keys and 1,500,000 for 104-bit keys.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 完成FMS攻击所需收集的IV数量约为40位密钥为250,000个，104位密钥为1,500,000个。
- en: The FMS attack has been enhanced by Korek, improving its performances.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: FMS攻击已经被Korek改进，提高了其性能。
- en: Andreas Klein found more correlations between the RC4 keystream and the key
    than the ones discovered by Fluhrer, Mantin, and Shamir, that can used to crack
    the WEP key.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Andreas Klein发现了RC4密钥流与密钥之间的更多相关性，这些相关性可以用来破解WEP密钥。
- en: In 2007, **Pyshkin, Tews, and Weinmann** (**PTW**) extended Andreas Klein's
    research and improved the FMS attack, significantly reducing the number of IVs
    needed to successfully recover the WEP key.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 2007年，**Pyshkin, Tews, and Weinmann**（**PTW**）扩展了Andreas Klein的研究，并改进了FMS攻击，显著减少了成功恢复WEP密钥所需的IV数量。
- en: Indeed, the PTW attack does not rely on weak IVs like the FMS attack does and
    is very fast and effective. It is able to recover a 104-bit WEP key with a success
    probability of 50 percent using less than 40,000 frames and with a probability
    of 95 percent with 85,000 frames.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，PTW攻击不像FMS攻击那样依赖于弱IV，并且非常快速和有效。它能够在不到40,000帧的情况下以50%的成功概率恢复104位WEP密钥，并且在85,000帧的情况下以95%的概率成功。
- en: The PTW attack is the default method used by Aircrack-ng to crack WEP keys.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: PTW攻击是Aircrack-ng用来破解WEP密钥的默认方法。
- en: Both the FMS and PTW attacks need to collect quite a large number of frames
    to succeed and can be conducted passively, sniffing the wireless traffic on the
    same channel of the target AP and capturing frames. The problem is that, in normal
    conditions, we will have to spend quite a long time to passively collect all the
    necessary packets for the attacks, especially with the FMS attack.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: FMS和PTW攻击都需要收集相当多的帧才能成功，并且可以被动地进行，嗅探目标AP的同一信道上的无线流量并捕获帧。问题在于，在正常情况下，我们将不得不花费相当长的时间
    passively 收集攻击所需的所有必要数据包，特别是FMS攻击。
- en: To accelerate the process, the idea is to re-inject frames in the network to
    generate traffic in response so that we could collect the necessary IVs more quickly.
    A type of frame that is suitable for this purpose is the ARP request, because
    the AP broadcasts it and each time with a new IV. As we are not associated with
    the AP, if we send frames to it directly, they are discarded and a de-authentication
    frame is sent. Instead, we can capture ARP requests from associated clients and
    retransmit them to the AP.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快这个过程，想法是重新向网络中注入帧以产生响应流量，以便更快地收集所需的IV。适合这一目的的一种帧类型是ARP请求，因为AP会广播它，并且每次都会有一个新的IV。由于我们没有与AP关联，如果我们直接向其发送帧，它们将被丢弃并发送去认证帧。相反，我们可以捕获关联客户端的ARP请求并将其重发到AP。
- en: This technique is called the **ARP Request Replay** attack and is also adopted
    by Aircrack-ng for the implementation of the PTW attack.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术被称为**ARP请求重放**攻击，也被Aircrack-ng采用用于实施PTW攻击。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**WEP attacks in depth**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**深入破解WEP**'
- en: The mathematics and cryptography behind these attacks are beyond the scope of
    this book. For those interested in understanding the details and the techniques
    of the attacks, a valuable resource is the *Technique Papers* section on the Aircrack-ng
    links and references page available at [http://www.aircrack-ng.org/doku.php?id=links#technique_papers](http://www.aircrack-ng.org/doku.php?id=links#technique_papers).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些攻击背后的数学和密码学超出了本书的范围。对于那些有兴趣了解攻击的细节和技术的人来说，一个有价值的资源是Aircrack-ng链接和参考页面上的*技术论文*部分，网址为[http://www.aircrack-ng.org/doku.php?id=links#technique_papers](http://www.aircrack-ng.org/doku.php?id=links#technique_papers)。
- en: WEP cracking with Aircrack-ng
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Aircrack-ng破解WEP
- en: Now that we have explored WEP vulnerabilities and its relative attacks, we are
    ready to begin the hands-on part. In this section, we will see how to crack WEP
    keys with the Aircrack-ng suite.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了WEP的漏洞及其相关攻击，我们准备开始实际操作部分。在本节中，我们将看到如何使用Aircrack-ng套件破解WEP密钥。
- en: In the reconnaissance phase, we have collected information about each network
    to be tested, such as the BSSID, the channel on which it operates, and the security
    protocol used. Here, we focus on a WEP-protected network and we start capturing
    the frames exchanged by the AP and the associated clients on the relative channel.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在侦察阶段，我们已经收集了关于每个要测试的网络的信息，例如BSSID、操作频道和使用的安全协议。在这里，我们专注于一个受WEP保护的网络，并开始捕获在相关频道上AP和关联客户端之间交换的帧。
- en: 'We can try this attack ourselves by setting our Wi-Fi router to use WEP. We
    assume that the BSSID of the AP is 08:7A:4C:83:0C:E0 and the channel is 1\. The
    first step is to start the monitor mode on channel 1, as we have seen in the previous
    chapter:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将我们的WiFi路由器设置为使用WEP来尝试这种攻击。我们假设AP的BSSID是08:7A:4C:83:0C:E0，频道是1。第一步是在频道1上启动监视模式，就像我们在前一章中看到的那样：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To capture the traffic of our target network, we will execute the following
    command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了捕获我们目标网络的流量，我们将执行以下命令：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![WEP cracking with Aircrack-ng](img/B04527_04_02.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![使用Aircrack-ng破解WEP](img/B04527_04_02.jpg)'
- en: This command saves all the captured frames to the `wep_crack` pcap file. We
    will see how to crack the WEP key when there are clients connected to the AP and
    when there are no clients.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将所有捕获的帧保存到`wep_crack` pcap文件中。我们将看到如何在有客户端连接到AP和没有客户端连接到AP时破解WEP密钥。
- en: Cracking the WEP key with connected clients
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用连接的客户端破解WEP密钥
- en: From the preceding screenshot, we see that there is a client (which has the
    MAC address 98:52:B1:3B:32:58) connected to our target AP.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中，我们看到有一个客户端（其MAC地址为98:52:B1:3B:32:58）连接到我们的目标AP。
- en: Since we are not associated with the AP and we can't send ARP requests ourselves,
    we capture and retransmit the ones transmitted by this client.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有与AP关联，也无法自己发送ARP请求，我们捕获并重发由此客户端发送的请求。
- en: For this purpose, we use aireplay-ng, which is a tool designed to inject frames
    and it has various options to perform different attacks, which we will see in
    this book. We have already used it to test the wireless adapter for injection
    in [Chapter 2](ch02.html "Chapter 2. Setting Up Your Machine with Kali Linux"),
    *Setting Up Your Machine with Kali Linux*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们使用aireplay-ng，这是一个旨在注入帧的工具，它有各种选项可以执行不同的攻击，我们将在本书中看到。我们已经在[第2章](ch02.html
    "第2章。使用Kali Linux设置您的机器")中使用它来测试无线适配器的注入，*使用Kali Linux设置您的机器*。
- en: 'To crack the WEP key, we will perform the following steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了破解WEP密钥，我们将执行以下步骤：
- en: 'We open a new tab in the terminal emulator and run the following command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在终端模拟器中打开一个新标签并运行以下命令：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, `-b` is the BSSID, `- h` is the client MAC address, and `-arpreplay` (or
    -3) is the ARP Request Replay attack option.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`-b`是BSSID，`-h`是客户端MAC地址，`-arpreplay`（或-3）是ARP请求重放攻击选项。
- en: '![Cracking the WEP key with connected clients](img/B04527_04_03.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![使用连接的客户端破解WEP密钥](img/B04527_04_03.jpg)'
- en: We switch to the terminal with the output of `airodump-ng` and we should notice
    that the number of captured frames (#Data) increases quickly.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们切换到终端并输出`airodump-ng`，我们应该注意到捕获的帧数（#Data）迅速增加。
- en: After collecting a sufficient number of packets (that is, as we have seen, about
    40,000 for the PTW attack implemented by aircrack-ng), we can begin to try cracking
    the WEP key, starting `aircrack-ng` in a new console tab.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在收集了足够数量的数据包后（即，如我们所见，Aircrack-ng实施的PTW攻击需要约40,000个数据包），我们可以开始尝试破解WEP密钥，启动一个新的控制台标签中的`aircrack-ng`。
- en: 'Aircrack-ng is a tool that can recover the key from the frames saved in a `.cap`
    file, using the PTW attack as the default method. We run the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Aircrack-ng是一个工具，可以使用PTW攻击从保存在`.cap`文件中的帧中恢复密钥。我们运行以下命令：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here `-b` is (as usual) the BSSID. If `aircrack-ng` fails to crack the WEP
    key, it waits for `airodump-ng` to collect more IVs and retries the process (by
    default, every 5000 IVs collected):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这里`-b`是（通常）BSSID。如果`aircrack-ng`无法破解WEP密钥，它会等待`airodump-ng`收集更多的IV并重试该过程（默认情况下，每收集5000个IV）：
- en: '![Cracking the WEP key with connected clients](img/B04527_04_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![有连接客户端的WEP密钥破解](img/B04527_04_04.jpg)'
- en: 'In the following screenshot, we can see `aircrack-ng` attempting to crack the
    key, but still with a low number of captured IVs:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我们可以看到`aircrack-ng`尝试破解密钥，但捕获的IV数量仍然很少：
- en: '![Cracking the WEP key with connected clients](img/B04527_04_05.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![有连接客户端的WEP密钥破解](img/B04527_04_05.jpg)'
- en: 'Finally, it returns the cracked key, displayed in hexadecimal and ASCII:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，它以十六进制和ASCII显示破解的密钥：
- en: '![Cracking the WEP key with connected clients](img/B04527_04_06.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![有连接客户端的WEP密钥破解](img/B04527_04_06.jpg)'
- en: Cracking the WEP key without connected clients
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无连接客户端的WEP密钥破解
- en: In this section, we cover the more complex case of recovering the key with no
    clients associated with the AP.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们涵盖了在没有与AP关联的客户端的更复杂情况下恢复密钥的情况。
- en: 'Since we can''t reply ARP request frames, we need to somehow simulate an authentication
    with the AP (fake authentication). To do so, we execute the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们无法回复ARP请求帧，我们需要以某种方式模拟与AP的认证（虚假认证）。为此，我们执行以下命令：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, `--fakeauth` (or -1) is the fake authentication option, `0` is the reassociation
    timing in seconds (no delay), `-o` is the number of packets sent per time, `-e`
    is the network SSID, `-a` is the BSSID, and `-h` is the MAC address of the `mon0`
    interface:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`--fakeauth`（或-1）是虚假认证选项，`0`是重新关联的时间间隔（无延迟），`-o`是每次发送的数据包数，`-e`是网络SSID，`-a`是BSSID，`-h`是`mon0`接口的MAC地址：
- en: '![Cracking the WEP key without connected clients](img/B04527_04_07.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![无连接客户端的WEP密钥破解](img/B04527_04_07.jpg)'
- en: We should see messages saying that fake authentication has been successful.
    If we get a `Got a deauthentication packet!` message, probably the AP applies
    MAC filtering, which allows access only to certain MAC addresses.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到消息说虚假认证已成功。如果我们收到`Got a deauthentication packet!`的消息，可能AP应用了MAC过滤，只允许特定的MAC地址访问。
- en: The Fragmentation and ChopChop attacks
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分段和ChopChop攻击
- en: Next, we need to find a way to generate ARP request frames encrypted with the
    WEP key used by the AP, but we do not have it, we are looking to recover it!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要找到一种方法来生成使用AP使用的WEP密钥加密的ARP请求帧，但我们没有它，我们正在寻找恢复它的方法！
- en: 'Here is when two attacks can help us: the **Fragmentation** and the **ChopChop**
    attacks. Not all the wireless device drivers support both of them and not all
    the APs can be successfully attacked, so these attacks can be performed in alternative.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这时两种攻击可以帮助我们：**分段**和**ChopChop**攻击。并非所有无线设备驱动程序都支持它们，也并非所有AP都能成功受到攻击，因此这些攻击可以交替进行。
- en: Access points transmit frames even when no client is connected. The Fragmentation
    attack allows to recover the keystream (not the actual key) used to encrypt frames,
    starting from just a single frame transmitted by the AP. The maximum size of the
    keystream could be equal to the **MTU** (**Maximum Transmission Unit**), which
    is 1,500 bytes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有客户端连接，接入点也会传输帧。分段攻击允许从AP传输的单个帧开始恢复用于加密帧的密钥流（而不是实际密钥）。密钥流的最大大小可能等于**MTU**（**最大传输单元**），即1500字节。
- en: 'To execute the attack, we run the following command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行攻击，我们运行以下命令：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![The Fragmentation and ChopChop attacks](img/B04527_04_08.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![分段和ChopChop攻击](img/B04527_04_08.jpg)'
- en: 'The program captures a frame originated from the AP and asks to confirm if
    we want to use this packet. We confirm and then the program attempts to recover
    up to 1,500 bytes of the keystream. When it reaches a sufficient amount of bytes
    (384), it asks to quit and save the recovered keystream. If we accept, the `Saving
    keystream in fragment...` message appears in the output, and the attack terminates
    successfully:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序捕获了一个来自AP的帧，并询问我们是否要使用这个数据包。我们确认后，程序会尝试恢复高达1500字节的密钥流。当它达到足够的字节数（384）时，它会要求退出并保存恢复的密钥流。如果我们接受，输出中会出现`Saving
    keystream in fragment...`的消息，攻击将成功终止：
- en: '![The Fragmentation and ChopChop attacks](img/B04527_04_09.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![分段和ChopChop攻击](img/B04527_04_09.jpg)'
- en: Then we can proceed to forge an ARP request to inject into the network, as we
    will see next. Otherwise, we can try with the ChopChop attack.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以继续伪造一个ARP请求注入到网络中，接下来我们会看到。否则，我们可以尝试ChopChop攻击。
- en: The ChopChop attack can also recover the keystream from a single WEP encrypted
    frame like the Fragmentation attack does, but it is a little more complex and
    usually slower because it only relies on the cypher-text and not on any known
    plain-text.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ChopChop攻击也可以像分段攻击一样从单个WEP加密帧中恢复密钥流，但它更复杂，通常速度较慢，因为它仅依赖于密文，而不依赖于任何已知的明文。
- en: 'To perform it, we execute the command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行它，我们执行以下命令：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output will look something like the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下屏幕截图：
- en: '![The Fragmentation and ChopChop attacks](img/B04527_04_10.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![分段和ChopChop攻击](img/B04527_04_10.jpg)'
- en: If the attack is successful, we notice that the keystream and the plain-text
    are saved.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击成功，我们会注意到密钥流和明文已保存。
- en: Forging and injecting ARP request frames
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 伪造和注入ARP请求帧
- en: 'Having recovered the keystream, it is now possible to forge an encrypted ARP
    request, using the `packetforge-ng` tool:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复了密钥流后，现在可以使用`packetforge-ng`工具伪造加密的ARP请求：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, `--arp` (or -0) is for ARP packets, `-a` is the MAC address of the AP,
    `-h` is the source MAC address, `-k` is the destination IP address, `-l` is the
    source IP address, `-y` specifies the keystream file (obtained with the previous
    seen attacks), and `-w` is the file where we need to save the generated ARP request:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`--arp`（或-0）是用于ARP数据包的选项，`-a`是AP的MAC地址，`-h`是源MAC地址，`-k`是目标IP地址，`-l`是源IP地址，`-y`指定密钥流文件（使用先前看到的攻击获得），`-w`是我们需要保存生成的ARP请求的文件：
- en: '![Forging and injecting ARP request frames](img/B04527_04_11.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: 伪造和注入ARP请求帧
- en: 'Once we have forged the ARP request, we can inject it with `aireplay-ng`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们伪造了ARP请求，我们就可以用`aireplay-ng`注入它：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the following screenshot, we can notice the details of the ARP request being
    injected:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我们可以注意到正在注入的ARP请求的详细信息：
- en: '![Forging and injecting ARP request frames](img/B04527_04_12.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![伪造和注入ARP请求帧](img/B04527_04_12.jpg)'
- en: The `--interactive` option allows us to inject frames of our choice, specified
    with the `-r` option.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`--interactive`选项允许我们注入我们选择的帧，使用`-r`选项指定。'
- en: 'We switch back to the `airodump-ng` terminal and we should observe the number
    of captured frames (#Data) increasing:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们切换回`airodump-ng`终端，应该观察到捕获的帧数（#Data）在增加：
- en: 'When we have a sufficient number of frames, we can start `aircrack-ng` to work
    on the generated `pcap` file and recover the key:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有足够数量的帧时，我们可以开始使用`aircrack-ng`来处理生成的`pcap`文件并恢复密钥：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Forging and injecting ARP request frames](img/B04527_04_14.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![伪造和注入ARP请求帧](img/B04527_04_14.jpg)'
- en: WEP cracking with automated tools
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用自动化工具进行WEP破解
- en: In the previous section, we covered WEP key cracking using the tools included
    in the Aircrack-ng suite, which provides a wide range of options and a great level
    of control and granularity. It is essential for wireless penetration testers to
    learn to use these tools and understand the logic of the implemented attacks.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们介绍了使用Aircrack-ng套件中包含的工具进行WEP密钥破解，该套件提供了广泛的选项和很高的控制和细粒度。对于无线渗透测试人员来说，学会使用这些工具并理解实施攻击的逻辑是至关重要的。
- en: There are also other tools in Kali Linux that automate the WEP cracking process,
    and therefore, are easier and immediate to use.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux中还有其他工具可以自动化WEP破解过程，因此更容易和立即使用。
- en: One of these is a Python script called Wifite that uses the Aircrack-ng tool
    for key cracking. We can download the program and read the documentation and usage
    examples on the Wifite website at [https://code.google.com/p/wifite/](https://code.google.com/p/wifite/).
    The latest version of the program is available at [https://github.com/derv82/wifite](https://github.com/derv82/wifite).
    We will cover Wifite in [Chapter 5](ch05.html "Chapter 5. WPA/WPA2 Cracking"),
    *WPA/WPA2 Cracking*.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个是名为Wifite的Python脚本，它使用Aircrack-ng工具进行密钥破解。我们可以在Wifite网站[https://code.google.com/p/wifite/]下载程序并阅读文档和使用示例。程序的最新版本可在[https://github.com/derv82/wifite]找到。我们将在[第5章](ch05.html
    "第5章。WPA/WPA2破解")中介绍Wifite，*WPA/WPA2破解*。
- en: Another simple and automated program is Fern WiFi Cracker, which we will explore
    next.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个简单的自动化程序是Fern WiFi Cracker，我们将在下一节中探讨。
- en: WEP cracking with Fern WiFi Cracker
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Fern WiFi Cracker进行WEP破解
- en: Fern WiFi Cracker is a GUI tool written in Python and based on the Qt library,
    and relies on the Aircrack-ng tools to do the underlying job.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Fern WiFi Cracker是一个用Python编写的GUI工具，基于Qt库，并依赖于Aircrack-ng工具来执行底层工作。
- en: It is not only designed to crack WEP and WPA/WPA2 keys with just a few mouse
    clicks, but can also perform various other wireless attacks against APs and clients.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 它不仅设计用于仅需点击几下鼠标即可破解WEP和WPA/WPA2密钥，还可以对AP和客户端执行各种其他无线攻击。
- en: To run the program, we navigate to **Application Menu** | **Kali Linux** | **Wireless
    Attacks** | **802.11 Wireless Tools** | **fern-wifi-cracker**.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行该程序，我们导航至**应用程序菜单** | **Kali Linux** | **无线攻击** | **802.11无线工具** | **fern-wifi-cracker**。
- en: 'The GUI is simple and intuitive. At the top of the window, there is a drop-down
    menu that lists the available wireless interfaces. We select our interface and
    the program puts it in monitor mode:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: GUI界面简单直观。窗口顶部有一个下拉菜单，列出了可用的无线接口。我们选择我们的接口，程序将其置于监视模式：
- en: '![WEP cracking with Fern WiFi Cracker](img/B04527_04_15.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![使用Fern WiFi Cracker进行WEP破解](img/B04527_04_15.jpg)'
- en: 'To scan for wireless networks, we click on the **Scan for Access points** button
    and we should see the number of detected networks with WEP or WPA encryption,
    besides the relative buttons:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要扫描无线网络，我们点击**扫描接入点**按钮，应该看到检测到的带有WEP或WPA加密的网络数量，以及相关的按钮：
- en: '![WEP cracking with Fern WiFi Cracker](img/B04527_04_16.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![使用Fern WiFi Cracker进行WEP破解](img/B04527_04_16.jpg)'
- en: We click on the **Wi-Fi WEP** button, which opens a window showing the detected
    WEP networks on the top.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们点击**Wi-Fi WEP**按钮，打开一个窗口，顶部显示检测到的WEP网络。
- en: 'We select our target network and watch its details in the pane below. At the
    bottom, there is the attack pane, where we can choose which attack to perform
    against the network. For this example, we select the **Fragmentation attack**
    option on the left and then click on **Wi-Fi Attack** on the top-right corner:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择目标网络并在下方的窗格中查看其详细信息。在底部是攻击面板，我们可以选择针对网络执行哪种攻击。在本例中，我们在左侧选择**分段攻击**选项，然后在右上角点击**Wi-Fi攻击**：
- en: '![WEP cracking with Fern WiFi Cracker](img/B04527_04_17.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![使用Fern WiFi Cracker进行WEP破解](img/B04527_04_17.jpg)'
- en: 'The attack pane shows the progression of the attack with the number of captured
    IVs increasing:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击面板显示攻击的进展，捕获的IVs数量在增加：
- en: '![WEP cracking with Fern WiFi Cracker](img/B04527_04_18.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![使用Fern WiFi Cracker进行WEP破解](img/B04527_04_18.jpg)'
- en: 'Finally, the program returns the cracked key (in hexadecimal) at the bottom
    of the window. We can right-click on it and copy the key or convert in ASCII text:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，程序会在窗口底部返回破解的密钥（十六进制）。我们可以右键单击它并复制密钥或转换为ASCII文本：
- en: '![WEP cracking with Fern WiFi Cracker](img/B04527_04_20.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![使用Fern WiFi Cracker进行WEP破解](img/B04527_04_20.jpg)'
- en: 'After this is done, the Attack Panel will display the ASCII key like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，攻击面板将显示ASCII密钥如下：
- en: '![WEP cracking with Fern WiFi Cracker](img/B04527_04_21.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![使用Fern WiFi Cracker进行WEP破解](img/B04527_04_21.jpg)'
- en: 'In the main window, we can see that the **Key Database** entry has been populated
    with our recovered key:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在主窗口中，我们可以看到**密钥数据库**条目已填充了我们恢复的密钥：
- en: '![WEP cracking with Fern WiFi Cracker](img/B04527_04_22.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![使用Fern WiFi Cracker进行WEP破解](img/B04527_04_22.jpg)'
- en: 'Indeed, after completing an attack, the cracked key is saved in a SQLite database
    and we can see its details by clicking on the **Key Database** button:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，在完成攻击后，破解的密钥将保存在SQLite数据库中，我们可以通过点击**密钥数据库**按钮查看其详细信息：
- en: '![WEP cracking with Fern WiFi Cracker](img/B04527_04_23.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![使用Fern WiFi Cracker进行WEP破解](img/B04527_04_23.jpg)'
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the WEP protocol, the attacks that have been developed
    to crack the keys, the Aircrack-ng suite and other automated tools included in
    Kali Linux that implement these attacks.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了WEP协议、已经开发出来用于破解密钥的攻击、Aircrack-ng套件以及Kali Linux中包含的其他自动化工具来实施这些攻击。
- en: In the next chapter, we will cover the WPA/WPA2 protocol and the tools used
    to attack it.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍WPA/WPA2协议以及用于攻击它的工具。
