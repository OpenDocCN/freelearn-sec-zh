- en: Attacks Outside the Local Network
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地网络外的攻击
- en: This chapter mainly focuses on implementing attacks on the external network.
    For that, we need to know what port forwarding is, so in this chapter, we are
    going to get an idea of what we need to do to access the victim's machine through
    the router. Until now, we have been focusing on internal backdoors; now we are
    going to look at external backdoors. We will then look at the concept of IP forwarding,
    which plays another important part in attacking from outside the local network.
    We are also going to look at examples to gain a clear understanding of this concept,
    wherein we will hook our system to the external BeEF browser.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要集中在对外部网络进行攻击的实现。为此，我们需要了解端口转发是什么，因此在本章中，我们将了解需要做什么才能通过路由器访问受害者的机器。到目前为止，我们一直专注于内部后门，现在我们将转向外部后门。接下来，我们将研究IP转发的概念，它在从本地网络外部发起攻击时起着至关重要的作用。我们还将通过示例来深入理解这个概念，并将我们的系统与外部BeEF浏览器挂钩。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Port forwarding
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口转发
- en: External backdoors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部后门
- en: IP forwarding
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP转发
- en: External BeEF
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部BeEF
- en: Port forwarding
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端口转发
- en: So far, we have learned about a number of methods to gain full control over
    computers. We have seen how to do this using server-side attacks, client-side
    attacks, and social engineering as well. All of the attacks that we've done so
    far have been inside the network, and we've chosen to do that for convenience.
    That doesn't mean that these attacks only work inside the network; in fact, all
    of these attacks work outside the network as well. The only thing is that we need
    to configure our network in a way that allows incoming connections from the internet
    from outside our local network. We can use BeEF, we can use the backdoors, and
    we can also use server-side attacks—all the attacks that we have done so far,
    except for the special cases. The only thing that we want to keep in mind is that
    we want to configure the router to handle reverse connections properly, and direct
    them to the Kali machine. Now we will be focusing on that aspect and seeing how
    it would work and how to configure the router to achieve that.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了多种方法来完全控制计算机。我们已经看到如何通过服务器端攻击、客户端攻击和社会工程学攻击来实现这一目标。到目前为止，所有的攻击都发生在内部网络中，我们选择这么做是出于便利考虑。这并不意味着这些攻击只能在网络内部生效；事实上，所有这些攻击在外部网络上也有效。唯一的区别是，我们需要将网络配置成允许来自外部的互联网连接。我们可以使用BeEF、使用后门，也可以使用服务器端攻击——除了特殊情况，所有我们做过的攻击都适用于外部网络。我们需要记住的一点是，我们需要将路由器配置为正确处理反向连接，并将其引导到Kali机器上。接下来，我们将专注于这个方面，看看它是如何工作的，以及如何配置路由器以实现这一目标。
- en: 'Firstly, let''s learn how to set up a default network. We''ve seen a similar
    diagram to the following in [Chapter 5](bc4346fc-ed68-40d5-b1c7-7f3dd0f5af76.xhtml),
    *Pre-Connection Attacks*, and in the following diagram, we can see that we have
    the **ROUTER**, we have the **CLIENTS** that are connected to the **ROUTER**,
    and then we have the **ROUTER** that is connected to the **INTERNET**:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们学习如何设置默认网络。我们在[第五章](bc4346fc-ed68-40d5-b1c7-7f3dd0f5af76.xhtml)《连接前攻击》中看到过类似的图示，在下图中，我们可以看到**路由器**、连接到**路由器**的**客户端**，以及连接到**互联网**的**路由器**：
- en: '![](assets/c345d6ca-a6d4-4cbd-995d-0fd91b25e785.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c345d6ca-a6d4-4cbd-995d-0fd91b25e785.png)'
- en: We mentioned before that none of the **CLIENTS** (all devices inside the network), don't
    have an internet connection; they can only access the **INTERNET** through the
    **ROUTER**. Whenever they want to request something, or they want to go to a website—for
    example, if they want to go to Google—the device would send a request to the **ROUTER**,
    then the **ROUTER** would go to the **INTERNET**, which is going to receive Google.com,
    and the response would be sent back to the **ROUTER**, then the **ROUTER** would
    forward that response to the device that requested it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到过，**客户端**（网络内的所有设备）没有直接的互联网连接；它们只能通过**路由器**访问**互联网**。每当它们想要请求某些东西，或者访问一个网站时——例如，想要访问谷歌——设备会向**路由器**发送请求，接着**路由器**会访问**互联网**，获取Google.com的响应，然后将响应发送回**路由器**，最后**路由器**将该响应转发给请求的设备。
- en: 'So, inside the network, each device has its own private IP. We can see in the
    preceding diagram that there are some IPs are written in red, and these only exist
    within the network; that''s why we call them private IPs, because outside the
    network these IPs are not visible. Once we are in, we can see that the router
    has two IPs: it has a private IP in red, which is accessible by all the devices
    in the network and is only used inside the network; and it also has a public IP,
    which is in green, and is accessible through the **INTERNET**. The IP that is
    highlighted in green is the IP that Google sees. If we actually go to Google,
    or to any other website, they see an IP address but they won''t see our private
    IP address; they''ll actually see the IP address of the **ROUTER** because the
    **ROUTER** is the device that''s actually making the requests, not the machine.
    All the requests made by these devices on the same network will all appear as
    if they''re coming from the same machine, or from the same IP. Again, this is
    because the only device that has access to the **INTERNET** is the **ROUTER**;
    none of the other devices do.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在网络内部，每个设备都有其独立的私有 IP。从前面的示意图中我们可以看到，有些 IP 地址是红色的，这些 IP 只存在于网络内部；因此我们称它们为私有
    IP，因为在网络外部，这些 IP 是不可见的。一旦我们进入网络，就会看到路由器有两个 IP 地址：它有一个红色的私有 IP，所有网络中的设备都可以访问，这个
    IP 仅在网络内部使用；同时，它还有一个绿色的公共 IP，可以通过**互联网**访问。绿色高亮显示的 IP 是谷歌所看到的 IP。如果我们实际访问谷歌或任何其他网站，它们会看到一个
    IP 地址，但不会看到我们的私有 IP 地址；它们实际上看到的是**路由器**的 IP 地址，因为**路由器**才是实际发出请求的设备，而不是计算机。网络中这些设备发出的所有请求都会显示为来自同一台机器，或者来自同一个
    IP 地址。再次强调，这是因为唯一能访问**互联网**的设备是**路由器**，而其他设备无法直接访问。
- en: In most cases, or, if we think about it, in all the attacks that we do, the
    main thing we want is to get a reverse connection. Even when we're using the BeEF
    browser, we actually get a connection on port `3000`, which is the port that the
    BeEF is working on, and when we're using our backdoors, we actually receive a
    connection on the port that we specify when we make the backdoor. When we want
    to send that backdoor to somewhere outside our network, the first thing we have
    to keep in mind is that our local IP is not going to be visible. What we have
    to do is use the public IP, the IP of the router. To know the router's IP, we
    just have to go on Google, and then type in `whats my IP` in the search bar. Google
    will return the IP address of the router, and that IP will be the same from all
    the machines in the same network.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，或者说如果我们考虑所有的攻击，我们的主要目标通常是建立一个反向连接。即使在使用 BeEF 浏览器时，我们实际上也会在 `3000` 端口上建立连接，这是
    BeEF 工作的端口；而在使用我们的后门时，我们会在设定的端口上接收到连接。当我们希望将后门发送到我们网络外部时，首先需要记住的一点是，我们的本地 IP 是不可见的。我们需要做的是使用公共
    IP，也就是路由器的 IP。要知道路由器的 IP 地址，我们只需要打开 Google，然后在搜索框中输入 `whats my IP`。谷歌会返回路由器的 IP
    地址，这个 IP 地址在同一网络中的所有设备上都是相同的。
- en: Now, we are connected through a wireless card. When we launch the command, we
    will see that we are not using a NAT connection, we are using an external wireless
    card that's connected to the home network. Therefore, all the devices in our wireless
    network at home will have the same IP. Again, that's because they all use the
    same router, so they're all connected to the same network. We will be using this
    IP in our backdoor, we're going to send the backdoor to a person that exists on
    the internet, that person is going to run that backdoor, and that backdoor is
    going to use a reverse connection. It's then going to try to connect back to the
    router on port `8080`, for example, if we chose that port in the backdoor. Once
    the router gets a request for port `8080`, it won't know what to do with it, because
    the router is not listening to port `8080`, and this request will not tell the
    router where it wants to go. All we need to do is configure the router to tell
    it that we want to forward the port `8080` to the Kali machine whenever we get
    a request from it. We are just using `8080` as an example, but we can do it for
    any port that we are listening on, whether it's `8080`, `444`, or `3000` for BeEF.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们通过无线网卡连接。当我们启动命令时，我们将看到我们没有使用NAT连接，而是使用连接到家庭网络的外部无线网卡。因此，我们家中无线网络中的所有设备将具有相同的IP。这是因为它们都使用同一个路由器连接到同一网络。我们将在我们的后门中使用这个IP，我们将把后门发送给一个存在于互联网上的人，该人将运行该后门，并且该后门将使用反向连接。然后，它将尝试连接回路由器的`8080`端口，例如，如果我们在后门中选择了该端口。一旦路由器收到`8080`端口的请求，它将不知道如何处理该请求，因为路由器没有监听`8080`端口，并且此请求不会告诉路由器它想去哪里。我们所需做的就是配置路由器，告诉它我们希望在从它那里收到请求时将端口`8080`转发到Kali机器上。我们只是以`8080`作为示例，但我们可以对我们监听的任何端口执行此操作，无论是`8080`、`444`还是BeEF的`3000`。
- en: The main idea is that we want to use our real IP outside the network. Whenever
    we run any attack in previous chapters and even in future chapters, if we want
    to run that attack on the internet, on someone who doesn't exist on our home network,
    then we first of all make sure we use the public IP, and also make sure we configure
    the router to forward requests on the port that we're listening to on the Kali
    machine. We're going to see how to do that in the next section of the chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 主要思路是我们想要在网络外部使用我们的真实IP。无论我们在先前章节或将来的章节中运行任何攻击，如果我们想要在互联网上对不存在于我们家庭网络中的某人运行该攻击，那么我们首先确保使用公共IP，并确保配置路由器将请求转发到我们在Kali机器上监听的端口上。我们将在本章的下一节中看到如何操作。
- en: External backdoors
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部后门
- en: 'In this part, we are going to study how to create a backdoor. The only difference
    is that we''re going to set the IP to the public IP instead of the local IP, and
    we''re going to create a backdoor exactly the same way that we used to create
    it when we were hacking devices in the same network. For this, we are going to
    use **Veil-Evasion**, and we are going to do the same steps used in [Chapter 12](a7a11e6d-7bc7-4c55-9b61-b698d2156e37.xhtml),
    *Client-Side Attacks*. We can use the `list` command to see what options we have
    we are going to use number `9`, it''s the exact same payload that we used in our
    previous example in [Chapter 12](a7a11e6d-7bc7-4c55-9b61-b698d2156e37.xhtml),
    *Client-Side Attacks*, the `reverse_http` payload. We''re going to use command `9`,
    and we can see the options by using the `options` command. As shown in the following
    screenshot, we can see that the `LPORT` is set to `8080` by default, and we will
    keep that the same:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分，我们将学习如何创建后门。唯一的区别在于，我们将把IP设置为公共IP，而不是本地IP，并且我们将创建一个后门，方式与我们在同一网络中攻击设备时所用的方式完全相同。为此，我们将使用**Veil-Evasion**，并且将使用在[第12章](a7a11e6d-7bc7-4c55-9b61-b698d2156e37.xhtml)中使用的相同步骤，*客户端攻击*。我们可以使用`list`命令查看我们拥有的选项，我们将使用编号`9`，这是我们在[第12章](a7a11e6d-7bc7-4c55-9b61-b698d2156e37.xhtml)中先前示例中使用的完全相同的有效载荷，*客户端攻击*中的`reverse_http`有效载荷。我们将使用命令`9`，可以使用`options`命令查看选项。如下面的屏幕截图所示，我们可以看到`LPORT`默认设置为`8080`，我们将保持不变：
- en: '![](assets/c335df0d-3152-4158-8738-b392460a1b40.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c335df0d-3152-4158-8738-b392460a1b40.png)'
- en: The only thing that we are going to change is the `LHOST`, and in the previous
    sections when we were receiving connections on our own computer we used to set
    it to the local IP `192.168.0.11`, because that's the IP that the devices use
    inside the network; but whenever we want to do things on the outside the network,
    we want to use the real IP, because these internal IPs are not visible to computers
    outside the network.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们唯一需要更改的是`LHOST`，在之前的部分中，当我们在自己的计算机上接收连接时，我们将其设置为本地IP`192.168.0.11`，因为这是设备在网络内部使用的IP；但是每当我们想在网络外部进行操作时，我们需要使用真实的IP，因为这些内部IP在网络外部的计算机是不可见的。
- en: 'Now, we are going to use the IP that we see on Google, so when we type in `whats
    my IP` in Google search, we will get the IP as `89.100.145.189`; we''re going
    to use that as the `LHOST` in our backdoor, and we are going to launch the following
    command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用在谷歌上看到的IP，因此当我们在Google搜索中输入`whats my IP`时，我们会得到IP地址`89.100.145.189`；我们将把它作为我们的后门中的`LHOST`，然后我们将执行以下命令：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, to make sure everything is set up properly, use the `info` command. Once
    we launch the `info` command, we will see that the port is `8080` and we''re using
    the public IP `89.100.145.189`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为确保一切设置正确，使用`info`命令。一旦我们启动`info`命令，我们将看到端口是`8080`，并且我们正在使用公共IP`89.100.145.189`：
- en: '![](assets/9d7c10a0-bd8d-4e8f-a425-ea3918189146.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9d7c10a0-bd8d-4e8f-a425-ea3918189146.png)'
- en: 'This is the most important step, and then we''re going to use the `generate`
    command to generate the backdoor like we did in previous chapters, and we''re
    just going to name the backdoor `backdoor.exe`. Hit *Enter*, and that will generate
    our payload for us. The path of the payload can be seen in the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最重要的一步，然后我们将使用`generate`命令来生成后门，就像我们在之前的章节中做的那样，我们将把后门命名为`backdoor.exe`。按*Enter*键，这将为我们生成有效负载。有效负载的路径可以在下面的截图中看到：
- en: '![](assets/c9ef009f-1eed-40f6-9380-8d78d70e7983.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c9ef009f-1eed-40f6-9380-8d78d70e7983.png)'
- en: 'As usual, we are going to copy the backdoor in our Apache server `/var/www/html`
    directory using the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，我们将通过以下命令将后门复制到我们的Apache服务器`/var/www/html`目录中：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will also see how to download this backdoor from the internet from outside
    the network. Now all we have to do is listen for incoming connections using the
    multi-handler, we''ve done that before again in [Chapter 12](a7a11e6d-7bc7-4c55-9b61-b698d2156e37.xhtml),
    *Client-Side Attacks*. While we are going to listen to the multi-handler we are
    going to listen on our local IP, so we are not going to listen on the external/global
    IP, we are going to listen on the local because we can''t listen on the external,
    we are in the network and we only have control over current Kali machine. In the
    Kali machine we will be listening on port `8080`, and in the external device the
    backdoor will try to connect to the backdoor, the step after that will be we''ll
    set up IP forwarding to allow router to forward port `8080` to the Kali machine.
    But first we need to listen on port `8080` in the Kali machine, and we''re going
    to do that using the multi/handler using the following steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将看到如何从网络外部下载这个后门。现在，我们只需要通过multi-handler监听传入的连接，我们之前在[第12章](a7a11e6d-7bc7-4c55-9b61-b698d2156e37.xhtml)中做过这个操作，*客户端攻击*。当我们使用multi-handler进行监听时，我们将监听本地IP，因此我们不会监听外部/全局IP，我们只会监听本地IP，因为我们不能监听外部IP，我们只控制当前的Kali机器。在Kali机器上，我们将在端口`8080`上进行监听，而在外部设备上，后门将尝试连接到后门。接下来的步骤是，我们将设置IP转发，允许路由器将端口`8080`转发到Kali机器。但是首先我们需要在Kali机器上监听端口`8080`，我们将通过以下步骤使用multi/handler来实现：
- en: Open Metasploit Framework using the `msfconsole` command.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`msfconsole`命令打开Metasploit框架。
- en: 'We are going to use `exploit/multi/handler`, using the following command:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`exploit/multi/handler`，并使用以下命令：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Set the payload to `windows/meterpreter/reverse_http`:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将有效负载设置为`windows/meterpreter/reverse_http`：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we''re going to set the `LPORT` to `8080`:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将`LPORT`设置为`8080`：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Set the `LHOST`, the listening host, to our private IP. We are going to do set
    LHOST to `192.168.0.11`. The command is as follows:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`LHOST`，即监听主机，设置为我们的私有IP。我们将`LHOST`设置为`192.168.0.11`。命令如下：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we are going to run `show options` to make sure everything is done properly.
    We can see in the following screenshot that the `LPORT` is set to `8080`, and
    the local host is set to `192.168.0.11`, and we''re using a payload of `windows/meterpreter/reverse_http`:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们要运行 `show options`，确保一切配置正确。我们可以在以下截图中看到，`LPORT` 被设置为 `8080`，本地主机被设置为 `192.168.0.11`，并且我们使用的负载是
    `windows/meterpreter/reverse_http`：
- en: '![](assets/fbf59059-db3f-432a-aec4-41c69f6b1c07.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fbf59059-db3f-432a-aec4-41c69f6b1c07.png)'
- en: 'Start `handler` by running the `exploit` command. As we can see in the following
    screenshot, `exploit` is ready on our private IP, and it''s listening for connections
    on port `8080`:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行 `exploit` 命令启动 `handler`。正如我们在以下截图中看到的，`exploit` 已在我们的私有 IP 上准备就绪，并且在端口
    `8080` 上监听连接：
- en: '![](assets/48fb4776-9ed0-49b4-a8b6-adaade8c925b.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/48fb4776-9ed0-49b4-a8b6-adaade8c925b.png)'
- en: 'So far, we did the two main steps: we created a backdoor, and the backdoor
    will give us connections back based on the real IP address; and we''re listening
    on port `8080` in our local machine, the Kali machine. When the target person
    executes the backdoor on the internet, the backdoor will try to connect to IP
    `192.168.0.11` on port `8080`. The only problem now is the gateway, which is the
    router; it doesn''t have port `8080` open, when it receives the connection, it''s
    not going to know what to do with it. We need to configure the router to tell
    it that whenever we get a connection on port `8080`, we want it to be redirected
    to our Kali machine. We can do that in two ways, and we''re going to talk about
    them in the next forthcoming sections.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们完成了两个主要步骤：我们创建了一个后门，后门将根据真实的 IP 地址为我们提供连接；并且我们在本地机器（Kali 机器）的端口 `8080`
    上进行监听。当目标用户在互联网上执行后门时，后门将尝试连接到 IP `192.168.0.11` 的端口 `8080`。现在唯一的问题是网关，也就是路由器；它没有开放端口
    `8080`，当它收到连接时，不知道该如何处理。我们需要配置路由器，告诉它每当我们在端口 `8080` 上收到连接时，要将其重定向到我们的 Kali 机器。我们可以通过两种方式来实现这一点，我们将在接下来的章节中讨论这两种方法。
- en: IP forwarding
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IP 转发
- en: 'Now, in this part, we''ll learn how to configure the router so that it forwards
    incoming connections to the Kali machine. This will mean we can receive reverse
    connections, we can hook people to the BeEF browser, and launch attacks outside
    the network the same way that we used to launch them inside the network. To get
    to the router settings, usually the routers IP is the first IP in the subnet,
    our IP was `192.168.0.11`, usually, the router is the first one, so it will be
    `192.168.0.1`. Also, another way to get it is to type in `route -n` command, and
    that will show us where the gateway is. As we can see in the following screenshot,
    the gateway is at `192.168.0.1`. The following is the local IP address of the
    router:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将学习如何配置路由器，以便它将传入的连接转发到 Kali 机器。这意味着我们可以接收反向连接，可以将人们钩住到 BeEF 浏览器中，并像在内部网络中一样发起外部网络的攻击。要进入路由器设置，通常路由器的
    IP 是子网中的第一个 IP，我们的 IP 是 `192.168.0.11`，通常路由器是第一个，所以它的 IP 会是 `192.168.0.1`。另外一种获取路由器
    IP 的方法是输入 `route -n` 命令，这会显示网关所在的 IP。正如我们在以下截图中看到的，网关在 `192.168.0.1`。以下是路由器的本地
    IP 地址：
- en: '![](assets/6626e746-0230-4950-8ed0-69a6038c32cf.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6626e746-0230-4950-8ed0-69a6038c32cf.png)'
- en: 'We''re going to browse the IP `192.168.0.1` in our browser. To do so, just
    type the address in the address bar and hit *Enter*, and as we can see in the
    following screenshot, we have our router settings, and we have to log in with
    the username and password:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过浏览器访问 IP `192.168.0.1`。只需在地址栏中输入该地址并按 *Enter*，正如我们在以下截图中看到的，我们已经进入了路由器设置页面，并且需要使用用户名和密码登录：
- en: '![](assets/c91fb5fa-825b-4429-86b2-c40412a6b9a1.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c91fb5fa-825b-4429-86b2-c40412a6b9a1.png)'
- en: 'Now, the router settings might look different from router to router, but the
    names are usually the same. First of all, we will usually have to log in, and
    we either have a default username and password, or we will see them on a sticker
    behind or underneath the router itself. Once we are logged in we can see the control
    panel, and again it might look different for everyone, but we want to look for
    something called IP forwarding. For some, it''s under the ADVANCED option. Go
    to ADVANCED, and then to FORWARDING, and as we can see in the following screenshot
    we can set up our IP forwarding:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，路由器的设置界面可能因路由器不同而有所不同，但名称通常是相同的。首先，我们通常需要登录，可能有默认的用户名和密码，或者我们可以在路由器背面或底部的贴纸上找到这些信息。登录后，我们将看到控制面板，虽然每个控制面板的外观可能不同，但我们需要寻找名为
    IP 转发的选项。对于某些路由器，这个选项可能在 *ADVANCED*（高级）菜单下。进入 *ADVANCED*，然后进入 *FORWARDING*（转发），正如我们在以下截图中看到的，我们可以在这里设置
    IP 转发：
- en: '![](assets/d902ea3e-f6de-4ced-99c1-b94c3cc0b28e.png)Ip forwarding set up'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/d902ea3e-f6de-4ced-99c1-b94c3cc0b28e.png)设置 IP 转发'
- en: 'Look for something called IP forwarding; we have actually seen them on some
    routers called *virtual network* , but we want to look for something that allows
    us to set up rules to redirect ports inside the network. The port that we''re
    listening on is port `8080`, so that''s the port that we picked in the handler,
    that''s the port that we picked in the backdoor, and that''s the port that we
    want to get the connection on. Therefore, the public port is going to be `8080`,
    and again the target port is `8080`, and the target IP address is the IP address
    that''s listening on the port, so this is the IP address of the Kali machine where
    we have our handlers running. Therefore the IP address of our Kali machine right
    here is `192.168.0.11`, and we can even cross-check it from the result of the `ifconfig` command.
    We are going to enter the returned IP from `ifconfig` command in the Target IP
    Address textbox in our router settings—that''s the rule that we want to add:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 查找名为 IP 转发的设置；我们实际上在一些路由器上看到过叫做 *虚拟网络* 的选项，但我们要寻找的是能够让我们设置规则来重定向网络内部端口的选项。我们监听的端口是端口
    `8080`，这是我们在处理程序中选择的端口，也是我们在后门程序中选择的端口，也是我们想要获取连接的端口。因此，公共端口将是 `8080`，目标端口依然是
    `8080`，而目标 IP 地址是监听该端口的 IP 地址，因此这是我们 Kali 机器的 IP 地址，其中运行着我们的处理程序。因此，Kali 机器的 IP
    地址是 `192.168.0.11`，我们甚至可以通过 `ifconfig` 命令的结果来交叉检查。我们将把 `ifconfig` 命令返回的 IP 输入到路由器设置中的目标
    IP 地址文本框中——这就是我们要添加的规则：
- en: '![](assets/768a9cbb-8cd6-475b-89f7-65d8c714fa88.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/768a9cbb-8cd6-475b-89f7-65d8c714fa88.png)'
- en: Setting up IPs and the ports
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 IP 和端口
- en: Click on Save, and the rule will be saved, whenever the router gets a request
    for port `8080`, it will know that it's going to forward that request to the Kali
    machine and the router will not cut the connection.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 点击保存，规则将被保存，每当路由器接收到端口 `8080` 的请求时，它将知道要将该请求转发到 Kali 机器，并且路由器不会切断连接。
- en: 'Hence, we''ve set up a proper route now. The first thing we did is we created
    a backdoor, we used the real IP in the backdoor, we didn''t use the private IP,
    so we didn''t use the `192.168.0.11`, we used the real IP. We''re going to send
    that backdoor to a device in a different network. That device is going to run
    the backdoor, the backdoor will try to connect back on the real IP to the router,
    but the router will know exactly what to do with this, because we just set up
    a rule telling the router to forward any request that it gets on port `8080` to
    the Kali machine. We actually want to set up a rule for port `80`; this is the
    port that the Apache server runs on, and we want to enable that so that we can
    download the backdoor from the target computer. We are going to add a rule for
    port `80`, and again this is going to be the same machine, the Kali machine. We''re
    going enter port `80` and we''re going to save this rule:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们现在已经设置了一个正确的路由。我们做的第一件事是创建了一个后门，我们在后门中使用了真实的 IP 地址，而不是私有 IP 地址，因此我们没有使用
    `192.168.0.11`，而是使用了真实的 IP。我们将把这个后门发送到另一个网络中的设备，该设备将运行后门，后门将尝试通过真实 IP 连接回路由器，但路由器将准确知道如何处理它，因为我们刚刚设置了一个规则，告诉路由器将收到的任何端口
    `8080` 的请求转发到 Kali 机器。我们实际上还想为端口 `80` 设置规则；这是 Apache 服务器运行的端口，我们希望启用它，以便从目标计算机下载后门。我们将为端口
    `80` 添加一个规则，这将是同一台机器——Kali 机器。我们将输入端口 `80` 并保存这个规则：
- en: '![](assets/967184e6-cf76-4d4c-8bca-0c529a152e2c.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/967184e6-cf76-4d4c-8bca-0c529a152e2c.png)'
- en: Configuring the Ip table
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 IP 表
- en: This will allow us to download the backdoor because we placed the backdoor in
    the `/var/www/html` directory, meaning we are actually going to be able to access
    our web server in Kali and download the backdoor from outside the internet.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们下载后门，因为我们把后门放在了 `/var/www/html` 目录中，意味着我们实际上可以从 Kali 的 Web 服务器访问并从外网下载后门。
- en: Now start our Apache web server and go to a Windows machine, and that Windows
    machine is going to be connected to a completely different network, and we're
    going to download the file from there. If we go and check our IP, we will see
    it has a different external public IP. So, we are just going to look for what
    our IP is on Google. The IP is `109.125.19.76`, which is completely different
    to the IP of the Kali machine that we used. These are two completely separate
    devices connected to different networks, and now we are going to access our Apache
    web server and download the backdoor, and normally without IP forwarding we wouldn't
    be able to do that. First, to access the backdoor, we are going to get the IP
    of the Kali machine. We called our backdoor `backdoor.exe`, therefore we are just
    going to open a browser on the Windows machine and, inside the URL bar, enter
    `192.168.0.11/backdoor.exe`. After hitting *Enter*, we will be able to download
    the backdoor, and this actually tells us that IP forwarding has been set up correctly,
    because without that, we wouldn't be able to access our web server and download
    the backdoor, so we are actually accessing the web server in Kali as if it's a
    normal website, like we can actually host fake web pages, we can host websites,
    anything we want right now on our Apache server.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在启动我们的 Apache Web 服务器，然后去一台 Windows 机器，这台 Windows 机器将连接到一个完全不同的网络，我们将从那里下载文件。如果我们检查一下我们的
    IP 地址，会看到它有一个不同的外部公共 IP。因此，我们只需要在 Google 上查找我们的 IP 地址。这个 IP 是 `109.125.19.76`，它与我们使用的
    Kali 机器的 IP 完全不同。这是两台完全独立的设备，连接到不同的网络，现在我们将访问我们的 Apache Web 服务器并下载后门，通常没有 IP 转发的话我们是无法做到这一点的。首先，为了访问后门，我们将获取
    Kali 机器的 IP。我们把后门命名为 `backdoor.exe`，因此我们只需在 Windows 机器上打开一个浏览器，在 URL 地址栏中输入 `192.168.0.11/backdoor.exe`。按下
    *Enter* 后，我们将能够下载后门，这实际上告诉我们 IP 转发已正确设置，因为没有它，我们将无法访问 Web 服务器并下载后门。因此，我们实际上是在访问
    Kali 上的 Web 服务器，就像访问一个普通的网站一样，我们现在可以在 Apache 服务器上托管虚假网页、托管网站或我们想做的任何事。
- en: 'Now we are going to run the backdoor on a Windows machine, and we''ll see if
    that''ll give us a reverse connection on our Kali machine, which is on a completely
    different network. As we can see in the following screenshot, we got a reverse
    Meterpreter shell, and that shell is coming from an external IP address into our
    internal IP address to the Kali machine, and right now we can control the target
    computer and do all the attacks that we did in the post-connection attacks:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在一台 Windows 机器上运行后门，并查看它是否能在我们的 Kali 机器上建立反向连接，而 Kali 机器处于完全不同的网络中。正如我们在下面的截图中看到的，我们获得了一个反向的
    Meterpreter shell，这个 shell 是从一个外部 IP 地址进入我们内网的 Kali 机器，现在我们可以控制目标计算机并执行我们在后连接攻击中做的所有操作：
- en: '![](assets/e486f3d6-a51c-4662-a172-96354c29d152.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e486f3d6-a51c-4662-a172-96354c29d152.png)'
- en: External BeEF
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部 BeEF
- en: Now lets look at another example on hooking people to the BeEF when they exist
    outside our network. So again, we're going to have the example against the same
    Windows machine that's in a completely different network, and we'll see how we
    can hook that machine to the BeEF. We're going to start the BeEF browser with
    just one click on the BeEF framework icon. We will go to log in with the username `beef`,
    and password is `beef` as well. Now, we're going to use the same basic `hook`
    method that we did before in [Chapter 13](ed4df884-d2d6-4c71-a1a4-28e4a508ed19.xhtml),
    *Client-Side Attacks - Social Engineering*, so in that method we need to get the
    script code, and we did this before - it has the same procedure, and we placed
    the script in our Apache web server, we placed it in an HTML page, which was in
    the Apache web home `/var/www/html` directory. We are going to open the `index.html`
    file and then open the text editor, and paste the code inside `index.html`, which
    we got from the BeEF Terminal. The only thing that we want to change all instances
    where we used to use our normal IP with our external IP so that people, when they
    try to connect, they'll actually be able to find our computer, because if we use
    the internal IP they won't be able to connect. We are going to use the IP that
    we saw on Google when we typed in `whats my IP`, and save the file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一个示例，展示如何在用户处于我们网络之外时，将他们连接到 BeEF。所以，我们将以一台完全位于不同网络中的 Windows 机器为例，看看如何将这台机器连接到
    BeEF。我们将通过单击 BeEF 框架图标来启动 BeEF 浏览器。接着，我们将使用用户名 `beef` 和密码 `beef` 登录。现在，我们将使用之前在[第13章](ed4df884-d2d6-4c71-a1a4-28e4a508ed19.xhtml)《客户端攻击
    - 社会工程学》中使用的相同基础 `hook` 方法，在该方法中，我们需要获取脚本代码，之前我们已经做过 - 过程相同，我们将脚本放置到 Apache Web
    服务器中，放在 Apache 网站根目录 `/var/www/html` 下的一个 HTML 页面里。我们将打开 `index.html` 文件，然后打开文本编辑器，将从
    BeEF 终端获得的代码粘贴到 `index.html` 中。唯一需要修改的是将所有以前使用的正常 IP 替换为外部 IP，以便当别人尝试连接时，他们实际上能够找到我们的计算机，因为如果我们使用内网
    IP，他们将无法连接。我们将使用在 Google 上输入 `whats my IP` 时看到的 IP 地址，然后保存文件。
- en: 'Once we have done that we need to enable port `3000`, which is the port that
    the BeEF works on. We need to tell the router, again in the IP forwarding settings,
    to forward any requests that we get on port `3000` to our Kali machine, which
    is at `192.168.0.11`. Now, go to the Windows machine and we''re going to go to
    our website, which is basically the external IP of our Kali machine. This will
    run `index.html` automatically, and we should be hooked to the BeEF as soon as
    we browse to the IP. As we can see in the following screenshot, we have got a
    Windows machine hooked and it''s using Firefox 5.0, and now we can run all the
    commands that the BeEF allows us to run:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们需要启用端口 `3000`，这是 BeEF 使用的端口。我们需要在路由器的 IP 转发设置中告知它，将任何对端口 `3000` 的请求转发到我们的
    Kali 机器，Kali 机器的 IP 地址是 `192.168.0.11`。接着，去到 Windows 机器，访问我们的网站，实际上就是我们 Kali 机器的外部
    IP 地址。这将自动运行 `index.html` 文件，我们只要浏览到这个 IP 就应该能连接到 BeEF。正如我们在下面的截图中看到的，我们已经成功地将
    Windows 机器连接到 BeEF，它正在使用 Firefox 5.0，现在我们可以执行 BeEF 允许我们运行的所有命令：
- en: '![](assets/674927a4-3265-4b0d-8f06-f69cff64b04f.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/674927a4-3265-4b0d-8f06-f69cff64b04f.png)'
- en: 'Now, let''s just throw an alert and see if it works. As we can see in the following
    screenshot, it just says BeEF Alert Dialog:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们弹出一个警告框，看看它是否有效。正如我们在下面的截图中看到的，它显示的是 BeEF 警告对话框：
- en: '![](assets/348b1e9d-c279-43e4-a7b4-831a208fcdc4.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/348b1e9d-c279-43e4-a7b4-831a208fcdc4.png)'
- en: 'We''re just going to execute it to make sure that everything is working properly.
    As we can see in the following screenshot that we are hooked to a machine that
    exists in a completely different network:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需执行它，确保一切正常。正如我们在下面的截图中看到的，我们已经成功连接到一台位于完全不同网络中的机器：
- en: '![](assets/eb68f1f4-ea61-457d-b8a2-c245910c8be1.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eb68f1f4-ea61-457d-b8a2-c245910c8be1.png)'
- en: Again all we have to do is use the external IP address. Whenever we are sending
    it outside the network, use the IP that we see when we type in `what's our IP`
    on Google. When we are on our own machine, use the local IP and make sure we configure
    the router to redirect the port that we are listening on to the Kali machine,
    to the IP address, and to the private IP address of the Kali machine.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我们需要做的就是使用外部 IP 地址。每当我们将请求发送到网络外部时，使用在 Google 上输入 `what's our IP` 时显示的
    IP 地址。当我们在自己的机器上时，使用本地 IP，并确保我们配置路由器将监听的端口转发到 Kali 机器的 IP 地址，即 Kali 机器的私有 IP 地址。
- en: As an alternative to using IP forwarding, we can set the Kali machine as a DMZ
    host. Now, not all routers support DMZ, that's why we didn't show it from the
    start; but if it supports it, we can use it. What DMZ does is it's basically IP
    forwarding, but it forwards all ports. So, if we put the IP address of the Kali
    machine in here, the router is going to get a request for any port, it'll forward
    that request to the Kali machine, regardless of what port it is. Therefore with
    port forwarding, we actually select which ports we want to forward to Kali; with
    DMZ, it will forward all the ports to the IP that we put in here. Now and again,
    both of these methods can be used to allow devices on different networks to access
    our computer, so we can receive connections, we can allow them to access a website
    if we are hosting a website on our web server, we can allow them to access fake
    websites, and we can allow them to access the BeEF, the hook, or anything where
    we are listening on a port we can use this method to allow people to access it
    if the people exist on a completely different network than our own network.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 作为使用IP转发的替代方法，我们可以将Kali机器设置为DMZ主机。不过，并不是所有的路由器都支持DMZ，因此我们从一开始并没有展示这个方法；但如果路由器支持，我们就可以使用它。DMZ的作用基本上就是IP转发，但它会转发所有端口。因此，如果我们将Kali机器的IP地址放在这里，路由器将会接收到任何端口的请求，并将该请求转发到Kali机器，而不管请求的是哪个端口。因此，通过端口转发，我们实际上是选择想要转发到Kali的端口；而使用DMZ时，它会将所有端口的请求转发到我们在这里放入的IP地址。时不时地，这两种方法都可以用来允许不同网络上的设备访问我们的计算机，我们可以接收连接，允许它们访问网站（如果我们在我们的Web服务器上托管网站），允许它们访问虚假网站，允许它们访问BeEF、钩子，或者任何我们在监听的端口上使用的方法，如果这些人处在与我们自己的网络完全不同的网络上。
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we majorly focused on how we can attack the external network
    and to implement this attack. We studied a few fundamentals such as port forwarding,
    which means redirecting the request from one port to the other. We even studied
    external backdoors and also how to exploit them, and we saw they are not different
    to internal backdoors. Then, moving ahead to another aspect of attacking the network,
    we learned about IP forwarding, wherein we saw how to determine the path through
    which the packet flows. We also implemented real-life examples to see how this
    works. In the next chapter, we are going to look at techniques to access the victim's
    system even after they are not running software on their system.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们主要关注了如何攻击外部网络并实施这种攻击。我们研究了一些基础知识，例如端口转发，这意味着将请求从一个端口重定向到另一个端口。我们甚至研究了外部后门以及如何利用它们，发现它们与内部后门没有什么不同。接下来，我们继续探讨攻击网络的另一个方面，学习了IP转发，了解了如何确定数据包流经的路径。我们还通过实际例子来演示这个过程。下一章，我们将研究即使受害者的系统没有运行软件，仍然能够访问其系统的技术。
