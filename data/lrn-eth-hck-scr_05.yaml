- en: Pre-Connection Attacks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接前攻击
- en: 'In this chapter, we will focus on the first part of network penetration testing—that
    is, pre-connection attacks. In order to perform these attacks, we will look at
    the fundamentals; we will study the concept of sniffing. Once we have a good idea
    of what sniffing is, we will look at targeted packet sniffing, and an important
    tool for sniffing—the Wireshark tool. Then, we will launch our first attack: the
    deauthentication attack. Finally, we will create a fake access point.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点介绍网络渗透测试的第一部分——即连接前攻击。为了执行这些攻击，我们将了解基础知识；我们将学习嗅探的概念。一旦我们对嗅探有了清晰的理解，我们将研究有针对性的包裹嗅探，以及嗅探的一个重要工具——Wireshark工具。然后，我们将发起第一个攻击：去认证攻击。最后，我们将创建一个假接入点。
- en: 'In this chapter, we will look at the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Packet sniffing basics
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包裹嗅探基础
- en: Targeted packet sniffing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有针对性的包裹嗅探
- en: Deauthentication attacks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 去认证攻击
- en: What is a fake access point?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是假接入点？
- en: Creating fake access points with the MANA Toolkit
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MANA工具包创建假接入点
- en: Packet sniffing basics
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包裹嗅探基础
- en: In the last chapter, we set the Wi-Fi card into monitor mode, so that we can
    sniff packets that are within our Wi-Fi range, even if they're not directly connected
    to our device, and even if we are not connected to a network with a username and
    password. Now, we're going to use a tool called `airodump-ng`, part of the Aircrack-ng
    suite. It's a packet sniffer, and it allows us to capture all of the packets around
    us. We can run it against all of the networks around us and collect any packets
    within our range. We can also run it against a certain **access point** (**AP**)
    so that we only collect packets from a certain Wi-Fi network.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们将Wi-Fi卡设置为监控模式，这样我们就可以嗅探到我们Wi-Fi范围内的包裹，即使它们没有直接连接到我们的设备，甚至我们没有通过用户名和密码连接到网络。现在，我们将使用一个名为`airodump-ng`的工具，它是Aircrack-ng工具套件的一部分。它是一个包裹嗅探器，可以让我们捕获周围的所有包裹。我们可以对周围的所有网络运行它，并收集我们范围内的任何包裹。我们还可以将它针对特定的**接入点**（**AP**）运行，这样我们只收集来自某个Wi-Fi网络的包裹。
- en: 'First, let''s look at how to run the program. You''ll need your Wi-Fi card
    in monitor mode; in our case, the name of the Wi-Fi card is `wlan0`. So, we''ll
    run the `airodump-ng wlan0` command—it''s as simple as that. The name of the Wi-Fi
    card that has monitor mode enabled on it is `wlan0`. As you can see in the following
    screenshot, this will list all of the networks around us:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下如何运行这个程序。你需要将Wi-Fi卡设置为监控模式；在我们的例子中，Wi-Fi卡的名称是`wlan0`。所以，我们将运行`airodump-ng
    wlan0`命令——就是这么简单。启用了监控模式的Wi-Fi卡名称是`wlan0`。正如你在下面的截图中看到的，这将列出我们周围的所有网络：
- en: '![](assets/0eac5225-a0b6-45c8-b340-83dc8eecd243.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0eac5225-a0b6-45c8-b340-83dc8eecd243.png)'
- en: Another use of `airodump-ng` is to identify all of the devices connected to
    the networks around us.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`airodump-ng`的另一个用途是识别所有连接到我们周围网络的设备。'
- en: We can press *Ctrl + C* to stop sniffing. We didn't save the packets that we
    sniffed, so there was no point in analyzing them—we just ran `airodump-ng` against
    the APs around us to see what networks there were and to gather information about
    them. From the preceding screenshot, we can see that there are quite a few networks
    around.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按*Ctrl + C*停止嗅探。我们没有保存我们嗅探到的包裹，因此没有必要分析它们——我们只是对周围的AP运行了`airodump-ng`，以查看有哪些网络并收集有关它们的信息。从前面的截图中，我们可以看到周围有相当多的网络。
- en: 'In the preceding screenshot, there are a few parameters we have to familiarize
    ourselves with, so that we can analyze the output:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，有一些我们需要熟悉的参数，以便我们可以分析输出：
- en: The `BSSID` is the MAC address for the AP; as we know, each network device has
    a MAC address.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BSSID`是AP的MAC地址；正如我们所知，每个网络设备都有一个MAC地址。'
- en: '`PWR` is the power—how far the AP is from our Wi-Fi card. `Test` is the test
    router that we will be running a few attacks against. As you go down, you can
    see that the networks are further and further away. The closer the network is,
    the easier it will be for you to sniff the packets. The closer the network is,
    the more effective the attack will be, and the quicker you will gain access and
    achieve your goal.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PWR`是功率——表示AP距离我们Wi-Fi卡的远近。`Test`是我们将要针对其执行一些攻击的测试路由器。往下看，你可以看到网络越来越远。网络越近，你嗅探包裹的难度就越小。网络越近，攻击越有效，你越能快速访问并实现目标。'
- en: '`Beacons` are the signals that the AP sends; each AP sends a certain type of
    packets, to tell the clients around that it exists. So, even if the network is
    hidden, it will still send these beacons, to tell everyone around that it is there.
    Our `BSSID` is `EC:1A:59:5A:E1:46`, and we are running on `-34` information. So, `50`
    is the number of `Beacons` that each AP is sending.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Beacons` 是 AP 发送的信号；每个 AP 都会发送某种类型的数据包，告知周围的客户端它的存在。所以，即使网络是隐藏的，它仍然会发送这些信标包，告诉周围的人它存在。我们的
    `BSSID` 是 `EC:1A:59:5A:E1:46`，并且我们当前信号强度是 `-34`。因此，`50` 是每个 AP 发送的 `Beacons` 数量。'
- en: The `Data` is the number of useful packets that we have sniffed; we'll talk
    about this in detail later on, when we study WEP decryption and encryption.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Data` 是我们嗅探到的有效数据包的数量；我们稍后会详细讨论这个，特别是在研究 WEP 解密和加密时。'
- en: '`S` is the number of data packets that we have collected in the past 10 seconds;
    as we can see, we have a `0` here, so 0 data packets have been collected in the
    past 10 seconds.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`S` 是我们在过去 10 秒内收集到的数据包数量；如我们所见，这里显示的是 `0`，意味着过去 10 秒内没有收集到数据包。'
- en: The `Channel` is the number of channels that the AP is broadcasting on. Each
    AP broadcasts on a certain channel, used so that there will be no interference
    between APs that are beside each other. Suppose that we have an AP, and five meters
    away, there's another one; if both of them are running on the same channel, there
    will be interference between those two APs, and the signal between them will be
    shorter, so their range will be shorter.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Channel` 是 AP 所广播的频道数。每个 AP 都会在某个频道上广播，以避免相邻的 AP 之间发生干扰。假设我们有一个 AP，五米外有另一个，如果它们使用相同的频道，就会发生干扰，两个
    AP 之间的信号会减弱，从而缩短它们的信号范围。'
- en: '`MB` is the maximum speed supported by this AP; it can go up to `54`.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MB` 是该 AP 支持的最大速度；它最高可以达到 `54`。'
- en: '`ENC` is the encryption that''s used in the AP; we have WEP, WPA, WPA2 encryptions.
    If it''s an open network we will see `OPN` in the encryption.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENC` 是 AP 使用的加密类型；我们有 WEP、WPA 和 WPA2 加密。如果是开放网络，我们会看到 `OPN` 作为加密类型。'
- en: '`CIPHER` is the cipher that''s used to decrypt the packets. For WEP it''s `WEP` but
    for WPA2, it can be `CCMP` or `TKIP`; we''ll talk about these later when we get
    into WPA cracking.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CIPHER` 是用来解密数据包的密码。对于 WEP，它是 `WEP`，但对于 WPA2，它可以是 `CCMP` 或 `TKIP`；我们稍后会在讨论
    WPA 破解时提到这些。'
- en: '`AUTH` is the type of authentication that''s required for this AP. We can see
    **pre-shared key** (**PSK**), and also `MGT`. We''ll also talk about these later
    when we get into WPA cracking.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTH` 是该 AP 所需的认证类型。我们可以看到 **预共享密钥** (**PSK**)，还可以看到 `MGT`。我们稍后会在讨论 WPA 破解时提到这些。'
- en: Targeted packet sniffing
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定向数据包嗅探
- en: You have now seen the basics of sniffing. Once we have a network (or a group
    of networks) to target, it's useful to run `airodump-ng` on that network only,
    instead of running it on all of the networks around us. In this section, we'll
    see how to do that.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经了解了嗅探的基本概念。一旦我们有一个（或一组）网络需要目标，最好只在那个网络上运行 `airodump-ng`，而不是在我们周围的所有网络上运行它。在本节中，我们将展示如何做到这一点。
- en: We are currently running `airodump-ng` on all of the networks around us; we
    are going to target the network with the `BSSID`, `EC:1A:59:5A:E1:46`. That's
    our test network, the `Test`. We are going to sniff on that network only.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前正在运行 `airodump-ng` 来监控我们周围的所有网络；我们将针对 `BSSID` 为 `EC:1A:59:5A:E1:46` 的网络。那是我们的测试网络，名为
    `Test`。我们将只对该网络进行嗅探。
- en: 'To do this, we''re going to use the same program. The command will be as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将使用相同的程序。命令如下：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We need to specify the channel. The `--channel` here is number `10`, as you
    can see in the preceding code snippet; the `--bssid` should be the MAC address
    of the target network. We are going to add a `--write` option; this tells `airodump-ng`
    to log all of the packets that it captures into a file. We also need a filename,
    so let's call it `test-upc`. We then put the name of our Wi-Fi card (in monitor
    mode), and it's `wlan0`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要指定频道。这里的 `--channel` 是频道号 `10`，如前面的代码片段所示；`--bssid` 应该是目标网络的 MAC 地址。我们将添加一个
    `--write` 选项，这告诉 `airodump-ng` 将捕获的所有数据包记录到一个文件中。我们还需要一个文件名，可以将其命名为 `test-upc`。然后我们输入我们
    Wi-Fi 网卡的名称（在监控模式下），它是 `wlan0`。
- en: Then, we press *Enter*, and, as you can see, the only network that shows up
    is `Test`; we don't have any other networks listed. In the previous screenshot
    (in the *Targeted packet sniffing* section), we had too many networks, so not
    all of the information was visible.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们按*Enter*键，正如你所看到的，唯一显示的网络是`Test`，没有其他网络列出。在前面的截图（*目标数据包嗅探*部分）中，我们有太多网络，所以并不是所有信息都能显示出来。
- en: 'In the following screenshot, as we can see, all the parameters that we saw
    in the previous part of this chapter contains all the APs that are within our
    Wi-Fi range, this section here:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，正如我们所见，前面章节中看到的所有参数包含了所有在我们Wi-Fi范围内的AP，这一部分内容：
- en: '![](assets/c798daf9-d8ae-45fd-83d5-f8305a53a2fe.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c798daf9-d8ae-45fd-83d5-f8305a53a2fe.png)'
- en: Now, the preceding screenshot contains all of the clients that are associated
    with the APs; when we see `EC:1A:59:5A:E1:46`, that's the MAC address of the network
    that the client is connected to. The MAC address in the first section is the same
    as the MAC address in the second section. That means that this client is connected
    to network `EC:1A:59:5A:E1:46`. The `STATION` is the MAC address of the client—the
    MAC address of the device that is connected to the network. The `PWR` is the distance
    between us and the device, and the `Rate` is the maximum speed that the device
    is running on. `Lost` is the number of packets that we have lost (that we couldn't
    capture from the target device), and `Frames` is the number of useful packets
    that we collected from that device. We will talk more about frames and data when
    we study WEP cracking in [Chapter 6](c3f79613-de23-4825-9b88-b2f5dc16479c.xhtml),
    *Network Penetration Testing – Gaining Access**.*
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，前面的截图包含了所有与AP关联的客户端；当我们看到`EC:1A:59:5A:E1:46`时，那就是客户端连接的网络的MAC地址。第一部分中的MAC地址与第二部分中的MAC地址相同。这意味着该客户端连接到网络`EC:1A:59:5A:E1:46`。`STATION`是客户端的MAC地址——连接到网络的设备的MAC地址。`PWR`是我们与设备之间的距离，`Rate`是设备运行的最大速度。`Lost`是我们丢失的数据包数量（我们无法从目标设备捕获的），而`Frames`是我们从该设备收集到的有效数据包数量。关于帧和数据的更多内容，我们将在学习WEP破解时讨论，详见[第6章](c3f79613-de23-4825-9b88-b2f5dc16479c.xhtml)，*网络渗透测试
    - 获取访问权限*。
- en: 'The first main part of `airodump-ng` is the APs that are within our Wi-Fi range,
    and the second part is the clients that are associated with those APs. We also
    have the MAC address of the AP and the MAC address of the actual client. Now,
    we are going to use *Ctrl* + *C* to stop sniffing. All of the data has been logged
    into a file called `test-upc`, and we will use `ls`, which is a command to list
    files in Linux; if we add `*` after it, we will see that `airodump-ng` automatically
    created four file formats:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`airodump-ng`的第一个主要部分是我们Wi-Fi范围内的接入点（AP），第二个部分是与这些AP关联的客户端。我们还可以看到AP的MAC地址和实际客户端的MAC地址。现在，我们将使用*Ctrl*
    + *C*来停止嗅探。所有数据已经记录到名为`test-upc`的文件中，我们将使用`ls`命令来列出Linux中的文件；如果在其后添加`*`，我们将看到`airodump-ng`自动创建了四种文件格式：'
- en: '![](assets/ee6c4bef-c23c-43d7-ac96-81eb5bdd40e3.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ee6c4bef-c23c-43d7-ac96-81eb5bdd40e3.png)'
- en: In our command, we only specified the filename as `test-upc`; `airodump-ng`
    automatically added a `01` to the filename, just in case there was another file
    that had the same name. We can see four different file formats—`CAP`, `CSV`, `KISMET`,
    and `KIDMET XML`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的命令中，我们只指定了文件名为`test-upc`；`airodump-ng`自动在文件名后加了`01`，以防有另一个文件使用了相同的名称。我们可以看到四种不同的文件格式——`CAP`、`CSV`、`KISMET`和`KIDMET
    XML`。
- en: If we execute `pwd`, we will see that we're in the `root` directory. After we
    sniff the packets, we can use a program, such as Wireshark, to analyze the packets
    and see what information was gathered. The problem with this specific network
    is that it uses WPA2 encryption, so all of the packets are encrypted, and we can't
    decrypt them unless we have a key. We're going to discuss how to crack the key
    in later chapters of this book.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们执行`pwd`，我们将看到我们在`root`目录中。嗅探完数据包后，我们可以使用Wireshark等程序来分析数据包，查看收集到的信息。这个特定网络的问题是它使用了WPA2加密，所以所有数据包都被加密，除非我们有密钥，否则无法解密它们。我们将在本书的后续章节中讨论如何破解这个密钥。
- en: We're going to discuss how to use Wireshark in [Chapter 7](ed450616-a95c-4c35-b9a6-7e5362e39198.xhtml),
    *Post Connection Attacks*, of this book, so for now, we are just going to run
    Wireshark to give you a quick look at how the packets show up. They're not going
    to be useful, because they're encrypted.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的[第7章](ed450616-a95c-4c35-b9a6-7e5362e39198.xhtml)，*连接后攻击*中讨论如何使用Wireshark，所以目前，我们只是运行Wireshark，快速浏览一下数据包的显示方式。它们目前没有用，因为它们是加密的。
- en: 'We''ll open the Wireshark tool by implementing the `wireshark` command, then
    go to the option File | Open, as shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过执行`wireshark`命令打开Wireshark工具，然后转到选项文件 | 打开，如下图所示：
- en: '![](assets/38088be9-b927-4c79-a5b5-2afd45068b2a.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/38088be9-b927-4c79-a5b5-2afd45068b2a.png)'
- en: 'Look for the `test-upc.cap` file in the `/root` directory:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/root`目录中查找`test-upc.cap`文件：
- en: '![](assets/7ad6f2ca-f0dd-498d-8c4a-7498a65a2426.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7ad6f2ca-f0dd-498d-8c4a-7498a65a2426.png)'
- en: 'After opening the capture file, we can see some information—for example, that
    the source device is a Belkin device in the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 打开捕获文件后，我们可以看到一些信息——例如，源设备是以下截图中的Belkin设备：
- en: '![](assets/d2348cf2-b6c2-46fe-81c6-fdfc4a041f64.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d2348cf2-b6c2-46fe-81c6-fdfc4a041f64.png)'
- en: We can also see (in the preceding screenshot) that there is a device communicating
    with Belkin; the MAC addresses; the devices; and the manufacturers. This is very
    simple information, because the network is encrypted. If it were an open network,
    we could connect straight away, and jump to further sections about penetration
    testing. For now, we just wanted you to see how the packets look when the network
    is encrypted. In the future, you will learn more about it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到（在前面的截图中）有一台设备与Belkin进行通信；显示了MAC地址、设备以及制造商。这些信息非常简单，因为网络是加密的。如果是开放网络，我们可以直接连接，并跳转到有关渗透测试的进一步章节。目前，我们只是希望你能看到加密网络中数据包的样子。将来，你将学习更多相关内容。
- en: Deauthentication attack
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 去认证攻击
- en: In this part of the book, all we will discuss are attacks that we can launch
    on any network in our Wi-Fi range, even if the network has encryption or uses
    a key. We don't have to connect to a network to launch these attacks.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一部分，我们将讨论可以在任何处于我们Wi-Fi范围内的网络上发起的攻击，即使该网络有加密或使用了密钥。我们不需要连接到网络就能发起这些攻击。
- en: Deauthentication attacks are very useful; they allow us to disconnect any device
    from any network that is within our Wi-Fi range. To perform the attacks, we spoof
    our MAC address to get the target MAC address (the target being the client that
    we want to disconnect). We pretend to be the client, and then we send a deauthentication
    packet to the router, telling the router that we want to disconnect. At the same
    time, we spoof our MAC address to the AP MAC address, and tell the target client
    that it needs to re-authenticate itself. Then, the connection will be lost.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 去认证攻击非常有用；它们允许我们断开任何处于我们Wi-Fi范围内的设备与网络的连接。为了执行这些攻击，我们伪造自己的MAC地址来获取目标MAC地址（目标是我们想要断开的客户端）。我们假装自己是客户端，然后向路由器发送去认证数据包，告诉路由器我们希望断开连接。同时，我们将自己的MAC地址伪造为AP的MAC地址，告知目标客户端需要重新进行身份验证。然后，连接将丢失。
- en: 'Let''s see how to do it, using a tool called `aireplay-ng`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用一个名为`aireplay-ng`的工具来实现：
- en: 'First of all, we need to run `airodump-ng` on the target network, because we
    want to see which clients are connected to it. This time, we will not need the
    `--write` option, so we are just going to remove it. All we need are `airodump-ng`,
    the `--channel` (we put the channel of the target network), and the `--bssid` (the
    MAC address of the target network). The command will be as follows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在目标网络上运行`airodump-ng`，因为我们想查看哪些客户端已连接到该网络。这一次，我们不需要`--write`选项，所以我们会去掉它。我们只需要`airodump-ng`，`--channel`（我们指定目标网络的频道），以及`--bssid`（目标网络的MAC地址）。命令如下：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We hit *Enter*, and we''re sniffing on the target network, `Test`. This method
    will work on any device, whether it''s a Linux, Windows, Mac, or Android device—it
    doesn''t matter; they all use the same method of transferring packets:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按下*Enter*键，并开始嗅探目标网络`Test`。这种方法适用于任何设备，无论是Linux、Windows、Mac还是Android设备——都没有关系；它们使用相同的数据包传输方法：
- en: '![](assets/7e93c7ab-58aa-4f17-8a06-4aae11c98750.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7e93c7ab-58aa-4f17-8a06-4aae11c98750.png)'
- en: Now, we're going to run `aireplay-ng`, to disassociate one of the devices from
    the network. We can run it to disassociate all devices, but I have found that
    when we do that, it doesn't really disassociate all of them, because there are
    too many targets to disassociate. So, we will choose one target, which will be
    the device `6C:C4:D5:6F:A6:DC`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将运行`aireplay-ng`，将其中一台设备与网络断开连接。我们可以运行它来断开所有设备，但我发现，当我们这么做时，并不能真正断开所有设备，因为目标设备太多，无法全部断开。所以，我们将选择一个目标设备，即设备`6C:C4:D5:6F:A6:DC`。
- en: 'Using `aireplay-ng`, we will add `--deauth` (for a deauthentication attack),
    and then put the number of deauthentication packets that we''re going to send;
    we will just put a very large number, to keep the device disconnected. Then, we
    will put the target AP (the MAC address of our target AP), and the source (or
    the client''s MAC address), which is the device that we want to disconnect. We
    will also include `wlan0`, our Wi-Fi card in monitor mode. If we hit *Enter,* `aireplay-ng` will
    now send the deauthentication packets. The command will look as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`aireplay-ng`，我们将添加`--deauth`（用于去认证攻击），然后输入我们将发送的去认证数据包数量；我们会输入一个非常大的数字，以保持设备断开连接。接着，我们将输入目标
    AP（我们目标 AP 的 MAC 地址），以及源（或客户端的 MAC 地址），即我们想要断开连接的设备。我们还会包括`wlan0`，即我们处于监控模式的 Wi-Fi
    卡。如果我们按下*回车*，`aireplay-ng`将开始发送去认证数据包。命令如下所示：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output will be something like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '![](assets/cf64a606-db58-4561-9360-6264d574c642.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cf64a606-db58-4561-9360-6264d574c642.png)'
- en: Go to the target device and see if it still has an internet connection. We'll
    be able to see that it has lost connection, and it's trying to reconnect; it won't
    be able to, because we are still sending our deauthentication packets. We can
    launch this attack on any network that we choose; we don't need to know the password
    or key.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 去目标设备，看看它是否仍然有互联网连接。我们将看到它失去了连接，并且正在尝试重新连接；它将无法重新连接，因为我们仍在发送去认证数据包。我们可以对我们选择的任何网络发起这种攻击；我们不需要知道密码或密钥。
- en: What is a fake access point?
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是假冒接入点？
- en: Basically, a fake AP is an AP that looks normal to users and doesn't have encryption
    on it, so people can connect without having to enter a key. It's an open network,
    and it should have an internet connection to attract people to it. Why would we
    create a fake AP? Well, if we create one, we will attract a large number of people
    to connect to the network and access the internet. They will log in to their accounts,
    and we can use packet sniffing to capture anything that they log.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，假接入点是一个看起来对用户正常的 AP，而且没有加密，这样人们就可以连接而无需输入密钥。它是一个开放网络，并且应该有一个互联网连接，以吸引人们连接。我们为什么要创建一个假接入点？好吧，如果我们创建了一个，就会吸引大量的人连接到网络并访问互联网。他们将登录自己的账户，我们可以通过数据包嗅探捕捉到他们登录的信息。
- en: 'Creating an AP is simple; it just needs to be set up correctly, so that the
    AP can function. The first things we will need are two cards:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 AP 很简单；只需要正确设置，这样 AP 就能正常工作。我们需要的第一件事是两张卡：
- en: A card needs to be connected to the internet. It doesn't matter what card it
    is—3G, wired, wireless—all we need is a card that is connected to the internet.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要有一张卡连接到互联网。卡的类型不重要——无论是 3G、网线还是无线——我们需要的只是能连接到互联网的卡。
- en: The second card has to be a Wi-Fi card. This Wi-Fi card will be used as the
    AP, to broadcast the AP's signal.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二张卡必须是 Wi-Fi 卡。这张 Wi-Fi 卡将用作 AP，广播 AP 的信号。
- en: 'In the following diagram, Hacker is our hacker device; we will need the two
    preceding cards connected to our device. The second card is going to broadcast,
    telling all of the devices around it that it is an AP for the internet:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，Hacker 是我们的黑客设备；我们需要将前两张卡连接到我们的设备。第二张卡将广播，告诉周围的所有设备，它是一个用于上网的 AP：
- en: '![](assets/42e34b3d-224e-429f-b558-6adabd8f099c.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/42e34b3d-224e-429f-b558-6adabd8f099c.png)'
- en: 'How are we going to do this, and how is it going to work? Suppose that Client
    1 wants to access Google; it''s going to ask for our Wi-Fi card because our Wi-Fi
    card is pretending to be the AP. Now, the Wi-Fi card doesn''t have an internet
    connection, so we''re going to have to set it up in a way such that once it gets
    a request, it talks to the second card, which *is* connected to the internet.
    Now, the second card will break the request, forward it back through our device
    to the Wi-Fi card, and send it back to Client 1:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将如何做到这一点，它将如何工作呢？假设客户端1想访问Google，它将请求我们的Wi-Fi卡，因为我们的Wi-Fi卡伪装成了AP（接入点）。现在，Wi-Fi卡没有互联网连接，所以我们必须以一种方式设置它，使得一旦收到请求，它会与第二张卡进行通信，而第二张卡*已经*连接到互联网。然后，第二张卡将打破请求，通过我们的设备转发到Wi-Fi卡，再发送回客户端1：
- en: '![](assets/ca235352-4a62-4487-9f66-4fda63048d48.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ca235352-4a62-4487-9f66-4fda63048d48.png)'
- en: The preceding is the theory of how the fake AP is going to work. In the next
    part, we're going to implement it, so as to see the commands that need to be used.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 上述是关于假AP如何工作的理论。接下来，我们将实现它，以便查看需要使用的命令。
- en: Creating fake access points with the MANA Toolkit
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MANA工具包创建假接入点
- en: In this section, we'll discuss a tool called the MANA Toolkit. The MANA Toolkit
    allows us to create fake APs. It is very easy to use, and it automatically creates
    fake APs for us, so that we don't have to manually type commands. The tool also
    has a few scripts, allowing us to run a number of tools to sniff traffic in the
    fake AP, bypass HTTPS, and even attempt to bypass HSTS.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论一个叫做MANA工具包的工具。MANA工具包允许我们创建假AP。它非常易于使用，能够自动为我们创建假AP，因此我们不必手动输入命令。该工具还包含一些脚本，允许我们运行多个工具来嗅探假AP中的流量，绕过HTTPS，甚至尝试绕过HSTS。
- en: 'The tool comes with three main scripts:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具包含三个主要脚本：
- en: '`start-noupstream.sh`: Basically, this script will create a fake AP. This AP
    will not have an internet connection, so, when someone connects to this fake AP,
    they will not be able to connect to the internet.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`start-noupstream.sh`：这个脚本基本上会创建一个假AP。这个AP没有互联网连接，因此当有人连接到这个假AP时，他们将无法连接到互联网。'
- en: '`start-nat-simple.sh`: This creates a fake AP with an internet connection.
    So, when someone connects to this AP, they will be able to access the internet,
    and all of the packets will be flowing through our device (because we are the
    router), so we''ll be able to analyze, capture, and read the packets.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`start-nat-simple.sh`：这个脚本会创建一个带有互联网连接的假AP。因此，当有人连接到这个AP时，他们将能够访问互联网，所有的数据包都会通过我们的设备（因为我们是路由器），所以我们可以分析、捕获并读取这些数据包。'
- en: '`start-nat-full.sh`: This script will create an AP with an internet connection,
    and it will also automatically start sniffing and recording the packets that are
    flowing through the fake AP; it will attempt to bypass HTTPS and HSTS.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`start-nat-full.sh`：这个脚本将创建一个带有互联网连接的AP，并且它还会自动开始嗅探并记录流经假AP的数据包；它还会尝试绕过HTTPS和HSTS。'
- en: We are not going to use the `start-nat-full.sh` script, because it actually
    fails a lot of the time. We're only going to use the `start-nat-simple.sh` script,
    for creating an AP with an internet connection. In the future, we'll see how to
    capture and analyze the packets.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会使用`start-nat-full.sh`脚本，因为它实际上经常失败。我们只会使用`start-nat-simple.sh`脚本来创建一个有互联网连接的AP。未来，我们将看到如何捕获并分析数据包。
- en: Before getting into more detail, let's take a look at the settings for the Kali
    machine. Go to Settings | Network, and make sure that you're using a NAT network.
    This is exactly what we saw in [Chapter 3](3e16cd79-e639-4851-81e9-9dcd6c29c5dc.xhtml), *Linux
    Basics*.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在更详细介绍之前，我们先来看看Kali机器的设置。进入设置 | 网络，确保你正在使用NAT网络。这正是我们在[第3章](3e16cd79-e639-4851-81e9-9dcd6c29c5dc.xhtml)中看到的，*Linux基础*。
- en: 'Run the following command to install the MANA Toolkit:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令来安装MANA工具包：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If it is already installed, it will tell us that it is, along with its version.
    If we use `ifconfig`, we''ll see that we have an interface called `eth0`; this
    interface is actually used by VirtualBox in the NAT network, so it''s a virtual
    interface that is connected to that network:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已经安装，它会告诉我们已经安装，并显示其版本。如果我们使用`ifconfig`，我们会看到一个名为`eth0`的接口；这个接口实际上是VirtualBox在NAT网络中使用的，因此它是一个虚拟接口，连接到该网络：
- en: '![](assets/0edfa88f-9dfa-44f6-92e4-1b9eeaab6e45.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0edfa88f-9dfa-44f6-92e4-1b9eeaab6e45.png)'
- en: 'It''s supplying an internet connection to the machine. At the moment, we don''t
    have a wireless card connected to it. If we use `iwconfig`, we will see that the
    internet connection comes from `eth0`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 它正在为机器提供互联网连接。目前，我们没有无线网卡连接到它。如果我们使用`iwconfig`，我们会看到互联网连接来自`eth0`：
- en: '![](assets/a66ac1a2-8d38-4203-b83e-227c1182b4b7.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a66ac1a2-8d38-4203-b83e-227c1182b4b7.png)'
- en: 'If we try to ping using the `ping www.google.com -c 5` command, we will get
    responses back from Google, which means that the machine has an internet connection:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试使用`ping www.google.com -c 5`命令进行 ping 操作，我们将收到来自 Google 的响应，这意味着机器已经连接到互联网：
- en: '![](assets/2d08c9e0-39c3-4236-9503-a66cf637b99f.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2d08c9e0-39c3-4236-9503-a66cf637b99f.png)'
- en: 'We will now connect the wireless card to the Kali machine; go to Devices |
    USB, and pick our card. The card should now show up when we run `iwconfig`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将无线网卡连接到 Kali 机器；进入设备 | USB，选择我们的网卡。运行`iwconfig`时，网卡应该会显示出来：
- en: '![](assets/352c33e2-0099-43e2-9375-d7c15ab9022e.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/352c33e2-0099-43e2-9375-d7c15ab9022e.png)'
- en: So, the `wlan0` card is only used to broadcast the signal; it's not used to
    provide the internet connection. This card is in the managed mode, and it's not
    connected to any network.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，`wlan0`网卡只是用来广播信号的；它不用于提供互联网连接。这个网卡处于管理模式，且没有连接到任何网络。
- en: 'Now, we''re going to set up MANA''s configuration and start the fake AP:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将设置 MANA 的配置并启动虚拟 AP：
- en: 'First, we need to modify the `hostapd-mana.conf` file, which is located at `/etc/mana-toolkit`,
    using Leafpad editor. We are using Leafpad because this is the editor that we
    want to modify the file with. We will type the location where the file is located:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要修改位于`/etc/mana-toolkit`的`hostapd-mana.conf`文件，使用 Leafpad 编辑器。我们使用 Leafpad
    是因为这是我们用来修改文件的编辑器。我们将输入文件所在的路径：
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, we can modify the settings of the fake AP that we''re using. The most
    important thing is the interface that we''re going to use to broadcast the signal;
    for us, it was called `wlan0`. Remember that when we run `iwconfig`, `wlan0` is
    our wireless card that''s going to broadcast the signal, and it''s not connected
    to anything. Now, we can modify the MAC address (or the name of the network);
    the name of the network, in our case, is going to be `Internet`, and the `channel`
    is going to be set to `6`. We will not be modifying anything else; this was just
    to illustrate how to check the name:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们可以修改我们使用的虚拟 AP 的设置。最重要的是我们将用来广播信号的接口；对我们来说，这个接口被称为`wlan0`。记住，当我们运行`iwconfig`时，`wlan0`就是我们用来广播信号的无线网卡，并且它没有连接到任何东西。现在，我们可以修改
    MAC 地址（或网络名称）；在我们的例子中，网络名称将设置为`Internet`，并且`channel`将设置为`6`。我们不会修改其他任何内容；这只是为了说明如何检查名称：
- en: '![](assets/40adef8a-48bc-49ea-8b13-6aeaa6aae14a.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/40adef8a-48bc-49ea-8b13-6aeaa6aae14a.png)'
- en: 'The other file that we want to modify is the `start-nat-simple.sh` script;
    this is the file that will launch the AP. Again, we''re going to use Leafpad,
    and the command is as follows:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想要修改的另一个文件是`start-nat-simple.sh`脚本；这个文件将启动虚拟 AP。我们将再次使用 Leafpad，命令如下：
- en: '[PRE5]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The first thing to do is make sure that you correctly set `phy` parameter;
    this will be your wireless card. We already know that the wireless card was called
    `wlan0`. Next, the `upstream` parameter is very important; we should specify the
    card that has an internet connection. In our case, it was called `eth0`, the virtual
    card made by VirtualBox. Again, if everything is set up correctly, we will not
    modify anything. Save the file:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先要做的是确保正确设置了`phy`参数；这将是你的无线网卡。我们已经知道无线网卡的名称是`wlan0`。接下来，`upstream`参数非常重要；我们应该指定有互联网连接的网卡。在我们的例子中，它被称为`eth0`，是
    VirtualBox 创建的虚拟网卡。同样，如果一切设置正确，我们不会修改任何内容。保存文件：
- en: '![](assets/15afeb17-6f75-4531-a5fe-7444187af37a.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/15afeb17-6f75-4531-a5fe-7444187af37a.png)'
- en: 'Our last step will be to run MANA, and it will be running the `start-nat-simple.sh
    script`. Instead of using `leafpad`, this time, we''re going to use `bash`, in
    order to execute the file. Our command will be as follows:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的最后一步是运行 MANA，它将运行`start-nat-simple.sh`脚本。这次我们将使用`bash`，而不是使用`leafpad`，来执行文件。我们的命令如下：
- en: '[PRE6]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Sometimes, we will get an error that says it cannot configure the file; in
    this case, just run the command again, and it should work the second time, as
    shown in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们会遇到一个错误，提示无法配置文件；在这种情况下，只需重新运行命令，第二次应该就能正常工作，如下图所示：
- en: '![](assets/1f559752-9c0f-4c9c-a626-16422ec73a03.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1f559752-9c0f-4c9c-a626-16422ec73a03.png)'
- en: After this AP is running, we will go to our Windows machine and try to connect
    from it. We will be using another wireless card for the Windows machine, because
    the Windows machine will be a virtual machine as well. We can try to connect from
    our phone or from another laptop; do not connect from the host machine, because
    it will not have an internet connection (it is hosting the internet connection
    for everything). Either test the connection from your phone, from a separate laptop,
    or from a virtual Windows machine, but make sure to use a different wireless card.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个虚假AP运行之后，我们将去我们的Windows机器上并尝试从中连接。我们将使用另一张无线网卡为Windows机器，因为Windows机器也将作为虚拟机存在。我们可以尝试从我们的手机或另一台笔记本电脑连接；不要从主机机器连接，因为它将没有互联网连接（它为所有设备提供互联网连接）。可以从您的手机、独立的笔记本电脑或虚拟Windows机器测试连接，但一定要使用不同的无线网卡。
- en: 'Going back to our Windows device, we are going to search for networks to connect
    to. As we can see in the following screenshot, we have an extra network, called
    Internet, and it has no password:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到我们的Windows设备，我们将搜索要连接的网络。如下面的截图所示，我们有一个额外的网络，称为Internet，并且没有密码：
- en: '![](assets/f02f1e55-bc12-460c-9b46-88ca8ea7fb49.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f02f1e55-bc12-460c-9b46-88ca8ea7fb49.png)'
- en: 'We''re going to try to connect to this network. Once we have successfully connected,
    we will see that we have an internet connection through the fake AP, and all packets
    are now flowing through this device:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将尝试连接到这个网络。一旦成功连接，我们将看到我们通过虚假AP有了互联网连接，并且所有的数据包现在都流经这个设备：
- en: '![](assets/a704b06d-84d1-4e51-9c59-5297802b6142.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a704b06d-84d1-4e51-9c59-5297802b6142.png)'
- en: The device is the AP, so it's like the router. We can actually use Wireshark
    (or any other tool), `tcpdump`, or TShark, to capture and analyze the packets.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 设备就是AP，就像路由器一样。我们实际上可以使用Wireshark（或任何其他工具）、`tcpdump`或TShark来捕获和分析数据包。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you took a step toward learning about network penetration testing.
    We started with the fundamentals of sniffing, and we used `airodump-ng` to see
    all of the networks that were within our Wi-Fi range. We collected information
    about the networks, including the `BSSID`, the channel, the distance between us
    and the AP, and the encryption used. We then discussed targeted packet sniffing,
    giving an overview of the Wireshark tool. Then, we illustrated how to launch a
    deauthentication attack. Toward the end of the chapter, we studied fake APs, showing
    how to create one using the MANA Toolkit.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你迈出了学习网络渗透测试的一步。我们从嗅探的基础知识开始，并使用`airodump-ng`查看我们Wi-Fi范围内的所有网络。我们收集了关于网络的信息，包括`BSSID`、信道、我们与AP之间的距离以及使用的加密方式。然后，我们讨论了有针对性的数据包嗅探，并概述了Wireshark工具。接着，我们演示了如何发动去认证攻击。在章节末尾，我们研究了虚假AP，展示了如何使用MANA
    Toolkit创建一个。
- en: In the next chapter we will be attacking the target by connecting to the network
    this will allow us to  launch more powerful attacks.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过连接到网络来攻击目标，这将允许我们发动更强大的攻击。
