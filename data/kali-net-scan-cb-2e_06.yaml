- en: Vulnerability Scanning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞扫描
- en: 'This chapter contains the following recipes for performing automated vulnerability
    scanning:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含以下用于执行自动化漏洞扫描的配方：
- en: Vulnerability scanning with the Nmap Scripting Engine
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Nmap 脚本引擎进行漏洞扫描
- en: Vulnerability scanning with MSF auxiliary modules
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 MSF 辅助模块进行漏洞扫描
- en: Creating scan policies with Nessus
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Nessus 创建扫描策略
- en: Vulnerability scanning with Nessus
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Nessus 进行漏洞扫描
- en: Vulnerability scanning with OpenVAS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 OpenVAS 进行漏洞扫描
- en: Validating vulnerabilities with HTTP interaction
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 HTTP 交互验证漏洞
- en: Validating vulnerabilities with ICMP interaction
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ICMP 交互验证漏洞
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: While it is possible to identify many potential vulnerabilities by reviewing
    the results of service fingerprinting and researching exploits associated with
    identified versions, this can often take an extraordinarily large amount of time.
    There are more streamlined alternatives that can usually accomplish a large part
    of this work for you. These alternatives include the use of automated scripts
    and programs that can identify vulnerabilities by scanning remote systems. Unauthenticated
    vulnerability scanners work by sending a series of distinct probes to services
    in attempt to solicit responses that indicate that a vulnerability exists. Alternatively,
    authenticated vulnerability scanners will directly query the remote system using
    the credentials provided for information regarding installed applications, running
    services, filesystem, and registry contents.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然通过查看服务指纹识别结果并研究与已识别版本相关的漏洞来识别许多潜在漏洞是可能的，但这通常会耗费极大的时间。有一些更简化的替代方案，通常可以为您完成这项工作的很大一部分。这些替代方案包括使用自动化脚本和程序，通过扫描远程系统来识别漏洞。未经身份验证的漏洞扫描器通过向服务发送一系列独特的探测请求，试图获取指示漏洞存在的响应。相反，经过身份验证的漏洞扫描器会直接使用提供的凭据查询远程系统，获取关于已安装应用程序、运行的服务、文件系统和注册表内容的信息。
- en: Vulnerability scanning with the Nmap Scripting Engine
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Nmap 脚本引擎进行漏洞扫描
- en: The **Nmap Scripting Engine (NSE)** provides a large number of scripts that
    can be used to perform a range of automated tasks to evaluate remote systems.
    The existing NSE scripts that can be found in Kali are classified into a number
    of different categories, one of which is vulnerability identification.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nmap 脚本引擎 (NSE)** 提供了大量的脚本，可以用于执行一系列自动化任务来评估远程系统。Kali 中可以找到的现有 NSE 脚本被分为多个不同的类别，其中之一是漏洞识别。'
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To perform vulnerability analysis with NSE, you will need to have a system that
    is running network services over TCP or UDP. In the example provided, a Windows
    XP system with a vulnerable SMB service is used for this task. For more information
    on setting up a Windows system, refer to the *Installing Windows Server* recipe
    in [Chapter 1](part0026.html#OPEK1-cf89710d791c4a3bb78ec273d9322426), *Getting
    Started*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 NSE 执行漏洞分析，您需要有一个运行 TCP 或 UDP 网络服务的系统。在提供的示例中，使用了一个存在漏洞的 SMB 服务的 Windows
    XP 系统。有关如何设置 Windows 系统的更多信息，请参阅[第 1 章](part0026.html#OPEK1-cf89710d791c4a3bb78ec273d9322426)中的
    *安装 Windows Server* 章节，*入门*部分。
- en: How to do it…
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'To get all the vulnerability information with the Nmap Scripting Engine, perform
    the following steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Nmap 脚本引擎获取所有漏洞信息，请执行以下步骤：
- en: 'There are a number of different ways in which one can identify the functions
    associated with any given NSE script. One of the most effective ways is to reference
    the `script.db` file that is located in the Nmap script directory. To see the
    contents of the file, we can use the `cat` command, as follows:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有许多不同的方法可以识别与任何给定 NSE 脚本相关的功能。最有效的方法之一是参考位于 Nmap 脚本目录中的 `script.db` 文件。要查看文件内容，可以使用
    `cat` 命令，如下所示：
- en: '![](../images/00093.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00093.jpeg)'
- en: 'This `script.db` file is a very simple index that shows each NSE script''s
    filename and the categories it falls into. These categories are standardized and
    make it easy to grep for specific types of script. The category name for vulnerability
    scanning scripts is `vuln`. To identify all vulnerability scripts, one would need
    to grep for the `vuln` term and then extract the filename for each script with
    the `cut` command. This can be seen in the following truncated output:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`script.db` 文件是一个非常简单的索引，显示每个 NSE 脚本的文件名及其所属类别。这些类别是标准化的，便于使用 `grep` 查找特定类型的脚本。漏洞扫描脚本的类别名称为
    `vuln`。要识别所有漏洞脚本，可以使用 `grep` 搜索 `vuln` 关键词，并通过 `cut` 命令提取每个脚本的文件名。以下是一个截断的输出示例：'
- en: '![](../images/00467.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00467.jpeg)'
- en: 'To further evaluate the use of any given script in the preceding list, one
    can use the `cat` command to read the `.nse` file that is contained within the
    same directory as the `script.db` file. Because most of the descriptive content
    is generally at the beginning of the file, it is recommended that you pipe the
    content over to the `more` utility so that the file can be read from top to bottom,
    as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了进一步评估前面列表中任何给定脚本的使用，可以使用 `cat` 命令读取与 `script.db` 文件位于同一目录中的 `.nse` 文件。由于大多数描述性内容通常位于文件的开头，建议将内容通过管道传输到
    `more` 工具，这样就可以从上到下阅读该文件，如下所示：
- en: '![](../images/00535.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00535.jpeg)'
- en: 'In the example provided, we can see that the `smb-vuln-ms10-054.nse` script
    checks for a remote memory corruption vulnerability associated with the SMB service.
    Here, one can find a description of the vulnerability and references to the **Common
    Vulnerabilities and Exposures** (**CVE**) number that can be queried online for
    additional information. By reading further, one can learn even more about the
    script, as follows:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提供的示例中，我们可以看到 `smb-vuln-ms10-054.nse` 脚本检查与 SMB 服务相关的远程内存损坏漏洞。在这里，可以找到漏洞的描述以及指向
    **常见漏洞和暴露** (**CVE**) 编号的参考，CVE 编号可以在线查询以获取更多信息。继续阅读，你可以更深入地了解该脚本，如下所示：
- en: '![](../images/00600.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00600.jpeg)'
- en: By reading further down, we can find details on script-specific arguments, appropriate
    usages, and an example of the expected script output. It is important to take
    note of the fact that there is an unsafe argument that can be set to the value
    of `0` (not activated) or `1` (activated). This is actually a common argument
    in Nmap vulnerability scripts and it is important to understand its use.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续往下阅读，我们可以找到有关脚本特定参数、适当用法以及预期脚本输出的示例。需要特别注意的是，存在一个不安全的参数，可以设置为 `0`（未启用）或 `1`（启用）。这是
    Nmap 漏洞脚本中的一个常见参数，理解它的使用非常重要。
- en: By default, the `unsafe` argument is set to `0`. When this value is set, Nmap
    does not perform any tests that could potentially result in a denial-of-service
    condition. While this sounds like the optimal choice, it often means that the
    results of many tests will be less accurate, and some tests will not be performed
    at all. Activating the `unsafe` argument is recommended for a more thorough and
    accurate scan, but this should only be performed against production systems in
    authorized testing windows. To run the vulnerability scan, the specific NSE script
    should be defined with the `nmap --script` argument, and all script-specific arguments
    should be passed using the `nmap --script-args` argument.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，`unsafe` 参数的值设置为 `0`。当这个值被设置时，Nmap 不会执行可能导致拒绝服务攻击的测试。虽然这听起来是最优选择，但通常意味着许多测试的结果将不那么准确，甚至一些测试根本不会执行。为了进行更彻底和准确的扫描，建议启用
    `unsafe` 参数，但这应仅在授权的测试窗口内对生产系统进行操作。要运行漏洞扫描，应使用 `nmap --script` 参数指定特定的 NSE 脚本，并通过
    `nmap --script-args` 参数传递所有脚本特定的参数。
- en: 'Also, to run the vulnerability scan with minimal distracting output, Nmap should
    be configured to only scan the port corresponding to the scanned service, as follows:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，为了以最少的干扰输出运行漏洞扫描，Nmap 应配置为仅扫描与扫描服务对应的端口，如下所示：
- en: '![](../images/00652.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00652.jpeg)'
- en: 'There is one more NSE script that I would like to draw attention to, because
    it teaches an important lesson about the practice of vulnerability scanning. This
    script is `smb-vuln-ms10-061.nse`. The details of this script can be seen by reading
    the script from the top down with the `cat` command piped over to `more`:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有一个 NSE 脚本，我想特别提一下，因为它提供了关于漏洞扫描实践的重要教训。这个脚本是 `smb-vuln-ms10-061.nse`。可以通过使用
    `cat` 命令查看脚本的内容，然后使用 `more` 命令分页阅读，从上到下查看脚本的详细信息：
- en: '![](../images/00032.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00032.jpeg)'
- en: This vulnerability was one of four vulnerabilities that were exploited by the
    Stuxnet worm. The script checks for the vulnerability in a safe way without the
    possibility of crashing the remote system, as this is not a memory corruption
    vulnerability. In order for the check to work, it needs access to at least one
    shared printer on the remote system. By default, it tries to enumerate printers
    using the LANMAN API, which on some systems is not available by default. In that
    case, a user should specify the printer share name as a printer script argument.
    To find a printer share, `smb-enum-shares` can be used.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个漏洞是Stuxnet蠕虫利用的四个漏洞之一。该脚本以安全的方式检查漏洞，且不会导致远程系统崩溃，因为这不是一个内存损坏漏洞。为了使检查生效，它需要访问远程系统上至少一个共享的打印机。默认情况下，它会尝试使用LANMAN
    API列举打印机，但在某些系统上默认情况下此API不可用。在这种情况下，用户应当指定打印机共享名称作为打印机脚本参数。为了查找打印机共享，可以使用`smb-enum-shares`。
- en: 'Also, on some systems, accessing shares requires valid credentials, which can
    be specified with the `smb` library arguments: `smbuser` and `smbpassword`. What
    makes this vulnerability interesting is the fact that there are multiple factors
    that must be true before it can actually be exploited:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，在某些系统上，访问共享需要有效的凭证，这些凭证可以通过`smb`库的参数`smbuser`和`smbpassword`来指定。这个漏洞之所以有趣，是因为在实际利用之前，必须满足多个条件：
- en: First, a system must be running one of the implicated operating systems (XP,
    Server 2003 SP2, Vista, Server 2008, or Windows 7).
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，系统必须运行其中一个受影响的操作系统（XP、Server 2003 SP2、Vista、Server 2008或Windows 7）。
- en: Second, it must be missing the `MS10-061` patch, which addresses the code-execution
    vulnerability.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二，它必须缺少`MS10-061`补丁，该补丁修复了代码执行漏洞。
- en: Finally, a local print share on the system must be publicly accessible. What
    is interesting about this is that it is possible to audit the remote SMB print
    spooler service to determine whether the system is patched regardless of whether
    there is an existing printer share on the system. Because of this, there are varying
    interpretations of what a vulnerable system is. Some vulnerability scanners will
    identify non-patched systems as vulnerable, though in reality the vulnerability
    cannot be exploited. Alternatively, other vulnerability scanners, such as the
    NSE script, will evaluate all the required conditions to determine whether the
    system is vulnerable.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，系统上的本地打印共享必须是公开可访问的。有趣的是，可以审计远程SMB打印队列服务，以确定系统是否打了补丁，无论系统上是否存在现有的打印机共享。正因为如此，对于什么是脆弱系统的解读各有不同。有些漏洞扫描器会将未打补丁的系统标记为易受攻击，但实际上漏洞无法被利用。另一种情况是，像NSE脚本这样的漏洞扫描工具会评估所有必要条件，以确定系统是否容易受到攻击。
- en: 'In the example provided, the scanned system is not patched, but it also does
    not have a remote printer share. Have a look at the following example:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提供的示例中，扫描的系统没有打补丁，但它也没有远程打印机共享。请查看以下示例：
- en: '![](../images/00101.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00101.jpeg)'
- en: In the example provided, Nmap has determined that the system is not vulnerable
    because it does not have a remote printer share. While it is true that the vulnerability
    cannot be exploited, some would still claim that the vulnerability still exists
    because the system is unpatched and can be exploited in case an administrator
    decides to share a printer from that device. This is why the results of all vulnerability
    scanners must be evaluated to fully understand their results.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提供的示例中，Nmap已经确认该系统不易受攻击，因为它没有远程打印机共享。虽然漏洞无法被利用，但有些人仍然认为漏洞存在，因为该系统没有打补丁，如果管理员决定共享打印机，这个漏洞就可以被利用。这就是为什么所有漏洞扫描工具的结果必须被评估，以充分理解它们的结果。
- en: Some scanners will choose to evaluate only limited conditions, while others
    will be more thorough. It's hard to say what the best answer is here. Most penetration
    testers would probably prefer to be told that the system is not vulnerable because
    of environmental variables, so that they do not spend countless hours attempting
    to exploit a vulnerability that cannot be exploited.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些扫描器会选择仅评估有限的条件，而另一些则会更为彻底。很难说哪种方法最合适。大多数渗透测试人员可能更倾向于被告知系统因环境因素而不易受攻击，这样他们就不会浪费大量时间尝试利用一个无法被利用的漏洞。
- en: Alternatively, a system administrator might prefer to know that the system is
    missing the `MS10-061` patch so that the system can be totally secured, even if
    the vulnerability cannot be exploited under the existing conditions.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另外，系统管理员可能更倾向于知道系统缺少`MS10-061`补丁，以便即使在现有条件下漏洞无法被利用，系统也能得到完全保护。
- en: How it works…
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Most vulnerability scanners will operate by evaluating a number of different
    responses to attempt to determine whether a system is vulnerable to a specific
    attack. In some cases, a vulnerability scan may be as simple as establishing a
    TCP connection with the remote service and identifying a known vulnerable version
    by the banner that is self disclosed. In other cases, a complex series of probes
    and specially crafted requests may be sent to a remote service in an attempt to
    solicit responses that are unique to services that are vulnerable to a specific
    attack. In the example NSE vulnerability scripts provided, the vulnerability scan
    will actually try to exploit the vulnerability if the `unsafe` parameter is activated.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数漏洞扫描器通过评估不同的响应来尝试确定系统是否容易受到特定攻击的威胁。在某些情况下，漏洞扫描可能仅仅是与远程服务建立TCP连接，并通过自我披露的横幅识别已知的漏洞版本。在其他情况下，可能会向远程服务发送一系列复杂的探测和特别构造的请求，试图获取与特定攻击相关的独特响应。在提供的NSE漏洞脚本示例中，如果激活了`unsafe`参数，漏洞扫描实际上会尝试利用该漏洞。
- en: Vulnerability scanning with MSF auxiliary modules
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MSF辅助模块进行漏洞扫描
- en: Similar to the vulnerability scanning scripts available in NSE, Metasploit also
    offers a number of useful vulnerability scanners. Like Nmap's scripts, most of
    these are fairly targeted and are used to scan a particular service.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于NSE中的漏洞扫描脚本，Metasploit也提供了许多有用的漏洞扫描器。像Nmap的脚本一样，这些大多数都是相对有针对性的，用于扫描特定的服务。
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To perform vulnerability analysis with Metasploit auxiliary modules, you will
    need to have a system that is running network services over TCP or UDP. In the
    example provided, a Windows XP system with an RDP service is used for this task.
    For more information on setting up a Windows system, refer to the *Installing
    Windows Server* recipe in [Chapter 1](part0026.html#OPEK1-cf89710d791c4a3bb78ec273d9322426),
    *Getting Started*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Metasploit辅助模块进行漏洞分析，你需要一个正在运行TCP或UDP网络服务的系统。在提供的示例中，使用了一个Windows XP系统，且该系统有RDP服务。有关设置Windows系统的更多信息，请参阅[第1章](part0026.html#OPEK1-cf89710d791c4a3bb78ec273d9322426)中*安装Windows
    Server*的内容，*入门*部分。
- en: How to do it…
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何执行…
- en: 'Let''s perform the vulnerability scan using the MSF auxiliary modules:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用MSF辅助模块执行漏洞扫描：
- en: 'There are a number of different ways that one can identify the vulnerability
    scanning auxiliary modules in Metasploit. One effective way is to browse to the
    `/auxiliary/scanner` directory, as this is the location where most vulnerability
    identification scripts will be found. Have a look at the following example:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有多种不同的方法可以在Metasploit中识别漏洞扫描辅助模块。一种有效的方法是浏览到`/auxiliary/scanner`目录，因为大多数漏洞识别脚本都位于此目录下。请查看以下示例：
- en: '![](../images/00166.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00166.jpeg)'
- en: The layout of these scripts is fairly standardized, and a description of any
    given script can be identified by reading the script from top to bottom using
    the `cat` command and then piping the output over to the more utility. In the
    example provided, we can see that the script tests an authentication bypass vulnerability
    that exists in MySQL database services. Alternatively, one can search for vulnerability
    identification modules within the MSF console interface. To open this, one should
    use the `msfconsole` command.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些脚本的布局相当标准化，任何给定脚本的描述可以通过使用`cat`命令从上到下阅读脚本，然后将输出通过more工具查看来识别。在提供的示例中，我们可以看到脚本测试了MySQL数据库服务中存在的身份验证绕过漏洞。或者，可以在MSF控制台界面中搜索漏洞识别模块。要打开此界面，应该使用`msfconsole`命令。
- en: 'The `search` command can then be used in conjunction with keywords that specifically
    relate to the service, or one can use the `scanner` keyword to query all scripts
    within the `auxiliary/scanner` directory, as follows:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后可以结合特定与服务相关的关键词使用`search`命令，或者使用`scanner`关键词查询`auxiliary/scanner`目录下的所有脚本，如下所示：
- en: '![](../images/00242.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00242.jpeg)'
- en: 'Upon identifying a script that looks promising, one can use the `use` command
    in conjunction with the relative path to activate that script. Once activated,
    the following `info` command can be used to read additional details about the
    script to include details, description, options, and references:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦识别出一个看起来有前景的脚本，可以使用 `use` 命令结合相对路径来激活该脚本。激活后，可以使用以下 `info` 命令来读取有关该脚本的更多详细信息，包括详情、描述、选项和参考文献：
- en: '![](../images/00316.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00316.jpeg)'
- en: 'Once the module has been selected, the `show options` command can be used to
    identify and/or modify scan configurations. This command will display four column
    headers: `Name`, `Current Setting`, `Required`, and `Description`. The `Name`
    column identifies the name of each configurable variable. The `Current Setting`
    column lists the existing configuration for any given variable. The `Required`
    column identifies whether a value is required for any given variable. And the
    `Description` column describes the function of each variable. The value of any
    given variable can be changed by using the `set` command and providing the new
    value as an argument, as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择模块后，可以使用 `show options` 命令来识别和/或修改扫描配置。此命令将显示四个列标题：`Name`、`Current Setting`、`Required`
    和 `Description`。`Name` 列标识每个可配置变量的名称。`Current Setting` 列列出任何给定变量的现有配置。`Required`
    列标识是否需要为任何给定变量提供值。`Description` 列描述每个变量的功能。可以使用 `set` 命令并提供新值作为参数来更改任何给定变量的值，如下所示：
- en: '![](../images/00403.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00403.jpeg)'
- en: 'In this particular case, the system is found to be vulnerable. Given that a
    vulnerable system has been identified, there is a corresponding exploitation module
    that can be used to actually cause a denial of service on the vulnerable system.
    This can be seen in the example provided:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种特定情况下，系统被发现存在漏洞。既然已识别出存在漏洞的系统，就有相应的利用模块可以实际对该漏洞系统造成拒绝服务攻击。在提供的示例中可以看到这一点：
- en: '![](../images/00485.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00485.jpeg)'
- en: How it works…
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: Most vulnerability scanners will operate by evaluating a number of different
    responses to attempt to determine whether a system is vulnerable to a specific
    attack. In some cases, a vulnerability scan may be as simple as establishing a
    TCP connection with the remote service and identifying a known vulnerable version
    by the banner that is self-disclosed. In other cases, a complex series of probes
    and specially crafted requests may be sent to a remote service in an attempt to
    solicit responses that are unique to services that are vulnerable to a specific
    attack. In the preceding example, it is likely that the author of the script identified
    a way to solicit a unique response that would only be generated by either patched
    or non-patched systems and then used this as a basis to determine the exploitability
    of any given remote system.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数漏洞扫描器通过评估多种不同的响应来判断系统是否容易受到特定攻击。在某些情况下，漏洞扫描可能仅仅是通过建立与远程服务的 TCP 连接并通过自我披露的横幅识别出一个已知的易受攻击的版本。其他情况下，可能会向远程服务发送一系列复杂的探测和特殊设计的请求，试图引发仅对易受特定攻击的服务产生的独特响应。在前面的示例中，很可能脚本的作者找到了通过请求生成仅由已修补或未修补的系统生成的独特响应的方法，然后将此作为判断任何给定远程系统是否可被利用的依据。
- en: Creating scan policies with Nessus
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Nessus 创建扫描策略
- en: Nessus is one of the most powerful and comprehensive vulnerability scanners.
    By targeting a system or group of systems, it will automatically scan for a large
    range of vulnerabilities on all identifiable services. Scan policies can be built
    in Nessus to more granularly define the types of vulnerability that it tests for
    and the types of scan that are performed. This recipe will explain how to configure
    unique scan policies in Nessus.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Nessus 是最强大且全面的漏洞扫描器之一。通过针对一个系统或一组系统，它将自动扫描所有可识别服务上的大量漏洞。可以在 Nessus 中创建扫描策略，以更细致地定义它所测试的漏洞类型和执行的扫描类型。本教程将解释如何在
    Nessus 中配置独特的扫描策略。
- en: Getting ready
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To configure scan policies in Nessus, one must first have a functional copy
    of Nessus installed on the Kali Linux penetration-testing platform. Because Nessus
    is a licensed product, it does not come installed by default in Kali. For more
    information on how to install Nessus on Kali, refer to the *Installing Nessus
    on Kali Linux* recipe in [Chapter 1](part0026.html#OPEK1-cf89710d791c4a3bb78ec273d9322426),
    *Getting Started*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Nessus 中配置扫描策略，首先需要在 Kali Linux 渗透测试平台上安装一个有效的 Nessus 副本。由于 Nessus 是一款授权产品，它并不会默认安装在
    Kali 中。有关如何在 Kali 上安装 Nessus 的详细信息，请参考[第1章](part0026.html#OPEK1-cf89710d791c4a3bb78ec273d9322426)中的*安装
    Nessus 到 Kali Linux*一节，*入门*。
- en: How to do it…
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'The following steps will guide you to create scan policies using the Nessus:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导您使用 Nessus 创建扫描策略：
- en: To configure a new scan policy in Nessus, you will first need to access the
    Nessus web interface at `https://localhost:8834` or `https://127.0.0.1:8834`.
    Alternatively, if you are not accessing the web interface from the same system
    that is running Nessus, you should specify the appropriate IP address or hostname.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 Nessus 中配置新的扫描策略，您首先需要访问 Nessus 的网页界面，网址为 `https://localhost:8834` 或 `https://127.0.0.1:8834`。如果您不是从运行
    Nessus 的同一系统访问网页界面，则应指定适当的 IP 地址或主机名。
- en: Once the web interface has loaded, you will need to log in with the account
    that was configured during the installation process or with another account built
    after install. After logging in, the Policies tab at the top of the page should
    be selected. If no other policies have been configured, you will see an empty
    list and a single button that says New Policy. Click on that button to start building
    your first scan policy.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦网页界面加载完成，您需要使用安装过程中配置的账户或安装后创建的其他账户登录。登录后，页面顶部的“Policies”选项卡应该被选中。如果没有配置其他策略，您将看到一个空列表，并有一个标有“New
    Policy”的按钮。点击该按钮开始构建您的第一个扫描策略。
- en: 'Upon clicking on New Policy, the Policy Wizards screen will pop up with a number
    of preconfigured scan templates that can be used to speed up the process of creating
    a scan policy. As you can see in the following screenshot, each of the templates
    includes a name and then a brief description of its intended function:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“New Policy”后，策略向导界面将弹出，显示多个预配置的扫描模板，这些模板可用于加速扫描策略的创建过程。正如您在下方截图中看到的，每个模板都包括名称，并附有简要的功能描述：
- en: '![](../images/00550.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00550.jpeg)'
- en: In most circumstances, at least one of these preconfigured scan profiles will
    resemble what you are trying to accomplish. Probably the most commonly used of
    all of these is Basic Network Scan. Keep in mind that after selecting any one
    of these options, you can still modify every detail of the existing configurations.
    They are just there to get you started faster. Alternatively, if you do not want
    to use an existing template, you can scroll down and select the Advanced Scan option,
    which will allow you to start from scratch.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大多数情况下，至少有一个预配置的扫描配置会与您的目标相似。所有模板中最常用的可能是“Basic Network Scan”。请记住，选择任何一个选项后，您仍然可以修改现有配置的每个细节。它们只是为了帮助您更快地入门。或者，如果您不想使用现有模板，您可以向下滚动并选择“Advanced
    Scan”选项，这将允许您从头开始。
- en: 'If you select any one of the preconfigured templates, you will go through a
    quick three-step process to complete your scan profile. The process is summarized
    in the following steps:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果选择任何一个预配置的模板，您将经过一个简单的三步过程来完成您的扫描配置。该过程总结如下：
- en: Step 1 allows you to configure the basic details to include the profile Name,
    Description, and Visibility (public or private). Public profiles will be visible
    to all Nessus users, while private ones will only be visible to the users that
    created them.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第1步允许您配置基本信息，包括配置文件的名称、描述和可见性（公共或私人）。公共配置文件将对所有 Nessus 用户可见，而私有配置文件仅对创建它们的用户可见。
- en: Step 2 will simply ask whether the scan is internal or external. External scans
    will be those performed against publicly accessible hosts, usually sitting in
    the DMZ of an enterprise network. External scans do not require you to be on the
    same network but can be performed across the Internet. Alternatively, internal
    scans are performed from within a network and require direct access to the LAN
    of the scan targets.
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第2步将简单地询问扫描是内部扫描还是外部扫描。外部扫描是针对公开可访问主机进行的扫描，通常位于企业网络的 DMZ 区域。外部扫描不要求您在同一网络上，可以跨互联网执行。相反，内部扫描是在网络内部执行的，需要直接访问扫描目标的局域网（LAN）。
- en: 'Step 3, the final step, requests for authentication credentials for scanned
    devices, using either SSH or Windows authentication. Once completed, the new profile
    can be seen in the previously empty list shown when the Profiles tab is accessed.
    This is shown in the following screenshot:'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三步，即最后一步，要求为扫描设备提供认证凭证，可以使用 SSH 或 Windows 认证。完成后，新配置的个人资料将出现在“配置文件”标签访问时显示的先前为空的列表中。如下图所示：
- en: '![](../images/00616.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00616.jpeg)'
- en: 'This approach makes it quick and easy to create new scan profiles, but doesn''t
    give you a whole lot of control over the vulnerabilities tested and the types
    of scans performed. To modify more detailed configurations, click on the newly
    created policy name and then click on the Advanced Mode link. The options in this
    configuration mode are very comprehensive and specific. There are four different
    menus that can be accessed on the left-hand side of the screen. These include
    the following:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这种方法使得创建新扫描配置文件快速而简便，但无法提供太多对测试漏洞和执行扫描类型的控制。要修改更详细的配置，点击新创建的策略名称，然后点击高级模式链接。在此配置模式下，选项非常全面和具体。屏幕左侧可以访问四个不同的菜单，其中包括：
- en: 'General Settings: This menu provides basic configurations, detailed port scanning
    options that define how discovery and service enumeration are performed, and performance
    options that define policies regarding speed, throttling, parallelism, and so
    on.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一般设置：该菜单提供基本配置，详细的端口扫描选项，定义了如何进行发现和服务枚举的操作，并包含定义关于速度、限制、并行度等方面的性能选项。
- en: 'Credentials: This menu allows the configuration of Windows credentials, SSH,
    Kerberos, and even a number of clear-text protocol options (not encouraged).'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 凭证：该菜单允许配置Windows凭证、SSH、Kerberos，甚至多个明文协议选项（不推荐）。
- en: 'Plugins: This menu provides extremely granular control over Nessus plugins.
    Plugins is the term used in Nessus for the specific audits or vulnerability checks
    performed. You can enable or disable groups of audits based on their type of function
    or even manipulate specific plugins one by one.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件：该菜单提供对 Nessus 插件的极为细致的控制。插件是 Nessus 中用于特定审计或漏洞检查的术语。你可以根据功能类型启用或禁用一组审计，甚至可以逐个调整特定插件。
- en: 'Preferences: This menu covers the configurations for all of the more obscure
    operational functions of Nessus, such as HTTP authentication, brute force settings,
    and database interaction.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 偏好设置：该菜单涵盖了 Nessus 的所有较为晦涩的操作功能配置，如 HTTP 认证、暴力破解设置和数据库交互。
- en: How it works…
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Scan policies are what define the values that are used by Nessus to define how
    a scan will be run. These scan policies can be as simple as the three steps required
    to complete the simple scan wizard setup or complicated to the extent that each
    unique plugin is defined and custom authentication and operational configurations
    are applied.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描策略定义了 Nessus 用来决定扫描如何进行的配置值。这些扫描策略可以简单到完成简单扫描向导设置所需的三步，也可以复杂到每个独特插件的定义，以及自定义认证和操作配置的应用。
- en: Vulnerability scanning with Nessus
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Nessus 执行漏洞扫描
- en: Nessus is one of the most powerful and comprehensive vulnerability scanners
    available. By targeting a system or group of systems, it will automatically scan
    for a large range of vulnerabilities on all identifiable services. Once scan policies
    have been configured to define the configurations for the Nessus scanner, the
    scan policy can be used to execute scans on remote targets for evaluation. This
    recipe will explain how to perform vulnerability scanning with Nessus.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Nessus 是目前最强大且最全面的漏洞扫描器之一。通过定位单个系统或一组系统，它将自动扫描所有可识别服务中的大量漏洞。一旦配置好扫描策略来定义 Nessus
    扫描器的配置，该扫描策略可以用于对远程目标进行扫描评估。本教程将解释如何使用 Nessus 执行漏洞扫描。
- en: Getting ready
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To configure scan policies in Nessus, one must first have a functional copy
    of Nessus installed on the Kali Linux penetration-testing platform. Because Nessus
    is a licensed product, it does not come installed by default in Kali. For more
    information on how to install Nessus on Kali, refer to the *Installing Nessus
    on Kali Linux* recipe in [Chapter 1](part0026.html#OPEK1-cf89710d791c4a3bb78ec273d9322426),
    *Getting Started*. Additionally, at least one scan policy will need to be created
    prior to scanning with Nessus. For more information on creating scan policies
    in Nessus, refer to the preceding recipe.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Nessus 中配置扫描策略，首先必须在 Kali Linux 渗透测试平台上安装并运行功能正常的 Nessus 版本。因为 Nessus 是一款付费产品，所以
    Kali 默认并不预装它。有关如何在 Kali 上安装 Nessus 的详细信息，请参考 [第1章](part0026.html#OPEK1-cf89710d791c4a3bb78ec273d9322426)《入门》中的*在
    Kali Linux 上安装 Nessus*一节。此外，在使用 Nessus 执行扫描之前，至少需要创建一个扫描策略。有关如何在 Nessus 中创建扫描策略的详细信息，请参考前面的章节。
- en: How to do it…
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s perform vulnerability scan with the help of Nessus:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们借助 Nessus 执行一个漏洞扫描：
- en: 'To get started with a new scan in Nessus, you will need to ensure that the
    Scans tab is selected at the top of the screen. If no scans have been run in the
    past, this will generate an empty list at the center of the screen. To execute
    an initial scan, you will need to click on the blue New Scan button on the left-hand
    side of the screen, as shown in the following screenshot:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 Nessus 中开始一个新的扫描，首先需要确保屏幕顶部选择了“Scans”标签。如果之前没有运行过任何扫描，屏幕中间将显示一个空白列表。要执行初始扫描，你需要点击屏幕左侧的蓝色“New
    Scan”按钮，如下图所示：
- en: '![](../images/00664.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00664.jpeg)'
- en: 'This will require some basic configuration information. You will be prompted
    with a series of fields, including Name, Policy, Folder, and Targets:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将需要一些基本的配置信息。你将看到一系列字段，包括“Name”、“Policy”、“Folder”和“Targets”：
- en: The Name field is simply used as a unique identifier to distinguish the scan
    results from other scans. If you are performing a large number of scans, it will
    be helpful to be very specific with the scan name.
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Name”字段仅作为唯一标识符，用于将扫描结果与其他扫描结果区分开来。如果你进行大量扫描，建议在扫描名称中尽量具体。
- en: The second field is the Policy field. It is what really defines all of the details
    of the scan. This field allows you to select which scan policy will be used. If
    you are not familiar with how scan policies work, refer to the preceding recipe.
    Any public or private scan policies that the logged-in user has created should
    be visible in the Policy drop-down menu.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个字段是“Policy”字段，它定义了扫描的所有详细信息。这个字段允许你选择要使用的扫描策略。如果你不熟悉扫描策略的工作原理，请参考前面的章节。任何已登录用户创建的公共或私有扫描策略都应显示在“Policy”下拉菜单中。
- en: The Folder field defines which folder the scan results will be placed in. Organizing
    your scans in folders can be helpful when you need to sort through a large number
    of scan results. New scan folders can be created from the main Scans menu by clicking
    on New Folder.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Folder”字段定义了扫描结果将被存放的文件夹。将扫描结果按文件夹进行组织，在你需要整理大量扫描结果时会非常有帮助。可以通过在主扫描菜单中点击“New
    Folder”来创建新的扫描文件夹。
- en: The last field is Targets. This field shows how one defines what systems will
    be scanned. Here, you can enter a single host IP address, a list of IP addresses,
    a sequential range of IP addresses, a CIDR range, or a list of IP ranges. Alternatively,
    you can use hostnames, assuming the scanner is able to properly resolve them to
    IP addresses using DNS.
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个字段是“Targets”。这个字段定义了要扫描的系统。在这里，你可以输入单个主机的 IP 地址、一组 IP 地址、一个连续的 IP 地址范围、一个
    CIDR 范围，或者一组 IP 范围。你也可以使用主机名，前提是扫描器能够通过 DNS 正确解析主机名为 IP 地址。
- en: 'Finally, there is also an option to upload a text file containing a list of
    targets in any of the aforementioned formats, as shown in the following screenshot:'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，还有一个选项可以上传包含目标列表的文本文件，文件格式可以是上述任何一种，下面是相关截图：
- en: '![](../images/00047.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00047.jpeg)'
- en: 'After configuring the scan, it can be executed using the Launch button at the
    bottom of the screen. This will immediately add the scan to the list of scans,
    and the results can be viewed in real time, as shown in the following screenshot:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置完扫描后，可以通过屏幕底部的“Launch”按钮执行扫描。扫描将立即添加到扫描列表中，并且结果可以实时查看，如下图所示：
- en: '![](../images/00134.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00134.jpeg)'
- en: 'Even while the scan is running, you can click on the scan name and begin viewing
    the vulnerabilities as they are identified. Color-coding is used to quickly and
    easily identify the number of vulnerabilities and their levels of severity, as
    shown in the following screenshot:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 即使扫描正在运行，您也可以点击扫描名称并开始查看识别出的漏洞。颜色编码用于快速简便地识别漏洞数量及其严重程度，如下图所示：
- en: '![](../images/00555.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00555.jpeg)'
- en: After clicking on the example scan, we can see two of the hosts that are being
    scanned. The first indicates that the scan is complete, and the second host is
    at 2% completion. The bar graphs shown in the Vulnerabilities column show the
    number of vulnerabilities associated with each given host. Alternatively, one
    can click on the Vulnerabilities link at the top of the screen to organize the
    findings by discovered vulnerability and then the number of hosts for which that
    vulnerability was identified.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击示例扫描后，我们可以看到正在扫描的两个主机。第一个指示扫描已完成，而第二个主机完成了2%。漏洞列中显示的条形图显示了每个给定主机关联的漏洞数量。或者，您可以点击屏幕顶部的漏洞链接，以按发现的漏洞组织查找，并且可以看到每个漏洞被识别出的主机数量。
- en: 'To the right-hand side of the screen, we can see a similar pie chart, but this
    one corresponds to all hosts scanned, as shown in the following screenshot:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕右侧，我们可以看到一个类似的饼图，但这个饼图对应于所有扫描的主机，如下图所示：
- en: '![](../images/00261.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00261.jpeg)'
- en: 'This pie chart also clearly defines the meanings for each of the colors, ranging
    from critical vulnerabilities to informational details. By selecting the link
    for any particular host IP address, you can see the specific vulnerabilities that
    were identified for that host:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此饼图还清晰定义了每种颜色的含义，从关键漏洞到信息详细信息。通过选择任何特定主机IP地址的链接，您可以查看为该主机识别出的具体漏洞信息。
- en: '![](../images/00338.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00338.jpeg)'
- en: 'This list of vulnerabilities identifies the plugin name, which generally provides
    a brief description of the finding and the level of severity. As a penetration
    tester, the critical and high vulnerabilities will usually be the most promising
    if you are seeking to achieve remote code execution on the target system. By clicking
    on any one of the distinct vulnerabilities, you can get a large amount of information
    on that vulnerability, as shown in the following screenshot:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此漏洞列表标识了插件名称，通常提供对发现内容的简要描述和严重级别。作为渗透测试者，关键和高危漏洞通常是最具有前景的，尤其是如果您正在寻求在目标系统上实现远程代码执行。通过单击任何一个明显的漏洞，您可以获取有关该漏洞的大量信息，如下图所示：
- en: '![](../images/00428.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00428.jpeg)'
- en: In addition to description and patching information, this page will also provide
    alternative sources for further research, and most importantly (for penetration
    testers, anyway) reveal whether or not an exploit exists. This page will also
    often indicate whether an available exploit is a public exploit or whether it
    exists within an exploitation framework such as Metasploit, CANVAS, or Core Impact.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了描述和修补信息之外，本页面还将提供进一步研究的替代来源，特别是（对于渗透测试者而言）显示是否存在漏洞利用的信息。本页面还经常指示可用漏洞是否为公开漏洞，或者是否存在于Metasploit、CANVAS或Core
    Impact等利用框架中。
- en: How it works…
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Most vulnerability scanners will operate by evaluating a number of different
    responses to attempt to determine whether a system is vulnerable to a specific
    attack. In some cases, a vulnerability scan may be as simple as establishing a
    TCP connection with the remote service and identifying a known vulnerable version
    by the banner that is self-disclosed. In other cases, a complex series of probes
    and specially crafted requests may be sent to a remote service in an attempt to
    solicit responses that are unique to services that are vulnerable to a specific
    attack. Nessus sequences a large number of tests together to attempt to generate
    a complete picture of the attack surface for a given target.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数漏洞扫描器将通过评估多种不同的响应来操作，以尝试确定系统是否容易受到特定攻击的影响。在某些情况下，漏洞扫描可能仅是简单地与远程服务建立TCP连接，并通过自我披露的横幅标识已知的易受攻击版本。在其他情况下，可能会向远程服务发送复杂的一系列探针和特别制作的请求，以试图获得对特定攻击易受影响的服务唯一响应。Nessus将大量测试序列化在一起，以尝试生成给定目标的完整攻击面的图像。
- en: Vulnerability scanning with OpenVAS
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OpenVAS进行漏洞扫描
- en: '**Open Vulnerability Assessment System** (**OpenVAS**) is freeware that is
    a vulnerability scanner and management suite. OpenVAS and Nessus are similar;
    in fact, OpenVAS was forked from the last free version of Nessus before it went
    proprietary. In this recipe, we will cover how to install and perform a scan with
    OpenVAS.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**开放漏洞评估系统**（**OpenVAS**）是一款免费的漏洞扫描和管理套件。OpenVAS 和 Nessus 相似；实际上，OpenVAS 是从
    Nessus 的最后一个免费版本分支出来的。在本教程中，我们将介绍如何安装并使用 OpenVAS 执行扫描。'
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To use OpenVAS to perform vulnerability scanning, you will need to have a remote
    system available for scanning. In the examples provided, an instance of Metasploitable2
    is used to perform this task. For more information on how to set up Metasploitable2,
    refer to [Chapter 1](part0026.html#OPEK1-cf89710d791c4a3bb78ec273d9322426), *Getting
    Started*.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 OpenVAS 执行漏洞扫描，你需要有一个可供扫描的远程系统。在提供的示例中，我们使用了 Metasploitable2 的实例来执行此任务。有关如何设置
    Metasploitable2 的更多信息，请参考[第1章](part0026.html#OPEK1-cf89710d791c4a3bb78ec273d9322426)，*入门指南*。
- en: How to do it...
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps will guide you to perform vulnerability scan with the help
    of OpenVAS:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导你使用 OpenVAS 执行漏洞扫描：
- en: 'OpenVAS does not come preinstalled on Kali Linux, but it is a simple process
    to get it installed and running. To begin, we will use the `apt-get` command to
    install the software; when prompted to continue, type `Y`:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenVAS 并没有预装在 Kali Linux 上，但安装和运行它是一个简单的过程。首先，我们将使用 `apt-get` 命令安装该软件；当提示继续时，输入
    `Y`：
- en: '![](../images/00502.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00502.jpeg)'
- en: 'Once successfully installed, run the `openvas-setup` command:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装成功后，运行 `openvas-setup` 命令：
- en: '![](../images/00568.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00568.jpeg)'
- en: 'It will take a while for the set up to configure itself and install the vulnerability
    test scripts. At the conclusion of the configuration, take note of the password
    created. This will be needed when logging into the OpenVAS web interface:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置过程中需要一些时间来配置并安装漏洞测试脚本。配置完成后，记下所创建的密码。在登录 OpenVAS Web 界面时需要使用此密码：
- en: '![](../images/00629.jpeg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00629.jpeg)'
- en: 'Once OpenVAS has been installed and configured we can start it using the `openvas-start`
    command:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 OpenVAS 安装并配置完成，我们可以使用 `openvas-start` 命令启动它：
- en: '![](../images/00677.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00677.jpeg)'
- en: 'We can now access the OpenVAS web interface by navigating to `https://127.0.0.1:9392/`
    with our local browser. We can authenticate using `admin` as our Username and Password
    we received at the conclusion of the `openvas-setup` process:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过本地浏览器访问 OpenVAS Web 界面，地址是 `https://127.0.0.1:9392/`。我们可以使用 `admin`
    作为用户名，以及在 `openvas-setup` 过程结束时收到的密码进行身份验证：
- en: '![](../images/00065.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00065.jpeg)'
- en: 'Upon successful authentication you are presented with the OpenVAS dashboard.
    Here (if you have any) you can see statistics on your scans and vulnerabilities.
    Given that we have just installed OpenVAS we do not currently have any data to
    display. We can change this by running a scan. To do this, go to Scans in the
    top menu and select Tasks:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功认证后，你将看到 OpenVAS 仪表盘。在这里（如果有的话），你可以查看扫描和漏洞的统计信息。由于我们刚刚安装了 OpenVAS，目前没有数据可以显示。我们可以通过运行扫描来更改这一点。为此，进入顶部菜单中的
    Scans（扫描）并选择 Tasks（任务）：
- en: '![](../images/00130.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00130.jpeg)'
- en: 'Once on the the Tasks page, go to the wand icon in the top-left corner of the
    page and select Task Wizard:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任务页面上，前往页面左上角的魔杖图标并选择任务向导：
- en: '![](../images/00208.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00208.jpeg)'
- en: 'From the Task Wizard screen we are prompted to enter an IP address or hostname.
    For our example, we will use the IP address of our Metasploitable2 machine, `172.16.69.128`,
    and click on the Start Scan button:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任务向导界面，我们会被要求输入一个 IP 地址或主机名。对于我们的示例，我们将使用 Metasploitable2 机器的 IP 地址 `172.16.69.128`，然后点击开始扫描按钮：
- en: '![](../images/00279.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00279.jpeg)'
- en: 'On completion of the wizard, OpenVAS will begin scanning the target assigned.
    It will take some time for it to run the various scans and tests on your target
    machine. Upon completion, you should see a summary:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向导完成后，OpenVAS 将开始扫描分配的目标。执行各种扫描和测试时，可能需要一些时间。完成后，你应该能看到一个总结：
- en: '![](../images/00357.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00357.jpeg)'
- en: 'To view the results of the OpenVAS scan, navigate to the Scans section of the
    menus and select Results:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看 OpenVAS 扫描结果，进入菜单中的 Scans（扫描）部分并选择 Results（结果）：
- en: '![](../images/00451.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00451.jpeg)'
- en: 'Here you can see the results of your scans. There are helpful charts showing
    the number of vulnerabilities by class (High, Medium, Low, Log) and by **Common
    Vulnerability Scoring System** (**CVSS**). Following the charts mentioned, we
    can see a list of each vulnerability, its severity, and its location:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，您可以看到扫描结果。图表展示了按类别（高、媒介、低、日志）和 **常见漏洞评分系统** (**CVSS**) 显示的漏洞数量。根据图表，我们可以看到每个漏洞的列表、严重性以及其位置：
- en: '![](../images/00521.jpeg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00521.jpeg)'
- en: How it works...
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Most vulnerability scanners will operate by evaluating a number of different
    responses to attempt to determine whether a system is vulnerable to a specific
    attack. In some cases, a vulnerability scan may be as simple as establishing a
    TCP connection with the remote service and identifying a known vulnerable version
    by the banner that is self-disclosed. In other cases, a complex series of probes
    and specially crafted requests may be sent to a remote service in an attempt to
    solicit responses that are unique to services that are vulnerable to a specific
    attack. OpenVAS sequences a large number of tests together to attempt to generate
    a complete picture of the attack surface for a given target.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数漏洞扫描器通过评估不同响应的多种方式来判断系统是否容易受到特定攻击的影响。在某些情况下，漏洞扫描可能只是通过建立与远程服务的 TCP 连接，并通过自我披露的横幅来识别已知的漏洞版本。在其他情况下，可能会向远程服务发送一系列复杂的探测和特别设计的请求，尝试获取仅在特定攻击易受影响的服务上才会出现的响应。OpenVAS
    将大量的测试序列结合在一起，尝试生成目标攻击面完整的图像。
- en: Validating vulnerabilities with HTTP interaction
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 HTTP 交互验证漏洞
- en: As a penetration tester, the best outcome of any given exploit is to achieve
    remote code execution. However, there are cases in which we might just want to
    determine whether a remote code-execution vulnerability is exploitable but don't
    want to actually follow through the entire exploitation and post-exploitation
    process. One way to do this is to create a web server that will log interaction
    and use a given exploit to execute code that would cause the remote host to interact
    with the web server. This recipe will demonstrate how to write a custom script
    for validating remote code-execution vulnerabilities with HTTP traffic.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 作为渗透测试员，任何漏洞利用的最佳结果是实现远程代码执行。然而，也有一些情况，我们可能只想确定远程代码执行漏洞是否可被利用，而不希望实际完成整个利用和后期利用过程。一种方法是创建一个
    Web 服务器，记录交互并使用给定的漏洞利用代码执行，导致远程主机与 Web 服务器进行交互。这个示例将演示如何编写一个自定义脚本，通过 HTTP 流量验证远程代码执行漏洞。
- en: Getting ready
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To validate vulnerabilities using HTTP interaction, you will need to have a
    system that is running software with a remote code execution vulnerability. Additionally,
    this section will require a script to be written to the filesystem using a text
    editor such as Vim or GNU nano. For more information on writing scripts, refer
    to the *Using text editors (Vim and GNU nano)* recipe in [Chapter 1](part0026.html#OPEK1-cf89710d791c4a3bb78ec273d9322426),
    *Getting Started*.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过 HTTP 交互验证漏洞，您需要有一个运行存在远程代码执行漏洞的软件的系统。此外，本部分还需要编写一个脚本，并将其保存到文件系统中，您可以使用如
    Vim 或 GNU nano 这样的文本编辑器来完成。有关编写脚本的更多信息，请参阅 [第 1 章](part0026.html#OPEK1-cf89710d791c4a3bb78ec273d9322426)
    中的 *使用文本编辑器（Vim 和 GNU nano）* 章节，*入门*。
- en: How to do it…
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let''s validate vulnerabilities with the help of HTTP interaction:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过 HTTP 交互来验证漏洞：
- en: 'Before actually exploiting a given vulnerability, we must deploy a web server
    that will log interaction with it. This can be done with a simple Python script,
    as follows:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实际利用给定漏洞之前，我们必须部署一个 Web 服务器来记录与之的交互。可以通过以下简单的 Python 脚本来完成：
- en: '[PRE0]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The provided Python script uses the `socket` library to generate a web server
    that listens on TCP port `8000` of all local interfaces. Upon receiving a connection
    from a client, the script will return the client's IP address and the request
    sent.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供的 Python 脚本使用 `socket` 库生成一个 Web 服务器，该服务器监听所有本地接口的 TCP 端口 `8000`。当收到来自客户端的连接时，脚本将返回客户端的
    IP 地址和发送的请求。
- en: 'To use this script to validate a vulnerability, we need to execute code that
    will cause the remote system to interact with the hosted web service. But before
    doing this, we need to launch our script with the following command:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用此脚本验证漏洞，我们需要执行代码，使远程系统与托管的 Web 服务进行交互。但在执行此操作之前，我们需要使用以下命令启动我们的脚本：
- en: '![](../images/00103.jpeg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00103.jpeg)'
- en: 'Next, we need to exploit a vulnerability that will yield remote code execution.
    By reviewing the Nessus scan results of the Metasploitable2 box, we can see that
    the FTP service running has a backdoor that can be triggered by supplying a username
    with a smiley face in it—no joke! This was actually included in a production FTP
    service. To attempt to exploit this, we will first connect to the service with
    an appropriate username, as follows:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要利用一个漏洞来实现远程代码执行。通过查看Metasploitable2盒子的Nessus扫描结果，我们可以看到运行中的FTP服务存在一个后门，通过提供包含笑脸符号的用户名即可触发——这可不是开玩笑！它实际上被包含在一个生产环境中的FTP服务里。为了尝试利用此漏洞，我们将首先使用适当的用户名连接到服务，如下所示：
- en: '![](../images/00169.jpeg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00169.jpeg)'
- en: 'After attempting to connect with a username with a smiley face included, a
    backdoor should have opened on the remote host''s TCP port `6200`. We need not
    even enter a password. Instead, *Ctrl* + *C* can be used to exit the FTP client
    and then Netcat can be used to connect to the opened backdoor, as follows:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在尝试使用包含笑脸符号的用户名进行连接后，远程主机的TCP端口`6200`应该会打开一个后门。我们甚至不需要输入密码。相反，可以使用*Ctrl* + *C*退出FTP客户端，然后使用Netcat连接到已打开的后门，如下所示：
- en: '![](../images/00245.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00245.jpeg)'
- en: 'After establishing a TCP connection with the open port, we can use our script
    to verify that we can perform remote code execution. To do this, we attempt to
    use the `wget` command with the URL of the HTTP detection server. After attempting
    to execute this code, we can verify that the HTTP request was received by looking
    back to the script output:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与开放端口建立TCP连接后，我们可以使用我们的脚本来验证是否能够执行远程代码。为此，我们尝试使用`wget`命令与HTTP检测服务器的URL进行连接。尝试执行此代码后，我们可以通过查看脚本输出，验证HTTP请求是否已被接收：
- en: '![](../images/00319.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00319.jpeg)'
- en: How it works…
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: This script works by identifying attempted connections from remote hosts. By
    executing code that causes a remote system to connect back to our listening server,
    it is possible to verify that remote code execution is possible by exploiting
    a particular vulnerability. If `wget` or `curl` are not installed on the remote
    server, another means of identifying remote code execution may need to be employed.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本通过识别来自远程主机的连接尝试来工作。通过执行使远程系统连接回我们监听服务器的代码，就可以验证通过利用特定漏洞是否可能进行远程代码执行。如果远程服务器上未安装`wget`或`curl`，可能需要采用其他方式来识别远程代码执行。
- en: Validating vulnerabilities with ICMP interaction
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ICMP交互验证漏洞
- en: As a penetration tester, the best outcome of any given exploit is to achieve
    remote code execution. However, there are cases in which we might only want to
    determine whether a remote code-execution vulnerability is exploitable but don't
    want to actually follow through the entire exploitation and post-exploitation
    process. One way to do this is to run a script that logs ICMP traffic and then
    execute a `ping` command on the remote system. This recipe will demonstrate how
    to write a custom script for validating remote code-execution vulnerabilities
    with ICMP traffic.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 作为渗透测试员，任何给定漏洞的最佳结果是实现远程代码执行。然而，也有一些情况，我们可能只是想确定远程代码执行漏洞是否可被利用，但并不想实际执行整个漏洞利用和后期利用过程。一种方法是运行一个记录ICMP流量的脚本，然后在远程系统上执行`ping`命令。本食谱将展示如何编写自定义脚本，以通过ICMP流量验证远程代码执行漏洞。
- en: Getting ready
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To validate vulnerabilities using ICMP traffic logging, you will need to have
    a remote system that is running an exploitable code-execution vulnerability. Additionally,
    this section will require a script to be written to the filesystem using a text
    editor such as Vim or GNU nano. For more information on writing scripts, refer
    to the *Using text editors (Vim and GNU nano)* recipe in [Chapter 1](part0026.html#OPEK1-cf89710d791c4a3bb78ec273d9322426),
    *Getting Started*.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过ICMP流量日志验证漏洞，您需要一个运行有可利用代码执行漏洞的远程系统。此外，本部分还需要编写脚本并使用文本编辑器（如Vim或GNU nano）将其写入文件系统。如需了解如何编写脚本，请参阅[第1章](part0026.html#OPEK1-cf89710d791c4a3bb78ec273d9322426)《入门》中的*使用文本编辑器（Vim和GNU
    nano）*部分。
- en: How to do it…
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Performing vulnerabilities validation operation using ICMP interaction:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ICMP交互执行漏洞验证操作：
- en: 'Before actually exploiting a given vulnerability, we must deploy a script to
    log incoming ICMP traffic. This can be done with a simple Python script using
    Scapy, as follows:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实际利用某个漏洞之前，我们必须部署一个脚本来记录传入的ICMP流量。这可以通过使用Scapy的简单Python脚本完成，如下所示：
- en: '[PRE1]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The provided Python script sniffs all incoming traffic and flags the source
    of any ICMP traffic directed toward the scanning system as vulnerable. To use
    this script to validate that a vulnerability can be exploited, we need to execute
    code that will cause the remote system to ping our scanning system. To demonstrate
    this, we can use Metasploit to launch a remote code-execution exploit. But prior
    to doing this, we need to launch our script, as follows:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供的Python脚本嗅探所有传入的流量，并标记任何针对扫描系统的ICMP流量源为漏洞。为了使用此脚本验证漏洞是否可以被利用，我们需要执行一些代码，迫使远程系统向我们的扫描系统发送ping请求。为了演示这一点，我们可以使用Metasploit启动一个远程代码执行漏洞。但在此之前，我们需要先启动我们的脚本，步骤如下：
- en: '![](../images/00408.jpeg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00408.jpeg)'
- en: 'Next, we need to exploit a vulnerability that will yield remote code execution.
    By reviewing the Nessus scan results of the Windows XP box, we can see that the
    system is vulnerable to the `MS08-067` exploit. To validate this, we will exploit
    the vulnerability with a payload that executes a `ping` command back to the scanning
    system, as follows:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要利用一个可以实现远程代码执行的漏洞。通过查看Windows XP机器的Nessus扫描结果，我们可以看到该系统易受`MS08-067`漏洞的攻击。为了验证这一点，我们将利用该漏洞，使用一个有效载荷来执行`ping`命令回传至扫描系统，步骤如下：
- en: '![](../images/00099.jpeg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00099.jpeg)'
- en: 'The exploit in Metasploit was configured to use the `windows/exec` payload
    that executes code in the exploited system. This payload was configured to send
    a single ICMP echo request to our scanning system. After execution, we can confirm
    that the exploit was successful by referring back to the original script that
    was still listening, as follows:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Metasploit中的漏洞利用配置为使用`windows/exec`有效载荷，该有效载荷在被利用的系统中执行代码。这个有效载荷被配置为向我们的扫描系统发送一个ICMP回显请求。执行后，我们可以通过查看仍在监听的原始脚本来确认漏洞利用是否成功，步骤如下：
- en: '![](../images/00553.jpeg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00553.jpeg)'
- en: How it works…
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: This script works by listening for incoming ICMP traffic from remote hosts.
    By executing code that causes a remote system to send an `echo` request to our
    listening server, it is possible to verify that remote code execution is possible
    by exploiting a particular vulnerability.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本通过监听来自远程主机的ICMP流量来工作。通过执行使远程系统向我们的监听服务器发送`echo`请求的代码，我们可以验证通过利用特定漏洞实现远程代码执行的可能性。
