- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Secure Coding Practices with Python
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 的安全编码实践
- en: Having covered numerous aspects of offensive and defensive security using Python
    and its various use cases, it’s now crucial to focus on writing secure code. When
    building tools and applications, there’s a significant risk of creating vulnerabilities
    that could undermine all our efforts to secure our organization. This chapter
    will explore essential **Secure Coding Practices** in Python to ensure that our
    applications are robust and resilient against potential threats. By prioritizing
    security in our coding practices, we can better protect our applications and,
    by extension, our organization.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Python 及其各种应用案例涵盖了攻防安全的众多方面之后，现在我们必须专注于编写安全的代码。在构建工具和应用程序时，存在着创建可能破坏我们为保障组织安全所作所有努力的漏洞的重大风险。本章将探讨
    Python 中的关键**安全编码实践**，以确保我们的应用程序在面对潜在威胁时具有强大且具有弹性。通过在编码实践中优先考虑安全性，我们可以更好地保护我们的应用程序，从而保护我们的组织。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下主要主题：
- en: Understanding secure coding fundamentals
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解安全编码的基础
- en: Input validation and sanitization with Python
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python 进行输入验证和清理
- en: Preventing code injection and execution attacks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止代码注入和执行攻击
- en: Data encryption and Python security libraries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据加密和 Python 安全库
- en: Secure deployment strategies for Python applications
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 应用程序的安全部署策略
- en: Understanding secure coding fundamentals
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解安全编码的基础
- en: Secure coding is the practice of writing software that is protected against
    potential vulnerabilities and attacks. It involves implementing techniques and
    strategies that minimize security risks, making your application more resilient
    to threats. In the context of Python, secure coding ensures that your applications
    are fortified against common threats such as injection attacks, buffer overflows,
    and unauthorized data access. This foundation is essential to protect sensitive
    information, maintain user trust, and ensure the integrity of your systems.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 安全编码是编写防护潜在漏洞和攻击的软件的实践。它涉及实施减少安全风险的技术和策略，从而使你的应用程序在面对威胁时更具韧性。在 Python 的背景下，安全编码确保你的应用程序抵御常见威胁，如注入攻击、缓冲区溢出和未经授权的数据访问。这一基础对于保护敏感信息、维护用户信任以及确保系统的完整性至关重要。
- en: In this section, we’ll begin by discussing the fundamental principles of secure
    coding, followed by specific techniques for mitigating common threats. By understanding
    and applying these principles, you can enhance the security and resilience of
    your Python applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先讨论安全编码的基本原则，接着介绍减少常见威胁的具体技术。通过理解和应用这些原则，你可以增强 Python 应用程序的安全性和韧性。
- en: Principles of secure coding
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全编码原则
- en: Understanding and applying the core principles of secure coding is crucial for
    developing robust and secure Python applications. These principles serve as the
    foundation for creating software that is not only functional but also resilient
    against malicious activities.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 理解并应用安全编码的核心原则对于开发强大且安全的 Python 应用程序至关重要。这些原则为创建不仅功能性强而且能够抵御恶意活动的软件奠定了基础。
- en: Least privilege
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最小权限
- en: 'The **Principle of Least Privilege** entails granting the minimum level of
    access necessary for users, processes, and systems to perform their functions.
    This reduces the potential damage in the event of a security breach. For instance,
    if a user account only needs read access to certain data, it should not be granted
    write access. In Python, this can be implemented by doing the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**最小权限原则**意味着只授予用户、进程和系统执行其职能所需的最低访问权限。这减少了在发生安全漏洞时的潜在损害。例如，如果一个用户账户只需要读取某些数据的权限，就不应授予其写入权限。在
    Python 中，可以通过以下方式实现：'
- en: '**Restricting file access**: Using Python’s built-in capabilities to manage
    file permissions, as in this example:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限制文件访问**：使用 Python 的内置功能来管理文件权限，如以下示例所示：'
- en: '[PRE0]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Using RBAC**: Defining roles and assigning appropriate permissions, as in
    this example:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 RBAC**：定义角色并分配适当的权限，如下所示：'
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By following the least privilege approach, you can reduce the possible effects
    of security breaches. The risk of inadvertent actions and data exposure is decreased
    by making sure that people and processes are only operating with the permissions
    that are required.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循最小权限原则，你可以减少安全漏洞的潜在影响。确保人员和过程仅在需要的权限范围内操作，可以减少无意操作和数据泄露的风险。
- en: Defense in depth
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 深度防御
- en: '**Defense in Depth** involves implementing multiple layers of security controls
    throughout the IT system. This multi-layered approach ensures that if one layer
    is breached, others still provide protection. Examples in Python include the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**深度防御**涉及在整个IT系统中实施多个安全控制层级。这种多层方法确保如果某一层被突破，其他层仍能提供保护。Python中的示例包括以下内容：'
- en: '**Firewalls and network security**: Using software firewalls and network configurations
    to limit access, as in this example:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**防火墙和网络安全**：使用软件防火墙和网络配置来限制访问，如以下示例所示：'
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Encryption**: Using encryption to protect data in transit and at rest, as
    in this example:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密**：使用加密保护数据在传输和静止状态下的安全，如以下示例所示：'
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Input validation**: Ensuring all inputs are validated and sanitized, as in
    this example:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入验证**：确保所有输入都经过验证和清理，如以下示例所示：'
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Defense in depth is an all-encompassing tactic that makes use of several security
    control tiers. Combining different security methods such as input validation,
    encryption, and firewalls allows you to build strong security. Because of the
    layered approach, your application is still protected even if one security measure
    fails.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 深度防御是一种全面的策略，利用多个安全控制层级。结合不同的安全方法，如输入验证、加密和防火墙，可以构建强大的安全防护。由于采取了分层方法，即使某一项安全措施失败，您的应用仍然可以得到保护。
- en: Fail securely
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全失败
- en: '**Fail securely** means that when a system fails, it should do so in a way
    that does not compromise security. This involves the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全失败**意味着当系统失败时，应该以不妥协安全的方式进行失败。这包括以下内容：'
- en: '**Graceful degradation**: Ensuring that the application continues to operate
    in a limited, secure capacity, as in this example:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优雅降级**：确保应用在有限、安全的能力范围内继续运行，如以下示例所示：'
- en: '[PRE5]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Default deny**: Defaulting to deny access when there is uncertainty or failure
    in the security check, as in this example:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认拒绝**：在安全检查存在不确定或失败时，默认拒绝访问，如以下示例所示：'
- en: '[PRE6]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Your application will be able to manage failures without jeopardizing security
    if you follow the notion of failing securely. To ensure that your application
    remains private and confidential even in the worst of circumstances, you must
    implement secure failure mechanisms.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遵循“安全失败”的理念，您的应用将在出现故障时能够管理失败而不危及安全。为了确保即使在最坏的情况下您的应用仍然保持私密和机密，您必须实现安全的故障机制。
- en: Keep security simple
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保持安全简单
- en: 'Complexity is the enemy of security. Keeping security mechanisms simple ensures
    they are easier to understand, maintain, and audit. The strategies for keeping
    security mechanisms simple include the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂性是安全的敌人。保持安全机制简单可以确保它们更容易理解、维护和审计。保持安全机制简单的策略包括以下内容：
- en: '**Clear and consistent code**: Writing clear and consistent code that is easy
    to review, as in this example:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清晰和一致的代码**：编写清晰一致的代码，便于审查，如以下示例所示：'
- en: '[PRE7]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Modular design**: Breaking down the system into manageable, self-contained
    modules, as in this example:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化设计**：将系统分解为可管理的、独立的模块，如以下示例所示：'
- en: '[PRE8]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The secret to reducing risks and guaranteeing maintainability in security design
    is simplicity. Error rates are higher and complex systems are more difficult to
    safeguard. By making your security procedures simple and intuitive, you lessen
    the possibility of new vulnerabilities.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全设计中减少风险并确保可维护性的秘诀是简化。错误率较高且复杂的系统更难以保护。通过使您的安全过程简化并直观，您减少了新漏洞的可能性。
- en: Common security vulnerabilities
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的安全漏洞
- en: Understanding common security vulnerabilities is essential for defending against
    them. Let’s see some typical vulnerabilities that can affect Python applications.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 理解常见的安全漏洞对于防御这些漏洞至关重要。让我们来看一些可能影响Python应用的典型漏洞。
- en: Injection flaws
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注入漏洞
- en: 'Injection flaws occur when untrusted data is sent to an interpreter as part
    of a command or query, allowing attackers to execute unintended commands or access
    data without proper authorization. Common types of injection attacks include the
    following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注入漏洞发生在不可信的数据作为命令或查询的一部分发送给解释器时，攻击者可以执行未授权的命令或访问数据。常见的注入攻击类型包括以下几种：
- en: '**SQL injection**: This occurs when untrusted data is used to construct SQL
    queries.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL注入**：当不可信的数据被用来构建SQL查询时，就会发生SQL注入。'
- en: 'Here is an example of vulnerable code:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是一个漏洞代码的示例：
- en: '[PRE9]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is a mitigation example:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是一个缓解的示例：
- en: '[PRE10]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**OS command injection**: This occurs when untrusted data is used to construct
    OS commands.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统命令注入**：当不可信的数据用于构建操作系统命令时，就会发生操作系统命令注入。'
- en: 'Here is an example of vulnerable code:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个易受攻击代码的示例：
- en: '[PRE11]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is a mitigation example:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个缓解示例：
- en: '[PRE12]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Broken authentication
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 认证破坏
- en: 'Broken authentication occurs when authentication mechanisms are implemented
    incorrectly, allowing attackers to compromise passwords, keys, or session tokens.
    This can lead to unauthorized access and impersonation of legitimate users. Common
    issues include the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 认证破坏发生在认证机制实施不当时，允许攻击者破坏密码、密钥或会话令牌。这可能导致未经授权的访问和冒充合法用户。常见问题包括：
- en: '**Weak passwords**: Not enforcing strong password policies.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弱密码**：没有强制实施强密码策略。'
- en: 'Here is an example of vulnerable code:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个易受攻击代码的示例：
- en: '[PRE13]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is a mitigation example:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个缓解示例：
- en: '[PRE14]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Insecure session management**: Not properly securing session tokens.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不安全的会话管理**：没有正确保护会话令牌。'
- en: 'Here is an example of vulnerable code:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个易受攻击代码的示例：
- en: '[PRE15]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here is a mitigation example:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个缓解示例：
- en: '[PRE16]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Sensitive data exposure
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 敏感数据泄露
- en: 'Sensitive data exposure occurs when applications do not adequately protect
    sensitive information such as financial data, healthcare information, and personal
    identifiers. This can happen due to a lack of encryption, improper handling of
    sensitive data, or storage in insecure locations. Insecure methods are listed
    here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 敏感数据泄露发生在应用程序没有充分保护敏感信息，如财务数据、医疗信息和个人身份标识符时。这可能是由于缺乏加密、不当处理敏感数据或存储在不安全的位置导致的。这里列出了不安全的方法：
- en: '**Insecure data transmission**: Not using encryption for data in transit.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不安全的数据传输**：数据传输过程中未使用加密。'
- en: 'Here is an example of vulnerable code:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个易受攻击代码的示例：
- en: '[PRE17]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Insecure data storage**: Storing sensitive data in plaintext.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不安全的数据存储**：以明文存储敏感数据。'
- en: 'Here is an example of vulnerable code:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个易受攻击代码的示例：
- en: '[PRE18]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here is a mitigation example:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个缓解示例：
- en: '[PRE19]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In summary, mastering the principles of secure coding is essential for any developer
    aiming to create resilient and trustworthy applications. By adhering to these
    principles – least privilege, defense in depth, fail securely, keep security simple,
    and regular updates and patching – you can significantly reduce the risk of security
    breaches and ensure the integrity of your software.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，掌握安全编码的原则对于任何希望创建坚固可靠应用程序的开发者都是至关重要的。通过遵循这些原则——最小权限、防御深度、安全失败、简化安全以及定期更新和修补——你可以显著降低安全漏洞的风险，确保软件的完整性。
- en: Understanding and mitigating common security vulnerabilities, such as injection
    flaws, broken authentication, and sensitive data exposure, further strengthens
    your defense against malicious attacks. Implementing these principles and practices
    requires diligence and a proactive mindset, but the payoff is substantial. Secure
    coding not only protects your applications and data but also fosters user trust
    and confidence in your software.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 理解并缓解常见的安全漏洞，如注入缺陷、认证破坏和敏感数据泄露，进一步加强了你对恶意攻击的防御。实施这些原则和实践需要勤奋和主动的心态，但回报是丰厚的。安全编码不仅保护你的应用程序和数据，还能增强用户对你的软件的信任和信心。
- en: Now, let’s look into input validation and sanitization, which is a major entry
    point for attackers.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下输入验证和数据清理，这是攻击者的主要入侵点。
- en: Input validation and sanitization with Python
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 进行输入验证和数据清理
- en: '**Input validation** and **sanitization** are critical techniques to prevent
    attackers from exploiting your application through malicious inputs. By ensuring
    that the data entering your system is clean, well-formed, and adheres to the expected
    format, you can significantly reduce the risk of security vulnerabilities. This
    section looks into the importance of these practices and explores various techniques
    to implement them effectively in Python.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入验证**和**数据清理**是防止攻击者通过恶意输入利用你的应用程序的关键技术。通过确保进入系统的数据是干净的、格式正确的，并符合预期的格式，你可以显著减少安全漏洞的风险。本节探讨了这些实践的重要性，并介绍了在
    Python 中有效实施它们的各种技术。'
- en: Input validation
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入验证
- en: 'Input validation involves verifying that incoming data conforms to the expected
    formats, ranges, and types. This step is essential for maintaining data integrity
    and preventing injection attacks. Techniques for input validation are as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 输入验证涉及验证传入的数据是否符合预期的格式、范围和类型。这一步对于保持数据完整性和防止注入攻击至关重要。输入验证的技术如下：
- en: '**Whitelist validation**: Whitelist validation defines what is considered valid
    input and rejects everything else. This approach is more secure than **blacklist
    validation**, which specifies invalid inputs, as it reduces the risk of overlooking
    a potential threat. Here is an example:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**白名单验证**：白名单验证定义了什么是有效输入，并拒绝其他所有输入。与**黑名单验证**（即指定无效输入）相比，这种方法更为安全，因为它降低了忽视潜在威胁的风险。下面是一个例子：'
- en: '[PRE20]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this example, the regular expression `^[a-zA-Z0-9_]{3,30}$` ensures that
    only alphanumeric characters and underscores are allowed, and the length of the
    username is between `3` and `30` characters.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，正则表达式`^[a-zA-Z0-9_]{3,30}$`确保只允许字母数字字符和下划线，且用户名的长度在`3`到`30`个字符之间。
- en: '**Type checking**: Type checking ensures that the input data types are as expected.
    This technique helps prevent type-related errors and security issues, such as
    type confusion attacks. Here is an example:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型检查**：类型检查确保输入的数据类型符合预期。这项技术有助于防止与类型相关的错误和安全问题，例如类型混淆攻击。下面是一个例子：'
- en: '[PRE21]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, the `isinstance` function checks whether the input is an integer and falls
    within the valid range of `1` to `119`. If the input does not meet these criteria,
    a `ValueError` exception is raised.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，`isinstance`函数检查输入是否为整数，并且是否在有效范围`1`到`119`之间。如果输入不符合这些标准，将引发`ValueError`异常。
- en: '**Range checking**: Range checking validates that numerical inputs fall within
    acceptable ranges. This technique is crucial for preventing errors and vulnerabilities
    that can arise from out-of-bound values. Here is an example:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围检查**：范围检查验证数字输入是否在可接受的范围内。这个技术对于防止由于超出范围的值引发的错误和漏洞至关重要。下面是一个例子：'
- en: '[PRE22]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this example, the function checks whether the temperature value is within
    the acceptable range of `-50` to `150` degrees. If not, it raises a `ValueError`
    exception.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，函数检查温度值是否在`-50`到`150`度的可接受范围内。如果不在该范围内，它会引发一个`ValueError`异常。
- en: Input validation is a fundamental practice in secure coding that helps ensure
    the integrity and reliability of your application. By rigorously checking that
    incoming data conforms to expected formats, ranges, and types, you prevent many
    common security vulnerabilities such as injection attacks and data corruption.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 输入验证是安全编码中的一项基础实践，有助于确保应用程序的完整性和可靠性。通过严格检查传入数据是否符合预期的格式、范围和类型，可以防止许多常见的安全漏洞，例如注入攻击和数据损坏。
- en: Input sanitization
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入清理
- en: 'Input sanitization involves cleaning or encoding input data to prevent it from
    being interpreted in a malicious manner. This step is crucial for mitigating injection
    attacks and ensuring that user-provided data does not compromise the application’s
    security. Techniques for input sanitization are as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 输入清理涉及清理或编码输入数据，防止它被恶意解读。这一步骤对缓解注入攻击和确保用户提供的数据不会危害应用程序的安全性至关重要。输入清理的技术如下：
- en: '**Escaping special characters**: Escaping special characters involves converting
    characters that have special meanings in your application’s context (e.g., HTML
    or SQL) into safe representations. This prevents the input from being interpreted
    as code. Here is an example:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转义特殊字符**：转义特殊字符涉及将应用程序上下文中具有特殊意义的字符（例如HTML或SQL中的字符）转换为安全的表示形式。这可以防止输入被误解为代码。下面是一个例子：'
- en: '[PRE23]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here, the `html.escape` function converts characters such as `<`, `>`, and `&`
    into their HTML-safe representations, mitigating the risk of **cross-site scripting**
    (**XSS**) attacks.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`html.escape`函数将字符如`<`、`>`和`&`转换为它们的HTML安全表示形式，从而减轻**跨站脚本攻击**（**XSS**）的风险。
- en: '**Using safe string interpolation**: Safe string interpolation avoids using
    string formatting with user inputs directly, which can lead to injection vulnerabilities.
    Instead, it leverages safe methods such as **f-strings** (or **formatted string
    literals**) in Python. Here is an example:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用安全的字符串插值**：安全的字符串插值避免了直接使用带有用户输入的字符串格式化，因为这可能导致注入漏洞。相反，它利用如**f-strings**（或**格式化字符串字面量**）等安全方法，尤其是在Python中。下面是一个例子：'
- en: '[PRE24]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this example, using an `f`-string ensures that the input is safely embedded
    within the string, preventing injection attacks.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，使用`f`-string确保输入安全地嵌入到字符串中，从而防止注入攻击。
- en: '**Parameterization**: When dealing with SQL queries, always use parameterized
    queries to ensure that user input is treated as data, not executable code. Here
    is an example:'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数化**：在处理SQL查询时，始终使用参数化查询，确保用户输入作为数据处理，而不是可执行代码。下面是一个例子：'
- en: '[PRE25]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Using parameterized queries, as shown here, prevents SQL injection by ensuring
    that the input is correctly escaped and safely incorporated into the query.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如此处所示，通过使用参数化查询，可以通过确保输入被正确转义并安全地融入查询中来防止SQL注入。
- en: '**Encoding output**: Properly encoding output is another critical sanitization
    technique, especially when displaying user input on web pages. Here is an example:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编码输出**：适当编码输出是另一项重要的清理技术，尤其是在网页上显示用户输入时。下面是一个示例：'
- en: '[PRE26]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `escape` function from the `markupsafe` library ensures that any HTML or
    JavaScript code in the input is rendered harmless by converting it into a safe
    format.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`escape`函数来自`markupsafe`库，它通过将输入中的任何HTML或JavaScript代码转换为安全格式，确保这些代码不会对系统造成危害。'
- en: In summary, input sanitization is a critical measure to prevent the interpretation
    of malicious data within your application. By cleaning or encoding input data,
    you protect your application from various types of injection attacks, such as
    SQL injection and XSS.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，输入清理是防止恶意数据在应用程序中被解释的关键措施。通过清理或编码输入数据，你可以保护你的应用程序免受各种注入攻击，如SQL注入和XSS攻击。
- en: Input validation and sanitization are indispensable for securing Python applications
    against various attacks. By rigorously validating inputs to conform to expected
    formats, ranges, and types, and by sanitizing inputs to neutralize potentially
    harmful characters, you create a robust defense against common vulnerabilities.
    Implementing these techniques requires careful attention to detail and a thorough
    understanding of potential threats, but the effort is well worth the enhanced
    security and integrity of your application.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 输入验证和清理对保护Python应用程序免受各种攻击至关重要。通过严格验证输入以符合预期的格式、范围和类型，并通过清理输入来中和潜在的有害字符，你为常见漏洞创建了强有力的防线。实施这些技术需要对细节的仔细关注和对潜在威胁的透彻理解，但这种努力是值得的，它将显著增强你的应用程序的安全性和完整性。
- en: To further bolster application security, it is essential to address other significant
    vulnerabilities, such as preventing code injection and execution attacks.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步增强应用程序安全性，必须解决其他重大漏洞，如防止代码注入和执行攻击。
- en: Preventing code injection and execution attacks
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防止代码注入和执行攻击
- en: '**Code injection** and **execution attacks** occur when attackers exploit vulnerabilities
    to execute arbitrary code on your system. These attacks can have devastating consequences,
    including unauthorized data access, data corruption, and complete system compromise.
    In this section, we will explore strategies and techniques to prevent SQL injection
    and command injection attacks in Python applications.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码注入**和**执行攻击**发生在攻击者利用漏洞在系统上执行任意代码时。这些攻击可能造成灾难性的后果，包括未经授权的数据访问、数据损坏和完全的系统控制。在本节中，我们将探讨在Python应用程序中防止SQL注入和命令注入攻击的策略和技术。'
- en: Preventing SQL injection
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止SQL注入
- en: SQL injection attacks occur when an attacker can manipulate SQL queries by injecting
    malicious input into a vulnerable application. This type of attack can lead to
    unauthorized data access, data manipulation, and even complete database compromise.
    Preventing SQL injection is crucial for maintaining the security and integrity
    of your database.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入攻击发生在攻击者通过向易受攻击的应用程序注入恶意输入来操纵SQL查询时。这种攻击可能导致未经授权的数据访问、数据篡改，甚至完全控制数据库。防止SQL注入对于维护数据库的安全性和完整性至关重要。
- en: 'The following are the industrial standard methods to help us with mitigating
    SQL injections:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是行业标准的方法，帮助我们减轻SQL注入的风险：
- en: '**Parameterized queries**: Parameterized queries are a key technique for preventing
    SQL injection. By using placeholders for user inputs and binding parameters to
    those placeholders, you ensure that the input is treated as data rather than executable
    code. Here is an example:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数化查询**：参数化查询是防止SQL注入的关键技术。通过使用占位符来表示用户输入，并将参数绑定到这些占位符，你可以确保输入被当作数据而不是可执行代码来处理。下面是一个示例：'
- en: '[PRE27]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In this example, the `execute` method uses a parameterized query, where the
    `user_id` parameter is safely passed to the query, preventing SQL injection.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个示例中，`execute`方法使用了参数化查询，其中`user_id`参数被安全地传递给查询，从而防止了SQL注入。
- en: '**Object-relational mappers** (**ORMs**): ORMs provide an abstraction layer
    over raw SQL, making it easier to interact with the database in a secure manner.
    ORMs such as **SQLAlchemy** automatically use parameterized queries, which helps
    prevent SQL injection. Here is an example:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象关系映射器** (**ORMs**)：ORM 提供了一个原始 SQL 的抽象层，使与数据库的交互更加安全。像 **SQLAlchemy** 这样的
    ORM 会自动使用参数化查询，这有助于防止 SQL 注入。以下是一个示例：'
- en: '[PRE28]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Using SQLAlchemy, this example demonstrates how to query the database securely.
    The ORM handles parameterization, reducing the risk of SQL injection.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 SQLAlchemy，以下示例展示了如何安全地查询数据库。ORM 处理了参数化，减少了 SQL 注入的风险。
- en: Now, let’s look at how we can prevent command injection vulnerabilities.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何防止命令注入漏洞。
- en: Preventing command injection
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止命令注入
- en: Command injection attacks occur when an attacker can execute arbitrary commands
    on the host operating system via a vulnerable application. These attacks can be
    particularly dangerous, allowing attackers to gain complete control over the system.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 命令注入攻击发生在攻击者能够通过一个易受攻击的应用程序在主机操作系统上执行任意命令时。这些攻击特别危险，攻击者可以因此完全控制系统。
- en: 'The following are the standard methods to help us prevent command injection
    attacks:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是帮助我们防止命令注入攻击的标准方法：
- en: '**Avoid shell commands**: One of the best ways to prevent command injection
    is to avoid using shell commands altogether. Instead, use libraries that provide
    safe interfaces for system operations, as in this example:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免使用 shell 命令**：防止命令注入的最佳方法之一是完全避免使用 shell 命令。相反，使用提供安全接口的库进行系统操作，如以下示例所示：'
- en: '[PRE29]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In this example, `subprocess.run` is used with a list of arguments, which is
    safer than passing a single string. This approach prevents the shell from interpreting
    malicious input.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个示例中，`subprocess.run` 被用来处理一个参数列表，这比传递单一字符串更加安全。这种方法可以防止 shell 解释恶意输入。
- en: '**Sanitize inputs**: If using shell commands is unavoidable, ensure that inputs
    are properly sanitized. One way to do this is by using the **shlex** library to
    safely split input into a list of arguments, as in this example:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清理输入**：如果不可避免地使用 shell 命令，确保输入得到妥善清理。实现这一点的一种方法是使用 **shlex** 库安全地将输入拆分成参数列表，如以下示例所示：'
- en: '[PRE30]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `shlex.split` function safely parses the command string into a list of arguments,
    which is then passed to `subprocess.run`. This prevents the shell from executing
    unintended commands embedded in the input.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`shlex.split` 函数安全地将命令字符串解析为参数列表，然后将其传递给 `subprocess.run`。这可以防止 shell 执行嵌入输入中的无意命令。'
- en: Preventing code injection and execution attacks is critical for maintaining
    the security and integrity of your Python applications. By using parameterized
    queries and ORMs, you can effectively safeguard against SQL injection. Similarly,
    avoiding shell commands when possible and sanitizing inputs when necessary help
    prevent command injection. Implementing these techniques not only protects your
    application from malicious attacks but also ensures that it operates securely
    and reliably. Through diligent application of these best practices, you can significantly
    reduce the risk of code injection and execution vulnerabilities in your software.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 防止代码注入和执行攻击对于维护 Python 应用程序的安全性和完整性至关重要。通过使用参数化查询和 ORM，你可以有效防止 SQL 注入。同样，尽量避免使用
    shell 命令，并在必要时清理输入，有助于防止命令注入。实施这些技术不仅可以保护你的应用免受恶意攻击，还能确保它安全可靠地运行。通过认真应用这些最佳实践，你可以显著降低软件中代码注入和执行漏洞的风险。
- en: Equally important in safeguarding sensitive information is the implementation
    of robust data encryption practices.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在保护敏感信息方面，同样重要的是实施强大的数据加密实践。
- en: Data encryption and Python security libraries
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据加密和 Python 安全库
- en: Encryption is critical for protecting sensitive data while in transit and at
    rest. By encrypting data, you ensure its secrecy and prevent unauthorized access,
    even if it is intercepted or accessed by unauthorized parties.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 加密对于保护在传输和存储中的敏感数据至关重要。通过加密数据，你可以确保其机密性，并防止未经授权的访问，即使数据被拦截或被未经授权的方访问。
- en: While data encryption is not solely a secure coding practice, it is an essential
    component of all software development processes to ensure the confidentiality
    and integrity of sensitive information.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然数据加密并非仅仅是一种安全编码实践，但它是所有软件开发过程中不可或缺的一部分，以确保敏感信息的机密性和完整性。
- en: This section will explore various encryption techniques and security libraries
    in Python, focusing on symmetric encryption, asymmetric encryption, and hashing.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将探讨Python中的各种加密技术和安全库，重点介绍对称加密、非对称加密和哈希。
- en: Symmetric encryption
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对称加密
- en: '`cryptography` library, which provides a variety of cryptographic recipes and
    primitives.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`cryptography`库提供了各种加密方法和原语。'
- en: One effective method is using `cryptography` library in Python. Fernet guarantees
    that the encrypted data cannot be manipulated or read without the corresponding
    key, ensuring data integrity and confidentiality.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一种有效的方法是在Python中使用`cryptography`库。Fernet确保加密的数据无法在没有相应密钥的情况下被篡改或读取，从而保证了数据的完整性和机密性。
- en: 'Fernet is an implementation of symmetric (or secret key) authenticated cryptography.
    It ensures that a message encrypted with it cannot be altered or read without
    the corresponding key. Here is an example:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Fernet是对称（或秘密密钥）认证加密的实现。它确保使用该算法加密的消息无法在没有相应密钥的情况下被篡改或读取。以下是一个示例：
- en: '[PRE31]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here is an explanation for the preceding code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的解释：
- en: '**Key generation**: A new key is generated using **Fernet.generate_key()**.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密钥生成**：通过**Fernet.generate_key()** 生成一个新的密钥。'
- en: '**Encryption**: The **cipher_suite.encrypt()** method encrypts the message.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密**：**cipher_suite.encrypt()** 方法对消息进行加密。'
- en: '**Decryption**: The **cipher_suite.decrypt()** method decrypts the message
    back to its original form.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解密**：**cipher_suite.decrypt()** 方法将消息解密回原始形式。'
- en: Fernet provides both encryption and integrity guarantees, ensuring that the
    data cannot be read or altered without the key.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Fernet同时提供加密和完整性保证，确保没有密钥的数据无法被读取或篡改。
- en: In conclusion, symmetric encryption is a powerful and efficient method for securing
    data using a single, shared key. The use of the `cryptography` library’s Fernet
    module makes it straightforward to implement robust encryption in Python applications.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，对称加密是一种强大且高效的加密方法，它使用一个共享的密钥来保护数据。`cryptography`库中的Fernet模块使得在Python应用中实现强大的加密变得简单。
- en: Asymmetric encryption
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 非对称加密
- en: '**Asymmetric encryption**, also known as **public-key cryptography**, uses
    a pair of keys – a public key for encryption and a private key for decryption.
    This method is useful for scenarios where secure key exchange is required, such
    as in digital signatures and secure communications.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**非对称加密**，也称为**公钥加密**，使用一对密钥——公钥用于加密，私钥用于解密。这种方法对于需要安全密钥交换的场景非常有用，例如数字签名和安全通信。'
- en: In addition to symmetric encryption, asymmetric encryption can provide another
    layer of security. RSA, a widely used algorithm available in the `cryptography`
    library, enables secure data transmission between parties by using a pair of keys
    – a public key for encryption and a private key for decryption.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对称加密，非对称加密还可以提供额外的安全层。RSA是一种广泛使用的算法，它可以通过使用一对密钥（公钥用于加密，私钥用于解密）来实现安全的数据传输，这一算法可以在`cryptography`库中找到。
- en: 'The `cryptography` library:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`cryptography`库：'
- en: '[PRE32]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'An explanation for the preceding example code follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面示例代码的解释：
- en: '**Key generation**: A private key is generated using **rsa.generate_private_key()**,
    and the corresponding public key is derived from it.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密钥生成**：使用**rsa.generate_private_key()** 生成私钥，并从中派生相应的公钥。'
- en: '**Serialization**: The private and public keys are serialized to **Privacy
    Enhanced Mail** (**PEM**) format (the most common format for **X.509** certificates)
    for storage or transmission.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**序列化**：私钥和公钥被序列化为**隐私增强邮件**（**PEM**）格式（最常见的**X.509**证书格式），用于存储或传输。'
- en: '**Encryption**: The **public_key.encrypt()** method encrypts the message using
    the public key.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密**：**public_key.encrypt()** 方法使用公钥对消息进行加密。'
- en: '**Decryption**: The **private_key.decrypt()** method decrypts the cipher text
    using the private key.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解密**：**private_key.decrypt()** 方法使用私钥解密密文。'
- en: Asymmetric encryption, or public-key cryptography, is an essential technique
    for secure communication and data exchange in modern applications. The use of
    RSA through the `cryptography` library allows for secure key generation, encryption,
    and decryption processes. By leveraging public and private key pairs, you can
    securely exchange data and verify identities without the need to share sensitive
    keys.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 非对称加密，或公钥加密，是现代应用中进行安全通信和数据交换的关键技术。通过`cryptography`库使用RSA可以实现安全的密钥生成、加密和解密过程。借助公钥和私钥对，您可以安全地交换数据并验证身份，而无需共享敏感密钥。
- en: Hashing
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哈希
- en: '**Hashing** is the process of converting data into a fixed-size string of characters,
    which is typically a digest that is unique to the input data. Hashing is commonly
    used for securely storing passwords and verifying data integrity.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**哈希**是将数据转换为固定大小的字符串的过程，这通常是唯一的输入数据摘要。哈希常用于安全存储密码并验证数据完整性。'
- en: Using hashlib for hashing passwords
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 hashlib 进行密码哈希
- en: '**hashlib** is a built-in Python library that provides implementations of various
    secure hash algorithms. Here is an example:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**hashlib** 是 Python 的内置库，提供了多种安全哈希算法的实现。以下是一个示例：'
- en: '[PRE33]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'An explanation for the preceding example code follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 对前面示例代码的解释如下：
- en: '**Hashing**: The **hashlib.sha256()** function creates a SHA-256 hash of the
    input password.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**哈希**：**hashlib.sha256()** 函数生成输入密码的 SHA-256 哈希值。'
- en: '**Encoding**: The password is encoded to bytes before hashing.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编码**：密码在哈希之前被编码为字节。'
- en: Using bcrypt for secure password hashing
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 bcrypt 进行安全密码哈希
- en: '**bcrypt** is a library specifically designed for hashing passwords securely.
    It incorporates a **salt** to protect against rainbow table attacks and is computationally
    intensive to mitigate brute force attacks. Here is an example:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**bcrypt** 是一个专门为安全哈希密码而设计的库。它引入了**盐**，以防止彩虹表攻击，并且计算密集型的特点可以缓解暴力破解攻击。以下是一个示例：'
- en: '[PRE34]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'An explanation for the preceding example code follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 对前面示例代码的解释如下：
- en: '**Hashing with salt**: The **bcrypt.hashpw()** function hashes the password
    with a salt, making the hash unique even for identical passwords.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带盐哈希**：**bcrypt.hashpw()** 函数使用盐对密码进行哈希，即使是相同的密码，其哈希值也不同。'
- en: '**Verification**: The **bcrypt.checkpw()** function verifies a password against
    a hashed value, ensuring it matches the original password.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证**：**bcrypt.checkpw()** 函数会将密码与哈希值进行比对，确保其与原始密码匹配。'
- en: Hashing is a critical component of secure data handling, especially for protecting
    sensitive information such as passwords. Utilizing libraries such as `hashlib`
    and `bcrypt` in Python enables developers to implement strong hashing mechanisms
    that ensure data integrity and security. Hashing passwords with salts and using
    computationally intensive algorithms such as `bcrypt` protect against common attacks
    such as brute force and rainbow table attacks.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希是安全数据处理中的关键组成部分，尤其是用于保护敏感信息（如密码）。使用像 `hashlib` 和 `bcrypt` 这样的 Python 库，开发人员可以实现强大的哈希机制，确保数据的完整性和安全性。使用带盐哈希和计算密集型算法（如
    `bcrypt`）对密码进行哈希，能有效防止暴力破解和彩虹表攻击等常见攻击。
- en: Encryption and hashing are essential tools for protecting sensitive data in
    Python applications. Symmetric encryption using Fernet provides a straightforward
    method for securing data with a single key. Asymmetric encryption with RSA enables
    secure key exchange and encryption with separate public and private keys. Hashing
    with `hashlib` and `bcrypt` ensures that passwords are stored securely and can
    be verified without revealing the original passwords.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 加密和哈希是保护 Python 应用程序中敏感数据的基本工具。使用 Fernet 进行对称加密提供了一种通过单个密钥加密数据的简便方法。使用 RSA 进行非对称加密则实现了安全的密钥交换和使用独立的公钥与私钥进行加密。通过
    `hashlib` 和 `bcrypt` 进行哈希可以确保密码被安全存储，并且在验证时不会暴露原始密码。
- en: By leveraging these techniques and libraries, you can implement robust security
    measures to protect your data both in transit and at rest. Incorporating encryption
    and hashing into your security strategy is vital for maintaining the confidentiality,
    integrity, and authenticity of your information.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用这些技术和库，您可以实施强大的安全措施，以保护数据在传输和存储中的安全。将加密和哈希纳入安全策略对于保持信息的机密性、完整性和真实性至关重要。
- en: Now, let’s look at how to securely deploy Python applications.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何安全地部署 Python 应用程序。
- en: Secure deployment strategies for Python applications
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 应用程序的安全部署策略
- en: Deploying Python applications securely involves following best practices to
    minimize vulnerabilities and ensure the integrity, confidentiality, and availability
    of your application. This section covers key strategies for secure deployment,
    including environment configuration, dependency management, secure server configuration,
    logging and monitoring, and regular security reviews.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 安全部署 Python 应用程序涉及遵循最佳实践，以最小化漏洞并确保应用程序的完整性、机密性和可用性。本节涵盖了安全部署的关键策略，包括环境配置、依赖项管理、安全服务器配置、日志记录与监控以及定期的安全审查。
- en: Environment configuration
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境配置
- en: Proper environment configuration is crucial for securing your application. It
    involves managing sensitive information and separating environments to reduce
    the risk of exposure and ensure secure deployment.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 适当的环境配置对保护你的应用程序至关重要。它包括管理敏感信息和隔离环境，以降低曝光风险并确保安全部署。
- en: Use environment variables
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用环境变量
- en: 'Storing sensitive information such as database credentials, API keys, and secret
    tokens directly in your code can lead to security breaches if the code is exposed.
    Instead, use environment variables to manage these secrets securely, as in this
    example:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据库凭证、API 密钥和秘密令牌等敏感信息直接存储在代码中，可能会导致安全漏洞，尤其是在代码暴露的情况下。应使用环境变量安全地管理这些敏感信息，如此示例所示：
- en: '[PRE35]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The preceding example code uses `os.getenv()` to retrieve environment variables,
    ensuring that sensitive information is not hardcoded in your source code.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例代码使用`os.getenv()`来检索环境变量，确保敏感信息不会硬编码在源代码中。
- en: Environment separation
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 环境隔离
- en: 'Maintain separate environments for development, testing, and production, each
    with distinct configurations and access controls. This separation minimizes the
    risk of unintended changes affecting production and ensures that sensitive data
    is not accessible in non-production environments. Here is an example:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 保持开发、测试和生产环境的隔离，每个环境具有不同的配置和访问控制。这种隔离最大限度地减少了意外更改影响生产环境的风险，并确保敏感数据在非生产环境中无法访问。以下是一个示例：
- en: '[PRE36]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Use separate environment files for development, testing, and production to manage
    different settings and credentials, ensuring proper configuration management,
    isolation, and security for each environment.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为开发、测试和生产环境使用单独的环境文件来管理不同的设置和凭证，确保每个环境的正确配置管理、隔离和安全性。
- en: By using environment variables to manage sensitive information and maintaining
    separate environments for development, testing, and production, you can reduce
    the risk of accidental exposure and ensure a clear separation of concerns.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用环境变量来管理敏感信息，并保持开发、测试和生产环境的隔离，你可以降低意外曝光的风险并确保关注点的明确分离。
- en: Dependency management
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖管理
- en: Managing dependencies securely is essential to prevent vulnerabilities arising
    from third-party packages. This includes pinning dependencies and regularly auditing
    them for known vulnerabilities.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 安全地管理依赖项对于防止第三方包带来的漏洞至关重要。这包括固定依赖项并定期审计已知的漏洞。
- en: Pin dependencies
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 固定依赖项
- en: 'Use a `requirements.txt` file to specify the exact versions of dependencies
    your application requires. This practice prevents unexpected updates that could
    introduce security vulnerabilities or breaking changes. Here is an example:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`requirements.txt`文件来指定应用程序所需依赖项的确切版本。这种做法可以防止引入意外更新，从而避免安全漏洞或破坏性变更。以下是一个示例：
- en: '[PRE37]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Version pinning ensures that your application uses specific versions of dependencies
    that you have tested and verified, helping to maintain application stability and
    security by avoiding untested updates.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 版本固定确保你的应用程序使用经过测试和验证的特定版本的依赖项，帮助通过避免未经测试的更新来保持应用程序的稳定性和安全性。
- en: Regular audits
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定期审计
- en: 'Periodically audit your dependencies for known vulnerabilities using tools
    such as `pip-audit`. Regular audits help identify and mitigate potential security
    risks from third-party packages. Here is an example:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 定期使用`pip-audit`等工具审计你的依赖项，检查已知漏洞。定期审计有助于识别并减轻第三方包带来的潜在安全风险。以下是一个示例：
- en: '[PRE38]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Security audits using `pip-audit` detect known vulnerabilities in your dependencies
    and provide recommendations for updates or patches, ensuring compliance with security
    standards and best practices by keeping dependencies up to date.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pip-audit`进行安全审计，可以检测依赖项中已知的漏洞，并提供更新或修补建议，确保通过保持依赖项的最新状态来符合安全标准和最佳实践。
- en: Pinning dependencies to specific versions and regularly auditing them for vulnerabilities
    ensures that your application runs with known, secure components. By keeping your
    dependencies up to date and well-managed, you can avoid introducing security risks
    and ensure consistent application behavior.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 将依赖项固定到特定版本并定期审计它们的漏洞，确保应用程序使用已知的安全组件。通过保持依赖项的最新状态和良好的管理，你可以避免引入安全风险并确保一致的应用程序行为。
- en: Secure server configuration
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全的服务器配置
- en: Configuring your server securely is critical to protect your application from
    various attacks and unauthorized access. With the following methods, you can securely
    configure a server.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 安全配置服务器对于保护你的应用免受各种攻击和未经授权的访问至关重要。通过以下方法，你可以安全地配置服务器。
- en: Using HTTPS
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 HTTPS
- en: 'Ensure all data in transit is encrypted using HTTPS. This practice protects
    sensitive information from being intercepted and ensures secure communication
    between clients and servers. Here is an example:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 确保所有传输中的数据都使用 HTTPS 加密。这一做法保护敏感信息不被截获，并确保客户端和服务器之间的安全通信。以下是一个示例：
- en: '[PRE39]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The preceding example code uses SSL/TLS certificates to establish a secure connection
    using HTTPS. In the example, `cert.pem` and `key.pem` represent the certificate
    and private key files, respectively.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例代码使用 SSL/TLS 证书通过 HTTPS 建立安全连接。在该示例中，`cert.pem` 和 `key.pem` 分别表示证书和私钥文件。
- en: Server hardening
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务器加固
- en: 'Harden your server by disabling unnecessary services and ensuring that it is
    configured with the minimum necessary privileges. This reduces the attack surface
    and limits the potential damage from successful attacks, as in this example:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 通过禁用不必要的服务并确保服务器配置为最小必要权限，来加固你的服务器。这减少了攻击面，并限制了成功攻击后可能造成的损害，如下例所示：
- en: '[PRE40]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Here is an explanation for the preceding system commands:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对前面系统命令的解释：
- en: '**Disable services**: Stops and disables services that are not needed, reducing
    the attack surface'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用服务**：停止并禁用不需要的服务，减少攻击面'
- en: '**Restrict permissions**: Ensures that sensitive directories and files are
    only accessible to authorized users'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限制权限**：确保敏感目录和文件仅供授权用户访问'
- en: Secure server configuration is essential to protect your application from unauthorized
    access and attacks. Using HTTPS to encrypt data in transit and hardening your
    server by disabling unnecessary services and minimizing privileges are key steps
    in securing your deployment environment. These measures help safeguard your application
    and its data against common security threats.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 安全服务器配置对于保护你的应用免受未经授权的访问和攻击是必不可少的。使用 HTTPS 加密传输中的数据，通过禁用不必要的服务和最小化权限来加固服务器，是确保你部署环境安全的关键步骤。这些措施有助于保护你的应用及其数据免受常见的安全威胁。
- en: Logging and monitoring
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志记录与监控
- en: Implementing comprehensive logging and monitoring helps detect and respond to
    security incidents in a timely manner. Now, let’s see how we can achieve proper
    logging of our assets.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 实施综合日志记录和监控有助于及时检测和响应安全事件。现在，让我们看看如何实现资产的适当日志记录。
- en: Comprehensive logging
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 综合日志记录
- en: 'Log all significant actions, errors, and security-related events. This practice
    provides a record of activity that can be used to detect and investigate suspicious
    behavior, as in this example:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 记录所有重要的操作、错误和与安全相关的事件。这种做法提供了活动记录，可以用于检测和调查可疑行为，如下例所示：
- en: '[PRE41]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Here is an explanation for the preceding example code:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对前面示例代码的解释：
- en: '**Logging levels**: Use different logging levels (**INFO**, **WARNING**, or
    **ERROR**) to categorize and prioritize log messages'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志级别**：使用不同的日志级别（**INFO**、**WARNING** 或 **ERROR**）对日志消息进行分类和优先级排序'
- en: '**Security logs**: Include logs for security-related events such as authentication
    attempts, access control changes, and system errors'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全日志**：包括与安全相关的事件日志，如身份验证尝试、访问控制更改和系统错误'
- en: Monitoring
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监控
- en: 'Use monitoring tools to detect unusual activity and potential security breaches.
    Tools such as Prometheus, Grafana, and the **Elasticsearch, Logstash, and Kibana**
    (**ELK**) Stack can help you visualize and analyze your application’s performance
    and security metrics. Here is an example:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 使用监控工具检测异常活动和潜在的安全漏洞。像 Prometheus、Grafana 以及 **Elasticsearch, Logstash, Kibana**
    (**ELK**) 堆栈这样的工具可以帮助你可视化和分析应用程序的性能和安全指标。以下是一个示例：
- en: '[PRE42]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'An explanation for the preceding example configuration file follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对前面示例配置文件的解释：
- en: '**Monitoring tools**: Implement tools to continuously monitor application performance
    and security'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控工具**：实施工具持续监控应用程序性能和安全性'
- en: '**Alerting**: Configure alerts to notify you of unusual activity or potential
    security incidents in real time'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警报**：配置警报以在发生异常活动或潜在安全事件时实时通知你'
- en: Implementing detailed logging of significant events and using monitoring tools
    to track application performance and security helps you maintain visibility into
    your application’s behavior. This proactive approach enables you to identify and
    address potential issues before they escalate into serious security breaches.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 实施重要事件的详细日志记录，并使用监控工具跟踪应用程序的性能和安全性，帮助您保持对应用程序行为的可视性。这种主动的方式使您能够在问题升级为严重安全漏洞之前，识别并解决潜在问题。
- en: Secure deployment of Python applications involves meticulous attention to environment
    configuration, dependency management, server configuration, logging, monitoring,
    and regular security reviews. By following these best practices, you can significantly
    reduce the risk of vulnerabilities and ensure the secure operation of your application.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Python 应用程序的安全部署涉及对环境配置、依赖管理、服务器配置、日志记录、监控和定期安全审查的细致关注。通过遵循这些最佳实践，您可以显著减少漏洞风险，确保应用程序的安全运行。
- en: Summary
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored essential strategies for securely deploying Python
    applications. We began with secure coding fundamentals, emphasizing principles
    such as least privilege, defense in depth, fail securely, simplicity, and regular
    updates. These principles help create robust and resilient code.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们探讨了安全部署 Python 应用程序的基本策略。我们从安全编码的基础开始，强调了如最小权限、深度防御、安全失败、简化和定期更新等原则。这些原则有助于创建强大且具有韧性的代码。
- en: Next, we covered input validation and sanitization techniques, which prevent
    malicious inputs from compromising your application. This included verifying data
    formats, ranges, and types, and cleaning or encoding inputs to prevent attacks
    such as SQL injection.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们介绍了输入验证和清理技术，这些技术可以防止恶意输入危害您的应用程序。这包括验证数据格式、范围和类型，并清理或编码输入，以防止如 SQL 注入等攻击。
- en: We then addressed preventing code injection and execution attacks, focusing
    on using parameterized queries and ORMs and avoiding shell commands or sanitizing
    inputs. These practices ensure the safe handling of user inputs and prevent unauthorized
    code execution.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们讨论了防止代码注入和执行攻击，重点介绍了使用参数化查询和 ORM，避免使用 shell 命令或清理输入。这些实践确保了用户输入的安全处理，防止了未经授权的代码执行。
- en: Encryption was another key focus. We discussed symmetric encryption with Fernet,
    asymmetric encryption with RSA, and hashing with `hashlib` and `bcrypt`. These
    methods protect sensitive data both in transit and at rest.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 加密是另一个关键焦点。我们讨论了使用 Fernet 的对称加密、使用 RSA 的非对称加密以及使用 `hashlib` 和 `bcrypt` 的哈希方法。这些方法保护敏感数据在传输和静态存储中的安全。
- en: Finally, we covered secure deployment strategies, including using environment
    variables, maintaining separate environments, pinning dependencies, regular audits,
    secure server configuration, and comprehensive logging and monitoring. These practices
    help ensure the security of your application in production.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们介绍了安全部署策略，包括使用环境变量、保持独立的环境、锁定依赖项、定期审计、安全的服务器配置以及全面的日志记录和监控。这些实践有助于确保您的应用程序在生产环境中的安全。
- en: By following these secure coding practices and deployment strategies, developers
    can build Python applications that are resilient to security threats, maintaining
    confidentiality, integrity, and availability. Security requires continuous attention
    and proactive measures to stay ahead of emerging threats.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些安全编码实践和部署策略，开发人员可以构建对安全威胁具有韧性的 Python 应用程序，保持机密性、完整性和可用性。安全需要持续关注和主动措施，以应对新兴威胁。
- en: In the next chapter, we will explore Python-based threat detection and incident
    response methodologies, providing developers with critical tools for proactively
    identifying and mitigating security threats.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨基于 Python 的威胁检测和事件响应方法，为开发人员提供主动识别和缓解安全威胁的关键工具。
