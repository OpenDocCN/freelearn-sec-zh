- en: Other Common Security Flaws in Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用程序中的其他常见安全缺陷
- en: So far in this book, we have covered most of the issues surrounding web application
    security and penetration testing, albeit briefly. However, due to the nature of
    web applications—which represent such a mixture of diverse technologies and methodologies
    that do not always work well together—the number of specific vulnerabilities and
    different types of attacks targeting these applications is so large and rapidly
    changing that no single book could possibly cover everything; hence, some things
    must be left out.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，我们已经简要介绍了围绕Web应用程序安全和渗透测试的大部分问题。然而，由于Web应用程序的性质——它们代表了如此多样化的技术和方法论的混合，这些技术和方法论并不总是很好地协同工作——针对这些应用程序的特定漏洞和不同类型的攻击的数量是如此之大且迅速变化，以至于没有一本书能够涵盖所有内容；因此，有些东西必须被遗漏。
- en: 'In this chapter, we will cover a diverse set of vulnerabilities commonly present
    in web applications that sometimes escape the focus of developers and security
    testers, not because they are unknown (in fact, some are in *OWASP Top 10*), but
    because their impact is sometimes underestimated in real-world applications, or
    because vulnerabilities such as SQL injection and XSS are much more relevant because
    of their direct impact on users'' information. The vulnerabilities covered in
    this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍一组常见的漏洞，这些漏洞通常存在于Web应用程序中，有时会逃脱开发人员和安全测试人员的关注，不是因为它们是未知的（实际上，有些在*OWASP
    Top 10*中），而是因为它们在现实世界的应用程序中的影响有时被低估，或者因为SQL注入和XSS等漏洞由于对用户信息的直接影响而更为重要。本章涵盖的漏洞如下：
- en: Insecure direct object references
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不安全的直接对象引用
- en: File inclusion vulnerabilities
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件包含漏洞
- en: HTTP parameter pollution
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP参数污染
- en: Information disclosure
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息泄露
- en: Insecure direct object references
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不安全的直接对象引用
- en: An **insecure direct object reference** vulnerability happens when an application
    requests a resource from the server (it can be a file, function, directory, or
    database record), by its name or other identifier, and allows the user to tamper
    directly with that identifier in order to request other resources.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**不安全的直接对象引用**漏洞发生在应用程序从服务器请求资源（可以是文件、函数、目录或数据库记录）时，通过其名称或其他标识符，并允许用户直接篡改该标识符以请求其他资源。'
- en: 'Let''s consider an example of this using Mutillidae II (navigate to OWASP Top
    10 2013 | A4 - Insecure Direct Object References | Source Viewer). This exercise
    involves a source code viewer that picks a filename from the drop box and displays
    its contents in the viewer:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以Mutillidae II为例（导航到OWASP Top 10 2013 | A4 - 不安全的直接对象引用 | 源代码查看器）。这个练习涉及一个源代码查看器，它从下拉框中选择一个文件名并在查看器中显示其内容：
- en: '![](img/00260.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00260.jpeg)
- en: 'If you check the request in Burp Suite or any proxy, you can see that it has
    a `phpfile` parameter, which contains the name of the file to view:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Burp Suite或任何代理中检查请求，您会发现它有一个`phpfile`参数，其中包含要查看的文件名：
- en: '![](img/00261.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00261.jpeg)
- en: 'You can try and intercept that request to change the filename to one that is
    not in the list, but you know that it exists on the server, such as `passwords/accounts.txt` (you
    can use the internet to search for default configuration files or relevant code
    installed on web servers and certain applications):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试拦截该请求，将文件名更改为列表中没有的文件名，但您知道它存在于服务器上，例如`passwords/accounts.txt`（您可以使用互联网搜索默认配置文件或安装在Web服务器和某些应用程序上的相关代码）：
- en: '![](img/00262.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00262.jpeg)
- en: As the application references files directly by their names, you can change
    the parameter to make the application show a file that wasn't intended to be seen.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于应用程序直接引用文件名，您可以更改参数以使应用程序显示不打算查看的文件。
- en: Direct object references in web services
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web服务中的直接对象引用
- en: Web services, especially REST services, often reference database elements using
    their identifiers in the URL. If these identifiers are sequential and authorization
    checks are not properly done, it may be possible to enumerate all of the elements
    just by increasing or decreasing the identifier.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务，特别是REST服务，通常使用URL中的标识符引用数据库元素。如果这些标识符是连续的，并且授权检查没有正确执行，那么只需增加或减少标识符就可以枚举所有元素。
- en: 'For example, let''s say that we log in to a banking application and then call
    to the API to request our personal profile. This request looks something like
    the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们登录到银行应用程序，然后调用API请求我们的个人资料。此请求看起来类似于以下内容：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The information is returned in JSON format, which is formatted and displayed
    on the client''s browser:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 信息以JSON格式返回，格式化并显示在客户端的浏览器上：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If we increment the client ID in the request and the authorization privileges
    are not properly checked on the server, we may get the information of another
    client of the bank. This can be a major issue in an application that handles such
    sensitive data. Web services should only allow access after proper authentication
    and always perform authorization checks on the server side; otherwise, there is
    the risk of someone accessing sensitive data using a direct object reference.
    Insecure direct object references are a major cause of concern in web services,
    and they should be at the top of your to-do list when penetration testing a RESTful
    web service.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在请求中递增客户端ID，并且服务器上没有正确检查授权权限，我们可能会获取银行的另一个客户的信息。这可能是一个重大问题，因为这个应用程序处理如此敏感的数据。Web服务应该只允许在适当的身份验证后访问，并始终在服务器端执行授权检查；否则，有人使用直接对象引用访问敏感数据的风险。不安全的直接对象引用是Web服务中令人担忧的主要原因，在渗透测试RESTful
    Web服务时应将其置于首要位置。
- en: Path traversal
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路径遍历
- en: If an application uses client-given parameters to build the path to a file,
    and proper input validation and access permissions checks are done, an attacker
    can change the name of the file and/or prepend a path to the filename in order
    to retrieve a different file. This is called **path traversal** or *directory
    traversal*. Most web servers have been locked down to prevent this type of attack,
    but applications still need to validate inputs when directly referencing files.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个应用程序使用客户端提供的参数来构建文件的路径，并且进行了适当的输入验证和访问权限检查，攻击者可以更改文件的名称和/或在文件名前添加路径以检索不同的文件。这被称为路径遍历或目录遍历。大多数Web服务器已经被锁定以防止这种类型的攻击，但应用程序仍然需要在直接引用文件时验证输入。
- en: Users should be restricted to navigate only the web root directory and should
    not be able to access anything above the web root. A malicious user will look
    for direct links to files out of the web root—the most attractive being the operating
    system root directory.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 用户应该被限制只能浏览Web根目录，不能访问Web根目录上方的任何内容。恶意用户将寻找指向Web根目录之外的文件的直接链接，其中最有吸引力的是操作系统的根目录。
- en: The basic path traversal attack uses the `../` sequence to modify the resource
    request through the URL. The `../` expression is used in operating systems to
    move up one directory. The attacker has to guess the number of directories necessary
    to move up and outside the web root, which can be done easily using trial and
    error. If the attacker wants to move up three directories, then they must use
    `../../../`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的路径遍历攻击使用“../”序列通过URL修改资源请求。在操作系统中，“../”表达式用于向上移动一个目录。攻击者必须猜测移动和超出Web根目录所需的目录数量，这可以通过试错法轻松完成。如果攻击者想要向上移动三个目录，则必须使用“../../../”。
- en: 'Let''s use DVWA to consider an example: we will use the *File Inclusion* exercise
    to demonstrate a path traversal. When the page loads, you will notice that the
    URL has a `page` parameter with the `include.php` value, which clearly looks as
    if it is loading a file by its name:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用DVWA来考虑一个例子：我们将使用“文件包含”练习来演示路径遍历。当页面加载时，您会注意到URL中有一个“page”参数，其值为“include.php”，这显然是按名称加载文件：
- en: '![](img/00263.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00263.jpeg)
- en: 'If you visit the URL, you can see that the page that is loading the `include.php`
    file is two levels below the application''s root directory (`/vulnerabilities/fi/`)
    and three levels below the server''s root (`dvwa/vulnerabilities/fi/`). If you
    replace the filename with `../../index.php`, you will be going up two levels and
    then showing the DVWA''s home page:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您访问该URL，您会发现加载“include.php”文件的页面位于应用程序的根目录（/vulnerabilities/fi/）下两个级别，服务器的根目录（dvwa/vulnerabilities/fi/）下三个级别。如果您将文件名替换为“../../index.php”，您将上升两个级别，然后显示DVWA的主页：
- en: '![](img/00264.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00264.jpeg)
- en: 'You can try to escape the web server root to reach files in the operating system.
    By default, Apache web server''s root on GNU/Linux is at `/var/www/html`. If you
    add three more levels to the previous input, you will be making a reference to
    the operating system''s root. By setting the `page` parameter to `../../../../../etc/passwd`,
    you will be able to read the file containing the user''s information on the underlying
    operating system:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试逃离Web服务器根目录以访问操作系统中的文件。在GNU / Linux上，默认情况下，Apache Web服务器的根目录位于/var/www/html。如果您在先前的输入中添加三个更多级别，您将引用操作系统的根目录。通过将“page”参数设置为“../../../../../etc/passwd”，您将能够读取包含底层操作系统上用户信息的文件：
- en: '![](img/00265.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00265.jpeg)
- en: 'The `/etc/passwd` path is a sure bet when testing for path traversal in Unix-based
    systems, as it is always there and is readable by everyone. If you are testing
    a Windows server, you may want to try the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于Unix的系统中，/etc/passwd路径是测试路径遍历的一个确定赌注，因为它始终存在并且可以被所有人读取。如果您正在测试Windows服务器，您可以尝试以下操作：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: File inclusion vulnerabilities
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件包含漏洞
- en: In a web application, the developer may include code stored on a remote server
    or code from a file stored locally on a server. Referencing files other than the
    ones in the web root is mainly used for combining common code into files that
    can be later referenced by the main application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序中，开发人员可以包含存储在远程服务器上的代码或存储在本地服务器上的文件中的代码。引用不在Web根目录中的文件主要用于将常见代码合并到稍后可以由主应用程序引用的文件中。
- en: An application is vulnerable to **file inclusion** when it takes input parameters
    to determine the name of the file to include; hence, a user can set the name of
    a malicious file previously uploaded to the server (Local File Inclusion) or the
    name of a file in another server (Remote File Inclusion).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个应用程序使用输入参数来确定要包含的文件的名称时，它就容易受到文件包含的攻击；因此，用户可以设置之前上传到服务器的恶意文件的名称（本地文件包含）或另一个服务器上的文件的名称（远程文件包含）。
- en: Local File Inclusion
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地文件包含
- en: In a **Local File Inclusion** (**LFI**) vulnerability, files local to the server
    are accessed by the `include` function without proper validation; that is, files
    containing server code are included in a page and their code is executed. This
    is a very practical feature for developers, as they can reuse code and optimize
    their resources. The problem arises when user-provided parameters are used to
    select the files to be included and when insufficient or no validation is made.
    Many people confuse an LFI flaw with the path traversal flaw. Although the LFI
    flaw often exhibits the same traits as the path traversal flaw, the application
    treats both the flaws differently. With the path traversal flaw, the application
    will only read and display the contents of the file. With the LFI flaw, instead
    of displaying the contents, the application will include the file as part of the
    interpreted code (the web pages making up the application) and execute it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在**本地文件包含**（**LFI**）漏洞中，服务器上的本地文件被`include`函数访问而没有进行适当的验证；也就是说，包含了包含服务器代码的文件，并在页面中执行了它们的代码。对于开发人员来说，这是一个非常实用的功能，因为他们可以重用代码并优化资源。问题出现在使用用户提供的参数来选择要包含的文件时，以及进行不充分或没有验证。许多人将LFI缺陷与路径遍历缺陷混淆。尽管LFI缺陷通常表现出与路径遍历缺陷相同的特征，但应用程序对待这两种缺陷的方式是不同的。对于路径遍历缺陷，应用程序只会读取和显示文件的内容。对于LFI缺陷，应用程序不会显示内容，而是将文件包含为解释代码的一部分（构成应用程序的网页）并执行它。
- en: In the path traversal vulnerability explained earlier, we used the *File Inclusion*
    exercise from DVWA and actually did an LFI when we used `../../index.php` as the
    parameter and the `index.php` page was interpreted as code. Nonetheless, including
    files that are already on the server and that serve a legitimate purpose for the
    application sometimes doesn't pose a security risk, unless an unprivileged user
    is able to include an administrative page. In the case where all pages on the
    server are innocuous, how can you as a penetration tester demonstrate that there
    is a security issue by allowing the inclusion of local files? You need to upload
    a malicious file and use it to exploit the LFI further.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前解释的路径遍历漏洞中，我们使用了DVWA的*文件包含*练习，并且当我们将`../../index.php`作为参数使用时，`index.php`页面被解释为代码执行了一个LFI。然而，包含已经存在于服务器上并为应用程序提供合法目的的文件通常不会构成安全风险，除非非特权用户能够包含一个管理页面。在服务器上的所有页面都是无害的情况下，作为渗透测试人员，您如何证明存在安全问题，允许包含本地文件？您需要上传一个恶意文件并使用它进一步利用LFI。
- en: The malicious file that we will upload is a webshell, which is a script that
    will run on the server that will let us execute operating system commands remotely.
    Kali Linux includes a collection of webshells in the `/usr/share/webshells` directory.
    For this exercise, we will use `simple-backdoor.php` (`/usr/share/webshells/php/simple-backdoor.php`).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将上传的恶意文件是一个webshell，它是一个在服务器上运行的脚本，可以让我们远程执行操作系统命令。Kali Linux在`/usr/share/webshells`目录中包含了一系列的webshell。在这个练习中，我们将使用`simple-backdoor.php`（`/usr/share/webshells/php/simple-backdoor.php`）。
- en: 'Go to the *File Upload* exercise of DVWA, and upload the file. Note the relative
    path shown when the file is uploaded:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 进入DVWA的*文件上传*练习，并上传文件。注意文件上传时显示的相对路径：
- en: '![](img/00266.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00266.jpeg)'
- en: 'If the upload script is in `/dvwa/vulnerabilities/upload/`, relative to the
    web server root, according to the relative path shown, the file should be uploaded
    in `/dvwa/hackable/uploads/simple-backdoor.php`. Now go back to the *File Inclusion*
    exercise, and change the `page` parameter to `../../hackable/uploads/simple-backdoor.php`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上传脚本位于`/dvwa/vulnerabilities/upload/`，相对于Web服务器根目录，根据显示的相对路径，文件应该上传到`/dvwa/hackable/uploads/simple-backdoor.php`。现在返回到*文件包含*练习，将`page`参数更改为`../../hackable/uploads/simple-backdoor.php`。
- en: '![](img/00267.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00267.jpeg)'
- en: 'OK, admittedly we do not get a spectacular result. Let''s check the webshell''s
    code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，诚然我们没有得到一个惊人的结果。让我们检查一下webshell的代码：
- en: '![](img/00268.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00268.jpeg)'
- en: 'You need to pass a parameter to the webshell with the command that you want
    to execute, but in file inclusion, the code of the included file is integrated
    with the file including it, so you can''t just add `?cmd=command` as the usage
    instructions say. Instead, you need to add a `cmd` parameter as if you were sending
    it to the including page:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要向webshell传递一个带有要执行的命令的参数，但在文件包含中，被包含文件的代码与包含它的文件集成在一起，所以您不能只是按照使用说明添加`?cmd=command`。相反，您需要添加一个`cmd`参数，就像将其发送给包含页面一样：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/00269.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00269.jpeg)'
- en: 'You can also chain multiple commands in a single call using `;` (the semicolon) as
    a separator:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`;`（分号）作为分隔符，在单个调用中链接多个命令：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](img/00270.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00270.jpeg)'
- en: Remote File Inclusion
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程文件包含
- en: '**Remote File Inclusion** (**RFI**) is an attack technique that exploits the
    file inclusion mechanism when the application permits the inclusion of files from
    other servers. This can result in the application being tricked into running a
    script from a remote server under the control of the attacker.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**远程文件包含**（**RFI**）是一种攻击技术，利用应用程序允许从其他服务器包含文件的机制。这可能导致应用程序被欺骗以在攻击者控制的远程服务器上运行脚本。'
- en: 'RFI works in the exact same way as LFI, with the exception that instead of
    the relative path of the file, a full URL is used as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: RFI的工作方式与LFI完全相同，唯一的区别是使用完整的URL而不是文件的相对路径，如下所示：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Modern web servers have the functionality to include files, especially external
    ones, disabled by default. However, sometimes the requirements of the application
    or business make developers enable this functionality. As time passes, this occurs
    less frequently, however.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现代Web服务器默认禁用包括文件（尤其是外部文件）的功能。然而，有时应用程序或业务的要求会使开发人员启用此功能。随着时间的推移，这种情况发生的频率越来越少。
- en: HTTP parameter pollution
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP参数污染
- en: HTTP allows multiple parameters with the same name, both in the `GET` and `POST`
    methods. The HTTP standards neither explain nor have rules set on how to interpret
    multiple input parameters with the same name—whether to accept the last occurrence
    of the variable or the first occurrence, or to use the variable as an array.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP允许在`GET`和`POST`方法中使用相同名称的多个参数。HTTP标准既不解释也没有规定如何解释具有相同名称的多个输入参数 - 是接受变量的最后出现还是第一次出现，或者将变量用作数组。
- en: 'For example, the following `POST` request is per the standard, even when the
    `item_id` variable has `num1` and `num2` as values:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下`POST`请求符合标准，即使`item_id`变量的值为`num1`和`num2`：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Although it is acceptable per HTTP protocol standard, the way that different
    web servers and development frameworks handle multiple parameters varies. The
    unknown process of handling multiple parameters often leads to security issues.
    This unexpected behavior is known as **HTTP parameter pollution**. The following
    table shows HTTP duplicated parameter behavior in major web servers:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管根据HTTP协议标准，不同的Web服务器和开发框架处理多个参数的方式各不相同。处理多个参数的未知过程经常导致安全问题。这种意外行为被称为**HTTP参数污染**。下表显示了主要Web服务器中的HTTP重复参数行为：
- en: '| **Framework/Web server** | **Resulting action** | **Example** |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| **框架/ Web服务器** | **结果动作** | **示例** |'
- en: '| ASP.NET/IIS | All occurrences concatenated with a comma | `item_id=num1,num2`
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| ASP.NET/IIS | 所有出现的参数用逗号连接 | `item_id=num1,num2` |'
- en: '| PHP/Apache | Last occurrence | `item_id=num2` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| PHP/Apache | 最后出现 | `item_id=num2` |'
- en: '| JSP/Tomcat | First occurrence | `item_id=num1` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| JSP/Tomcat | 第一次出现 | `item_id=num1` |'
- en: '| IBM HTTP server | First occurrence | `item_id=num1` |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| IBM HTTP服务器 | 第一次出现 | `item_id=num1` |'
- en: '| Python | All occurrences combined in a list (array) | `item_id=[''num1'',''num2'']`
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| Python | 所有出现的参数组合成一个列表（数组） | `item_id=[''num1'',''num2'']` |'
- en: '| Perl /Apache | First occurrence | `item_id=num1` |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| Perl/Apache | 第一次出现 | `item_id=num1` |'
- en: 'Imagine a scenario where a Tomcat server is behind **Web Application Firewall**
    (**WAF**) whose code is based on Apache and PHP, and an attacker sends the following
    parameter list in a request:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一种情况，Tomcat服务器位于基于Apache和PHP的**Web应用程序防火墙**（**WAF**）后面，攻击者在请求中发送以下参数列表：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: WAF will take the last occurrence of the parameter and determine that it is
    a legitimate value, while the web server will take the first one, and, if the
    application is vulnerable to SQL injection, the attack will succeed, bypassing
    the protection provided by WAF.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: WAF将采用参数的最后出现并确定它是一个合法的值，而Web服务器将采用第一个出现的值，如果应用程序容易受到SQL注入攻击，攻击将成功，绕过WAF提供的保护。
- en: Information disclosure
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信息泄露
- en: The purpose of using web applications is to allow users access to information
    and to perform tasks. However, not every user should be able to access all data,
    and there are pieces of information about the application, operating system, and
    users, of which an attacker can take advantage to gain knowledge and eventually
    access the authenticated functions of the application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Web应用程序的目的是允许用户访问信息并执行任务。然而，并不是每个用户都应该能够访问所有数据，并且有关应用程序、操作系统和用户的一些信息，攻击者可以利用这些信息来获取知识并最终访问应用程序的经过身份验证的功能。
- en: In an effort to make the interaction between user and application friendlier,
    developers may sometimes release too much information. Also, in their default
    installations, web development frameworks are preconfigured to display and highlight
    their features, not to be secure. This is why many times some of these default
    configuration options are kept active right up to the framework's production release,
    exposing the information and functionality that may be a security risk.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用户与应用程序的交互更友好，开发人员有时可能会发布过多的信息。此外，在它们的默认安装中，Web开发框架被预配置为显示和突出显示它们的功能，而不是为了安全。这就是为什么很多时候这些默认配置选项会一直保持活动状态，直到框架的正式发布，从而暴露可能构成安全风险的信息和功能。
- en: 'Let''s review some examples of information disclosure that pose a security
    risk. In the following screenshot, you can see a `phpinfo.php` page. This is sometimes
    installed by default in Apache/PHP servers, and it provides detailed information
    about the underlying operating system, the web server''s active modules and configuration,
    and much more:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些可能带来安全风险的信息泄露示例。在下面的截图中，您可以看到一个名为`phpinfo.php`的页面。这个页面有时会默认安装在Apache/PHP服务器上，它提供了关于底层操作系统、Web服务器的活动模块和配置以及更多详细信息：
- en: '![](img/00271.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00271.jpeg)'
- en: 'Another thing that you''ll find is the use of descriptive comments in the client-side
    source code. The following is an extreme example. In real-world applications,
    you may be able to find details about the logic and functionality of the application that
    has merely been commented out:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会发现客户端源代码中使用了描述性注释的情况。以下是一个极端的例子。在现实世界的应用程序中，您可能能够找到有关应用程序逻辑和功能的详细信息，这些信息仅仅被注释掉了：
- en: '![](img/00272.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00272.jpeg)'
- en: 'In the next screenshot, you can see a fairly common issue in web applications.
    This issue is often underestimated by developers, security staff, and risk analysts.
    It involves an error message that is too verbose, displaying a debug trace, the
    filename and line number of the error, and more. This may be enough for an attacker
    to identify the operating system, web server version, development framework, database
    version, and file structure, and get much more information:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个截图中，您可以看到Web应用程序中一个相当常见的问题。这个问题经常被开发人员、安全人员和风险分析师低估。它涉及一个过于冗长的错误消息，显示了调试跟踪、错误的文件名和行号等等。这可能足以让攻击者识别操作系统、Web服务器版本、开发框架、数据库版本和文件结构，并获取更多信息：
- en: '![](img/00273.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00273.jpeg)'
- en: 'In this last example, an authentication token is stored in the HTML5 session
    storage. Remember, this object can be accessed via JavaScript, which means that
    if an XSS vulnerability is present, an attacker will be able to hijack the user''s
    session:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个示例中，身份验证令牌存储在HTML5会话存储中。请记住，通过JavaScript可以访问此对象，这意味着如果存在XSS漏洞，攻击者将能够劫持用户的会话：
- en: '![](img/00274.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00274.jpeg)'
- en: Mitigation
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓解措施
- en: 'We will now discuss how to prevent or mitigate the vulnerabilities explained
    in the preceding sections. In short, we''ll do the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将讨论如何预防或缓解前面部分中解释的漏洞。简而言之，我们将执行以下操作：
- en: Follow the principle of least privilege
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循最小特权原则
- en: Validate all inputs
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证所有输入
- en: Check/harden server configuration
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查/加固服务器配置
- en: Insecure direct object references
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不安全的直接对象引用
- en: Always favor the use of indirect references. Use nonconsecutive numeric identifiers
    to reference a table of allowed objects instead of allowing the user to use the
    object's name directly.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 始终优先使用间接引用。使用非连续的数字标识符引用允许的对象表，而不是允许用户直接使用对象的名称。
- en: Proper input validation and sanitization of data received from the browser will
    prevent a path traversal attack. The developer of the application should be careful
    about taking user input when making filesystem calls. If possible, this should
    be avoided. A **chroot jail** involves isolating the application's root directory
    from the rest of the operating system, and it is a good mitigation technique,
    but it may be difficult to implement.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对从浏览器接收到的数据进行适当的输入验证和清理将防止路径遍历攻击。应用程序的开发人员在进行文件系统调用时应注意接受用户输入。如果可能，应避免这样做。**chroot监狱**涉及将应用程序的根目录与操作系统的其余部分隔离开来，这是一种很好的缓解技术，但可能难以实现。
- en: For other types of direct object references, the principle of least privilege
    must be followed. Users should have access only to that information which is required
    for them to operate properly, and authorization must be validated for every request
    a user makes. They should receive an error message or *unauthorized* response
    when requesting any information that their profile or role is not supposed to
    see or access.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他类型的直接对象引用，必须遵循最小特权原则。用户只能访问他们正常操作所需的信息，并且必须对用户发出的每个请求进行授权验证。当请求任何其配置文件或角色不应查看或访问的信息时，他们应收到错误消息或*未经授权*的响应。
- en: WAFs can also stop such attacks, but they should be used along with other mitigation
    techniques.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: WAFs也可以阻止此类攻击，但它们应与其他缓解技术一起使用。
- en: File inclusion attacks
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件包含攻击
- en: At the design level, the application should minimize the user input that would
    affect the flow of the application. If the application relies on user input for
    file inclusion, choose indirect references rather than direct ones. For example,
    the client submits an object ID that is then searched for in a server-side catalog
    that contains the list of valid files to include. Code reviews should be done
    to watch out for functions that are including files, and checks should be performed
    to analyze whether proper input validation is done to sanitize the data received
    from the user.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计层面上，应用程序应尽量减少用户输入对应用程序流程的影响。如果应用程序依赖用户输入进行文件包含，应选择间接引用而不是直接引用。例如，客户端提交一个对象ID，然后在包含有效文件列表的服务器端目录中搜索该ID。应进行代码审查以查找包含文件的函数，并进行检查以分析是否对从用户接收到的数据进行适当的输入验证以对数据进行清理。
- en: HTTP parameter pollution
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP参数污染
- en: With this vulnerability, the application fails to perform proper input validation,
    which makes it overwrite hardcoded values. Whitelisting expected parameters and
    their values should be included in the application logic, and the input from the
    user should be sanitized against it. WAFs that can track multiple occurrences
    of the variable and that have been tuned to understand the flaw should be used
    to handle filtering.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种漏洞中，应用程序未执行适当的输入验证，导致覆盖硬编码的值。白名单预期参数及其值应包含在应用程序逻辑中，并对用户输入进行清理。应使用能够跟踪变量的多个出现并已调整以理解该缺陷的WAF来处理过滤。
- en: Information disclosure
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信息泄露
- en: 'Server configuration must be thoroughly reviewed before releasing it into production.
    Any extraneous file or files that are not strictly necessary for the application''s
    functionality should be removed, as well as all server response headers that may
    leak relevant information such as the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布到生产环境之前，必须彻底审查服务器配置。应删除任何不是应用程序功能所必需的多余文件或文件，以及可能泄露相关信息的所有服务器响应头，例如以下内容：
- en: '`Server`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`服务器`'
- en: '`X-Powered-By`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X-Powered-By`'
- en: '`X-AspNet-Version`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X-AspNet-Version`'
- en: '`Version`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`版本`'
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we reviewed some of the vulnerabilities in web applications
    that may escape the spotlight of XSS, SQL injection, and other common flaws. As
    a penetration tester, you need to know how to identify, exploit, and mitigate
    vulnerabilities so that you can seek them out and provide proper advice to your
    clients.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了一些可能逃避XSS、SQL注入和其他常见漏洞的Web应用程序中的漏洞。作为渗透测试人员，您需要知道如何识别、利用和缓解漏洞，以便能够找出它们并为客户提供适当的建议。
- en: We began this chapter by covering the broad concept of insecure direct object
    references and some of its variants. Then we moved on to file inclusion vulnerabilities,
    which are a special type of insecure direct object reference, but represent a
    classification category by itself. We did an exercise on LFI and explained the
    remote version.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始本章时介绍了不安全的直接对象引用的广义概念及其一些变体。然后我们转向文件包含漏洞，它是一种特殊类型的不安全的直接对象引用，但它本身代表了一个分类类别。我们对LFI进行了练习，并解释了远程版本。
- en: After that, we reviewed how different servers process duplicated parameters
    in requests and how this can be abused by an attacker through HTTP parameter pollution.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们回顾了不同服务器如何处理请求中的重复参数，以及攻击者如何通过HTTP参数污染利用这一点。
- en: Next, we looked at information disclosure, and we reviewed examples presented
    to illustrate how applications can present too much information to users and how
    that information can be used by a malicious agent in order to gather information
    or to further prepare for an attack.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们研究了信息披露，并回顾了提供的示例，说明应用程序如何向用户呈现过多的信息，以及恶意代理如何利用这些信息来收集信息或进一步为攻击做准备。
- en: Finally, we looked at some mitigation recommendations for the preceding vulnerabilities.
    Most of these mitigation techniques rely on the proper configuration of the server
    and strict input validation in the application's code.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还介绍了一些对前面漏洞的缓解建议。大部分缓解技术依赖于服务器的正确配置和应用程序代码的严格输入验证。
- en: So far we have been doing all testing and exploitation manually, which is the
    best way to do and learn security testing. However, there are situations where
    we need to cover a large scope in a short amount of time or that the client requires
    the use of some scanning tool or we simply don't want to miss any low hanging
    fruit; in the next chapter we will learn about the automated vulnerability scanners
    and fuzzers included in Kali Linux that will help us in these scenarios.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在手动进行所有的测试和利用，这是进行安全测试和学习的最佳方式。然而，有些情况下我们需要在短时间内覆盖大范围，或者客户要求使用一些扫描工具，或者我们只是不想错过任何低风险的漏洞；在下一章中，我们将学习Kali
    Linux中包含的自动化漏洞扫描器和模糊测试工具，这些工具将帮助我们应对这些情况。
