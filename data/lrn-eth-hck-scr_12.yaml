- en: Client-Side Attacks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端攻击
- en: In the previous chapter, we started by learning how to gain access to victim
    machines using server-side attacks. We will now move on to client-side attacks,
    discussing what they are, and how a tool called Veil can be used to generate an
    undetectable backdoor. We will also discuss payloads. Once we have a brief idea
    about payloads, we will generate a backdoor through which we will implement client-side
    attacks on our own system, enabling us to listen to connections. Finally, we will
    look at how to implement backdoors in real time, as well as techniques we can
    use to protect our system from such attacks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们首先学习了如何通过服务器端攻击获得受害机器的访问权限。现在，我们将转向客户端攻击，讨论它们是什么，以及如何使用一个叫做Veil的工具来生成一个无法检测到的后门。我们还将讨论载荷。一旦我们对载荷有了一个初步了解，我们将生成一个后门，通过它实施客户端攻击到我们的系统，从而监听连接。最后，我们将学习如何在实时中实现后门，以及如何保护我们的系统免受此类攻击的技术。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下主题：
- en: Client-side attacks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端攻击
- en: Installing Veil
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Veil
- en: Payloads overview
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 载荷概述
- en: Generating a Veil backdoor
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成Veil后门
- en: Listening for connections
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听连接
- en: Testing the backdoor
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试后门
- en: Fake bdm1 updates
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假的bdm1更新
- en: Client-side attacks using the bdm2 BDFProxy
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用bdm2 BDFProxy进行客户端攻击
- en: Protection against delivery methods
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防护措施：交付方法
- en: Client-side attacks
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端攻击
- en: In this section, we're going to learn about client-side attacks. Often, it's
    better to try to gain access to a target using server-side attacks, such as trying
    to find exploits in the operating system and in the applications installed. If
    that doesn't work, or if our target is hidden behind an IP or is using a hidden
    network, our next resort is a client-side attack. Client-side attacks require
    the user to do something, such as open a link, install an update, or download
    an image that will then run code on their machine. Because these attacks require
    user interaction, information gathering is very important—information about an
    individual's applications and who they are as a person. For a client-side attack
    to be successful, we need to know a person's friends, what networks and websites
    they use, and what websites they trust. Therefore, our focus when gathering information
    is the person, rather than their applications or operating system.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习客户端攻击。通常，尝试通过服务器端攻击获得目标的访问权限更为有效，比如寻找操作系统和已安装应用程序中的漏洞。如果这种方法不起作用，或者我们的目标被隐藏在一个IP后面，或者使用了隐藏网络，那么下一步的选择就是客户端攻击。客户端攻击要求用户进行某些操作，比如点击链接、安装更新或下载图像，从而在他们的机器上运行代码。由于这些攻击需要用户交互，因此信息收集非常重要——收集关于个人应用程序和个人身份的信息。为了使客户端攻击成功，我们需要了解一个人的朋友、他们使用的网络和网站，以及他们信任的网站。因此，收集信息时我们的重点是个人，而不是他们的应用程序或操作系统。
- en: The attacking machine will be a Kali machine and the target machine will be
    Windows. To ensure they're on the same network, both machines will use NAT networks.
    In our examples, we will be using reverse connections, so separate IP addresses
    are not essential in this case.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击机器将是Kali机器，目标机器将是Windows。为了确保它们在同一网络中，两个机器将使用NAT网络。在我们的示例中，我们将使用反向连接，因此此时不需要使用单独的IP地址。
- en: Installing Veil
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Veil
- en: In this section, we're going to learn how to generate an undetectable backdoor.
    A backdoor is just a file that, when executed on a target computer, will give
    us full access to it. There are a number of ways of generating backdoors, but
    what we're interested in is generating a backdoor that is not detectable by antivirus
    programs. This actually isn't hard to do, as we will see, if you use a tool called
    **Veil-Evasion**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何生成一个无法检测到的后门。后门只是一个文件，当它在目标计算机上执行时，会给我们提供完全访问权限。生成后门有多种方法，但我们感兴趣的是生成一个无法被杀毒软件检测到的后门。这实际上并不难，如我们将看到的，只要你使用一个叫做**Veil-Evasion**的工具。
- en: Veil-Evasion used to be a standalone tool, but its creators have recently combined
    it with other tools in the framework, re-releasing it as Veil-Framework. Nowadays,
    it is usually referred to as just Veil.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Veil-Evasion曾经是一个独立的工具，但它的创建者最近将其与框架中的其他工具结合在一起，重新发布为Veil-Framework。现在，它通常被称为Veil。
- en: Download the latest version of Veil, which is 3, from the following GitHub link: [https://github.com/Veil-Framework/Veil](https://github.com/Veil-Framework/Veil).
    If you are unfamiliar with GitHub, it is a version control system that allow programmers
    to post, share, and update source code. GitHub is used a lot when downloading
    programs. Veil's repository can either be downloaded via GitHub's link or by copying
    it to your terminal. Now, before we download it, we actually want to store it
    in the `/opt` directory, so we will be doing `cd` to navigate to a different directory,
    and we are going to put `/opt` to open a directory called `opt`. Now, this is
    where we will be storing your optional programs, hence the name `opt`, and if
    we do `ls` to list the available directories, we will see that we only have one
    directory for a program called `Teeth`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下GitHub链接下载Veil的最新版本，即版本3：[https://github.com/Veil-Framework/Veil](https://github.com/Veil-Framework/Veil)。如果您对GitHub不熟悉，它是一个版本控制系统，允许程序员发布、共享和更新源代码。在下载程序时经常使用GitHub。Veil的存储库可以通过GitHub的链接或将其复制到终端来下载。现在，在下载之前，我们实际上希望将其存储在`/opt`目录中，因此我们将执行`cd`以导航到另一个目录，并输入`/opt`来打开名为`opt`的目录。现在，这是我们将存储可选程序的位置，因此名称为`opt`，如果我们执行`ls`以列出可用目录，我们将看到我们只有一个名为`Teeth`的程序目录。
- en: 'Now, if we want to download `Veil`, we have to copy the repository link from
    GitHub and then go to our Terminal, to the location where we want to download
    it. So, first we change the directory to `/opt`, and then we are going to do `git
    clone`, and input the URL of the repository. The command is very simple, as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们想要下载`Veil`，我们必须从GitHub复制存储库链接，然后转到我们想要下载它的位置的终端。因此，首先我们改变目录到`/opt`，然后我们将执行`git
    clone`，并输入存储库的URL。命令非常简单，如下所示：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, we''re using the `clone` command to tell `git` that we want to clone
    or download this framework, program, or project, before sharing the link with
    Veil. To download the desired project, simply hit *Enter*, as shown in the following
    screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`clone`命令告诉`git`我们要克隆或下载这个框架、程序或项目，然后与Veil共享链接。要下载所需项目，只需按*Enter*，如下屏幕截图所示：
- en: '![](assets/efd1811b-252d-4293-9619-3abcf1a2b2c0.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/efd1811b-252d-4293-9619-3abcf1a2b2c0.png)'
- en: If we use the `ls `command to list our files, we should see a new directory
    called `Veil`. We're able to navigate to that directory by inputting `cd Veil/`.
    The `ls` command should list all the available files, including `Veil.py`, which
    we need to install. To do this, navigate to the `config` directory by inputting `cd
    config/`, and run the `setup.sh` bash script. This script will install Veil-Evasion.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用`ls `命令列出我们的文件，我们应该看到一个名为`Veil`的新目录。我们可以通过输入`cd Veil/`来导航到该目录。`ls`命令应列出所有可用文件，包括我们需要安装的`Veil.py`。为此，请导航到`config`目录，输入`cd
    config/`，并运行`setup.sh` bash脚本。此脚本将安装Veil-Evasion。
- en: 'To run an executable in Linux from the terminal, simply enter `./`, followed
    by the name of the executable, as shown as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Linux终端中运行可执行文件，只需输入`./`，然后输入可执行文件的名称，如下所示：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The previous command should generate the following result:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令应生成以下结果：
- en: '![](assets/9be3a4cf-4ee8-4d14-ae48-77c5185ee094.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9be3a4cf-4ee8-4d14-ae48-77c5185ee094.png)'
- en: As you can see in the previous screenshot, we're being asked if we want to install
    Veil, to which `yes`, we are. Note that the installation may take a while.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的屏幕截图中所看到的，我们被询问是否要安装Veil，对此我们回答`yes`。请注意，安装可能需要一些时间。
- en: Now, we first open the Terminal we are going to navigate to the `/opt` directory,
    because that's where we cloned `Veil`, and that was cloned in a directory called
    `Veil`. So, we're inputting `cd/opt/Veil/` to navigate to change the working directory,
    and we're going to the `/opt/Veil/` directory. Then we are going to launch, and
    are now inside the `Veil` directory. If we input the `ls` command, we will see
    we have the `Veil` executable. So, we can run any executable, like we said, by
    putting `./` followed by the name of the executable, which is `Veil.py`. We are
    going to launch it, leading to the welcome screen for `Veil`, as shown in the
    following screenshot, and now we can start using the tool. We'll cover the usage
    of this tool in the next chapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们打开终端，接着导航到`/opt`目录，因为我们在这个目录下克隆了`Veil`，并且它被克隆到了一个名为`Veil`的目录中。所以，我们输入`cd
    /opt/Veil/`来切换工作目录，并进入`/opt/Veil/`目录。然后我们将启动，并进入`Veil`目录。如果我们输入`ls`命令，我们会看到`Veil`可执行文件。因此，我们可以像之前说的那样运行任何可执行文件，只需输入`./`后跟可执行文件的名称，即`Veil.py`。我们将启动它，进入`Veil`的欢迎界面，正如下面的截图所示，现在我们可以开始使用这个工具了。我们将在下一章介绍该工具的使用。
- en: Payloads overview
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有效负载概述
- en: 'Now that Veil is installed, we can take a look at its commands. The commands
    are straightforward, with `exit` allowing us to exit the program, and `info` providing
    us with information about a specific tool.`list` will list the available tools, `update` will
    update Veil, and finally, `use` enables the use of any tool, as shown in the following
    screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Veil已安装完成，我们可以查看它的命令。命令非常简单，`exit`允许我们退出程序，`info`提供关于某个特定工具的信息。`list`会列出可用工具，`update`会更新Veil，最后，`use`启用任何工具，如下图所示：
- en: '![](assets/2929b2c8-2b98-4300-8505-c53b1b60bbad.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2929b2c8-2b98-4300-8505-c53b1b60bbad.png)'
- en: 'The `list` command displays Veil''s main commands, which are as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`list`命令显示了Veil的主要命令，如下所示：'
- en: '`Evasion`: This generates undetectable backdoors'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Evasion`：这个功能生成不可检测的后门。'
- en: '`Ordnance`: This generates the payloads used by `Evasion`; this is more of
    a secondary tool'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Ordnance`：这个功能生成`Evasion`使用的有效负载；它是一个辅助工具。'
- en: A payload is a part of the code, or of the backdoor, that does what we want
    it to. In this case, it gives us a reverse connection and downloads and executes
    something on a target computer.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有效负载是代码的一部分，或是后门的一部分，它完成我们想要的功能。在本例中，它为我们提供了一个反向连接，并下载并执行某些内容到目标计算机上。
- en: 'When Veil-Evasion has loaded, you should see something similar to the following
    screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当Veil-Evasion加载完成后，您应该看到类似下图的界面：
- en: '![](assets/75ac6cd6-334c-44ee-b7dd-f3b508e28754.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/75ac6cd6-334c-44ee-b7dd-f3b508e28754.png)'
- en: 'As you can see, Veil gives us a list of commands that can run on this tool.
    What we want here is to `list` all of the available payloads, of which there are
    41\. Each payload is divided into three parts, as shown in the following screenshot.
    We''ve highlighted the payload we''ll be using, `15) go/meterpreter/rev_https.py`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Veil为我们提供了一系列可以在该工具上运行的命令。我们在这里需要的是`list`所有可用的有效负载，共有41个。每个有效负载分为三个部分，如下图所示。我们已将我们将使用的有效负载高亮显示，即`15)
    go/meterpreter/rev_https.py`：
- en: '![](assets/35893cc8-ef41-4e8f-bf5b-a9f7b69c76b8.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/35893cc8-ef41-4e8f-bf5b-a9f7b69c76b8.png)'
- en: The first part of the payload's name is `cs`, which refers to the programming
    language the payload will be wrapped in. As you can see in the preceding screenshot,
    languages used include GO, C, CS, Python, PowerShell, and Ruby.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有效负载名称的第一部分是`cs`，这表示该有效负载将被封装在的编程语言。如前面的截图所示，使用的语言包括GO、C、CS、Python、PowerShell和Ruby。
- en: The second part of any payload is really important, as this is the type of payload;
    in other words, the type of code that's going to be executed on the target computer.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有效负载的第二部分非常重要，因为这是有效负载的类型；换句话说，它是将在目标计算机上执行的代码类型。
- en: In this example, we're using Meterpreter, which is a payload designed by Metasploit.
    Metasploit is a huge framework sometimes used for hacking. Meterpreter runs in
    memory, so is difficult to detect and doesn't leave a large footprint. Using Meterpreter,
    we can gain full control over a target computer, allowing us to navigate through
    the filesystem, turn on the webcam, install or download files, and much more.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们使用的是Meterpreter，它是Metasploit设计的有效负载。Metasploit是一个庞大的框架，有时用于黑客攻击。Meterpreter在内存中运行，因此难以检测，并且不会留下大规模的痕迹。使用Meterpreter，我们可以完全控制目标计算机，允许我们浏览文件系统、打开摄像头、安装或下载文件等。
- en: The third part of a payload's name is the method that's going to be used to
    establish its connection. In our example, that's `rev_https`. `rev`, which stands
    for reverse, and `https` is the protocol that will be used to establish the connection.
    There are also a few examples of `rev_tcp` in the preceding screenshot, which
    creates a reverse TCP connection.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有效载荷名称的第三部分是将用于建立连接的方法。在我们的示例中，这是`rev_https`。`rev`代表反向，`https`是将用于建立连接的协议。在前面的截图中，还有一些`rev_tcp`的示例，它创建一个反向TCP连接。
- en: A reverse connection is where the target computer connects to an attacker computer
    via a backdoor. This method bypasses antivirus programs because the connection
    is not directed at the target computer, but rather at the attacker instead. In
    our case, we are going to use a port that many websites use, `80` or `8080`, so
    the connection will appear as a harmless website connection. Reverse connections
    also work on hidden computers, making it one of the most practical methods of
    gaining access to a machine.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 反向连接是指目标计算机通过后门连接到攻击者计算机。该方法可以绕过杀毒程序，因为连接并不是直接指向目标计算机，而是指向攻击者计算机。在我们的例子中，我们将使用许多网站都使用的端口`80`或`8080`，因此该连接看起来像是一个无害的网站连接。反向连接也能在隐藏的计算机上工作，使其成为获取计算机访问权限的最实用方法之一。
- en: Some payloads don't follow the conventional naming pattern, such as `shellcode_inject`.
    This instead creates a normal payload that injects our other payload.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有些有效载荷不遵循常规的命名规则，例如`shellcode_inject`。它实际上创建了一个普通的有效载荷，将我们的其他有效载荷注入其中。
- en: Generating a Veil backdoor
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成Veil后门
- en: 'We''re now going to use Veil to generate a backdoor. First, we''ll run the `list` command.
    We''ll type the `use 1` command, as we want to use `Evasion` and press *Enter*,
    and, as we want to use the fifteenth payload, we''ll run the `use 15` command,
    as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用Veil生成一个后门。首先，我们运行`list`命令。我们输入`use 1`命令，因为我们想使用`Evasion`，然后按*Enter*键，并且因为我们想使用第十五个有效载荷，我们将运行`use
    15`命令，如下所示：
- en: '![](assets/b9f94c33-6922-4d9d-8bc7-f9e5a79950b0.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b9f94c33-6922-4d9d-8bc7-f9e5a79950b0.png)'
- en: Using the following options, we're going to change the payload's `IP LHOST`
    to the IP address of the Kali machine we're using.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下选项，我们将把有效载荷的`IP LHOST`更改为我们正在使用的Kali机器的IP地址。
- en: 'To get the IP address of our Kali machine, we have to run `ifconfig`. Split
    the screen by right-clicking and selecting Split Horizontally, and then run the
    command. As shown in the following screenshot, the Kali machine''s IP address
    is `10.0.2.15`, which is where we want the target computer''s connection to return
    to once the backdoor has been executed:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取我们Kali机器的IP地址，我们必须运行`ifconfig`。通过右键点击并选择“水平分屏”，然后运行命令。如下所示的截图中，Kali机器的IP地址是`10.0.2.15`，这是我们希望目标计算机在执行后门后连接回来的地址：
- en: '![](assets/685a1192-04c2-48a1-a75e-6aab054b0bff.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/685a1192-04c2-48a1-a75e-6aab054b0bff.png)'
- en: 'To set `LHOST` as `10.0.2.15`, write the `set` command followed by the option
    you want to change, as shown as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`LHOST`设置为`10.0.2.15`，请输入`set`命令后跟要更改的选项，如下所示：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We now need to change `LPORT` so that it''s set to `8080`. This port is also
    used by web servers, so will not appear suspicious and should still bypass firewalls.
    To set the correct port, input the `set LPORT 8080` command, as shown in the following
    screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要更改`LPORT`，将其设置为`8080`。这个端口也被Web服务器使用，因此不会显得可疑，且应该仍能绕过防火墙。要设置正确的端口，请输入`set
    LPORT 8080`命令，如下所示的截图所示：
- en: '![](assets/1f240c08-5699-4f15-905e-950a1e37ee36.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1f240c08-5699-4f15-905e-950a1e37ee36.png)'
- en: This process will bypass every antivirus program except AVG, according to experience.
    Antivirus programs work using a large database of signatures. These signatures
    correspond to files that contain harmful code, so if our file matches any value
    in a database, it will be flagged as a virus or as malware. Because of this, we
    need to make sure that our backdoor is as unique as possible so it can bypass
    every piece of antivirus software. Veil works hard by encrypting the backdoor,
    obfuscating it, and injecting it in memory so that it doesn't get detected, but
    this doesn't wash with AVG.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 根据经验，这个过程将绕过除AVG外的所有杀毒程序。杀毒程序使用一个庞大的签名数据库来工作。这些签名对应包含有害代码的文件，所以如果我们的文件与数据库中的任何值匹配，它将被标记为病毒或恶意软件。因此，我们需要确保我们的后门尽可能独特，以便能够绕过每一款杀毒软件。Veil通过加密后门、混淆代码并将其注入内存中来尽量避免被检测到，但这对于AVG并不奏效。
- en: 'To ensure our backdoor can bypass AVG, we need to modify the minimum number
    of processors used by it—in this case, `1`. To do this, use the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们的后门能够绕过AVG防病毒程序，我们需要修改它使用的最小处理器数量——在这种情况下是`1`。为此，请使用以下命令：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will also modify the `SLEEP` option, which is the number of seconds a backdoor
    will wait before it executes the payload. To tell your backdoor to wait `6` seconds,
    use the following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将修改`SLEEP`选项，这是后门执行有效负载之前等待的秒数。为了让后门等待`6`秒，请使用以下命令：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'These changes are reflected in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改反映在以下截图中：
- en: '![](assets/4eab1916-69b4-428e-85bf-a3a1dd4bab23.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4eab1916-69b4-428e-85bf-a3a1dd4bab23.png)'
- en: 'We are now going to generate the backdoor using the `generate` command, as
    shown as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`generate`命令生成后门，如下所示：
- en: '![](assets/6230abe1-fa3c-46ec-98a9-35f6c24178bb.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6230abe1-fa3c-46ec-98a9-35f6c24178bb.png)'
- en: 'We now need to name our backdoor. Here, we''re going to name it `rev_https_8080`.
    The following screenshot illustrates what we see once a backdoor is generated;
    this includes the module used by the backdoor, and where it''s stored:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要为后门命名。在这里，我们将其命名为`rev_https_8080`。以下截图展示了生成后门后的情况，包括后门使用的模块和它存储的位置：
- en: '![](assets/a36895fe-b6d2-428c-8767-5d4644d13808.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a36895fe-b6d2-428c-8767-5d4644d13808.png)'
- en: 'To test our backdoor, we''re going to bypass Veil''s `checkvt` command, which
    is not always accurate, and VirusTotal, which shares its results with antivirus
    software, and instead opt for the website NoDistribute, as shown in the following
    screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的后门，我们将绕过Veil的`checkvt`命令（它并不总是准确的）和与防病毒软件共享结果的VirusTotal，而选择使用NoDistribute网站，如下图所示：
- en: '![](assets/0c66326c-5b1f-4e63-9f07-58d63e03211e.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0c66326c-5b1f-4e63-9f07-58d63e03211e.png)'
- en: 'Now, click on Browse... and navigate to your file at `/usr/share/veil-output/compiled`,
    as shown as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击**浏览...**，并导航到你的文件所在路径`/usr/share/veil-output/compiled`，如下所示：
- en: '![](assets/510a5977-dac3-4824-a8db-a77ee8db5def.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/510a5977-dac3-4824-a8db-a77ee8db5def.png)'
- en: 'Once we have clicked Scan File, or View Previous Results, we can see that the
    file we uploaded has successfully bypassed *all* antivirus programs, as shown
    in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们点击了**扫描文件**或**查看上次结果**，就可以看到我们上传的文件成功绕过了*所有*的防病毒程序，如下图所示：
- en: '![](assets/07b1c784-48cc-4fcd-a2f8-c9319cc7984d.png)Files uploaded bypassed
    by the antivirus'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/07b1c784-48cc-4fcd-a2f8-c9319cc7984d.png)文件上传绕过了防病毒程序'
- en: Remember that Veil will work best when its kept up to date with the latest version.
    It's also worth noting that whether a backdoor goes undetected or not is often
    arbitrary—one backdoor we previously generated with no sleep setting was detected
    by antivirus software, as was one with a sleep time of 10 seconds. A backdoor
    set with a sleep time of 6 seconds, however, bypassed every program.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Veil在更新到最新版本时效果最佳。同样值得注意的是，后门是否能被检测到往往是偶然的——我们之前生成的一个没有设置休眠时间的后门被防病毒软件检测到了，另一个休眠时间为10秒的后门也被检测到。然而，设置了6秒休眠时间的后门却成功绕过了所有程序。
- en: We recommend playing around with all the available options within a payload
    to find something that works for you.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议尝试使用有效负载中的所有可用选项，找到适合你的方式。
- en: Listening for connections
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听连接
- en: As you'll know, the backdoor we created uses a reverse payload. For the reverse
    payload to work, we need to open a port in our computer so that the target machine
    can connect to it. When we created the backdoor, we set the port to `8080`, so
    we need to open that port on our Kali machine. Remember, the name of our chosen
    payload is `meterpreter/rev_https` in this example.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，我们创建的后门使用的是反向有效负载。为了使反向有效负载正常工作，我们需要在我们的计算机上打开一个端口，以便目标机器能够连接到它。当我们创建后门时，我们将端口设置为`8080`，因此我们需要在我们的Kali机器上打开该端口。记住，在此示例中，我们选择的有效负载名称是`meterpreter/rev_https`。
- en: 'We are now going to split our screens, as before, and listen for incoming connections
    using the Metasploit framework. To run Metasploit, use the `msfconsole` command,
    which should generate output similar to the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将像之前一样分屏，并使用Metasploit框架监听传入连接。要运行Metasploit，请使用`msfconsole`命令，输出结果应类似于以下截图：
- en: '![](assets/0b5a5add-062d-46ac-ba3f-905e5e7dcf2c.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0b5a5add-062d-46ac-ba3f-905e5e7dcf2c.png)'
- en: 'To listen for incoming connections, we need to use a module in Metasploit: `exploit/multi/handler`.
    To launch that module, use the following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了监听传入连接，我们需要使用Metasploit中的一个模块：`exploit/multi/handler`。要启动该模块，请使用以下命令：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once launched, navigate to the `exploit/multi/handler` module. The most important
    thing that you want to specify in this module is the payload, which we do with
    the `set` command. To set the payload as `windows/meterpreter/reverse_https`,
    use the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 启动后，导航到`exploit/multi/handler`模块。你需要在这个模块中指定的最重要的内容是有效载荷，使用`set`命令进行设置。要将有效载荷设置为`windows/meterpreter/reverse_https`，请使用以下命令：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we run the `show options` command now, we should see that the payload has
    changed to `windows/meterpreter/reverse_https`, as shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行`show options`命令，我们应该会看到有效载荷已更改为`windows/meterpreter/reverse_https`，如下图所示：
- en: '![](assets/e8022dd5-6fa6-41eb-8199-8a449c9d3cae.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e8022dd5-6fa6-41eb-8199-8a449c9d3cae.png)'
- en: 'Setting the `LHOST` to the IP address of our Kali machine is a similar process,
    and can be done using the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将`LHOST`设置为我们的Kali机器的IP地址是一个类似的过程，可以使用以下命令完成：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Before you go any further, make sure that your payload, host, and port are
    set correctly with the same values as those generated with the backdoor originally,
    as shown as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请确保您的有效载荷、主机和端口设置正确，并且与最初生成后门时的值一致，如下所示：
- en: '![](assets/ecd0361c-5b12-4b1b-badb-2c5ffdc79d70.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ecd0361c-5b12-4b1b-badb-2c5ffdc79d70.png)'
- en: 'All we need to do now is execute the `exploit` command. Now, Metasploit is
    waiting for connections, as we can see in the following screenshot, on port `8080` and
    on our IP address, which is `10.0.2.15`. Once a connection is established, we
    will be able to control the target computer:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要执行`exploit`命令。现在，Metasploit正在等待连接，正如我们在以下截图中所看到的，连接是在`8080`端口，并且我们的IP地址是`10.0.2.15`。一旦建立了连接，我们就能控制目标计算机：
- en: '![](assets/0f543583-1d32-420d-a79e-3ce21c144f41.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0f543583-1d32-420d-a79e-3ce21c144f41.png)'
- en: Testing the backdoor
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试后门
- en: To test that our backdoor is working as expected, we're going to put it on our
    web server and download it from the target computer. We don't recommend this approach
    for anything other than testing your backdoor.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的后门是否按预期工作，我们将把它放到我们的Web服务器上，并从目标计算机下载它。我们不建议将这种方式用于测试以外的任何操作。
- en: 'As Kali can be used as a website, we''re going to put our backdoor online and
    download it from the target Windows machine. We''re going to keep this download
    in one place, a folder called `evil-files`, as shown in the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Kali可以用作网站，我们将把后门上传到网上，并从目标Windows机器下载它。我们将把这个下载文件保存在一个地方，一个名为`evil-files`的文件夹中，如下图所示：
- en: '![](assets/b1ae3bd9-01d2-439a-9738-6373b34acf98.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b1ae3bd9-01d2-439a-9738-6373b34acf98.png)'
- en: Now, the backdoor we created using Veil-Evasion, which was stored in `var/lib/veil-evasion/output/compiled/`,
    needs to be copied and pasted into the `evil-files` directory. And that's it!
    We can download the file from Kali.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们使用Veil-Evasion创建的后门，存储在`var/lib/veil-evasion/output/compiled/`中，需要复制并粘贴到`evil-files`目录中。就这样！我们可以从Kali下载文件。
- en: 'To start the web server and website, input the following command in the terminal:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动Web服务器和网站，请在终端中输入以下命令：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, the command is `service`, and `apache2` is the name of the web server.
    Hitting *Enter* will execute the previous command.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，命令是`service`，而`apache2`是网页服务器的名称。按下*Enter*键将执行之前的命令。
- en: 'We now need to navigate to our Kali machine''s IP address, `10.0.2.15`. This
    should open the basic `index.html` file that we created that tells us our web
    server is working, as shown as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要导航到Kali机器的IP地址`10.0.2.15`。这应该会打开我们创建的基本`index.html`文件，告诉我们我们的Web服务器正在正常工作，如下所示：
- en: '![](assets/552adfbf-2061-466b-83a2-694daad2c6fb.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/552adfbf-2061-466b-83a2-694daad2c6fb.png)'
- en: 'To go to the directory containing the backdoor, go to `10.0.2.15/evil-files`
    and hit *Enter*. We can then download and run the backdoor, as shown in the following
    screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要进入包含后门的目录，前往`10.0.2.15/evil-files`并按*Enter*。然后我们可以下载并运行后门，如下图所示：
- en: '![](assets/cd0475b9-8a25-4157-8130-a59990b19566.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cd0475b9-8a25-4157-8130-a59990b19566.png)'
- en: 'Now that we have run the backdoor on the Windows machine, our Kali machine
    will tell us that we have received a connection from the target computer, as shown
    in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在Windows机器上运行了后门，我们的Kali机器会告诉我们已经从目标计算机接收到连接，如下图所示：
- en: '![](assets/6bbc3bf2-4c5b-4921-ad40-9962730c8beb.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6bbc3bf2-4c5b-4921-ad40-9962730c8beb.png)'
- en: This means that we now have full control over that computer. In the preceding
    screenshot, we can see that we have a Meterpreter session, which allows us to
    do anything that the rightful user of that computer can do.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们现在完全控制了那台计算机。在前面的截图中，我们可以看到我们有一个Meterpreter会话，这允许我们做任何该计算机合法用户可以做的事情。
- en: 'To check that the backdoor is working correctly, use the `sysinfo` command.
    You should see that you''re inside the `MSEDGEWIN10` machine, which runs `Windows
    10 (Build 17134)`, has a `x64` architecture, uses the `en_US` language, and Meterpreter
    x86 for Windows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查后门是否正常工作，请使用`sysinfo`命令。你应该能看到你已经进入了`MSEDGEWIN10`机器，该机器运行的是`Windows 10 (Build
    17134)`，具有`x64`架构，使用`en_US`语言，并且运行的是Meterpreter x86版本。
- en: '![](assets/afabd500-f645-46c9-8f33-444c79956bb1.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/afabd500-f645-46c9-8f33-444c79956bb1.png)'
- en: We've now essentially hacked our target computer. Nice work!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在基本上已经黑进了目标计算机。干得不错！
- en: Fake bdm1 updates
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 假冒的bdm1更新
- en: Although we have an undetectable backdoor, we still haven't found a smart and
    efficient way to deliver it to the target machine. In real life, a target probably
    won't download an executable and run it if we ask them to, so we're now going
    to look at how to fake an update that the user will want to download and install
    on their machine.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们已经有了一个不可检测的后门，但我们仍然没有找到一种聪明且高效的方式将其传送到目标机器。在现实生活中，如果我们要求目标下载并运行一个可执行文件，他们可能不会这么做。因此，我们现在将研究如何伪造一个用户愿意下载并安装到他们机器上的更新。
- en: This scenario will work as long as we are in the middle of a connection, for
    example, when using a fake network, when implementing a man-in-the-middle attack,
    or when redirecting traffic via a mobile phone.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况会在我们处于连接中时有效，例如，当使用虚假网络、实施中间人攻击或通过手机重定向流量时。
- en: 'In this scetion, we are going to cover DNS spoofing with ARP poisoning. This
    will mean we''re in the same network as the target machine, which in this example
    is wired and not wireless. We''ll use a tool called Evilgrade to act as a server
    to produce the fake update. You can install Evilgrade at the following link:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍使用ARP欺骗的DNS欺骗。这意味着我们与目标机器在同一网络中，在本示例中目标机器是有线网络而非无线网络。我们将使用一个名为Evilgrade的工具，作为服务器来生成假冒更新。你可以通过以下链接安装Evilgrade：
- en: '[https://github.com/PacktPublishing/Fundamentals-of-Ethical-Hacking-from-Scratch](https://github.com/PacktPublishing/Fundamentals-of-Ethical-Hacking-from-Scratch).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Fundamentals-of-Ethical-Hacking-from-Scratch](https://github.com/PacktPublishing/Fundamentals-of-Ethical-Hacking-from-Scratch)。'
- en: 'After you have downloaded and run the `evilgrade` command, run the `show modules`
    command to see a list of the programs we can hijack updates for, as shown in the
    following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并运行`evilgrade`命令后，运行`show modules`命令查看我们可以劫持更新的程序列表，如下图所示：
- en: '![](assets/5d8538ed-01a4-424f-b634-64a48974fbe5.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5d8538ed-01a4-424f-b634-64a48974fbe5.png)'
- en: As you can see, there are 67 programs that we can hijack updates from, including
    some popular ones such as Google Analytics, Nokia, Safari, and Download Accelerator
    Plus, which is what we will use for this example.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，有67个程序我们可以劫持更新，其中包括一些流行的程序，如Google Analytics、诺基亚、Safari和Download Accelerator
    Plus，而我们将使用后者作为本示例。
- en: 'Run the `configure dap` command to use the DAP module. Then, use the `show
    options` command to see all of the available configurable options, as shown in
    the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`configure dap`命令以使用DAP模块。然后，使用`show options`命令查看所有可配置的选项，如下图所示：
- en: '![](assets/b1c54b47-5089-4f15-9e13-206b130dc93b.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b1c54b47-5089-4f15-9e13-206b130dc93b.png)'
- en: The main option we will focus on is `agent`, so we need to replace the `./agent/agent.exe` path
    with the program path that will be installed as the update. In our case, we want
    to install a backdoor as the update.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注的主要选项是`agent`，因此我们需要将`./agent/agent.exe`路径替换为将作为更新安装的程序路径。在我们的案例中，我们希望将后门作为更新进行安装。
- en: The previous backdoor in the *Generating a Veil backdoor *section that we created
    uses a `reverse_https` payload, which does not work with DAP. Instead, we will
    be using a different backdoor named `backdoor.exe` that uses a `reverse_http`
    payload. To create such a backdoor, please refer to the steps in the *Generating
    a Veil backdoor *section.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在*生成Veil后门*部分，我们创建的后门使用的是`reverse_https`有效载荷，但这种载荷与DAP不兼容。因此，我们将使用一个名为`backdoor.exe`的后门，它使用`reverse_http`有效载荷。要创建这种后门，请参照*生成Veil后门*部分中的步骤。
- en: 'To change the `agent` so that it executes our backdoor instead of an update,
    use the following command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改`agent`，使其执行我们的后门而不是更新，请使用以下命令：
- en: '[PRE9]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Replace the path in the command to the path where the `reverse_http` backdoor
    is placed. Now, run the `show options` command again to check that it has been
    configured correctly, as shown in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 将命令中的路径替换为 `reverse_http` 后门所在的路径。现在，再次运行 `show options` 命令，检查它是否已正确配置，如下图所示：
- en: '![](assets/270c7b11-597e-4520-b80e-cb1a6d18405c.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/270c7b11-597e-4520-b80e-cb1a6d18405c.png)'
- en: We can also set any other options that we want in here the same way; we just
    input the `set option` name followed by the `option` value. One `option` that
    you might want to set is the `endsite`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以按照相同的方式设置其他任何选项；我们只需要输入 `set option` 名称，后面跟上 `option` 值。你可能想设置的一个 `option`
    是 `endsite`。
- en: Now, in the future, maybe this website is not going to work, so if it displays
    an error on the target computer, we can change this website to any website that
    you want; you can just change it to `update.speedbit.com`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，未来可能这个网站会无法使用，所以如果它在目标计算机上显示错误，我们可以将这个网站更改为任何你想要的网站；你可以直接将其更改为 `update.speedbit.com`。
- en: 'When everything is ready, start the server by running the `start` command,
    as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当一切准备就绪时，通过运行 `start` 命令启动服务器，如下所示：
- en: '![](assets/e7561bee-bec5-4a5f-b4e5-5d19184a488f.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e7561bee-bec5-4a5f-b4e5-5d19184a488f.png)'
- en: Now, any time Evilgrade gets an update request, it will tell whoever is requesting
    an update that there is an update—our backdoor. To do this, we need to redirect
    any request for `update.speedbit.com` to Evilgrade.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当 Evilgrade 收到更新请求时，它会告诉任何请求更新的人有更新——我们的后门。为了实现这一点，我们需要将所有对 `update.speedbit.com`
    的请求重定向到 Evilgrade。
- en: We can do this switch with a DNS spoofing attack, spoofing any requests from
    `update.speedbit.com` to Evilgrade (and our own IP address).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 DNS 欺骗攻击来实现这个切换，将所有从 `update.speedbit.com` 的请求伪装成指向 Evilgrade（和我们的 IP
    地址）。
- en: 'Open the `mitmf.conf` file using Leafpad with the `leafpad /etc/mitmf/mitmf.conf`
    command, and change the port for the DNS server to `5353` to avoid conflict with
    Evilgrade, as shown in the following screenshot:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `leafpad /etc/mitmf/mitmf.conf` 命令打开 `mitmf.conf` 文件，并将 DNS 服务器的端口更改为 `5353`，以避免与
    Evilgrade 冲突，如以下截图所示：
- en: '![](assets/fe44f854-20e4-42f0-9acd-24320147e289.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fe44f854-20e4-42f0-9acd-24320147e289.png)'
- en: If we take a look at our `A` records, we will see that we are now redirecting
    any requests to `update.speedbit.com` to our own IP address, `10.0.2.15`, which
    Evilgrade is running on.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看我们的 `A` 记录，我们会看到现在我们已经将所有对 `update.speedbit.com` 的请求重定向到我们的 IP 地址 `10.0.2.15`，Evilgrade
    就运行在这个 IP 上。
- en: 'All we have to do now is run a MITMf with the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要做的就是运行 MITMf，使用以下命令：
- en: '[PRE10]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Hit *Enter* and you''re done! The DNS spoofing is complete. Now that Evilgrade
    is running, our backdoor can be downloaded and executed from `update.speedbit.com`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 *Enter* 键，完成了！DNS 欺骗已完成。现在 Evilgrade 正在运行，我们的后门可以从 `update.speedbit.com`
    下载并执行：
- en: '![](assets/aca8dd54-a54f-40ba-9aa7-171ec1904868.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aca8dd54-a54f-40ba-9aa7-171ec1904868.png)'
- en: 'To listen for connections, change the options on the `msfconsole` Terminal
    by using the `exploit/multi/handler` module, setting the payload to `windows/meterpreter/reverse_http`,
    setting `LHOST` to `10.0.2.15`, which is our Kali machine IP, and `LPORT` to `8080`,
    as shown in the following screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了监听连接，在 `msfconsole` 终端上通过使用 `exploit/multi/handler` 模块更改选项，将有效负载设置为 `windows/meterpreter/reverse_http`，将
    `LHOST` 设置为 `10.0.2.15`（这是我们 Kali 机器的 IP），将 `LPORT` 设置为 `8080`，如以下截图所示：
- en: '![](assets/a7f8622a-1ba6-4dc9-adb1-e9474cb483f3.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a7f8622a-1ba6-4dc9-adb1-e9474cb483f3.png)'
- en: To reiterate, the target program is going to check for updates using `update.speedbit.com`,
    which will redirect to the IP address where Evilgrade is running thanks to MITMf.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，目标程序将使用 `update.speedbit.com` 检查更新，这个网址将通过 MITMf 重定向到 Evilgrade 运行的 IP
    地址。
- en: 'We now need to check for DAP updates on the target computer, which, in our
    case, is a Windows machine; a dialog should tell us that a Critical update is
    required when we try to update the DAP application, as shown in the following
    screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在目标计算机上检查 DAP 更新，在我们的例子中是 Windows 计算机；当我们尝试更新 DAP 应用程序时，应该会弹出一个对话框，告诉我们需要进行关键更新，如下图所示：
- en: '![](assets/fc336133-ed7f-45ce-8d83-ab0bf21c2b29.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fc336133-ed7f-45ce-8d83-ab0bf21c2b29.png)'
- en: 'Once the update has been downloaded and installed, running the `sysinfo` command
    on the Meterpreter Terminal session on our Kali machine, we should confirm that
    we have control over the target computer by running the `sysinfo` command, as
    shown in the following screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦更新下载并安装完成，在我们Kali机器上的Meterpreter终端会话中运行`sysinfo`命令，我们应该通过运行`sysinfo`命令来确认我们已经控制了目标计算机，如下图所示：
- en: '![](assets/acb97873-8b82-49bc-b63e-fb3be7c33f04.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/acb97873-8b82-49bc-b63e-fb3be7c33f04.png)'
- en: Client-side attacks using the bdm2 BDFProxy
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用bdm2 BDFProxy进行客户端攻击
- en: 'In this section, we''re going to look at another backdoor delivery method:
    running our backdoor via an active download. In other words, a user will download
    and install a program that will run as expected, but with our payload, or backdoor,
    running in the background. This is possible using a tool called **Backdoor Factory
    Proxy**. This also requires a man-in-the-middle access method, such as ARP poisoning.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将探讨另一种后门投递方法：通过主动下载来运行我们的后门。换句话说，用户将下载并安装一个程序，这个程序会按预期运行，但我们的有效载荷或后门会在后台运行。这可以通过一个叫做**Backdoor
    Factory Proxy**的工具实现。这也需要一个中间人攻击方法，比如ARP欺骗。
- en: 'For this example, we''ll go with ARP poisoning so that all traffic will be
    redirected through our own computer. First, we need to modify the configuration
    of the `bdfproxy.cfg` file with the following command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我们选择使用ARP欺骗，这样所有流量将会被重定向到我们的计算机。首先，我们需要通过以下命令修改`bdfproxy.cfg`文件的配置：
- en: '[PRE11]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We will now do two things. First, set the `proxyMode` parameter to `transparent`,
    as shown in the following screenshot:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将做两件事。首先，将`proxyMode`参数设置为`transparent`，如下图所示：
- en: '![](assets/eb788532-b488-445e-92f3-0a81375a58ce.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eb788532-b488-445e-92f3-0a81375a58ce.png)'
- en: 'Second, change the `HOST` parameter to your Kali machine''s IP address, as
    shown in the following screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，修改`HOST`参数为你的Kali机器的IP地址，如下图所示：
- en: '![](assets/bc3a500b-a845-4bb6-b848-bf7c748dad46.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bc3a500b-a845-4bb6-b848-bf7c748dad46.png)'
- en: 'The proxy, which works across all operating systems, uses an executable download
    that will also contain the backdoor. For it to work, all we need to do is set
    our IP address, `10.0.2.15`, and then start the proxy by typing `bdfproxy` and
    hitting *Enter*, as shown in the following screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代理适用于所有操作系统，它使用一个可执行文件下载，并且该文件也会包含后门。为了使其正常工作，我们只需设置我们的IP地址`10.0.2.15`，然后通过输入`bdfproxy`并按*Enter*键启动代理，如下图所示：
- en: '![](assets/7e24b0cc-6fee-4159-98b7-58afe40d19f1.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7e24b0cc-6fee-4159-98b7-58afe40d19f1.png)'
- en: '`bdfproxy_msf_resource.rc` is a file that we can use to listen for incoming
    connections. First, we need to ensure the proxy is running on port `8080`, and
    that anything that comes from port `80` is redirected to `8080`. This is done
    using the following command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`bdfproxy_msf_resource.rc`是一个可以用来监听传入连接的文件。首先，我们需要确保代理运行在端口`8080`上，并且将来自端口`80`的所有流量重定向到`8080`。这可以通过以下命令完成：'
- en: '[PRE12]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To perform basic ARP poisoning, we need to run MITMf and use the basic command, `mitmf
    --arp --spoof`, which should include the `--gateway`, our `--target`, and our
    interface `-i`, as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行基本的ARP欺骗，我们需要运行MITMf并使用基本命令`mitmf --arp --spoof`，该命令应包括`--gateway`，我们的`--target`，以及接口`-i`，如下所示：
- en: '[PRE13]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After hitting *Enter*, all we need to do is listen for incoming connections
    using Backdoor Factory Proxy''s resource file, using the following command:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*Enter*后，我们需要做的就是通过Backdoor Factory Proxy的资源文件监听传入连接，使用以下命令：
- en: '[PRE14]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: After hitting *Enter*, all we have to do is wait for that to load all the possible
    payloads that can be used. So, now let's analyze it quickly. The target person
    is going to download a program that they actually want, we are the man-in-the-middle
    and, because we're doing ARP poisoning, everything is going to be flowing through
    our device. We have Backdoor Factory Proxy running, so whenever an executable
    is downloaded, Backdoor Factory Proxy is going to backdoor that executable on
    the fly; therefore, when the target person runs it, they will get the program
    that they're expecting, but, at the same time, our backdoor is going to run in
    the background and we're going to get a shell because we're listening for ports.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*Enter*后，我们需要做的就是等待它加载所有可以使用的有效载荷。现在，让我们快速分析一下。目标用户将下载一个他们实际需要的程序，我们是中间人，由于我们在进行ARP欺骗，所有流量都会通过我们的设备。我们已经运行了Backdoor
    Factory Proxy，所以每当下载一个可执行文件时，Backdoor Factory Proxy会即时给这个可执行文件添加后门；因此，当目标用户运行这个程序时，他们会得到他们期待的程序，但与此同时，我们的后门也会在后台运行，而我们将通过监听端口来获取一个Shell。
- en: 'So, we are going to go to our target look for DAP, the same program that we
    hijacked, and we are going to download it from their official website. We are
    then going to go to their free download, and then save the file. And, just before
    we download it, if we look at the Terminal as shown in the following screenshot,
    we can see that the file has been patched in here by the Backdoor Factory Proxy:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们将去我们的目标计算机，寻找 DAP，就是我们之前劫持的那个程序，然后从它们的官方网站下载。接着，我们将进入它们的免费下载页面，并保存文件。在下载之前，如果我们查看如下截图所示的终端，我们可以看到该文件已经被后门工厂代理修补：
- en: '![](assets/2aeff425-f2c5-4cad-9572-4ffd57772b62.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2aeff425-f2c5-4cad-9572-4ffd57772b62.png)'
- en: 'Once we have downloaded DAP''s update, we will go to Downloads and run the
    file. It will look like a normal installer, but if we return to Meterpreter, we
    can see that the download has secured a connection from the target computer that
    can be interacted with using the `sessions -i 1`, as shown in the following screenshot:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们下载了 DAP 的更新，我们将前往“下载”目录并运行该文件。它看起来像一个普通的安装程序，但如果我们返回到 Meterpreter，我们可以看到该下载已经从目标计算机建立了连接，可以通过
    `sessions -i 1` 进行交互，如下图所示：
- en: '![](assets/26444c47-4a08-487e-9833-9768f661db51.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/26444c47-4a08-487e-9833-9768f661db51.png)'
- en: Running the `sysinfo` command will confirm that we are inside the Windows machine,
    and have full control of it thanks to our backdoor running in the background.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`sysinfo`命令将确认我们已经进入 Windows 机器，并且由于后门在后台运行，我们可以完全控制该机器。
- en: Protection against delivery methods
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防护交付方式
- en: In this section, we're going to explore how to protect yourself from delivery
    methods. To prevent a man-in-the-middle attack, use tools such as XArp, or static
    ARP tables, and avoid networks you don't know or trust. Another precaution is
    to ensure you're using HTTPS when downloading updates. This will reduce your risk
    of downloading a fake update.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何防护交付方式。为了防止中间人攻击，可以使用 XArp 等工具，或者使用静态 ARP 表，并避免连接未知或不信任的网络。另一个预防措施是确保在下载更新时使用
    HTTPS，这样可以降低下载虚假更新的风险。
- en: 'Another tool that is useful is WinMD5\. This program will alert you when a
    file''s signature or checksum has been modified in any way, which indicates that
    a file may have been tampered with, or is not the original file. To check, download
    and run WinMD5, where you can compare signatures and checksums for a file. If
    the values are the same, the file is safe, as shown in the following screenshot:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的工具是 WinMD5。该程序会在文件的签名或校验和被修改时发出警报，这表明文件可能被篡改，或者不是原始文件。要进行检查，下载并运行 WinMD5，然后可以比较文件的签名和校验和。如果这些值相同，则文件是安全的，如下图所示：
- en: '![](assets/c6b31a9e-d2dc-4f98-aa59-34dca05b246c.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c6b31a9e-d2dc-4f98-aa59-34dca05b246c.png)'
- en: MD5 checksum value generated
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 MD5 校验和值
- en: Summary
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter focused on client-side attacks. First, we installed a tool called
    Veil, which we use to exploit backdoors, through which we can gain access to a
    user's system. We then looked at payloads, before generating our own and testing
    it against antivirus programs. We also learned how to create a backdoor Meterpreter
    that was used to control a target computer without being detected by antivirus
    software. We concluded by looking at delivery methods, as well as how to protect
    systems from such attacks.The next chapter we are going to focus on using the
    social engineering to launch attacks on the client
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点讨论了客户端攻击。首先，我们安装了一个名为 Veil 的工具，利用它来利用后门，通过后门我们可以访问用户的系统。接着，我们研究了有效载荷，并生成了自己的有效载荷，对抗杀毒程序进行测试。我们还学习了如何创建一个后门
    Meterpreter，用于控制目标计算机，同时不被杀毒软件检测到。最后，我们探讨了交付方式，以及如何保护系统免受此类攻击。下一章将重点讨论如何利用社会工程学对客户端发起攻击。
