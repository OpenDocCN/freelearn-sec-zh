- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Assessing Session Management Mechanisms
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估会话管理机制
- en: This chapter covers techniques used to bypass and assess session management
    schemes. Session management schemes are used by applications to keep track of
    user activity, usually by means of session tokens. Web assessments of session
    management also involve determining the strength of the session tokens used and
    whether those tokens are properly protected. We will learn how to use Burp Suite
    to perform such tests.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了用于绕过和评估会话管理方案的技术。会话管理方案用于应用程序跟踪用户活动，通常通过会话令牌实现。Web评估会话管理还涉及确定所用会话令牌的强度以及这些令牌是否得到了适当保护。我们将学习如何使用Burp
    Suite执行这些测试。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下实验：
- en: Testing session token strength using Sequencer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Sequencer测试会话令牌强度
- en: Testing for cookie attributes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试Cookie属性
- en: Testing for session fixation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试会话固定
- en: Testing for exposed session variables
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试暴露的会话变量
- en: Testing for cross-site request forgery
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试跨站请求伪造
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete the recipes in this chapter, you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章的实验，你需要以下工具：
- en: An OWASP **Broken Web Applications** (**BWA**) VM
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个OWASP**破损网页应用**（**BWA**）虚拟机
- en: OWASP Mutillidae link
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP Mutillidae链接
- en: Burp Suite Proxy Community or Professional ([https://portswigger.net/burp/](https://portswigger.net/burp/))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp Suite Proxy社区版或专业版（[https://portswigger.net/burp/](https://portswigger.net/burp/)）
- en: A Firefox browser or Burp Suite browser configured to allow Burp Suite to proxy
    traffic ([https://www.mozilla.org/en-US/firefox/new/](https://www.mozilla.org/en-US/firefox/new/))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个已配置的Firefox浏览器或Burp Suite浏览器，允许Burp Suite代理流量（[https://www.mozilla.org/en-US/firefox/new/](https://www.mozilla.org/en-US/firefox/new/)）
- en: Testing session token strength using Sequencer
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sequencer测试会话令牌强度
- en: To track user activity from page to page within an application, developers create
    and assign unique session token values to each user. Most session token mechanisms
    include session IDs, hidden form fields, or cookies. Cookies are placed within
    the user’s browser on the client side.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在应用程序内跟踪用户的活动，开发者为每个用户创建并分配独特的会话令牌值。大多数会话令牌机制包括会话ID、隐藏表单字段或Cookie。Cookie会被放置在用户浏览器的客户端。
- en: These session tokens should be examined by a penetration tester to ensure their
    uniqueness, randomness, and cryptographic strength, to prevent information leakage.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些会话令牌应由渗透测试人员检查，以确保其独特性、随机性和加密强度，以防止信息泄漏。
- en: If a session token value is easily guessable or remains unchanged after login,
    an attacker could apply (or fixate) a pre-known token value to a user. This is
    known as a **session fixation attack**. The purpose of the attack is to harvest
    sensitive data in the user’s account, since the session token is known to the
    attacker.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果会话令牌的值容易猜测，或在登录后保持不变，攻击者可能会将一个预先已知的令牌值应用（或固定）到某个用户上。这就是**会话固定攻击**。攻击的目的是窃取用户账户中的敏感数据，因为会话令牌已为攻击者所知。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We’ll check the session tokens used in OWASP Mutillidae II to ensure they are
    created in a secure and unpredictable way. An attacker who is able to predict
    and forge a weak session token can perform session fixation attacks.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将检查OWASP Mutillidae II中使用的会话令牌，确保它们以安全且不可预测的方式创建。攻击者如果能够预测并伪造一个弱会话令牌，可能会执行会话固定攻击。
- en: Ensure Burp Suite and the OWASP BWA VM are running and that Burp Suite is configured
    in the Firefox browser used to view OWASP BWA applications, or use Burp Suite’s
    built-in browser.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 确保Burp Suite和OWASP BWA虚拟机已启动，并且Burp Suite已在用于查看OWASP BWA应用程序的Firefox浏览器中配置，或使用Burp
    Suite内置的浏览器。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: From the **OWASP BWA** landing page, click the link to the OWASP Mutillidae
    II application.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**OWASP BWA**登陆页面，点击链接访问OWASP Mutillidae II应用程序。
- en: 'Open the Firefox browser or Burp Suite browser to access the home page of OWASP
    Mutillidae II (URL: **http://<your_VM_assigned_IP_address>/mutillidae/**). Make
    sure you are starting a fresh session of the Mutillidae application and are not
    logged in to it already:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Firefox浏览器或Burp Suite浏览器，访问OWASP Mutillidae II的主页（网址：**http://<your_VM_assigned_IP_address>/mutillidae/**）。确保你是从Mutillidae应用程序的全新会话开始，且尚未登录：
- en: '![Figure 6.1 – Ensure you are not logged in to the application](image/B21173_06_001.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – 确保你没有登录到应用程序](image/B21173_06_001.jpg)'
- en: Figure 6.1 – Ensure you are not logged in to the application
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – 确保你没有登录到应用程序
- en: Switch to the **Proxy** | **HTTP history** tab and select the request showing
    your initial browse to the Mutillidae home page.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到**代理** | **HTTP历史**标签，选择显示你初次浏览Mutillidae主页的请求。
- en: 'Look for the **GET** request and the associated response containing the **Set-Cookie:**
    assignments. Whenever you see this assignment, you know you are getting a freshly
    created cookie for your session. Specifically, we are interested in the **PHPSESSID**
    cookie value:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 寻找**GET**请求及其相关响应，其中包含**Set-Cookie:**赋值。每当你看到这个赋值时，就知道你正在为会话获取一个新创建的cookie。具体来说，我们关心的是**PHPSESSID**的cookie值：
- en: '![Figure 6.2 – Cookie value of PHPSESSID](image/B21173_06_002.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2 – PHPSESSID的cookie值](image/B21173_06_002.jpg)'
- en: Figure 6.2 – Cookie value of PHPSESSID
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – PHPSESSID的cookie值
- en: 'Highlight the value of the of the **PHPSESSID** cookie, right-click, and select
    **Send** **to Sequencer**:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 高亮显示**PHPSESSID** cookie的值，右键点击并选择**发送**到**Sequencer**：
- en: '![Figure 6.3 – Send request to Sequencer](image/B21173_06_003.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3 – 发送请求到Sequencer](image/B21173_06_003.jpg)'
- en: Figure 6.3 – Send request to Sequencer
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 发送请求到Sequencer
- en: Sequencer is a tool within Burp Suite designed to determine the strength or
    the quality of the randomness created within a session token.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Sequencer是Burp Suite中的一个工具，旨在确定会话令牌中随机性生成的强度或质量。
- en: After sending the value of the **PHPSESSID** parameter over to **Sequencer**,
    you will see the value loaded in the **Select live capture** **request** table.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将**PHPSESSID**参数的值发送到**Sequencer**后，你将看到该值被加载到**选择实时捕获**请求表格中。
- en: 'Before pressing the **Start live capture** button, scroll down to the **Token
    location within response** section. In the **Cookie** drop-down list, select **PHPSESSID=<captured
    session** **token value>**:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在点击**开始实时捕获**按钮之前，滚动到**响应中的令牌位置**部分。在**Cookie**下拉列表中，选择**PHPSESSID=<捕获的会话令牌值>**：
- en: '![Figure 6.4 – Set the cookie value for Sequencer](image/B21173_06_004.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4 – 设置Sequencer的cookie值](image/B21173_06_004.jpg)'
- en: Figure 6.4 – Set the cookie value for Sequencer
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 设置Sequencer的cookie值
- en: Since we have the correct cookie value selected, we can begin the live capture
    process. Click the **Start live capture** button, and Burp Suite will send multiple
    requests, extracting the **PHPSESSID** cookie out of each response. After each
    capture, **Sequencer** performs a statistical analysis of the level of randomness
    in each token.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们已经选择了正确的cookie值，我们可以开始实时捕获过程。点击**开始实时捕获**按钮，Burp Suite将发送多个请求，从每个响应中提取**PHPSESSID**cookie。每次捕获后，**Sequencer**会对每个令牌的随机性进行统计分析。
- en: 'Allow the capture to gather and analyze at least 200 tokens, but feel free
    to let it run longer if you like:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许捕获至少收集并分析200个令牌，但如果你愿意，可以让它运行更长时间：
- en: '![Figure 6.5 – Live capture of Sequencer](image/B21173_06_005.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – Sequencer的实时捕获](image/B21173_06_005.jpg)'
- en: Figure 6.5 – Live capture of Sequencer
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – Sequencer的实时捕获
- en: 'Once you have at least 200 samples, click the **Analyze now** button. Whenever
    you are ready to stop the capturing process, press the **Stop** button and confirm
    by clicking **Yes**:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你收集到至少200个样本，点击**立即分析**按钮。每当你准备停止捕获过程时，按下**停止**按钮并点击**是**确认：
- en: '![Figure 6.6 – Stopping the live capture](image/B21173_06_006.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6 – 停止实时捕获](image/B21173_06_006.jpg)'
- en: Figure 6.6 – Stopping the live capture
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 停止实时捕获
- en: 'After the analysis is complete, the output of **Sequencer** provides an overall
    result. In this case, the quality of randomness for the **PHPSESSID** session
    token is excellent. The amount of effective entropy is estimated to be 112 bits.
    From a web pentester perspective, these session tokens are very strong, so there
    is no vulnerability to report here. However, though there is no vulnerability
    present, it is good practice to perform such checks on session tokens:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析完成后，**Sequencer**的输出将提供总体结果。在这种情况下，**PHPSESSID**会话令牌的随机性质量非常优秀。有效的熵量估计为112位。从网络渗透测试的角度来看，这些会话令牌非常强大，因此这里没有漏洞报告。然而，尽管没有漏洞，仍然建议对会话令牌进行此类检查：
- en: "![Figure 6.7 – Summary ana\uFEFFl\uFEFFysis](image/B21173_06_007.jpg)"
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图6.7 – 概述分析](image/B21173_06_007.jpg)'
- en: Figure 6.7 – Summary analysis
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 概述分析
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To better understand the math and hypothesis behind Sequencer, consult PortSwigger’s
    documentation on the topic here: [https://portswigger.net/burp/documentation/desktop/tools/sequencer/tests](https://portswigger.net/burp/documentation/desktop/tools/sequencer/tests).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解 Sequencer 背后的数学原理和假设，您可以参考 PortSwigger 关于该主题的文档：[https://portswigger.net/burp/documentation/desktop/tools/sequencer/tests](https://portswigger.net/burp/documentation/desktop/tools/sequencer/tests)。
- en: Testing for cookie attributes
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 Cookie 属性
- en: Important user-specific information, such as session tokens, is often stored
    in cookies within the client browser. Due to their importance, cookies need to
    be protected from malicious attacks. This protection usually comes in the form
    of two flags—**secure** and **HttpOnly**.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的用户特定信息，如会话令牌，通常存储在客户端浏览器的 Cookies 中。由于其重要性，Cookies 需要受到保护，防止恶意攻击。这种保护通常以两种标志的形式出现——**secure**
    和 **HttpOnly**。
- en: The **secure** flag informs the browser to only send the cookie to the web server
    if the protocol is encrypted (for example, HTTPS or TLS). This flag protects the
    cookie from eavesdropping over unencrypted channels.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**secure** 标志告知浏览器仅在协议加密时（例如 HTTPS 或 TLS）将 Cookie 发送到 Web 服务器。此标志可保护 Cookie
    免受在未加密的通道上监听的攻击。'
- en: The **HttpOnly** flag instructs the browser to not allow access or manipulation
    of the cookie via JavaScript. This flag protects the cookie from cross-site scripting
    attacks.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpOnly** 标志指示浏览器不允许通过 JavaScript 访问或操作 Cookie。此标志可保护 Cookie 免受跨站脚本攻击。'
- en: Getting ready
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Check the cookies used in the OWASP Mutillidae II application, to ensure the
    presence of protective flags. Since the Mutillidae application runs over an unencrypted
    channel (for example, HTTP), we can only check for the presence of the **HttpOnly**
    flag. Therefore, the **secure** flag is out of scope for this recipe.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 OWASP Mutillidae II 应用程序中使用的 Cookies，确保存在保护标志。由于 Mutillidae 应用程序通过未加密的通道（例如
    HTTP）运行，我们只能检查是否存在 **HttpOnly** 标志。因此，**secure** 标志不在本教程的讨论范围内。
- en: Ensure Burp Suite and the OWASP BWA VM are running and that Burp Suite is configured
    in the Firefox browser used to view OWASP BWA applications, or use Burp Suite’s
    built-in browser.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 Burp Suite 和 OWASP BWA 虚拟机正在运行，并且 Burp Suite 已在用于查看 OWASP BWA 应用程序的 Firefox
    浏览器中进行配置，或者使用 Burp Suite 的内置浏览器。
- en: How to do it...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: From the **OWASP BWA** landing page, click the link to the OWASP Mutillidae
    II application.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **OWASP BWA** 登录页面，点击链接进入 OWASP Mutillidae II 应用程序。
- en: 'Open the Firefox browser or the Burp Suite browser to access the home page
    of OWASP Mutillidae II (URL: **http://<your_VM_assigned_IP_address>/mutillidae/**).
    Make sure you are starting a fresh session and you are not logged in to the Mutillidae
    application:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '打开 Firefox 浏览器或 Burp Suite 浏览器，访问 OWASP Mutillidae II 的首页（URL: **http://<your_VM_assigned_IP_address>/mutillidae/**）。确保您开始的是一个全新的会话，并且未登录到
    Mutillidae 应用程序：'
- en: '![Figure 6.8 – Ensure you are not logged in to the application](image/B21173_06_008.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 确保您未登录到应用程序](image/B21173_06_008.jpg)'
- en: Figure 6.8 – Ensure you are not logged in to the application
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 确保您未登录到应用程序
- en: Switch to the **Proxy** | **HTTP history** tab and select the request showing
    your initial browse to the Mutillidae home page. Look for the **GET** request
    and its associated response containing **Set-Cookie:** assignments. Whenever you
    see this assignment, you can ensure you are getting a freshly created cookie for
    your session. Specifically, we are interested in the **PHPSESSID** cookie value.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 **Proxy** | **HTTP history** 标签，并选择显示您首次浏览到 Mutillidae 首页的请求。查找 **GET**
    请求及其关联的包含 **Set-Cookie:** 赋值的响应。每当您看到此赋值时，您可以确保为您的会话获得了新创建的 Cookie。特别地，我们关心的是
    **PHPSESSID** 的 Cookie 值。
- en: 'Immediately after successful login, cookies should be set. Examine the end
    of the **Set-Cookie:** assignments lines. Notice the absence of the **HttpOnly**
    flag for both lines. This means the **PHPSESSID** and **showhints** cookie values
    are not protected from JavaScript manipulation. This is a security finding that
    you would include in your report:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在成功登录后，Cookies 应立即被设置。检查 **Set-Cookie:** 赋值行的末尾。注意两行中都没有 **HttpOnly** 标志。这意味着
    **PHPSESSID** 和 **showhints** 的 Cookie 值没有受到 JavaScript 操作的保护。这是一个安全问题，您应在报告中包括该项：
- en: "![Figure 6.9 – Setting the value of the PHPSESSID cookie, absence of secur\uFEFF\
    i\uFEFFty flags](image/B21173_06_009.jpg)"
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – 设置 PHPSESSID Cookie 的值，缺少安全标志](image/B21173_06_009.jpg)'
- en: Figure 6.9 – Setting the value of the PHPSESSID cookie, absence of security
    flags
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – 设置 PHPSESSID Cookie 的值，缺少安全标志
- en: How it works...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'If the two cookies had **HttpOnly** flags set, the flags would appear at the
    end of the **Set-Cookie:** assignment lines. When present, the flag would immediately
    be followed by a semicolon ending the path scope of the cookie, followed by the
    **HttpOnly** string. The display is similar for the **Secure** flag as well:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个 cookie 设置了**HttpOnly**标志，那么这些标志会出现在**Set-Cookie:**赋值行的末尾。若该标志存在，它会紧跟一个分号，结束
    cookie 的路径作用域，之后是**HttpOnly**字符串。**Secure**标志的显示方式也类似：
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Testing for session fixation
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试会话固定漏洞
- en: Session tokens are assigned to users for tracking purposes. This means that
    when browsing an application as an unauthenticated user, they are assigned a unique
    session ID, which is usually stored in a cookie. Application developers should
    always create a new session token after the user logs in to the website. If this
    session token does not change, the application could be susceptible to a session
    fixation attack. It is the responsibility of web penetration testers to determine
    whether this token changes values from an unauthenticated state to an authenticated
    state.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 会话令牌是为用户分配的，用于跟踪目的。这意味着在以未经身份验证的用户身份浏览应用程序时，会分配一个唯一的会话 ID，通常存储在 cookie 中。应用程序开发人员应始终在用户登录网站后创建一个新的会话令牌。如果这个会话令牌没有变化，应用程序可能会受到会话固定攻击的威胁。网页渗透测试人员的责任是判断这个令牌在未经身份验证的状态和身份验证后的状态之间是否发生了变化。
- en: Session fixation is present when application developers do not invalidate the
    unauthenticated session token, allowing the user to use the same one after authentication.
    This scenario allows an attacker with a stolen session token to masquerade as
    the user.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 会话固定漏洞存在的情况是，当应用程序开发人员没有使未经身份验证的会话令牌失效，导致用户在认证后仍能使用相同的会话令牌。这种情况允许攻击者利用窃取的会话令牌冒充用户身份。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the OWASP Mutillidae II application and the **Proxy** | **HTTP history**
    tab in Burp Suite, as well as **Comparer**, we will examine an unauthenticated
    **PHPSESSID** session token value. Then, we will log in to the application and
    compare the unauthenticated value against the authenticated value to determine
    the presence of the session fixation vulnerability.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OWASP Mutillidae II 应用程序、Burp Suite 中的**Proxy** | **HTTP history**标签页，以及**Comparer**，我们将检查未经身份验证的**PHPSESSID**会话令牌值。然后，我们将登录应用程序并将未经身份验证的值与身份验证后的值进行比较，以确定会话固定漏洞是否存在。
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行操作...
- en: Navigate to the login screen (click **Login/Register** from the top menu), but
    do not log in yet.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到登录页面（点击顶部菜单中的**Login/Register**），但不要立即登录。
- en: 'Switch to Burp Suite’s **Proxy** | **HTTP history** tab, and look for the **GET**
    request showing when you browsed to the login screen. Make a note of the value
    assigned to the **PHPSESSID** parameter placed within a cookie:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite 的**Proxy** | **HTTP history**标签页，查找在浏览到登录页面时发出的**GET**请求。记下分配给**PHPSESSID**参数的值，该值位于
    cookie 中：
- en: '![Figure 6.10 – Setting of PHPSESSID cookie value unauthenticated](image/B21173_06_010.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10 – 设置未经身份验证的 PHPSESSID cookie 值](image/B21173_06_010.jpg)'
- en: Figure 6.10 – Setting of PHPSESSID cookie value unauthenticated
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – 设置未经身份验证的 PHPSESSID cookie 值
- en: 'Right-click the **PHPSESSID** parameter and send the request to **Comparer**:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**PHPSESSID**参数，并将请求发送到**Comparer**：
- en: '![Figure 6.11 – Send request to Comparer](image/B21173_06_011.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.11 – 发送请求到 Comparer](image/B21173_06_011.jpg)'
- en: Figure 6.11 – Send request to Comparer
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – 发送请求到 Comparer
- en: Return to the login screen (click **Login/Register** from the top menu), and
    this time, log in using the username **ed** and the password **pentest**.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到登录页面（点击顶部菜单中的**Login/Register**），这次使用用户名**ed**和密码**pentest**进行登录。
- en: '![Figure 6.12 – Login as user ed](image/B21173_06_012.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12 – 以用户 ed 登录](image/B21173_06_012.jpg)'
- en: Figure 6.12 – Login as user ed
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – 以用户 ed 登录
- en: After logging in, switch to Burp Suite’s **Proxy** | **HTTP history** tab. Look
    for the **POST** request showing your login (for example, the 302 HTTP status
    code) as well as the immediate **GET** request following the **POST** request.
    Note the **PHPSESSID** value assigned after login. Right-click and send the **GET**
    request to **Comparer**.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，切换到 Burp Suite 的**Proxy** | **HTTP history**标签页。查找显示登录的**POST**请求（例如，302
    HTTP 状态码），以及紧接着**POST**请求后的**GET**请求。记下登录后分配的**PHPSESSID**值。右键点击并将**GET**请求发送到**Comparer**。
- en: '![Figure 6.13 – GET request immediately after logging in as ed](image/B21173_06_013.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13 – 以 ed 用户登录后的 GET 请求](image/B21173_06_013.jpg)'
- en: Figure 6.13 – GET request immediately after logging in as ed
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – 以用户 ed 登录后的 GET 请求
- en: Switch to Burp Suite’s **Comparer**. The appropriate requests should already
    be highlighted for you.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp Suite的**Comparer**。相关的请求应该已经为您高亮显示。
- en: '![Figure 6.14 – Comparing unauthenticated request against authenticated request](image/B21173_06_014.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图6.14 – 比较未认证请求与认证请求](image/B21173_06_014.jpg)'
- en: Figure 6.14 – Comparing unauthenticated request against authenticated request
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14 – 比较未认证请求与认证请求
- en: 'Click the **Words** button in the bottom right-hand corner:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右下角的**Words**按钮：
- en: '![Figure 6.15 – Click the Words button](image/B21173_06_015.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图6.15 – 点击Words按钮](image/B21173_06_015.jpg)'
- en: Figure 6.15 – Click the Words button
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15 – 点击Words按钮
- en: 'A popup shows a detailed comparison of the differences between the two requests.
    Note the value of **PHPSESSID** does not change between the unauthenticated session
    (on the left) and the authenticated session (on the right). This means the application
    has a session fixation vulnerability:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弹出窗口会显示两次请求之间的详细比较。请注意，**PHPSESSID**的值在未认证的会话（左侧）和认证后的会话（右侧）之间并未发生变化。这意味着该应用存在会话固定漏洞：
- en: "![Figure 6.16 – Notice value of PHPSESSID did not change a\uFEFFf\uFEFFter\
    \ login](image/B21173_06_016.jpg)"
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图6.16 – 登录后注意到PHPSESSID值没有变化](image/B21173_06_016.jpg)'
- en: Figure 6.16 – Notice value of PHPSESSID did not change after login
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.16 – 登录后注意到PHPSESSID值没有变化
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we examined how the **PHPSESSID** value assigned to an unauthenticated
    user remained constant even after authentication. This is a security vulnerability
    allowing for the session fixation attack.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在此实验中，我们检查了**PHPSESSID**分配给未认证用户的值，即使在认证后也保持不变。这是一个安全漏洞，允许会话固定攻击。
- en: Testing for exposed session variables
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试暴露的会话变量
- en: Session variables such as tokens, cookies, or hidden form fields are used by
    application developers to send data between the client and the server. Since these
    variables are exposed on the client side, an attacker can manipulate them in an
    attempt to gain access to unauthorized data or to capture sensitive information.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 会话变量，如令牌、Cookie或隐藏的表单字段，通常由应用开发者用于在客户端和服务器之间传输数据。由于这些变量在客户端暴露，攻击者可以通过操控它们来试图访问未经授权的数据或捕获敏感信息。
- en: Burp Suite’s **Proxy** option provides a feature to enhance the visibility of
    so-called *hidden* form fields. This feature allows web application penetration
    testers to determine the level of sensitivity of the data held in these variables.
    Likewise, a pentester can determine whether the manipulation of these values produces
    a different behavior in the application.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite的**Proxy**选项提供了一项功能，用于增强所谓的*隐藏*表单字段的可见性。此功能允许Web应用渗透测试人员确定这些变量中数据的敏感性级别。同样，渗透测试人员可以判断是否对这些值的操作会导致应用行为的不同。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the OWASP Mutillidae II application and Burp Suite’s **Unhide hidden form
    fields** feature under **Proxy**, we’ll determine whether manipulation of a hidden
    form field value results in gaining access to unauthorized data.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II应用和Burp Suite的**取消隐藏表单字段**功能（位于**Proxy**下），我们将确定操控隐藏表单字段的值是否能获得未经授权的数据。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Switch to Burp Suite’s **Proxy** tab by clicking the **Settings** gear icon
    in the top right-hand corner of Burp Suite.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击Burp Suite右上角的**设置**齿轮图标，切换到Burp Suite的**Proxy**标签页。
- en: '![Figure 6.17 – Global Settings button](image/B21173_06_017.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图6.17 – 全局设置按钮](image/B21173_06_017.jpg)'
- en: Figure 6.17 – Global Settings button
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.17 – 全局设置按钮
- en: Once the large pop-out window displays, select **All** | **Proxy**.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当大弹窗显示出来后，选择**All** | **Proxy**。
- en: '![Figure 6.18 – Settings menu](image/B21173_06_018.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图6.18 – 设置菜单](image/B21173_06_018.jpg)'
- en: Figure 6.18 – Settings menu
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.18 – 设置菜单
- en: 'Within the **Proxy** section, scroll down to the **Response modification rules**
    section, and check the boxes for **Unhide hidden form fields** and **Prominently
    highlight** **unhidden fields**:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Proxy**部分，向下滚动到**响应修改规则**部分，勾选**取消隐藏表单字段**和**突出显示** **未隐藏字段**的复选框：
- en: '![Figure 6.19 – Proxy | Response modification rules subsection](image/B21173_06_019.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图6.19 – Proxy | 响应修改规则子部分](image/B21173_06_019.jpg)'
- en: Figure 6.19 – Proxy | Response modification rules subsection
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.19 – Proxy | 响应修改规则子部分
- en: 'Navigate to the **User Info** page by going to **OWASP 2013** | **A1 - Injection
    (SQL)** | **SQLi - Extract Data** | **User** **Info (SQL)**:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问**OWASP 2013** | **A1 - 注入（SQL）** | **SQLi - 提取数据** | **用户信息（SQL）**页面，导航到**User
    Info**页面：
- en: "![Figure 6.20 – User Info page of \uFEFFthe application](image/B21173_06_020.jpg)"
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.20 – 应用程序的用户信息页面](image/B21173_06_020.jpg)'
- en: Figure 6.20 – User Info page of the application
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.20 – 应用程序的用户信息页面
- en: 'Note the hidden form fields now prominently displayed on the page:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意现在在页面上显眼显示的隐藏表单字段：
- en: '![Figure 6.21 – Hidden fields predominantly displayed](image/B21173_06_021.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.21 – 显示的隐藏字段](image/B21173_06_021.jpg)'
- en: Figure 6.21 – Hidden fields predominantly displayed
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.21 – 显示的隐藏字段
- en: 'Let’s try to manipulate the value shown, **user-info.php**, by changing it
    to **admin.php** and see how the application reacts. Modify **user-info.php**
    to **admin.php** within the **Hidden field [****page]** textbox:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试通过将显示的**user-info.php**更改为**admin.php**来操作它，看看应用程序如何反应。在**Hidden field
    [****page]**文本框中将**user-info.php**修改为**admin.php**：
- en: '![Figure 6.22 – Change value of hidden field](image/B21173_06_022.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.22 – 更改隐藏字段的值](image/B21173_06_022.jpg)'
- en: Figure 6.22 – Change value of hidden field
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.22 – 更改隐藏字段的值
- en: 'Hit the *Enter* key after making the change. You should now see a new page
    loaded showing **PHP Server** **Configuration** information:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进行更改后，按下*Enter*键。此时你应该会看到一个新页面加载，显示**PHP服务器** **配置**信息：
- en: "![Figure 6.23 – Resulting PHP configuration p\uFEFFa\uFEFFge exposed](image/B21173_06_023.jpg)"
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.23 – 显示的PHP配置页面](image/B21173_06_023.jpg)'
- en: Figure 6.23 – Resulting PHP configuration page exposed
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.23 – 显示的PHP配置页面
- en: How it works...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作...
- en: As seen in this recipe, there isn’t anything hidden about hidden form fields.
    As penetration testers, we should examine and manipulate these values, to determine
    whether sensitive information is inadvertently exposed or whether we can change
    the behavior of the application from what is expected, based on our role and authentication
    status. In the case of this recipe, we were not even logged in to the application.
    We manipulated the hidden form field labeled **page** to access a page containing
    fingerprinting information. Access to such information should be protected from
    unauthenticated users.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在这个例子中所见，隐藏表单字段并没有什么神秘之处。作为渗透测试人员，我们应该检查并操作这些值，以确定敏感信息是否被无意中暴露，或者我们是否可以根据角色和认证状态改变应用程序的行为。在这个例子中，我们甚至没有登录到应用程序。我们操作了标有**page**的隐藏表单字段，访问了一个包含指纹信息的页面。此类信息的访问应当受到未认证用户的保护。
- en: Testing for cross-site request forgery
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试跨站请求伪造
- en: '**Cross-Site Request Forgery** (**CSRF**) is an attack that rides on an authenticated
    user’s session to allow an attacker to force the user to execute unwanted actions
    on the attacker’s behalf. The initial lure for this attack can be a phishing email
    or a malicious link executing through a cross-site scripting vulnerability found
    on the victim’s website. CSRF exploitation may lead to a data breach or even a
    full compromise of the web application.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站请求伪造**（**CSRF**）是一种攻击，它利用已认证用户的会话，允许攻击者强迫用户代表攻击者执行不必要的操作。此攻击的初始诱饵可能是钓鱼邮件或通过受害者网站中的跨站脚本漏洞执行的恶意链接。CSRF的利用可能导致数据泄露，甚至完全危害Web应用程序的安全。'
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Using the OWASP Mutillidae II application registration form, determine whether
    a CSRF attack is possible within the same browser (a different tab) while an authenticated
    user is logged in to the application.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II应用程序注册表单，确定在同一浏览器（不同标签页）中，经过身份验证的用户登录后，是否可能进行CSRF攻击。
- en: How to do it...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行...
- en: 'To begin this recipe, let’s first baseline the current number of records in
    the account table and perform SQL injection to see this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个实例，首先让我们基准化账户表中当前的记录数量，并进行SQL注入以查看结果：
- en: Navigate to the **User Info** page by going to **OWASP 2013** | **A1 - Injection
    (SQL)** | **SQLi - Extract Data** | **User** **Info (SQL)**.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问**OWASP 2013** | **A1 - 注入（SQL）** | **SQLi - 提取数据** | **用户** **信息（SQL）**，导航到**用户信息**页面。
- en: At the username prompt, type in a SQL injection payload to dump the entire account
    table contents. The payload is **' or 1=1-- <space>** (*tick or 1 equals 1 dash
    dash space*). Then, press the **View Account** **Details** button.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在用户名提示框中，输入一个SQL注入载荷，来导出整个账户表的内容。载荷为**' or 1=1-- <space>**（*tick 或 1 等于 1 短横线
    空格*）。然后，按下**查看账户** **详细信息**按钮。
- en: 'Remember to include the space after the two dashes, since this is a MySQL database;
    otherwise, the payload will not work:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在两个短横线后加上空格，因为这是一个MySQL数据库，否则载荷将无法正常工作：
- en: '![Figure 6.24 – SQL injection payload](image/B21173_06_024.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.24 – SQL注入载荷](image/B21173_06_024.jpg)'
- en: Figure 6.24 – SQL injection payload
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.24 – SQL 注入有效载荷
- en: 'When performed correctly, a message displays that 24 records were found in
    the database for users. The data shown following the message reveals the usernames,
    passwords, and signature strings of all 24 accounts. Only two account details
    are shown here as a sample:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当操作正确时，会显示一条信息，表示数据库中找到了 24 条用户记录。消息后面的数据显示了所有 24 个账户的用户名、密码和签名字符串。这里仅展示两个账户详情作为示例：
- en: '![Figure 6.25 – Baseline of 24 records](image/B21173_06_025.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.25 – 24 条记录基线](image/B21173_06_025.jpg)'
- en: Figure 6.25 – Baseline of 24 records
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.25 – 24 条记录基线
- en: We confirmed that 24 records currently exist in the accounts table of the database.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确认数据库的账户表中目前有 24 条记录。
- en: Now, return to the login screen (click **Login/Register** from the top menu)
    and select the **Please register** **here** link.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回到登录界面（点击顶部菜单中的 **登录/注册**）并选择 **请在这里注册** 链接。
- en: After clicking the **Please register here** link, you are presented with a registration
    form.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **请在这里注册** 链接后，系统会呈现一个注册表单。
- en: 'Fill out the form to create a tester account. Type in **tester** as the username,
    **tester** as the password, and **This is a tester account** as the signature:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写表单以创建测试者账户。输入 **tester** 作为用户名，**tester** 作为密码，**This is a tester account**
    作为签名：
- en: '![Figure 6.26 – Register a new user](image/B21173_06_026.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.26 – 注册一个新用户](image/B21173_06_026.jpg)'
- en: Figure 6.26 – Register a new user
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.26 – 注册一个新用户
- en: 'After clicking the **Create Account** button, you should see a green banner
    confirming the account was created:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建账户** 按钮后，你应该能看到一个绿色横幅，确认账户已创建：
- en: '![Figure 6.27 – Confirmation of the new account creation](image/B21173_06_027.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.27 – 新账户创建确认](image/B21173_06_027.png)'
- en: Figure 6.27 – Confirmation of the new account creation
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.27 – 新账户创建确认
- en: Return to the **User Info** page by going to **OWASP 2013** | **A1 - Injection
    (SQL)** | **SQLi - Extract Data** | **User** **Info (SQL)**.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 **用户信息** 页面，路径为 **OWASP 2013** | **A1 - 注入（SQL）** | **SQLi - 提取数据** | **用户**
    **信息（SQL）**。
- en: 'Perform the SQL injection attack again and verify that you can now see 25 rows
    in the account table, instead of the previous count of 24:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次执行 SQL 注入攻击，并验证你现在可以在账户表中看到 25 行数据，而不是之前的 24 行：
- en: '![Figure 6.28 – 25 rows visible in the account table](image/B21173_06_028.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.28 – 账户表中显示 25 行数据](image/B21173_06_028.jpg)'
- en: Figure 6.28 – 25 rows visible in the account table
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.28 – 账户表中显示 25 行数据
- en: Switch to the **Proxy** | **HTTP history** tab in Burp Suite and view the **POST**
    request that created the account for the tester.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite 中的 **代理** | **HTTP 历史** 选项卡，并查看为测试者创建账户的 **POST** 请求。
- en: Studying this **POST** request shows the **POST** action (**register.php**)
    and the body data required to perform the action, in this case, **username**,
    **password**, **confirm_password**, and **my_signature**. Also, notice there is
    no CSRF token used. CSRF tokens are placed within web forms to protect against
    the very attack we are about to perform. Let’s proceed.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 研究这个 **POST** 请求可以看到 **POST** 动作（**register.php**）和执行该动作所需的正文数据，在本例中包括 **username**、**password**、**confirm_password**
    和 **my_signature**。此外，请注意没有使用 CSRF token。CSRF token 被放置在网页表单中，以防止我们即将执行的攻击。接下来我们继续。
- en: 'Right-click on the **POST** request and click on **Send** **to Repeater**:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 **POST** 请求并点击 **发送** **到 Repeater**：
- en: '![Figure 6.29 – Send login to Repeater](image/B21173_06_029.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.29 – 发送登录请求到 Repeater](image/B21173_06_029.jpg)'
- en: Figure 6.29 – Send login to Repeater
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.29 – 发送登录请求到 Repeater
- en: If you’re using Burp Suite Professional, right-click and select **Engagement
    tools** | **Generate** **CSRF PoC:**
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是 Burp Suite Professional，右键点击并选择 **参与工具** | **生成** **CSRF PoC**：
- en: '![Figure 6.30 – Generate CSRF PoC](image/B21173_06_030.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.30 – 生成 CSRF PoC](image/B21173_06_030.jpg)'
- en: Figure 6.30 – Generate CSRF PoC
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.30 – 生成 CSRF PoC
- en: 'Upon clicking this feature, a pop-up box generates the same form used on the
    registration page but without any CSRF token protection. Inside the CSRF HTML
    text area, change the **"tester"** username to **"attacker"**. Change the password
    to **"attacker"**. Change the **"tester"** confirm password value to **"attacker"**:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击此功能后，会弹出一个框，生成与注册页面相同的表单，但没有任何 CSRF token 保护。在 CSRF HTML 文本区域内，将 **"tester"**
    用户名改为 **"attacker"**，将密码改为 **"attacker"**，并将 **"tester"** 确认密码值改为 **"attacker"**：
- en: '![Figure 6.31 – Modify and copy HTML](image/B21173_06_031.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.31 – 修改并复制 HTML](image/B21173_06_031.jpg)'
- en: Figure 6.31 – Modify and copy HTML
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.31 – 修改并复制 HTML
- en: 'Click the **Copy HTML** button and save it as a file called **csrf.html** on
    your local system:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **复制 HTML** 按钮，并将其保存为名为 **csrf.html** 的文件在本地系统上：
- en: '![Figure 6.32 – Name the new file csrf.html](image/B21173_06_032.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.32 – 将新文件命名为 csrf.html](image/B21173_06_032.jpg)'
- en: Figure 6.32 – Name the new file csrf.html
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.32 – 将新文件命名为 csrf.html
- en: 'If you are using Burp Suite Community, you can easily recreate the **CSRF PoC**
    form by viewing the source code of the registration page:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是 Burp Suite Community 版，可以通过查看注册页面的源代码轻松重建 **CSRF PoC** 表单：
- en: '![Figure 6.33 – For Burp Suite Community edition, how to create CSRF PoC](image/B21173_06_033.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.33 – 对于 Burp Suite Community 版，如何创建 CSRF PoC](image/B21173_06_033.jpg)'
- en: Figure 6.33 – For Burp Suite Community edition, how to create CSRF PoC
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.33 – 对于 Burp Suite Community 版，如何创建 CSRF PoC
- en: 'While viewing the page source, scroll down to the **<form>** tag section. For
    brevity, the form is recreated next. Insert **attacker** as a value for the username,
    password, and signature. Copy the following HTML code and save it in a file entitled
    **csrf.html**:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在查看页面源代码时，向下滚动到 **<form>** 标签部分。为了简洁起见，下面重新创建了该表单。将 **attacker** 作为用户名、密码和签名的值。复制以下
    HTML 代码并将其保存为名为 **csrf.html** 的文件：
- en: '[PRE1]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, return to the login screen (click **Login/Register** from the top menu)
    and log in to the application, using the username **ed** and the password **pentest**.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回到登录页面（点击顶部菜单中的 **登录/注册**）并使用用户名 **ed** 和密码 **pentest** 登录到应用程序。
- en: 'Open the location on your machine where you saved the **csrf.html** file. Drag
    the file into the browser where **ed** is authenticated. After you drag the file
    to this browser, **csrf.html** will appear as a separate tab in the same browser:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你在本地保存的 **csrf.html** 文件所在的位置。将文件拖动到 **ed** 已认证的浏览器中。在将文件拖到浏览器后，**csrf.html**
    会作为一个单独的标签出现在同一浏览器中：
- en: '![Figure 6.34 – Name the new file csrf.html](image/B21173_06_034.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.34 – 将新文件命名为 csrf.html](image/B21173_06_034.jpg)'
- en: Figure 6.34 – Name the new file csrf.html
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.34 – 将新文件命名为 csrf.html
- en: 'For demonstration purposes, there is a **Submit request** button. However,
    in the wild, a JavaScript function would automatically execute the action of creating
    an account for the attacker. Click the **Submit** **request** button:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了演示，页面上有一个 **提交请求** 按钮。但是，在实际情况下，JavaScript 函数将自动执行为攻击者创建账户的操作。点击 **提交** **请求**
    按钮：
- en: '![Figure 6.35 – Submit request in new tab](image/B21173_06_035.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.35 – 在新标签页中提交请求](image/B21173_06_035.jpg)'
- en: Figure 6.35 – Submit request in new tab
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.35 – 在新标签页中提交请求
- en: 'You should receive a confirmation that the attacker account has been created:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会收到确认信息，表明攻击者账户已被创建：
- en: '![Figure 6.36 – Confirmation of CSRF attack success](image/B21173_06_036.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.36 – CSRF 攻击成功的确认](image/B21173_06_036.jpg)'
- en: Figure 6.36 – Confirmation of CSRF attack success
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.36 – CSRF 攻击成功的确认
- en: Switch to the **Proxy** | **HTTP history** tab in Burp Suite and find the maliciously
    executed **POST** request used to create the account for the attacker, while riding
    on the authenticated session of **ed**. Note the **Origin** header value of **"null"**.
    This confirms we are using our CSRF PoC since we drag and drop it from our local
    machine (e.g., *origin of nothing*) into a new tab of an authenticated user’s
    session.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Burp Suite 中的 **代理** | **HTTP 历史** 标签，找到用于为攻击者创建账户的恶意执行的 **POST** 请求，同时利用
    **ed** 的认证会话。注意 **Origin** 头部值为 **"null"**。这表明我们正在使用我们的 CSRF PoC，因为我们从本地机器（例如，*无来源*）将其拖放到认证用户会话的一个新标签页中。
- en: '![Figure 6.37 – CSRF attack as seen in Burp](image/B21173_06_037.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.37 – Burp 中看到的 CSRF 攻击](image/B21173_06_037.jpg)'
- en: Figure 6.37 – CSRF attack as seen in Burp
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.37 – Burp 中看到的 CSRF 攻击
- en: 'Return to the **User Info** page by going to **OWASP 2013** | **A1 - Injection
    (SQL)** | **SQLi - Extract Data** | **User Info (SQL)** and perform the SQL injection
    attack again. You will now see 26 rows in the account table instead of the previous
    count of 25:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 **用户信息** 页面，通过访问 **OWASP 2013** | **A1 - 注入（SQL）** | **SQLi - 提取数据** | **用户信息（SQL）**
    并再次执行 SQL 注入攻击。现在，你将看到账户表中有 26 行，而不是之前的 25 行：
- en: "![Figure 6.38 – Record count incremented by 1 after CSR\uFEFFF\uFEFF attack](image/B21173_06_038.jpg)"
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.38 – CSRF 攻击后记录计数增加 1](image/B21173_06_038.jpg)'
- en: Figure 6.38 – Record count incremented by 1 after CSRF attack
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.38 – CSRF 攻击后记录计数增加 1
- en: How it works...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: CSRF attacks require an authenticated user session to surreptitiously perform
    actions within the application on behalf of the attacker. In this case, an attacker
    rode on **ed**’s session to re-run the registration form to create an account
    for the attacker. If **ed** had been an admin, this could have allowed the attacker
    to gain access to an elevated role as well.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF 攻击需要一个经过身份验证的用户会话，以便在应用程序内代表攻击者偷偷执行操作。在这种情况下，攻击者利用**ed**的会话重新运行注册表单，为攻击者创建了一个账户。如果**ed**是管理员，那么这可能让攻击者获得更高权限的访问。
