- en: Pentesting CMSes - WordPress
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渗透测试CMS-WordPress
- en: CMS stands for content management system—a system used to manage and modify
    digital content. It supports the collaboration of multiple users, authors, and
    subscribers. There are a lot of CMSes being used over the internet and some of
    the major ones are WordPress, Joomla, PHPNuke, and **AEM **(**Adobe Experience
    Manager**). In this chapter, we will look into a well-known CMS, WordPress. We'll
    see how to perform penetration testing on this CMS.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CMS代表内容管理系统-用于管理和修改数字内容的系统。它支持多个用户、作者和订阅者的协作。互联网上使用了许多CMS，其中一些主要的是WordPress、Joomla、PHPNuke和**AEM（Adobe
    Experience Manager）**。在本章中，我们将研究一个著名的CMS，WordPress。我们将看看如何对这个CMS进行渗透测试。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中涵盖以下主题：
- en: Introduction to WordPress architecture
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress架构简介
- en: WordPress reconnaissance and enumeration using Metasploit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Metasploit进行WordPress侦察和枚举
- en: Vulnerability scanning for WordPress
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress的漏洞扫描
- en: WordPress exploitation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress利用
- en: Customizing the Metasploit exploit
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义Metasploit漏洞
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the prerequisites for this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的先决条件：
- en: The Metasploit Framework
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit框架
- en: WordPress CMS installed
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装的WordPress CMS
- en: Database server configured (MySQL is recommended)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置了数据库服务器（建议使用MySQL）
- en: Basic knowledge of Linux commands
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本的Linux命令知识
- en: Introduction to WordPress
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress简介
- en: WordPress is an open source CMS that uses PHP as the frontend and MySQL in the
    backend. It is mostly used for blogging but it supports forums, media galleries,
    and online stores as well. WordPress was released on May 27, 2003 by its founders
    Matt Mullenweg and Mike Little. It also includes a plugin architecture and template
    system. The WordPress plugin architecture allows users to extend the features
    and functionality of their website or blog. As of February 2019, WordPress.org
    has 54,402 free plugins available and 1,500+ premium plugins. WordPress users
    also have the freedom to create and develop their own custom themes as long as
    they follow WordPress standards.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress是一个开源的CMS，使用PHP作为前端，MySQL作为后端。它主要用于博客，但也支持论坛、媒体库和在线商店。WordPress由其创始人Matt
    Mullenweg和Mike Little于2003年5月27日发布。它还包括插件架构和模板系统。WordPress插件架构允许用户扩展其网站或博客的功能和功能。截至2019年2月，WordPress.org有54,402个免费插件和1500多个付费插件。WordPress用户还可以自由创建和开发自己的自定义主题，只要他们遵循WordPress标准。
- en: Before looking into WordPress enumeration and exploitation, let's first understand
    the architecture on which WordPress runs.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看WordPress枚举和利用之前，让我们首先了解WordPress运行的架构。
- en: WordPress architecture
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress架构
- en: 'The WordPress architecture can be divided into four major parts:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress架构可以分为四个主要部分：
- en: '![](img/1056d453-80ca-47bc-8a3d-d62875c86981.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1056d453-80ca-47bc-8a3d-d62875c86981.png)'
- en: 'Let''s look into the individual sections:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看各个部分：
- en: '**Display**: This contains the HTML, CSS, and JavaScript files visible to the
    users.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示**：这包含对用户可见的HTML、CSS和JavaScript文件。'
- en: '**Theme/Templates**: This includes forms, theme files, different WordPress
    pages, and sections such as comments, headers, footers, and the error page.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主题/模板**：这包括表单、主题文件、不同的WordPress页面和部分，如评论、页眉、页脚和错误页面。'
- en: '**WP-Engine**: This engine is responsible for the core functions of the entire
    CMS, for example, RSS feeds, communicating with the database, setup, file management,
    media management, and caching.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WP-Engine**：这个引擎负责整个CMS的核心功能，例如RSS订阅、与数据库通信、设置、文件管理、媒体管理和缓存。'
- en: '**WP-Backend**: This includes the database, PHP mailers cron jobs, and the
    filesystem.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WP-Backend**：这包括数据库、PHP邮件程序cron作业和文件系统。'
- en: Now, let's look into the directory structure.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看目录结构。
- en: File/directory structure
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件/目录结构
- en: 'Browsing the WordPress directory will give us a file/folder structure, as shown
    in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览WordPress目录将给我们一个文件/文件夹结构，如下截图所示：
- en: '![](img/c018ede2-5f94-4353-a2e3-b48d6dcd1588.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c018ede2-5f94-4353-a2e3-b48d6dcd1588.png)'
- en: Let's quickly do a brief run through these folders and files.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一下这些文件夹和文件。
- en: Base folder
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本文件夹
- en: Let's refer to this as the root directory. This directory contains three folders,
    which are `wp-admin`, `wp-content`, and `wp-includes`, and a bunch of PHP files,
    including the most important one, `wp-config.php`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把这称为根目录。该目录包含三个文件夹，即`wp-admin`、`wp-content`和`wp-includes`，以及一堆PHP文件，包括最重要的`wp-config.php`。
- en: The base folder contains all of the other PHP files and classes required for
    the core operations of WordPress.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 基本文件夹包含WordPress核心操作所需的所有其他PHP文件和类。
- en: wp-includes
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wp-includes
- en: The wp-includes folder contains all the other PHP files and classes that are
    used by the front-end and required by Wordpress Core.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: wp-includes文件夹包含所有其他PHP文件和类，这些文件和类由前端使用，并且由WordPress核心所需。
- en: wp-admin
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wp-admin
- en: This folder contains the files of the WordPress Dashboard, which is used to
    perform all of the administrative tasks such as writing posts, moderating comments,
    and installing plugins and themes. Only registered users are allowed to access
    the Dashboard.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件夹包含WordPress仪表板的文件，用于执行所有管理任务，如撰写帖子、审核评论以及安装插件和主题。只有注册用户才能访问仪表板。
- en: wp-content
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wp-content
- en: 'The `wp-content` folder contains all user-uploaded data and is again divided
    into three sub-folders:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`wp-content`文件夹包含所有用户上传的数据，并再次分为三个子文件夹：'
- en: '`themes`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`themes`'
- en: '`plugins`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plugins`'
- en: '`uploads`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uploads`'
- en: 'The `themes` directory contains all of the themes that are installed on our
    WordPress website. By default, WordPress comes with two themes: Twenty Twelve
    and Twenty Thirteen.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`themes`目录包含安装在我们的WordPress网站上的所有主题。默认情况下，WordPress带有两个主题：Twenty Twelve和Twenty
    Thirteen。'
- en: Similarly, the `plugins` folder is used to store all of the plugins installed
    on our WordPress website. All of the images (and other media files) that we've
    uploaded since the time we launched our website will be stored in the `uploads` directory.
    These are categorized by day, month, and year.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`plugins`文件夹用于存储安装在我们的WordPress网站上的所有插件。自从我们启动网站以来上传的所有图像（和其他媒体文件）将存储在`uploads`目录中。这些按日，月和年分类。
- en: Now that you have a basic understanding of the architecture and the file/directory
    structure in WordPress, let's start pen-testing.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对WordPress的架构和文件/目录结构有了基本的了解，让我们开始渗透测试。
- en: WordPress reconnaissance and enumeration
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress侦察和枚举
- en: 'Before you start exploiting any plugin/theme/core vulnerability of WordPress,
    the first step is to confirm whether the site is on WordPress or not. As for detecting
    WordPress itself, there are various ways to detect the installation of a WordPress
    CMS:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始利用WordPress的任何插件/主题/核心漏洞之前，第一步是确认网站是否在WordPress上。至于检测WordPress本身，有各种方法可以检测WordPress
    CMS的安装：
- en: Search for a `wp-content` string in the HTML page source.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在HTML页面源代码中搜索`wp-content`字符串。
- en: Look for the `/wp-trackback.php` or `/wp-links-opml.php` filenames—they return
    XML in the case of a WordPress installation.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找`/wp-trackback.php`或`/wp-links-opml.php`文件名 - 在WordPress安装的情况下它们返回XML。
- en: You can also try `/wp-admin/admin-ajax.php` and `/wp-login.php`.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以尝试`/wp-admin/admin-ajax.php`和`/wp-login.php`。
- en: Look for static files such as `readme.html` and `/wp-includes/js/colorpicker.js`.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找静态文件，如`readme.html`和`/wp-includes/js/colorpicker.js`。
- en: Once you have confirmed that the site is running on WordPress, the next step
    is to know what version of WordPress is running on the target server. To achieve
    this, you need to know the different ways you can detect its version number. Why
    the version number? Because based on the version of WordPress that is installed
    on the target server, you can test for plugin-based or WordPress-core exploits
    that may or may not be publicly available.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确认网站正在运行WordPress，下一步就是了解目标服务器上运行的WordPress版本。为了实现这一点，您需要知道可以检测其版本号的不同方法。为什么要版本号？因为根据安装在目标服务器上的WordPress版本，您可以测试可能公开或可能不公开的基于插件或WordPress核心的漏洞。
- en: Version detection
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本检测
- en: Every WordPress installation comes with a version number. In the latest WordPress
    versions, the version numbers were hidden by default, but we can still enumerate
    the version. In this section, you will learn some of the ways of identifying which
    version of WordPress is running.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 每个WordPress安装都带有一个版本号。在最新的WordPress版本中，默认情况下隐藏了版本号，但我们仍然可以枚举版本。在本节中，您将学习一些识别正在运行的WordPress版本的方法。
- en: Some of the most common recon techniques are `Readme.html`, meta generator,
    feed (RDF, Atom, and RSS), plugins and themes (JS and CSS ver), and hash match.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最常见的侦察技术是`Readme.html`，meta generator，feed（RDF，Atom和RSS），插件和主题（JS和CSS ver）以及哈希匹配。
- en: Readme.html
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Readme.html
- en: This is the easiest technique. All we have to do is visit the `readme.html`
    page and it discloses the version number in the center. The original purpose of
    this file was to give information to first-time users of the CMS on how to move
    ahead with the installation and usage of WordPress. It is supposed to be deleted
    once the installation and setup are complete. When using any tools, including
    Metasploit, always check the version number for the WordPress installation before
    performing any kind of exploitation.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最简单的技术。我们所要做的就是访问`readme.html`页面，它会在中心披露版本号。该文件的原始目的是向CMS的首次用户提供有关如何继续安装和使用WordPress的信息。一旦安装和设置完成，它应该被删除。在使用任何工具（包括Metasploit）之前，始终检查WordPress安装的版本号，然后再执行任何形式的利用。
- en: 'So, make sure you know what version you''re trying to pen-test. You can see
    an example of `readme.html` in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，请确保您知道您要进行渗透测试的版本。您可以在以下截图中看到`readme.html`的示例：
- en: '![](img/47c8a71e-5612-43b5-94ea-6eec443de1b7.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47c8a71e-5612-43b5-94ea-6eec443de1b7.png)'
- en: Next, we will look at the meta generator.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看meta generator。
- en: Meta generator
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meta generator
- en: 'The meta tag with the `generator` name attribute is generally described as
    the software that is used to generate the document/webpage. The exact version
    number is disclosed in the `content` attribute of the meta tag. WordPress-based
    websites often have this tag in their source, as shown in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`generator`名称属性的元标记通常被描述为用于生成文档/网页的软件。确切的版本号在元标记的`content`属性中披露。基于WordPress的网站通常在其源代码中具有此标记，如下面的截图所示：'
- en: '![](img/b6fe34bc-d909-4a69-9e73-e81b5c9a5f73.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6fe34bc-d909-4a69-9e73-e81b5c9a5f73.png)'
- en: Next, we will see how to obtain the version via JavaScript and CSS files.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到如何通过JavaScript和CSS文件获取版本。
- en: Getting the version via JavaScript and CSS files
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过JavaScript和CSS文件获取版本
- en: 'Another way of finding the version number is to view the source code of the
    following files. The following files request the JS and CSS files:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 找到版本号的另一种方法是查看以下文件的源代码。以下文件请求JS和CSS文件：
- en: '`wp-admin/install.php`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp-admin/install.php`'
- en: '`wp-admin/upgrade.php`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp-admin/upgrade.php`'
- en: '`wp-login.php`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp-login.php`'
- en: 'These disclose the exact version number in their `ver` parameter, as shown
    in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些在其`ver`参数中披露了确切的版本号，如下面的截图所示：
- en: '![](img/aafbf7e7-e25a-4244-9ac6-0b2c6359a66b.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aafbf7e7-e25a-4244-9ac6-0b2c6359a66b.png)'
- en: Next, we will see how to obtain the version via the feed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到如何通过feed获取版本。
- en: Getting the version via the feed
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过feed获取版本
- en: 'Sometimes, version information may also be disclosed in the feeds of the website.
    The following file paths can be used to disclose version information:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，版本信息也可能在网站的feed中披露。以下文件路径可用于披露版本信息：
- en: '`/index.php/feed/`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/index.php/feed/`'
- en: '`/index.php/feed/rss/`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/index.php/feed/rss/`'
- en: '`/index.php/feed/rss2/`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/index.php/feed/rss2/`'
- en: '`/index.php/comments/feed/`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/index.php/comments/feed/`'
- en: '`/index.php/feed/rdf/` (the file is locally downloaded)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/index.php/feed/rdf/`（文件是本地下载的）'
- en: '`/index.php/feed/atom/`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/index.php/feed/atom/`'
- en: '`/?feed=atom`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/?feed=atom`'
- en: '`/?feed=rss`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/?feed=rss`'
- en: '`/?feed=rss2`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/?feed=rss2`'
- en: '`/?feed=rdf`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/?feed=rdf`'
- en: 'The following screenshot shows the version disclosure through the feeds:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了通过feeds披露的版本信息：
- en: '![](img/043846de-e277-4b4c-a10c-bb59af500c6f.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/043846de-e277-4b4c-a10c-bb59af500c6f.png)'
- en: Next, we will look at OPML.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下OPML。
- en: Using Outline Processor Markup Language (OPML)
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用大纲处理标记语言（OPML）
- en: 'OPML is an XML format for outlines (defined as *a tree where each node contains
    a set of named attributes with string values*). The following file allows WordPress
    to import links from other websites as long as they''re in OPML format, but visiting
    this file also discloses the version information (in between HTML comment tags)
    as shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: OPML是大纲处理标记语言（*定义为*每个节点包含一组具有字符串值的命名属性的树*）。以下文件允许WordPress从其他网站导入链接，只要它们以OPML格式存在，但访问此文件也会披露版本信息（在HTML注释标签之间），如下截图所示：
- en: '[PRE0]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This can be seen in the following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在以下截图中看到：
- en: '![](img/acd12498-2ab0-49ba-882b-3874a991c629.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/acd12498-2ab0-49ba-882b-3874a991c629.png)'
- en: Next, we will look at advanced fingerprinting.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下高级指纹识别。
- en: Unique/advanced fingerprinting
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 唯一/高级指纹识别
- en: 'This is another way of fingerprinting WordPress to find out the exact version.
    As the name suggests, the technique is quite unique. It is done by calculating
    the hashes of static files and comparing them with the hashes of the same static
    files in the different versions of WordPress releases. You can do this by executing
    the following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一种指纹识别WordPress确切版本的方法。顾名思义，这种技术非常独特。它是通过计算静态文件的哈希值，并将其与不同版本的WordPress发布中相同静态文件的哈希值进行比较来完成的。您可以通过执行以下命令来执行此操作：
- en: '![](img/c54f698d-13f1-42d6-9ba0-ba96b97f16c5.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c54f698d-13f1-42d6-9ba0-ba96b97f16c5.png)'
- en: 'To compare the hashes, see the following GitHub repository, at: [https://github.com/philipjohn/exploit-scanner-hashes](https://github.com/philipjohn/exploit-scanner-hashes).'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要比较哈希值，请参阅以下GitHub存储库：[https://github.com/philipjohn/exploit-scanner-hashes](https://github.com/philipjohn/exploit-scanner-hashes)。
- en: WordPress reconnaissance using Metasploit
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行WordPress侦察
- en: Metasploit has a scanner module for WordPress to get the version number, `wordpress_scanner`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit有一个用于获取版本号的WordPress扫描器模块，`wordpress_scanner`。
- en: 'Let''s set the options for this module:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为此模块设置选项：
- en: '![](img/f98f065a-fd34-48b1-8a72-8398c6beb6b4.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f98f065a-fd34-48b1-8a72-8398c6beb6b4.png)'
- en: 'Once everything is set, let''s run it:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一切准备就绪后，让我们运行它：
- en: '![](img/d9f00ebc-e06b-4eb0-8a18-9d6e4347162e.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9f00ebc-e06b-4eb0-8a18-9d6e4347162e.png)'
- en: This is a very simple scanner that tries to find the version number using the
    techniques mentioned previously.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的扫描程序，尝试使用先前提到的技术找到版本号。
- en: Now that we have the version numbers, you can refer to the following case studies
    on how to enumerate and exploit WordPress vulnerabilities. The vulnerabilities
    given are explained in detail.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们有了版本号，您可以参考以下案例研究，了解如何枚举和利用WordPress的漏洞。给出的漏洞都有详细解释。
- en: WordPress enumeration using Metasploit
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行WordPress枚举
- en: 'The following are the attack surfaces where you can focus your enumeration
    time:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是攻击面，您可以在枚举时专注的地方：
- en: Usernames
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名
- en: Themes
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主题
- en: Plugins
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件
- en: 'Using the Metasploit module, `auxiliary/scanner/http/wordpress_login_enum`,
    follow these steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Metasploit模块`auxiliary/scanner/http/wordpress_login_enum`，按照以下步骤操作：
- en: 'You can try to brute-force the username or you can enumerate the username:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以尝试暴力破解用户名，也可以枚举用户名：
- en: '![](img/a410ad68-667c-48f9-9d5d-d6ab51b0b52e.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a410ad68-667c-48f9-9d5d-d6ab51b0b52e.png)'
- en: 'Let''s set the options just to enumerate the username and run the module:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置选项，只枚举用户名并运行模块：
- en: '![](img/ad5d19e6-ebeb-478d-a1fd-7d49a6e50ce0.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad5d19e6-ebeb-478d-a1fd-7d49a6e50ce0.png)'
- en: 'You can now try brute-forcing using a dictionary. The default options for the
    module enable it to perform a brute-force attack:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以尝试使用字典进行暴力破解。模块的默认选项使其能够执行暴力破解攻击：
- en: '![](img/880e5de1-ccee-4f47-84ad-d23ab23c885c.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/880e5de1-ccee-4f47-84ad-d23ab23c885c.png)'
- en: 'Let''s set the options now. We have set the username that we found from the
    preceding enumeration method:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们设置选项。我们已经设置了从前面的枚举方法中找到的用户名：
- en: '![](img/3c9a8662-7c8e-48b5-b2a8-da48490f11cb.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c9a8662-7c8e-48b5-b2a8-da48490f11cb.png)'
- en: 'For a password dictionary, use the `set PASS_FILE <file>` command and run the
    module:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于密码字典，使用`set PASS_FILE <file>`命令并运行模块：
- en: '![](img/535be82d-a179-4cda-a41d-324305d50f11.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/535be82d-a179-4cda-a41d-324305d50f11.png)'
- en: In the next section, we will look at vulnerability assessment scanning.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看一下漏洞评估扫描。
- en: Vulnerability assessment for WordPress
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress漏洞评估
- en: Metasploit does not have a module that can perform vulnerability assessment
    scanning. However, you can write a Metasploit module that acts as a wrapper for
    a third-party tool such as WPscan, which can be used for vulnerability assessment
    scanning.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit没有可以执行漏洞评估扫描的模块。但是，您可以编写一个充当第三方工具（如WPscan）包装器的Metasploit模块，用于漏洞评估扫描。
- en: 'We have written a custom Metasploit module that, on execution, will run WPscan,
    parse the output, and print it. Though the module is just a rough wrapper code,
    you can further modify it according to your needs. The following is the sample
    code for the custom Metasploit module:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了一个自定义的Metasploit模块，执行时将运行WPscan，解析输出并打印出来。虽然该模块只是一个粗糙的包装代码，但您可以根据需要进一步修改它。以下是自定义Metasploit模块的示例代码：
- en: 'We will start by adding the required libraries as follows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先添加所需的库，如下所示：
- en: '[PRE1]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, we add the Metasploit `Auxiliary` class:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们添加Metasploit的`Auxiliary`类：
- en: '[PRE2]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We define the informational part of the module:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义模块的信息部分：
- en: '[PRE3]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, we will add the `options` section for the module, using which we can
    add the target URL for the test:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们将添加模块的`options`部分，通过它我们可以为测试添加目标URL：
- en: '[PRE4]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we define the `target_url` method that will store the user option, `TARGET_URL`:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义`target_url`方法，该方法将存储用户选项`TARGET_URL`：
- en: '[PRE5]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We also define `find_wpscan_path` method, which will look for the `wpscan`
    file in the system:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还定义了`find_wpscan_path`方法，该方法将在系统中查找`wpscan`文件：
- en: '[PRE6]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we add the auxiliary module execution method, `run`, and check whether
    `wpscan` is installed on the system or not:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们添加辅助模块执行方法`run`，并检查系统中是否安装了`wpscan`：
- en: '[PRE7]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If `wpscan` is found, the module will start by creating a temporary file with
    random characters:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找到`wpscan`，模块将首先创建一个带有随机字符的临时文件：
- en: '[PRE8]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following is the `wpscan` execution block. A `wpscan` process will be created
    here with the user options:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是`wpscan`执行块。这里将使用用户选项创建一个`wpscan`进程：
- en: '[PRE9]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When the execution is completed, the module will read the temporary file containing
    the `wpscan` output:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 执行完成后，模块将读取包含`wpscan`输出的临时文件：
- en: '[PRE10]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we add the code block that will parse the JSON output:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们添加将解析JSON输出的代码块：
- en: '[PRE11]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here, we are looking for the `interesting_findings` array in the JSON output.
    We''ll use this array to print the details for the vulnerabilities found in the
    WordPress target site:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在查找JSON输出中的`interesting_findings`数组。我们将使用此数组打印在WordPress目标站点中发现的漏洞的详细信息：
- en: '[PRE12]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We add the code block for checking the WordPress version by looking for the
    `version` array in the JSON output and parsing it:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加了检查JSON输出中的`version`数组并解析WordPress版本的代码块：
- en: '[PRE13]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We parse the total number of vulnerabilities found by `wpscan` and print it
    (including references and CVE links):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解析了`wpscan`发现的漏洞总数，并打印出来（包括引用和CVE链接）：
- en: '[PRE14]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We add the code block for checking the installed themes using `wpscan`:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加了用于检查已安装主题的代码块，使用`wpscan`：
- en: '[PRE15]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We also add the code block for enumerating the installed plugins using `wpscan`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了使用`wpscan`枚举已安装插件的代码块：
- en: '[PRE16]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We then add the code block to look for the vulnerabilities found in the installed
    plugins and map it according to the CVEs and reference URLs (including `exploit-db`
    URLs):'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们添加了查找已安装插件中发现的漏洞并根据CVE和引用URL（包括`exploit-db` URL）进行映射的代码块：
- en: '[PRE17]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once everything is done, delete the temporary file created by this module:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切都完成后，删除此模块创建的临时文件：
- en: '[PRE18]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here''s the complete code for the WPscan auxiliary module:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是WPscan辅助模块的完整代码：
- en: '[PRE19]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Following are the steps to run the custom module we just created:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是运行我们刚创建的自定义模块的步骤：
- en: 'Copy the module to `<path_to_metasploit>/modules/auxiliary/scanner/wpscan.rb`
    and start Metasploit:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模块复制到`<path_to_metasploit>/modules/auxiliary/scanner/wpscan.rb`并启动Metasploit：
- en: '![](img/644d4153-ce63-42a6-a54b-f815a2cee11c.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/644d4153-ce63-42a6-a54b-f815a2cee11c.png)'
- en: 'Set the options and run the module:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置选项并运行模块：
- en: '![](img/9d4414cc-b40d-40a1-bd8e-dd7699618f12.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d4414cc-b40d-40a1-bd8e-dd7699618f12.png)'
- en: 'The module also parses the plugin information:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块还解析插件信息：
- en: '![](img/277f5e1e-edef-46f5-8528-6ab302a8446f.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/277f5e1e-edef-46f5-8528-6ab302a8446f.png)'
- en: This module doesn't save the information in the database so you could customize
    it to do that if you wish. The sole purpose of this module is to enumerate plugins,
    themes, and WordPress versions and to find vulnerabilities. In the next section,
    we are going to cover exploitation.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块不会将信息保存在数据库中，因此如果您愿意，可以自定义它来执行。该模块的唯一目的是枚举插件、主题和WordPress版本，并查找漏洞。在下一节中，我们将介绍利用。
- en: WordPress exploitation part 1 – WordPress Arbitrary File Deletion
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress利用部分1-WordPress任意文件删除
- en: Now that you have learned about how to identify WordPress versions, let's look
    at some ways of exploiting WordPress in detail. We will also discuss how the exploit
    process works.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了如何识别WordPress版本，让我们详细了解一些利用WordPress的方法。我们还将讨论利用过程的工作原理。
- en: We will first look at the *WordPress Arbitrary File Deletion* vulnerability.
    This vulnerability allows any authenticated user to delete a file from the server.
    This can be used by an attacker to execute commands. Let's look at how this exploit
    works and how to achieve command execution.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先来看一下*WordPress任意文件删除*漏洞。此漏洞允许任何经过身份验证的用户从服务器上删除文件。攻击者可以利用这一点来执行命令。让我们看看这个利用是如何工作的以及如何实现命令执行。
- en: 'The following screenshot shows the WordPress blog running on our localhost:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了在我们的本地主机上运行的WordPress博客：
- en: '![](img/0ab04930-fc56-4664-af10-4b4a39aaa041.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ab04930-fc56-4664-af10-4b4a39aaa041.png)'
- en: The vulnerability is actually a second-order file deletion where we upload and
    edit an image, then we put the path of our file in the metadata. When the image
    is deleted, WordPress calls the unlink function to automatically remove the metadata
    that contains a path to our file, so it is deleted as well. Let's look at the
    basic vulnerability flow.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞实际上是一个二次文件删除，我们上传和编辑图像，然后将我们文件的路径放入元数据中。当图像被删除时，WordPress调用unlink函数自动删除包含我们文件路径的元数据，因此文件也被删除。让我们看一下基本的漏洞流程。
- en: Vulnerability flow and analysis
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞流程和分析
- en: 'We''ll dig deeper into the root cause of this vulnerability. Look at the following
    screenshot of the `wp-admin/post.php` file. Here, unsanitized input is taken from
    the user and stored in `$newmeta`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将深入挖掘此漏洞的根本原因。看一下`wp-admin/post.php`文件的以下屏幕截图。在这里，未经过滤的输入来自用户并存储在`$newmeta`中：
- en: '![](img/aee3e993-ad6e-49ed-9c92-3e693964d7ca.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aee3e993-ad6e-49ed-9c92-3e693964d7ca.png)'
- en: 'In the `wp-includes/post.php` file, the same input is passed to `wp_update_attachment_metadata()`
    to be stored in the database as a serialized value, `meta_key`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在`wp-includes/post.php`文件中，相同的输入被传递给`wp_update_attachment_metadata()`，以作为序列化值存储在数据库中，`meta_key`：
- en: '![](img/0b9b3840-f22c-458b-9d9e-dc515fe82c13.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b9b3840-f22c-458b-9d9e-dc515fe82c13.png)'
- en: 'When a user clicks on the delete media button, the following code asks for
    the input from the database and stores it in `$thumbfile`. Then, an unlink function
    is called to remove the specified file. The thumb link metadata gets deleted because
    it contains a path to `wp-config`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击删除媒体按钮时，以下代码将要求从数据库中获取输入并将其存储在`$thumbfile`中。然后，调用unlink函数来删除指定的文件。缩略图链接元数据被删除，因为它包含了对`wp-config`的路径：
- en: '![](img/9d176a82-42bd-4132-9a70-39c6a17a9f36.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d176a82-42bd-4132-9a70-39c6a17a9f36.png)'
- en: Next, we will exploit the vulnerability using Metasploit.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用Metasploit利用漏洞。
- en: Exploiting the vulnerability using Metasploit
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit利用漏洞
- en: 'Metasploit has a built-in exploit module that deletes any arbitrary file on
    the server. We will use an example of the `wp-config` file, as we will later discuss
    how to use this exploit as a way to upload the shell on to the server:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit有一个内置的利用模块，可以删除服务器上的任意文件。我们将使用`wp-config`文件的示例，因为我们稍后将讨论如何使用此利用来将shell上传到服务器上：
- en: To use the module, we run the following command in msfconsole.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用该模块，我们在msfconsole中运行以下命令。
- en: 'Use `auxiliary/scanner/http/wp_arbitrary_file_deletion`:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`auxiliary/scanner/http/wp_arbitrary_file_deletion`：
- en: '![](img/d2bc9cb7-fbaa-453f-860a-5b6740bd759e.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2bc9cb7-fbaa-453f-860a-5b6740bd759e.png)'
- en: 'As shown in the preceding screenshot, we enter the RHOST, the WordPress username
    and password, and the path of the config file. Before we run the exploit, let''s
    also look at the current entries in the `wp_postmeta` table of our WordPress database,
    as shown in the following screenshot:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们输入了RHOST、WordPress用户名和密码以及配置文件的路径。在运行利用之前，让我们也看一下我们的WordPress数据库的`wp_postmeta`表中当前的条目，如下截图所示：
- en: '![](img/53d389a6-a53a-41d0-a30b-303861c28093.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53d389a6-a53a-41d0-a30b-303861c28093.png)'
- en: 'The `wp-config.php` file also exists on the server for now:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`wp-config.php`文件现在也存在于服务器上：'
- en: '![](img/c71c4646-2b73-4088-8a97-5f8b7ae09e8a.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c71c4646-2b73-4088-8a97-5f8b7ae09e8a.png)'
- en: 'When the module is executed, Metasploit authenticates it with WordPress and
    uploads a `.gif` file onto the server:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行模块时，Metasploit会使用WordPress进行身份验证，并将`.gif`文件上传到服务器：
- en: '![](img/8295e6bb-88a1-44fa-aca8-787f83e9bf1d.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8295e6bb-88a1-44fa-aca8-787f83e9bf1d.png)'
- en: 'Looking at the entry of the `wp_postmeta` table, again we see that an attachment
    now exists and the metadata of the attachment is stored in a serialized format.
    The metadata has details such as filename, width, height, and EXIF headers:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 再次查看`wp_postmeta`表的条目，我们看到现在存在一个附件，并且附件的元数据以序列化格式存储。元数据包含文件名、宽度、高度和EXIF标头等详细信息：
- en: '![](img/8592b189-e21d-403a-ba7e-c39773d91c55.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8592b189-e21d-403a-ba7e-c39773d91c55.png)'
- en: 'Next, the exploit will attempt to edit the attachment and set the thumb parameter
    as the path of the file we want to delete:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，利用将尝试编辑附件并将缩略图参数设置为我们要删除的文件的路径：
- en: '![](img/b1d6b1bc-00d6-47ad-98c8-a7a373467017.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1d6b1bc-00d6-47ad-98c8-a7a373467017.png)'
- en: 'This gives a `302` response and we are redirected back to the post page:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这会得到一个`302`响应，我们被重定向回帖子页面：
- en: '![](img/30388210-f549-4906-b09f-e5cbed547012.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30388210-f549-4906-b09f-e5cbed547012.png)'
- en: 'Let''s see how the database has been updated after this request. Viewing the
    `wp_postmeta` table again, we will see that two new strings have been added to
    the serialized `meta_value` column. These values are a thumb and the path of the
    config file:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在此请求之后数据库是如何更新的。再次查看`wp_postmeta`表，我们将看到已向序列化的`meta_value`列添加了两个新字符串。这些值是缩略图和配置文件的路径：
- en: '![](img/fdd2fb65-0ea0-41b4-b5d7-0643178b8b6b.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fdd2fb65-0ea0-41b4-b5d7-0643178b8b6b.png)'
- en: 'The next step for the exploit is to delete the uploaded attachment, which will
    force the `unlink()` function to be called, resulting in the deletion of the config
    file:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 利用的下一步是删除已上传的附件，这将导致调用`unlink()`函数，从而删除配置文件：
- en: '![](img/9779c3d2-be73-4dc8-bf77-11eca91cd8f9.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9779c3d2-be73-4dc8-bf77-11eca91cd8f9.png)'
- en: The next question that comes to mind is: **How does deleting a config file get
    us Remote Code Execution**(**RCE**) **on the server?**
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要考虑的问题是：**删除配置文件如何让我们在服务器上实现远程代码执行（RCE）**？
- en: 'Once the `wp-config.php` file gets deleted, WordPress will redirect the site
    to `setup-config.php`, that is, the default installation startup page, as shown
    in the following screenshot:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`wp-config.php`文件被删除，WordPress将重定向站点到`setup-config.php`，即默认的安装启动页面，如下截图所示：
- en: '![](img/622632d9-a1e2-4f15-aceb-dbad9613365a.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/622632d9-a1e2-4f15-aceb-dbad9613365a.png)'
- en: The idea is to create a database on our own server and to set up WordPress again
    with our database.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 想法是在我们自己的服务器上创建一个数据库，并重新设置WordPress与我们自己的数据库：
- en: 'The following screenshot shows the SQL commands for creating a MySQL database
    on our own server. This server needs to be reachable by WordPress, so we have
    to ensure that MySQL is running and that it allows remote logins:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在我们自己的服务器上创建MySQL数据库的SQL命令。这个服务器需要被WordPress访问，所以我们必须确保MySQL正在运行并且允许远程登录：
- en: '![](img/695bfe68-4adb-457d-a9fc-dcf6478e2819.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/695bfe68-4adb-457d-a9fc-dcf6478e2819.png)'
- en: 'Now, we click continue and provide the database connection details, as shown
    here:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们点击继续并提供数据库连接详细信息，如下所示：
- en: '![](img/f940bd9a-ec22-46c0-af9a-05884504e7d3.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f940bd9a-ec22-46c0-af9a-05884504e7d3.png)'
- en: 'Once done, the next step is to create the WordPress user to log in:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，下一步是创建WordPress用户进行登录：
- en: '![](img/c0cfd386-a692-4fdf-9780-25577512341b.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0cfd386-a692-4fdf-9780-25577512341b.png)'
- en: 'We can now log in with the WordPress user we just created. The WordPress instance
    on the server is now connected and configured with our own database:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用刚刚创建的WordPress用户登录。服务器上的WordPress实例现在已连接并配置为使用我们自己的数据库：
- en: '![](img/eef9d31c-ac40-4ba6-915c-6a58eee3bafc.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eef9d31c-ac40-4ba6-915c-6a58eee3bafc.png)'
- en: 'As we have admin access to the WordPress CMS, we can use the Metasploit module
    to upload a shell on the site. This can be done using the following exploit:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们对WordPress CMS具有管理员访问权限，因此我们可以使用Metasploit模块在站点上上传shell。可以使用以下利用方法来实现：
- en: '[PRE20]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/c0538732-e8c9-4f71-98d3-fae3a60d06dc.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0538732-e8c9-4f71-98d3-fae3a60d06dc.png)'
- en: 'Let''s set the options for this exploit to use, as shown here:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置此利用要使用的选项，如下所示：
- en: '![](img/697f3f79-49d5-40b8-aabe-db873eac18b0.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/697f3f79-49d5-40b8-aabe-db873eac18b0.png)'
- en: 'Now, let''s execute the module and wait for the magic:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们执行该模块并等待魔法发生：
- en: '![](img/87e0f3c8-c573-40f6-aa19-eef1ebf98f1c.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87e0f3c8-c573-40f6-aa19-eef1ebf98f1c.png)'
- en: 'We now have meterpreter access on the server. Hence, RCE is achieved:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在服务器上有meterpreter访问权限。因此，已实现RCE：
- en: '![](img/211ab09b-0a74-4abb-9452-e7c2d101253e.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/211ab09b-0a74-4abb-9452-e7c2d101253e.png)'
- en: This was a pretty straightforward exploit. The hashes can then be further cracked
    to gain access to the admin panel, or once we get the plaintext password, we can
    use the WordPress shell upload module to get a meterpreter on the box. In the
    next section, we will look at an unauthenticated SQL injection in the Google Maps
    plugin.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常直接的利用。然后可以进一步破解哈希值以获得对管理员面板的访问权限，或者一旦获得明文密码，就可以使用WordPress shell上传模块在服务器上获取meterpreter。在接下来的部分，我们将看一下Google地图插件中的未经身份验证的SQL注入。
- en: WordPress exploitation part 2 – unauthenticated SQL injection
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress利用第2部分-未经身份验证的SQL注入
- en: 'Let''s look at another case of SQL injection, which was discovered in the WordPress
    Google Maps plugin. Metasploit already has a built-in exploit module that extracts
    the `wp_users` table from the database:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看另一个SQL注入的案例，这是在WordPress谷歌地图插件中发现的。Metasploit已经有一个内置的利用模块，可以从数据库中提取`wp_users`表：
- en: '[PRE21]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Before we run the module, let's look at the source code of the plugin and understand
    where the problem was.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行模块之前，让我们看一下插件的源代码，并了解问题出在哪里。
- en: Vulnerability flow and analysis
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞流程和分析
- en: 'Looking at the source code of `class.rest-api.php`, we can see that the user
    input is passed as a `get` parameter named `fields` into the `explode` function.
    The `explode` function is used to *split a string by a specified string into pieces*:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`class.rest-api.php`的源代码，我们可以看到用户输入作为名为`fields`的`get`参数传递到`explode`函数中。`explode`函数用于*按指定字符串拆分字符串为多个部分*：
- en: '![](img/7896c1b7-2d14-47cf-b6e6-710917affa92.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7896c1b7-2d14-47cf-b6e6-710917affa92.png)'
- en: 'Then, the input is stored in the `$imploded` variable, combined back using
    `implode()`, and passed directly into the `SELECT` query, as shown in the screenshot
    here:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，输入存储在`$imploded`变量中，使用`implode()`组合后直接传递到`SELECT`查询中，如下截图所示：
- en: '![](img/2d450d07-01af-473d-af5f-69ae07fe2f80.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d450d07-01af-473d-af5f-69ae07fe2f80.png)'
- en: The `$imploded` variable is the injection point here. This vulnerability can
    be exploited by using the Metasploit module as well.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`$imploded`变量是注入点。这个漏洞也可以利用Metasploit模块来利用。
- en: Exploiting the vulnerability using Metasploit
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit利用漏洞
- en: 'Running the exploit against a target will give us the data stored in the `wp_users`
    table, as shown here:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 对目标运行利用程序将给我们显示存储在`wp_users`表中的数据，如下所示：
- en: '![](img/5f63e3b9-aa74-4a75-8f06-91ea0173e857.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f63e3b9-aa74-4a75-8f06-91ea0173e857.png)'
- en: Next, we will look at the third and final part of WordPress exploitation.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下WordPress利用的第三部分和最后一部分。
- en: WordPress exploitation part 3 – WordPress 5.0.0 Remote Code Execution
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress利用第3部分-WordPress 5.0.0远程代码执行
- en: In this section, we will look at the RCE vulnerability, which existed in WordPress
    version 5.0.0 and below. This exploit chains two different vulnerabilities to
    achieve code execution (path traversal and local file inclusion). Metasploit already
    has a module for this exploit.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一下RCE漏洞，这个漏洞存在于WordPress版本5.0.0及以下。这个利用链两个不同的漏洞来实现代码执行（路径遍历和本地文件包含）。Metasploit已经有一个针对这个漏洞的模块。
- en: Vulnerability flow and analysis
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞流程和分析
- en: 'The first vulnerability is CVE-2019-8942, which overwrites the `post` meta
    entries:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个漏洞是CVE-2019-8942，它覆盖了`post`元数据条目：
- en: '![](img/79575cd5-bfee-4f91-88ba-54b9b2e272ff.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79575cd5-bfee-4f91-88ba-54b9b2e272ff.png)'
- en: 'The unsanitized user input is then passed onto `wp_update_post()`, which doesn''t
    check for non-allowed `post` meta fields:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 未经过消毒的用户输入然后传递到`wp_update_post()`，它不检查不允许的`post`元数据字段：
- en: '![](img/05675fe4-d972-464d-bfc8-899e7e590d49.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05675fe4-d972-464d-bfc8-899e7e590d49.png)'
- en: The attacker can overwrite the `_wp_attached_file` post meta-key to their malicious
    file. At this point, we have exploited CVE-2019-8942\. Now that we have control
    over what we can overwrite in the post meta entries, let's leverage the next vulnerability,
    CVE-2019-8943, a path traversal vulnerability. Using this vulnerability, we can
    change the path of our uploaded malicious file from the previously exploited vulnerability
    (CVE-2019-8942) to the path of our choice for RCE.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以覆盖`_wp_attached_file`的post元数据键为他们的恶意文件。在这一点上，我们已经利用了CVE-2019-8942。现在我们已经控制了在post元数据条目中可以覆盖的内容，让我们利用下一个漏洞CVE-2019-8943，即路径遍历漏洞。利用这个漏洞，我们可以将我们上传的恶意文件的路径从先前利用的漏洞（CVE-2019-8942）更改为我们选择的路径以实现RCE。
- en: 'The `wp_crop_image()` function calls the `get_attached_file()` function without
    any file path validation. So, the malicious image file uploaded on the server
    will be passed to the `get_attached_file()` function at the time the `wp_crop_image()`
    function is called (at the time of image crop):'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`wp_crop_image()`函数调用`get_attached_file()`函数时没有进行任何文件路径验证。因此，在服务器上上传的恶意图片文件将在调用`wp_crop_image()`函数时传递给`get_attached_file()`函数（在裁剪图片时）：'
- en: '![](img/420d959f-dc5a-44f6-a353-c12ee2807714.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](img/420d959f-dc5a-44f6-a353-c12ee2807714.png)'
- en: 'We can exploit this vulnerability to change the path of our uploaded malicious
    file and save the cropped version of the image in the default themes directory,
    that is, `wp-content/themes/<default_theme>/<cropped-image>.jpg`:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用这个漏洞来改变我们上传的恶意文件的路径，并将裁剪后的图片保存在默认主题目录中，即`wp-content/themes/<default_theme>/<cropped-image>.jpg`：
- en: '![](img/c977730a-ad7d-4fbd-b74f-391c42dfdf80.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c977730a-ad7d-4fbd-b74f-391c42dfdf80.png)'
- en: As we can see in the preceding screenshot, the malicious image is saved into
    the default theme folder. Now that our malicious image is in place, we can request
    for the post so that our PHP payload gets executed, resulting in RCE.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上面的截图中所看到的，恶意图片被保存在默认主题文件夹中。现在我们的恶意图片已经就位，我们可以请求帖子，以便我们的PHP有效负载得到执行，从而实现RCE。
- en: Exploiting the vulnerability using Metasploit
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit利用漏洞
- en: 'The module can be selected in the Metasploit console by using the following
    command:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令在Metasploit控制台中选择模块：
- en: '[PRE22]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](img/e9b86a32-cf35-4d2c-991a-09e693695a93.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9b86a32-cf35-4d2c-991a-09e693695a93.png)'
- en: 'We set the required options as shown in the following screenshot. We will need
    a low privilege account on the WordPress blog, as this vulnerability requires
    authentication as well as the privilege of uploading and editing media:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置了如下截图中所示的必需选项。我们将需要WordPress博客上的低权限帐户，因为此漏洞需要身份验证以及上传和编辑媒体的权限：
- en: '![](img/f8e38b91-b9c5-498c-b172-8108bf3dfc80.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8e38b91-b9c5-498c-b172-8108bf3dfc80.png)'
- en: 'The exploitation happens in several steps. The first step that the Metasploit
    module does is check whether the `targeturi` provided is correct or not:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 利用发生在几个步骤中。Metasploit模块的第一步是检查提供的`targeturi`是否正确：
- en: '![](img/31153afb-0ed7-4a44-9ae1-90e84cef11a5.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31153afb-0ed7-4a44-9ae1-90e84cef11a5.png)'
- en: 'On getting a 200 HTTP response code, it confirms the `targeturi` path:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 得到200的HTTP响应代码后，确认了`targeturi`路径：
- en: '![](img/5b78206a-09db-4e1c-a9ea-e4207e9b9fc8.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b78206a-09db-4e1c-a9ea-e4207e9b9fc8.png)'
- en: 'The module continues to the next step—authentication. The username and password
    used for the module will get used in this step. While authenticating with the
    WordPress site, the module also requests for redirection to a non-existent page:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 模块继续下一步——身份验证。在此步骤中，模块使用的用户名和密码将被使用。在与WordPress网站进行身份验证时，模块还请求重定向到一个不存在的页面：
- en: '![](img/ddfa5732-c0c0-4d37-934a-11ae67e1fccd.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddfa5732-c0c0-4d37-934a-11ae67e1fccd.png)'
- en: 'The HTTP response will be a redirection (302) to a page that doesn''t exist.
    This is done just to get the session cookies from the server. Everything after
    this step is accomplished using these cookies:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP响应将重定向（302）到一个不存在的页面。这样做是为了从服务器获取会话cookie。在此步骤之后的一切都是使用这些cookie完成的：
- en: '![](img/af2d092a-076a-4d86-b548-40da3ec12963.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af2d092a-076a-4d86-b548-40da3ec12963.png)'
- en: 'Let''s confirm the database status:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确认数据库状态：
- en: '![](img/fd522b3e-4e20-4737-a891-f1552e0b3160.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd522b3e-4e20-4737-a891-f1552e0b3160.png)'
- en: 'Now that the session is retrieved from the server, in the next step, the module
    requests the `media-new.php` page. This page is responsible for media uploads
    to the WordPress site:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 现在会话已从服务器检索到，在下一步中，该模块请求`media-new.php`页面。该页面负责将媒体上传到WordPress网站：
- en: '![](img/7b2c026a-c212-4aa9-80bb-45c770f1c9ac.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b2c026a-c212-4aa9-80bb-45c770f1c9ac.png)'
- en: 'The objective here is to upload an image with our payload embedded in it:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的目标是上传一个嵌入了我们有效载荷的图像：
- en: '![](img/3640ee55-5e04-4fc6-b3c8-890c7eecb754.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3640ee55-5e04-4fc6-b3c8-890c7eecb754.png)'
- en: 'The module then uploads the image embedded with our payload in it:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，该模块上传了嵌入了我们的有效载荷的图像：
- en: '![](img/bca11c05-baf5-487c-a6a2-36d58b4bd234.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bca11c05-baf5-487c-a6a2-36d58b4bd234.png)'
- en: As we can see in the preceding screenshot, the payload embedded in the image
    is `<?=`$_GET[0]`;?>`. The reason we used such a compressed payload is that we
    don't have much space left for our payload to get executed. Also, notice that
    the payload is embedded in two different places—just after the scan header and
    in the EXIF metadata. The reason it's embedded twice is to make sure the payload
    gets executed.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中看到的，嵌入在图像中的有效载荷是`<?=`$_GET[0]`;?>`。我们使用这样一个压缩的有效载荷的原因是因为我们剩下的空间不多，用于执行有效载荷。另外，请注意，有效载荷嵌入在两个不同的地方——扫描标头后面和EXIF元数据中。嵌入两次的原因是为了确保有效载荷被执行。
- en: 'WordPress supports two image editing extensions for PHP: **GD** **Library**
    and **Imagick**. GD Library compresses the image and strips all EXIF metadata.
    Imagick won''t strip off any EXIF metadata. That is the reason the module embeds
    the payload twice.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress支持两种用于PHP的图像编辑扩展：**GD** **Library**和**Imagick**。GD Library压缩图像并去除所有EXIF元数据。Imagick不会去除任何EXIF元数据。这就是为什么该模块将有效载荷嵌入图像两次的原因。
- en: 'The path and the post metadata at the time of upload are stored in the database:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 上传时的路径和POST元数据存储在数据库中：
- en: '![](img/45360bc1-ee8b-40b9-a631-ce2f8835da76.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45360bc1-ee8b-40b9-a631-ce2f8835da76.png)'
- en: 'Once the malicious image is uploaded, an ID is allotted to the image with its
    full path in the response:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦恶意图像上传，响应中会分配一个ID给图像，并显示其完整路径：
- en: '![](img/1ef665c6-bf8f-4c54-929c-c3cc18bdea92.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ef665c6-bf8f-4c54-929c-c3cc18bdea92.png)'
- en: 'The module checks whether the WordPress site is vulnerable to CVE-2019-8942
    and CVE-2019-8943 or not. It does this in the following steps:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块检查WordPress网站是否容易受到CVE-2019-8942和CVE-2019-8943的攻击。它通过以下步骤来实现：
- en: It confirms whether the image is uploaded or not by querying all of the attachments.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '通过查询所有附件来确认图像是否已上传或不。 '
- en: It makes sure that the malicious image is saved with a size of 400 x 300\. (This
    will help when the fake crop is done.)
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它确保恶意图像以400 x 300的大小保存。（这将有助于进行虚假裁剪时。）
- en: It gets the updated `wp_nonce` and updated filename when editing the malicious
    image.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它获取了更新的`wp_nonce`和编辑恶意图像时的更新文件名。
- en: It checks whether the POST metadata entry for the image can be overwritten from
    `.jpg` to `.jpg?/x` or not. If it's changed, it shows that the WordPress site
    is vulnerable to CVE-2019-8942.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它检查图像的POST元数据条目是否可以从`.jpg`被覆盖为`.jpg?/x`。如果更改了，就表明WordPress网站容易受到CVE-2019-8942的攻击。
- en: It crops the image (a fake crop here) to check whether the WordPress site is
    vulnerable to CVE-2019-8943, a path traversal vulnerability.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它裁剪图像（这里是一个虚假的裁剪）来检查WordPress网站是否容易受到CVE-2019-8943的攻击，即路径遍历漏洞。
- en: 'Once the module confirms the vulnerability, it exploits CVE-2019-8942 by overwriting
    the POST metadata from `.jpg` to `.jpg?/../../../../themes/#{@current_theme}/#`{`@shell_name`}:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦模块确认了漏洞，它通过将POST元数据从`.jpg`覆盖为`.jpg?/../../../../themes/#{@current_theme}/#`{`@shell_name`}来利用CVE-2019-8942：
- en: '![](img/cd0c3186-7084-48ba-81fb-483fc174f2e2.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd0c3186-7084-48ba-81fb-483fc174f2e2.png)'
- en: 'The following screenshot shows the updated value of the `meta_value` column:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`meta_value`列的更新值：
- en: '![](img/57c237e9-7099-4975-9039-1d5cf665dacb.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57c237e9-7099-4975-9039-1d5cf665dacb.png)'
- en: 'We can also see in the following screenshot that the default template has been
    changed to `cropped-zAdFmXvBCk.jpg`:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在以下截图中看到，默认模板已更改为`cropped-zAdFmXvBCk.jpg`：
- en: '![](img/39360439-d3c9-4306-a03c-afa9d9bf9514.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39360439-d3c9-4306-a03c-afa9d9bf9514.png)'
- en: 'The module then requests the default template with the post ID and appends
    the `0` parameter with the command to execute for RCE:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，模块请求带有帖子ID的默认模板，并附加`0`参数以执行RCE的命令：
- en: '![](img/191b9e8b-b961-4cd0-9264-bc37f3921191.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](img/191b9e8b-b961-4cd0-9264-bc37f3921191.png)'
- en: 'The output for the command is in the following response:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出如下：
- en: '![](img/dd4e6f35-a083-4f0d-8016-78723ce829a0.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd4e6f35-a083-4f0d-8016-78723ce829a0.png)'
- en: 'Next, the module does the following:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，模块会执行以下操作：
- en: It confirms whether the Base64 program exists in the system or not.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它确认系统中是否存在Base64程序。
- en: It converts the PHP meterpreter into Base64 and uploads it to the server using `echo
    <base64_of _PHP_meterpreter> | base64 -d > shell.php`.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将PHP meterpreter转换为Base64，并使用`echo <base64_of _PHP_meterpreter> | base64 -d
    > shell.php`将其上传到服务器。
- en: It requests the uploaded PHP shell to get meterpreter access.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它请求上传的PHP shell以获得meterpreter访问。
- en: 'The following screenshot shows the Base64 encoded meterpreter code being written
    into the PHP file:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下截图显示了Base64编码的meterpreter代码被写入PHP文件：
- en: '![](img/6e6c0812-0bc1-470a-bc29-36b8cf4bf95d.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e6c0812-0bc1-470a-bc29-36b8cf4bf95d.png)'
- en: 'The following screenshot shows a successful meterpreter connection from the
    server:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了从服务器成功建立的meterpreter连接：
- en: '![](img/123bf68c-e1e1-4d7c-be49-0e7ad0a273d5.png)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![](img/123bf68c-e1e1-4d7c-be49-0e7ad0a273d5.png)'
- en: In the next section, we will customize the Metasploit exploit.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将定制Metasploit利用。
- en: Going the extra mile – customizing the Metasploit exploit
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 走出舒适区-定制Metasploit利用
- en: 'For the Metasploit module we used in the previous section, `exploit/multi/http/wp_crop_rce`,
    we need to have the username and password set for the module to work. But what
    if there''s a reCAPTCHA in place at the time of authentication? The module will
    surely fail because there''s no workaround for the module to get the session cookie:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们在上一节中使用的Metasploit模块`exploit/multi/http/wp_crop_rce`，我们需要设置模块的用户名和密码才能使其工作。但是如果在认证时有reCAPTCHA呢？模块肯定会失败，因为模块无法绕过获取会话cookie的方法：
- en: 'Let''s modify the module so that it works with the `COOKIE` datastore as well:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们修改模块，使其也能与`COOKIE`数据存储一起使用：
- en: '![](img/ca7611b4-1b44-4b37-bf25-d9e214b9c3f8.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca7611b4-1b44-4b37-bf25-d9e214b9c3f8.png)'
- en: 'We can see the updated module options in the following screenshot:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中看到更新后的模块选项：
- en: '![](img/9d1b52a6-91b5-4726-a056-ebd8c6ff167a.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d1b52a6-91b5-4726-a056-ebd8c6ff167a.png)'
- en: 'Let''s define a function for the `COOKIE` datastore:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为`COOKIE`数据存储定义一个函数：
- en: '![](img/88b328c9-81f5-457f-bd52-48f1e13990c2.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88b328c9-81f5-457f-bd52-48f1e13990c2.png)'
- en: 'We also need to validate the cookie based on the response code. So, let''s
    define a `validate_cookie()` function; this will validate the cookie with a 200
    HTTP response code:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要根据响应代码验证cookie。因此，让我们定义一个`validate_cookie()`函数；这将使用200的HTTP响应代码验证cookie：
- en: '![](img/e980a39e-1194-4140-8b9f-85ed97c37b86.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e980a39e-1194-4140-8b9f-85ed97c37b86.png)'
- en: 'Now, in the `exploit()` function, let''s include a `fail-safe fail_with()`
    method to ensure that if either the username or password is missing, the exploit
    will fail. This will also will be done if the cookie isn''t set:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`exploit()`函数中，让我们包括一个`fail-safe fail_with()`方法，以确保如果用户名或密码缺失，利用将会失败。如果cookie也没有设置，也会这样做：
- en: '![](img/d97fd41b-955d-4a59-a6e6-9321257efaf2.png)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d97fd41b-955d-4a59-a6e6-9321257efaf2.png)'
- en: 'If the username and password are missing, the module will try to use `COOKIE`.
    Let''s update the module and set the `COOKIE` option for it:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户名和密码缺失，模块将尝试使用`COOKIE`。让我们更新模块并为其设置`COOKIE`选项：
- en: '![](img/0dd59fcf-afc4-4779-8b16-931841056b1b.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0dd59fcf-afc4-4779-8b16-931841056b1b.png)'
- en: 'Now, let''s run the module and see the magic happen:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们运行模块，看魔术发生：
- en: '![](img/17ee4fc4-c9e4-4fdb-8ecb-ea27cd51970b.png)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17ee4fc4-c9e4-4fdb-8ecb-ea27cd51970b.png)'
- en: We've got meterpreter using `COOKIE`!
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用`COOKIE`得到了meterpreter！
- en: Summary
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started by discussing the architecture of WordPress, followed
    by the directory structure. Next, we learned how to perform manual and automated
    recon of WordPress. Later, we looked at examples of a few exploits and did a step-by-step
    walkthrough of the entire exploitation process manually as well as using Metasploit
    modules.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先讨论了WordPress的架构，然后是目录结构。接下来，我们学习了如何对WordPress进行手动和自动化的侦察。之后，我们看了一些利用的例子，并逐步手动和使用Metasploit模块进行了整个利用过程的演示。
- en: In the next chapter, we'll be learning about performing a penetration test on
    a Joomla-based **Content Management System** (**CMS**).
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何对基于Joomla的**内容管理系统**（**CMS**）进行渗透测试。
- en: Questions
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Are the reconnaissance steps the same for all versions of WordPress?
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有版本的WordPress的侦察步骤都一样吗？
- en: I have located a `wp-admin` directory but the directory itself is inaccessible.
    What can I do in this situation?
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我找到了一个`wp-admin`目录，但目录本身是不可访问的。在这种情况下我该怎么办？
- en: Is WordPress free to download?
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WordPress可以免费下载吗？
- en: Further reading
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following links can be used to learn more about the exploitation methods
    for WordPress and the latest vulnerabilities being released:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接可用于了解更多有关WordPress的利用方法和最新发布的漏洞：
- en: '[https://wpvulndb.com/](https://wpvulndb.com/)'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://wpvulndb.com/](https://wpvulndb.com/)'
- en: '[https://wpsites.net/wordpress-tips/3-most-common-ways-wordpress-sites-are-exploited/](https://wpsites.net/wordpress-tips/3-most-common-ways-wordpress-sites-are-exploited/)'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://wpsites.net/wordpress-tips/3-most-common-ways-wordpress-sites-are-exploited/](https://wpsites.net/wordpress-tips/3-most-common-ways-wordpress-sites-are-exploited/)'
- en: '[https://www.exploit-db.com/docs/english/45556-wordpress-penetration-testing-using-wpscan-and-metasploit.pdf?rss](https://www.exploit-db.com/docs/english/45556-wordpress-penetration-testing-using-wpscan-and-metasploit.pdf?rss)'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.exploit-db.com/docs/english/45556-wordpress-penetration-testing-using-wpscan-and-metasploit.pdf?rss](https://www.exploit-db.com/docs/english/45556-wordpress-penetration-testing-using-wpscan-and-metasploit.pdf?rss)'
