- en: Website Penetration Testing - Gaining Access
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网站渗透测试 - 获取访问权限
- en: In this chapter, we will dive much further into website and database penetration
    testing than we have so far. As a penetration tester, we need to simulate real-world
    attacks on a target organization's systems and networks, based on the rules of
    engagement. However, while being able to conduct information gathering, such as
    reconnaissance and scanning websites, is excellent, the true challenge comes when
    it's time to break in. It's all well and good preparing to infiltrate an enemy
    base, but all that preparation will come to nothing if you simply stand at a distance
    and do nothing!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将比迄今为止更深入地探讨网站和数据库渗透测试。作为渗透测试人员，我们需要根据规则进行模拟对目标组织系统和网络的真实攻击。然而，虽然能够进行信息收集，如侦察和扫描网站，是很好的，但真正的挑战在于何时突破。准备好渗透入敌人基地是很好的，但如果你只是站在远处什么也不做，那一切准备都将毫无意义！
- en: In this chapter, we will look at compromising and gaining access to web servers
    and web applications. Additionally, you will learn some hands-on techniques and
    methodologies to discover vulnerabilities and retrieve data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何妥协和获取对Web服务器和Web应用程序的访问权限。此外，您还将学习一些实际的技术和方法来发现漏洞并检索数据。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Exploring the dangers of SQL injection
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索SQL注入的危险
- en: SQL injection vulnerabilities and exploitation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL注入漏洞和利用
- en: Cross-site scripting vulnerabilities
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨站脚本漏洞
- en: Discovering vulnerabilities automatically
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动发现漏洞
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the technical requirements for this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的技术要求：
- en: 'Kali Linux: [https://www.kali.org/](https://www.kali.org/)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Kali Linux: [https://www.kali.org/](https://www.kali.org/)'
- en: Windows 7, 8, or 10
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 7、8或10
- en: 'OWASP **Broken Web Applications** (**BWA**) project: [https://sourceforge.net/projects/owaspbwa/](https://sourceforge.net/projects/owaspbwa/)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP **Broken Web Applications** (**BWA**) 项目：[https://sourceforge.net/projects/owaspbwa/](https://sourceforge.net/projects/owaspbwa/)
- en: 'Acunetix: [https://www.acunetix.com/](https://www.acunetix.com/)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Acunetix: [https://www.acunetix.com/](https://www.acunetix.com/)'
- en: 'bWAPP: [https://sourceforge.net/projects/bwapp/](https://sourceforge.net/projects/bwapp/)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'bWAPP: [https://sourceforge.net/projects/bwapp/](https://sourceforge.net/projects/bwapp/)'
- en: Exploring the dangers of SQL injection
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索SQL注入的危险
- en: As mentioned in the previous chapter ([Chapter 14](7af964cb-4e13-450b-80fa-20e9ef9a9732.xhtml),
    *Performing Website Penetration Testing*), **SQL injection** (**SQLi**) allows
    an attacker to insert a series of malicious SQL code/queries directly into a backend
    database server. This vulnerability allows an attacker to manipulate records by
    adding, removing, modifying, and retrieving entries in a database.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述（[第14章](7af964cb-4e13-450b-80fa-20e9ef9a9732.xhtml)，*进行网站渗透测试*），**SQL注入**（**SQLi**）允许攻击者将一系列恶意的SQL代码/查询直接插入后端数据库服务器。这种漏洞允许攻击者通过向数据库中添加、删除、修改和检索条目来操纵记录。
- en: 'In this section, we will cover the following topics:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖以下主题：
- en: The dangers from SQL injection vulnerabilities
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自SQL注入漏洞的危险
- en: Bypassing logins using SQL injection vulnerability
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用SQL注入漏洞绕过登录
- en: Now, let's look at the dangers of SQL injections in detail.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们详细了解SQL注入的危险。
- en: Dangers from SQL injection vulnerabilities
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 来自SQL注入漏洞的危险
- en: 'A successful SQL injection attack can cause the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的SQL注入攻击可能会导致以下情况：
- en: '**Authentication bypass**: Allows a user to gain access to a system without
    valid credentials or privileges'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证绕过**：允许用户在没有有效凭据或权限的情况下访问系统'
- en: '**Information disclosure**: Allows a user to obtain sensitive information'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信息泄露**：允许用户获取敏感信息'
- en: '**Compromised data integrity**: Allows a user to manipulate data in a database'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据完整性受损**：允许用户操纵数据库中的数据'
- en: '**Compromised availability of data**: Prevents legitimate users from accessing
    data on a system'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据可用性受损**：阻止合法用户访问系统上的数据'
- en: '**Remote code execution on a compromised system**: Allows a malicious user
    to run malicious code on a system remotely'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在受损系统上远程执行代码**：允许恶意用户远程在系统上运行恶意代码'
- en: Next, let's take a look at learning how to bypass logins using SQL injection.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何利用SQL注入绕过登录。
- en: Bypassing logins using SQL injection
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用SQL注入绕过登录
- en: In this exercise, we will be using the OWASP BWA virtual machine to demonstrate
    bypassing authentication using SQL injection. To start, power on the OWASP BWA
    virtual machine. After a few minutes, the virtual machine will provide you with
    its IP address.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用OWASP BWA虚拟机来演示如何利用SQL注入绕过身份验证。首先，启动OWASP BWA虚拟机。几分钟后，虚拟机将提供其IP地址。
- en: 'Head on over to your Kali Linux (attacker) machine and follow these steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 前往您的Kali Linux（攻击者）机器，并按照以下步骤操作：
- en: Enter the IP address of the OWASP BWA virtual machine in the web browser of
    Kali Linux.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Kali Linux的Web浏览器中输入OWASP BWA虚拟机的IP地址。
- en: 'Click on the **OWASP Mutillidae II** application, as follows:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**OWASP Mutillidae II**应用程序，如下所示：
- en: '![](img/f1717a7a-4a87-4e02-be65-02f316d8184e.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1717a7a-4a87-4e02-be65-02f316d8184e.png)'
- en: 'Navigate to the following page: OWASP 2013 | A2 - Broken Authentication and
    Session Management | Authentication Bypass | Via SQL Injection | Login:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '导航到以下页面：OWASP 2013 | A2 - Broken Authentication and Session Management | Authentication
    Bypass | Via SQL Injection | Login:'
- en: '![](img/b115b27e-7329-4a6d-815a-f394dfec0cfd.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b115b27e-7329-4a6d-815a-f394dfec0cfd.png)'
- en: 'Enter any one of the following characters in the **Username** field:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**用户名**字段中输入以下任意一个字符：
- en: '`**''**`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**''**`'
- en: '`**/**`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**/**`'
- en: '`**--**`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**--**`'
- en: '`**\**`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**\**`'
- en: '`**.**`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**.**`'
- en: If an error occurs, examine the message produced by the server.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果登录页面出现错误，请检查服务器生成的消息。
- en: If no errors occur on the login page of the website, try using true or false
    statements, such as `1=1 --` or **`1=0 --`**.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果网站的登录页面没有出现错误，请尝试使用true或false语句，如`1=1 --`或**`1=0 --`**。
- en: 'When we run this, something similar to the following error should appear. If
    you look closely, you can see the query that was used between the web server application
    and the database, `SELECT username FROM accounts WHERE username= '' '' '' ;`,
    as shown here:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行此命令时，类似以下错误应该出现。如果您仔细观察，可以看到在Web服务器应用程序和数据库之间使用的查询，`SELECT username FROM
    accounts WHERE username= ' ' ' ;`，如下所示：
- en: '![](img/a2d052df-0d22-4666-b476-ca23429aed7c.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a2d052df-0d22-4666-b476-ca23429aed7c.png)'
- en: 'The following can be determined from the SQL query:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从SQL查询中确定以下内容：
- en: 'The `SELECT` statement is used to retrieve information from a relational database.
    Therefore, the statement begins by saying: `SELECT` the `username` column from
    the table.'
  id: totrans-48
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SELECT`语句用于从关系数据库中检索信息。因此，该语句以`SELECT`表中的`username`列开始。'
- en: The `FROM` statement is used to specify the name of the table. In the statement,
    we are specifying the **accounts** table.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FROM`语句用于指定表的名称。在语句中，我们正在指定**accounts**表。'
- en: The `WHERE` statement is used to specify a field within the table. The query
    indicates the field(s) that has (have) a value equal to `'` (a single quotation
    mark). The `=` (equals) parameter allows us to ensure a specific match in our
    query.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WHERE`语句用于指定表中的字段。查询指示具有值等于`''`（单引号）的字段。`=`（等于）参数允许我们确保在查询中进行特定匹配。'
- en: '`;` is used to end a SQL statement.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`;`用于结束SQL语句。'
- en: 'When combined, the statement reads as follows: Query the `username` column
    within the `accounts` table, and search for any username that is `**''**` (single
    quotation mark).'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合后，该语句如下：查询`accounts`表中的`username`列，并搜索任何用户名为`**'**`（单引号）的用户名。
- en: The `INSERT` command is used to add data. `UPDATE` is used to update data, `DELETE`
    or `DROP` is used to remove data, and `MERGE` is used to combine data within the
    table and/or database.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`INSERT`命令用于添加数据。`UPDATE`用于更新数据，`DELETE`或`DROP`用于删除数据，`MERGE`用于在表和/或数据库中合并数据。'
- en: 'Let''s attempt to combine some statements. Use the **`'' or 1=1 --`** (there
    is a space after `--`) statement in the **Username** field, and then click on
    **Login**:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试组合一些语句。在**Username**字段中使用**`' or 1=1 --`**（`--`后面有一个空格），然后单击**Login**：
- en: '![](img/8dcdeaa1-17d5-45c9-b3d3-d58f1ebfd0c3.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8dcdeaa1-17d5-45c9-b3d3-d58f1ebfd0c3.png)'
- en: 'The statement chooses the first record within the table and returns it. Upon
    checking the login status, we can see that we are now logged in as `admin`. This
    means the first record is `admin`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句选择表中的第一条记录并返回它。在检查登录状态后，我们可以看到我们现在以`admin`的身份登录。这意味着第一条记录是`admin`：
- en: '![](img/0aeb18ef-d3fe-4a0f-bc9e-76d3073cd1b4.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0aeb18ef-d3fe-4a0f-bc9e-76d3073cd1b4.png)'
- en: The statement chooses the first record in the table and returns the value, which
    is `admin`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句选择表中的第一条记录并返回值，即`admin`。
- en: 'Let''s try another user and modify our code a bit. We will attempt to log in
    as the user `john`. Insert the username `john` for the username field and the
    following SQL command for the password field:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试另一个用户并稍微修改我们的代码。我们将尝试以用户`john`的身份登录。将用户名字段插入`john`，将以下SQL命令插入密码字段：
- en: '[PRE0]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Ensure that there is a space after the double hyphens (`--`) and hit **Login**
    to execute the commands. The following screenshot shows that we are able to successfully
    log in as the user `john`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 确保双破折号（`--`）后有一个空格，并点击**Login**执行命令。以下截图显示我们能够成功以用户`john`的身份登录：
- en: '![](img/50e354e6-c4cd-4212-9c8a-0ac4cb645a50.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50e354e6-c4cd-4212-9c8a-0ac4cb645a50.png)'
- en: Those are some techniques you can use to bypass authentication using SQL injection
    attacks on a web server. In the next section, we will cover SQL injection vulnerabilities
    and exploitation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是您可以使用的一些技术，以绕过对Web服务器进行SQL注入攻击的身份验证。在下一节中，我们将介绍SQL注入漏洞和利用。
- en: SQL injection vulnerabilities and exploitation
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL注入漏洞和利用
- en: 'In this section, we are going to explore the following vulnerabilities and
    exploitations using SQL injection:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用SQL注入来探索以下漏洞和利用：
- en: Discovering SQL injections with GET
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GET发现SQL注入
- en: Reading database information
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取数据库信息
- en: Finding database tables
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找数据库表
- en: Extracting sensitive data such as passwords
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取诸如密码之类的敏感数据
- en: 'To start discovering SQL injections with GET, use the following instructions:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用GET发现SQL注入，请使用以下说明：
- en: Power on the OWASP BWA virtual machine. After a few minutes, the virtual machine
    will provide you with its IP address.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开OWASP BWA虚拟机。几分钟后，虚拟机将提供其IP地址。
- en: Head on over to your Kali Linux (attacker) machine and enter the IP address
    of the OWASP BWA virtual machine in the web browser of Kali Linux.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您的Kali Linux（攻击者）机器，并在Kali Linux的Web浏览器中输入OWASP BWA虚拟机的IP地址。
- en: 'Click on the **bWAPP** application as shown here:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击这里的**bWAPP**应用程序：
- en: '![](img/4dc69b92-0578-4865-a8c4-ed1fe4953881.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4dc69b92-0578-4865-a8c4-ed1fe4953881.png)'
- en: 'Use `bee` for the username and `bug` as the password to log in to the application.
    Then click login:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`bee`作为用户名，使用`bug`作为密码登录应用程序。然后点击登录：
- en: '![](img/25357337-5c86-4788-9715-1c418deaeba8.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25357337-5c86-4788-9715-1c418deaeba8.png)'
- en: 'Select the **SQL Injection (Search/GET)** option as shown here and click **Hack**
    to continue:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**SQL注入（搜索/GET）**选项，并单击**Hack**继续：
- en: '![](img/367d8a9e-363e-4285-b6a8-026ae4861c92.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/367d8a9e-363e-4285-b6a8-026ae4861c92.png)'
- en: 'A search box and table will appear. When you enter data into the search field,
    a GET request is used to retrieve the information from the SQL database and display
    it on the web page. Now, let''s perform a search for all movies that contain the
    string `war`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现一个搜索框和表。当您在搜索字段中输入数据时，将使用GET请求从SQL数据库中检索信息并在网页上显示它。现在，让我们搜索包含字符串`war`的所有电影：
- en: '![](img/82a4d2aa-7ecd-40aa-85b3-f53c20dc10d6.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/82a4d2aa-7ecd-40aa-85b3-f53c20dc10d6.png)'
- en: '**Disclaimer**: The information visible in the preceding screenshot was retrieved
    from the locally stored database inside the Metasploitable virtual machine; specifically,
    it is within the bWAPP vulnerable web application section. Additionally, the virtual
    machines used are on an isolated virtual network.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**免责声明**：前面截图中可见的信息是从Metasploitable虚拟机中的本地存储的数据库中检索到的；具体来说，它位于bWAPP易受攻击的Web应用程序部分。此外，使用的虚拟机位于隔离的虚拟网络中。'
- en: Looking closely at the URL in the web browser, we can see that `sqli_1.php?title=war&action=search`
    was used to return/display the results to us from the database.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细观察网页浏览器中的URL，我们可以看到`sqli_1.php?title=war&action=search`被用来从数据库返回/显示结果给我们。
- en: 'If we use the `1''` character within the search field, we''ll get the following
    error when using `sqli_1.php?title=1''&action=search`:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们在搜索字段中使用`1'`字符，当使用`sqli_1.php?title=1'&action=search`时，我们将得到以下错误：
- en: '![](img/98184d34-39c8-4867-b10e-e14983e270a6.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98184d34-39c8-4867-b10e-e14983e270a6.png)'
- en: This error indicates that the target is vulnerable to SQL injection attacks.
    The error states that there's an issue with the syntax that we have inserted in
    the search field. Furthermore, the error reveals that the database is a MySQL
    server. Such revealing errors should not be made known to users in this way. Database
    errors should only be accessible to the database administrator/developer or another
    responsible person. This is a sign of a misconfiguration between the web application
    and the database server.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误表明目标容易受到SQL注入攻击。错误表明我们在搜索字段中插入的语法存在问题。此外，错误显示数据库是一个MySQL服务器。这种泄露错误不应该以这种方式向用户公开。数据库错误应该只能被数据库管理员/开发人员或其他负责人访问。这表明Web应用程序和数据库服务器之间存在配置错误。
- en: 'Adjusting the URL to `http://192.168.56.101/bWAPP/sqli_1.php?title=1'' order
    by 7-- -`, we get the following response:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将URL调整为`http://192.168.56.101/bWAPP/sqli_1.php?title=1' order by 7-- -`，我们得到以下响应：
- en: '![](img/e775c7de-ddd0-4fee-9860-7bcdeea5202e.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e775c7de-ddd0-4fee-9860-7bcdeea5202e.png)'
- en: The output indicates that there are at least seven tables. We were able to tell
    this by using `order by 7-- -` in the URL. Notice that, in the next step, when
    we adjust the URL to check for additional tables, we get an error.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 输出表明至少有七个表。我们通过在URL中使用`order by 7-- -`来得知这一点。请注意，在下一步中，当我们调整URL以检查额外的表时，我们会收到一个错误。
- en: 'Let''s check whether there are eight tables by using the following URL: `http://192.168.56.101/bWAPP/sqli_1.php?title=1''
    order by 8-- -`. As we can see, an error message was returned:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过以下URL检查是否有八个表：`http://192.168.56.101/bWAPP/sqli_1.php?title=1' order by
    8-- -`。正如我们所看到的，返回了一个错误消息：
- en: '![](img/323bc279-8d5e-47ba-bb84-da0593b1a62a.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/323bc279-8d5e-47ba-bb84-da0593b1a62a.png)'
- en: Therefore, we can confirm that we have seven tables.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以确认我们有七个表。
- en: 'Now, we can adjust the URL to `http://192.168.56.101/bWAPP/sqli_1.php?title=1''
    union select 1,2,3,4,5,6,7-- -`. The following screenshot shows the results. The
    web application (bWAPP) returns the values `2`, `3`, `5`, and `4` in the same
    row. We can, therefore, determine that tables `2`, `3`, `4`, and `5` are vulnerable
    to attack:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以将URL调整为`http://192.168.56.101/bWAPP/sqli_1.php?title=1' union select
    1,2,3,4,5,6,7-- -`。下面的截图显示了结果。Web应用程序（bWAPP）在同一行中返回值`2`，`3`，`5`和`4`。因此，我们可以确定表`2`，`3`，`4`和`5`容易受到攻击：
- en: '![](img/98ad17d6-f08d-4d9e-84de-871bb24941c2.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98ad17d6-f08d-4d9e-84de-871bb24941c2.png)'
- en: 'To check the database version, we can substitute `@@version` in place of a
    vulnerable table within the following URL, getting `http://192.168.56.101/bWAPP/sqli_1.php?title=1''
    union select 1, @@version,3,4,5,6,7-- -`:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查数据库版本，我们可以在以下URL中将`@@version`替换为一个有漏洞的表，得到`http://192.168.56.101/bWAPP/sqli_1.php?title=1'
    union select 1, @@version,3,4,5,6,7-- -`：
- en: '![](img/dd33688b-c824-4c75-ae8a-c456bba50eac.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd33688b-c824-4c75-ae8a-c456bba50eac.png)'
- en: 'We can now attempt to get the table names by using the following URL `http://192.168.56.101/bWAPP/sqli_1.php?title=1''
    union select 1,table_name,3,4,5,6,7 from information_schema.tables-- -`:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以尝试通过以下URL获取表名`http://192.168.56.101/bWAPP/sqli_1.php?title=1' union select
    1,table_name,3,4,5,6,7 from information_schema.tables-- -`：
- en: '![](img/d7ed96cb-695a-4fa9-9cc5-ae2cad9596fc.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d7ed96cb-695a-4fa9-9cc5-ae2cad9596fc.png)'
- en: 'Now, we have all the tables within the database. The following tables are created
    by the developer:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经获得了数据库中的所有表。以下表是由开发人员创建的：
- en: '![](img/d83a745e-bd75-4e27-8ff2-f9e026eec4e7.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d83a745e-bd75-4e27-8ff2-f9e026eec4e7.png)'
- en: 'We will now attempt to retrieve user credentials from the `users` table. Firstly,
    we''ll need to get the name of the column from the users table. There is a small
    issue that you may encounter with PHP magic methods: the error does not allow
    us to insert/query strings in the PHP magic method. For example, we will not be
    able to retrieve information from the `users` table if we insert the `users` string
    within the URL, meaning the database would not return any columns. To bypass this
    error, convert the `users` string into ASCII. The ASCII value of `users` is **117
    115 101 114 115**.'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将尝试从`users`表中检索用户凭据。首先，我们需要从用户表中获取列的名称。您可能会遇到PHP魔术方法的一个小问题：错误不允许我们在PHP魔术方法中插入/查询字符串。例如，如果我们在URL中插入`users`字符串，那么我们将无法从`users`表中检索信息，这意味着数据库不会返回任何列。为了绕过这个错误，将`users`字符串转换为ASCII。`users`的ASCII值是**117
    115 101 114 115**。
- en: 'Now, we can proceed to retrieve the columns from the `users` table only. We
    can use the following URL: `http://192.168.56.101/bWAPP/sqli_1.php?title=1'' union
    select 1,column_name,3,4,5,6,7 from information_schema.columns where table_name=char(117,115,101,114,115)--
    -`:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以继续仅从`users`表中检索列。我们可以使用以下URL：`http://192.168.56.101/bWAPP/sqli_1.php?title=1'
    union select 1,column_name,3,4,5,6,7 from information_schema.columns where table_name=char(117,115,101,114,115)--
    -`：
- en: '![](img/ab801668-4069-4176-ad37-e2c2795ca39d.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab801668-4069-4176-ad37-e2c2795ca39d.png)'
- en: '`Char()` allows SQL injection to insert statements in MySQL without using double
    quotes (`""`).'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`Char()`允许SQL注入在MySQL中插入语句而不使用双引号（`""`）。'
- en: 'Using `http://192.168.56.101/bWAPP/sqli_1.php?title=1'' union select 1,login,3,4,5,6,7
    from users-- -`, we can look into the `email` column of the `users` table as described
    in *Step 14*:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`http://192.168.56.101/bWAPP/sqli_1.php?title=1' union select 1,login,3,4,5,6,7
    from users-- -`，我们可以查看`users`表中的`email`列，如*步骤14*中所述：
- en: '![](img/a9404840-c8c5-414b-9f68-c82e4538f851.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9404840-c8c5-414b-9f68-c82e4538f851.png)'
- en: 'To retrieve the password, adjust the URL to `http://192.168.56.101/bWAPP/sqli_1.php?title=1''
    union select 1,password,3,4,5,6,7 from users-- -`:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检索密码，请将URL调整为`http://192.168.56.101/bWAPP/sqli_1.php?title=1' union select
    1,password,3,4,5,6,7 from users-- -`：
- en: '![](img/b8d3bb1a-b5fb-4e19-abd2-b089848d861d.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8d3bb1a-b5fb-4e19-abd2-b089848d861d.png)'
- en: 'Now, we have the hash of the password. We can use either an online or offline
    hash identifier to determine the type of hash:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们有密码的哈希值。我们可以使用在线或离线哈希标识符来确定哈希的类型：
- en: '![](img/14790ef2-d5ac-49cc-bf51-6156bbc9dcd4.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14790ef2-d5ac-49cc-bf51-6156bbc9dcd4.png)'
- en: 'Additionally, you can use an online hash decoder such as **CrackStation** ([https://crackstation.net/](https://crackstation.net/))
    to perform decryption:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，您可以使用在线哈希解码器，如**CrackStation**（[https://crackstation.net/](https://crackstation.net/)）来执行解密：
- en: '![](img/81cb42b8-e5a9-44ee-9c4d-fb4203a05eb5.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81cb42b8-e5a9-44ee-9c4d-fb4203a05eb5.png)'
- en: We have successfully retrieved user credentials from the SQL server by manipulating
    SQL statements within the URL of a web browser.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在Web浏览器的URL中操纵SQL语句，我们成功地从SQL服务器中检索了用户凭据。
- en: In the following section, we will learn how to detect SQL injections with POST
    on a target server.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将学习如何在目标服务器上使用POST检测SQL注入。
- en: Discovering SQL injections with POST
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现POST中的SQL注入
- en: 'In this exercise, we will attempt to discover whether SQL injection is possible
    with POST. The **POST** method is used to send data to a web server. This method
    is not like the **GET** method, which is used to retrieve data or a resource.
    We will be using the following topology to complete this exercise:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将尝试发现是否可以使用POST进行SQL注入。**POST**方法用于向Web服务器发送数据。这种方法不像**GET**方法，后者用于检索数据或资源。我们将使用以下拓扑来完成这个练习：
- en: '![](img/532081a3-3b69-4443-83e4-11720942af8a.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/532081a3-3b69-4443-83e4-11720942af8a.png)'
- en: 'To start detecting SQL injections with POST, use the following instructions:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用POST检测SQL注入，请使用以下说明：
- en: Enable Burp Proxy on your Kali Linux machine and confirm that your web browser
    proxy settings are correct. If you are unsure, please refer to [Chapter 7](075f58ca-ff2a-48c7-9b90-17ddd4e408c9.xhtml),
    *Working with Vulnerability Scanners*, specifically the *Burp Suite* section,
    which contains all the details you need to configure Burp Suite on your Kali Linux
    machine.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Kali Linux机器上启用Burp代理，并确认您的Web浏览器代理设置是否正确。如果您不确定，请参考[第7章](075f58ca-ff2a-48c7-9b90-17ddd4e408c9.xhtml)，*使用漏洞扫描器*，特别是*Burp
    Suite*部分，其中包含了配置Burp Suite在Kali Linux机器上的所有细节。
- en: 'Ensure that **Intercept** is enabled on Burp Suite, as shown here:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在Burp Suite上启用**拦截**，如下所示：
- en: '![](img/74cefbdc-7413-40e9-aab8-039535ef7067.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74cefbdc-7413-40e9-aab8-039535ef7067.png)'
- en: Open your web browser on Kali Linux and enter the OWASP BWA IP address in the
    address bar.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Kali Linux上的Web浏览器中输入OWASP BWA IP地址。
- en: Be sure to click the **Forward** button regularly on Burp Suite to forward the
    data between the Kali Linux web browser and the OWASP BWA web server.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在Burp Suite上定期单击**转发**按钮，以在Kali Linux Web浏览器和OWASP BWA Web服务器之间转发数据。
- en: 'Click on **bWAPP** as shown in the following screenshot. Log in to the **bWAPP**
    portal with the credentials `bee` (username) and `bug` (password). Please note
    that these are the default user credentials for the **bWAPP** virtual machine:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**bWAPP**，如下截屏所示。使用凭据`bee`（用户名）和`bug`（密码）登录**bWAPP**门户。请注意，这些是**bWAPP**虚拟机的默认用户凭据：
- en: '![](img/252ee273-f27c-4cc8-9214-36fe87ab8050.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/252ee273-f27c-4cc8-9214-36fe87ab8050.png)'
- en: 'In the top-right corner, use the drop-down menu to select **SQL Injection (Search/POST)**,
    and then click on **Hack** to load the vulnerability:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右上角，使用下拉菜单选择**SQL注入（搜索/POST）**，然后单击**Hack**加载漏洞：
- en: '![](img/27bd4782-4a1e-467c-b04f-ae15ab3b14c2.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27bd4782-4a1e-467c-b04f-ae15ab3b14c2.png)'
- en: 'Enter a word in the search field and click on **Search** to submit (post) data:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索字段中输入一个词并单击**搜索**提交（发布）数据：
- en: '![](img/341bfc3c-0011-4442-b037-690bc2042362.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/341bfc3c-0011-4442-b037-690bc2042362.png)'
- en: The database will respond by stating whether a movie was found.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库将通过声明是否找到电影来做出响应。
- en: On Burp Suite, select the Target | Site map tab to view all the **GET** and
    **POST** messages between your web browser on Kali Linux and the OWASP BWA web
    server.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Burp Suite中，选择目标|站点地图选项卡，查看Kali Linux上的Web浏览器与OWASP BWA Web服务器之间的所有**GET**和**POST**消息。
- en: 'Select the most recent **POST** message, which should contain the search you
    just performed:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择最近的**POST**消息，其中应包含您刚刚执行的搜索：
- en: '![](img/6be97d31-cd41-499b-84cd-fcbea98e164b.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6be97d31-cd41-499b-84cd-fcbea98e164b.png)'
- en: 'The following shows the content of this **POST** message:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下显示了此**POST**消息的内容：
- en: '![](img/6411e822-e04b-430d-b2b2-939a1e3db431.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6411e822-e04b-430d-b2b2-939a1e3db431.png)'
- en: Right-click anywhere within the `Raw` content window and select the **Save item**
    option. Save the file on your desktop in Kali Linux as `postdata.txt`.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Raw`内容窗口中的任何位置右键单击，并选择**保存项目**选项。在Kali Linux的桌面上将文件保存为`postdata.txt`。
- en: 'Once the file has been saved successfully, let''s use SQLmap to discover any
    SQL injection (SQLi) vulnerabilities in POST on the target server. Use the following
    command to perform this task:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件保存成功后，让我们使用SQLmap在目标服务器上发现任何POST中的SQL注入（SQLi）漏洞。使用以下命令执行此任务：
- en: '[PRE1]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'SQLmap will attempt to check any/all `POST` parameters and determine whether
    the application is vulnerable. The following shows a number of possible vulnerabilities:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SQLmap将尝试检查任何/所有`POST`参数，并确定应用程序是否存在漏洞。以下显示了一些可能的漏洞：
- en: '![](img/0cff3574-e7c6-4bbf-ae1e-385b1cb77036.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0cff3574-e7c6-4bbf-ae1e-385b1cb77036.png)'
- en: 'In the preceding screenshot, SQLmap was able to notice that the `''title''`
    parameter may be vulnerable and that the database may also be a MySQL platform.
    Additionally, the following is an example of an injectable parameter that has
    been found:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，SQLmap能够注意到`'title'`参数可能是易受攻击的，并且数据库也可能是MySQL平台。此外，以下是找到的一个可注入参数的示例：
- en: '![](img/0a9562f0-5ef4-4915-9f2c-03f451eaef02.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a9562f0-5ef4-4915-9f2c-03f451eaef02.png)'
- en: 'The preceding screenshot shows that SQLmap has determined that the `''title''`
    parameter is also vulnerable to SQL injection attacks. Lastly, the following are
    SQLmap payloads:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图显示，SQLmap已确定`'title'`参数也容易受到SQL注入攻击。最后，以下是SQLmap有效载荷：
- en: '![](img/6922c792-ea44-4015-a8cd-20dd2b02106e.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6922c792-ea44-4015-a8cd-20dd2b02106e.png)'
- en: Here, SQLmap provides us with a bit of a summary of what has been tested, how
    it was tested, and the results. With the information that **SQLmap** has given
    us, we know exactly where the target website is vulnerable to SQLi attacks with
    POST and how to leverage weaknesses using specific payloads.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，SQLmap为我们提供了一些关于已经测试过的内容、测试方法和结果的总结。通过SQLmap给出的信息，我们知道目标网站在POST中对SQLi攻击是易受攻击的，并且如何利用特定有效载荷来利用弱点。
- en: Having completed this exercise, you are now able to use Burp Suite and SQLmap
    to discover SQL injection vulnerabilities in POST messages.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了这个练习后，您现在可以使用Burp Suite和SQLmap来发现POST消息中的SQL注入漏洞。
- en: In the next section, you will learn how to use the SQLmap tool to discover SQL
    injections.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习如何使用SQLmap工具来发现SQL注入。
- en: Detecting SQL injections and extracting data using SQLmap
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SQLmap检测SQL注入并提取数据
- en: SQLmap is an automatic SQL injection tool that allows a penetration tester to
    discover vulnerabilities, perform exploitation attacks, manipulate records, and
    retrieve data from a database.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: SQLmap是一种自动SQL注入工具，允许渗透测试人员发现漏洞，执行利用攻击，操纵记录，并从数据库中检索数据。
- en: 'To perform a scan using SQLmap, use the following command:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用SQLmap执行扫描，请使用以下命令：
- en: '[PRE2]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Additionally, the following parameters can be used to perform various tasks:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，以下参数可用于执行各种任务：
- en: '`--dbms=database_type`: Performs a backend brute-force attack. An example is
    `--dbms=mysql`.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--dbms=database_type`：执行后端暴力攻击。例如`--dbms=mysql`。'
- en: '`--current-user`: Retrieves the current database user.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--current-user`：检索当前数据库用户。'
- en: '`--passwords`: Enumerates password hashes.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--passwords`：枚举密码哈希。'
- en: '`--tables`: Enumerates tables within the database.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--tables`：枚举数据库中的表。'
- en: '`--columns`: Enumerates columns within the tables.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--columns`：枚举表中的列。'
- en: '`--dump`: Dumps data table entries.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--dump`：转储数据表条目。'
- en: In the following section, we will discuss ways to prevent SQL injection.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论预防SQL注入的方法。
- en: Preventing SQL injection
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防止SQL注入
- en: In this section, we will briefly cover some essential techniques to minimize
    and prevent SQL injection attacks on a system. We'll also look at best practices
    in a simple format.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简要介绍一些重要的技术，以最小化和预防系统上的SQL注入攻击。我们还将以简单的格式查看最佳实践。
- en: 'The following techniques can be used to prevent SQL injection attacks:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下技术可用于防止SQL注入攻击：
- en: Run the database service with minimum privileges.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以最低权限运行数据库服务。
- en: Monitor all database traffic using a **web application firewall** (**WAF**)
    or IDS/IPS.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**Web应用程序防火墙**（**WAF**）或IDS/IPS监视所有数据库流量。
- en: Sanitize data.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理数据。
- en: Filter all client data.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤所有客户端数据。
- en: Suppress error messages on the user end.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在用户端抑制错误消息。
- en: Use custom error messages rather than the default messages.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义错误消息而不是默认消息。
- en: Use safe APIs.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用安全API。
- en: Perform regular black-box penetration on the database server.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期对数据库服务器进行黑盒渗透测试。
- en: Enforce type and length checks using parameter collections on user input; this
    prevents code execution.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过对用户输入的参数集合执行类型和长度检查；这可以防止代码执行。
- en: In the next section, we will learn about **Cross-Site Scripting** (**XSS**)
    vulnerabilities.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习**跨站脚本**（**XSS**）漏洞。
- en: Cross-Site Scripting vulnerabilities
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨站脚本漏洞
- en: As mentioned in the previous chapter, XSS allows an attacker to inject client-side
    scripts into web pages viewed by other users. Therefore, when an unsuspecting
    user visits a web page that contains the malicious scripts, the victim's browser
    will automatically execute these malicious scripts in the background.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，XSS允许攻击者将客户端脚本注入到其他用户查看的网页中。因此，当一个毫不知情的用户访问包含恶意脚本的网页时，受害者的浏览器将自动在后台执行这些恶意脚本。
- en: 'In this section, we will cover how to discover various XSS vulnerabilities
    by looking at the following topics:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过以下主题来发现各种XSS漏洞：
- en: Understanding XSS
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解XSS
- en: Discovering reflected XSS
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现反射型XSS
- en: Discovering stored XSS
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现存储型XSS
- en: Exploiting XSS – hooking vulnerable page visitors to BeEF
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用XSS-将易受攻击的页面访问者连接到BeEF
- en: In the following section, we will learn what XSS is.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习什么是XSS。
- en: Understanding XSS
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解XSS
- en: As mentioned in the previous chapter, XSS attacks are done by exploiting vulnerabilities
    in a dynamically created web page. This allows an attacker to inject client-side
    scripts into web pages viewed by other users. When an unsuspecting user visits
    a web page that contains XSS, the user's browser will begin to execute the malicious
    script in the background without the victim realizing.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，XSS攻击是通过利用动态创建的网页中的漏洞来完成的。这允许攻击者将客户端脚本注入到其他用户查看的网页中。当一个毫不知情的用户访问包含XSS的网页时，用户的浏览器将开始在后台执行恶意脚本，而受害者并不知情。
- en: 'In the following exercises, we''ll be using both **WebGoat** and **bWAPP**
    on an OWASP BWA virtual machine:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，我们将在OWASP BWA虚拟机上同时使用**WebGoat**和**bWAPP**：
- en: '![](img/74a30c5d-1318-4654-ab44-db4f38e2d253.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74a30c5d-1318-4654-ab44-db4f38e2d253.png)'
- en: The username/password for **WebGoat** is `guest`/`guest`. The username/password
    for **bWAPP** is `bee`/`bug`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**WebGoat**的用户名/密码是`guest`/`guest`。**bWAPP**的用户名/密码是`bee`/`bug`。'
- en: Next, we will take a look at reflected XSS.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下反射型XSS。
- en: Discovering reflected XSS
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现反射型XSS
- en: In a reflected XSS attack, data is inserted and then reflected back onto the
    web page. In this exercise, we will walk through the process of discovering a
    reflected XSS vulnerability on a target server.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在反射型XSS攻击中，数据被插入，然后反射回到网页上。在这个练习中，我们将走过发现目标服务器上反射型XSS漏洞的过程。
- en: 'To complete this task, perform the following instructions:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此任务，请执行以下说明：
- en: Navigate to the **bWAPP** application and log in.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**bWAPP**应用程序并登录。
- en: 'Choose **Cross-Site Scripting - Reflected (GET)** and click on **Hack** to
    enable this vulnerability page:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**跨站脚本 - 反射（GET）**，然后单击**Hack**以启用此漏洞页面：
- en: '![](img/4a7b6e9b-a189-4c8d-bdaa-2e4c2bcf6251.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a7b6e9b-a189-4c8d-bdaa-2e4c2bcf6251.png)'
- en: 'Without entering any details in the form, click **Go**. Looking at the URL
    in the address bar of the web browser, you can see that the URL can be edited:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表单中不输入任何细节，单击**Go**。查看网页浏览器地址栏中的URL，您可以看到URL可以被编辑：
- en: '![](img/84b995db-5825-4449-b660-8bab450a5653.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84b995db-5825-4449-b660-8bab450a5653.png)'
- en: 'To test whether the field is vulnerable to reflected XSS, we can insert custom
    JavaScript into the **First name** field. Insert the following JavaScript:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试字段是否容易受到反射型XSS攻击，我们可以在**名字**字段中插入自定义JavaScript。插入以下JavaScript：
- en: '[PRE3]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the **Last name** field, use the following command to close the script:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在**姓**字段中，使用以下命令关闭脚本：
- en: '[PRE4]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows what you need to do:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了您需要做的事情：
- en: '![](img/02349b59-a85d-47ab-93fe-ad984c56906b.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02349b59-a85d-47ab-93fe-ad984c56906b.png)'
- en: 'Click on **Go** to execute the script on the server. The following pop-up window
    will appear:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**Go**在服务器上执行脚本。将出现以下弹出窗口：
- en: '![](img/de4069fa-a416-4839-be7b-fb294cf4a768.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de4069fa-a416-4839-be7b-fb294cf4a768.png)'
- en: This indicates that the script ran without any issues on the target server;
    therefore, the server is vulnerable to XSS attacks.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明脚本在目标服务器上无任何问题地运行；因此，服务器容易受到XSS攻击。
- en: In the next section, we will look at stored XSS.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将看一下存储的XSS。
- en: Discovering stored XSS
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现存储的XSS
- en: In stored XSS, the penetration tester injects malicious code that will be stored
    in the target database.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在存储的XSS中，渗透测试人员注入恶意代码，该代码将存储在目标数据库中。
- en: In this exercise, we will walk through the process of discovering a stored XSS
    vulnerability on a target server.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将走过发现目标服务器上存储的XSS漏洞的过程。
- en: 'To complete this task, use the following instructions:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此任务，请使用以下说明：
- en: Navigate to the bWAPP application and log in.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到bWAPP应用程序并登录。
- en: 'Choose **Cross-Site Scripting - Stored (Blog)** and click on **Hack** to enable
    this vulnerability page:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**跨站脚本 - 存储（博客）**，然后单击**Hack**以启用此漏洞页面：
- en: '![](img/c8c0b4d1-83fd-4c93-b35d-b6686329f9c2.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8c0b4d1-83fd-4c93-b35d-b6686329f9c2.png)'
- en: 'You can enter any message within the text field and click Submit. The text
    entered will now be stored within the database, as in an online message board,
    forum, or website with a comments section:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在文本字段中输入任何消息，然后单击提交。输入的文本现在将存储在数据库中，就像在线留言板、论坛或带有评论部分的网站一样：
- en: '![](img/2d5bd725-8ad3-46f5-9eab-2b9409a0ac4f.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d5bd725-8ad3-46f5-9eab-2b9409a0ac4f.png)'
- en: Additionally, we can see the table, the field, and the columns.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以看到表格、字段和列。
- en: 'We can enter the following script within the text field and click **Submit**:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在文本字段中输入以下脚本，然后单击**提交**：
- en: '[PRE5]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After submitting the script, you''ll receive the following pop-up window verifying
    that it ran successfully:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交脚本后，您将收到以下弹出窗口，验证它成功运行：
- en: '![](img/b8b74ea1-6c52-4702-9d03-113931a1d321.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8b74ea1-6c52-4702-9d03-113931a1d321.png)'
- en: 'Looking at the table, there is a second row without any actual entry:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 看着表格，有第二行没有任何实际条目：
- en: '![](img/9b131d08-9ccf-4012-bf1a-6a1c1239211b.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b131d08-9ccf-4012-bf1a-6a1c1239211b.png)'
- en: This new entry reflects that our script has been inserted and stored in the
    database. If anyone opens this web page, the script will automatically execute.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新条目反映了我们的脚本已被插入并存储在数据库中。如果有人打开这个网页，脚本将自动执行。
- en: In the following section, we will demonstrate how to exploit XSS vulnerabilities
    using the **Browser Exploitation Framework** (**BeEF**).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将演示如何利用**浏览器利用框架**（**BeEF**）来利用XSS漏洞。
- en: Exploiting XSS – hooking vulnerable page visitors to BeEF
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用XSS – 钩住易受攻击页面的访客到BeEF
- en: BeEF is a security auditing tool used by penetration testers to assess the security
    posture, and discover vulnerabilities, of systems and networks. It allows you
    to hook a client browser and exploit it. Hooking is the process of getting a victim
    to click on a web page that contains JavaScript code. The JavaScript code is then
    processed by the victim's web browser and binds the browser to the BeEF server
    on Kali Linux.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF是一种安全审计工具，由渗透测试人员用来评估系统和网络的安全状况，并发现漏洞。它允许您钩住客户端浏览器并利用它。钩住是指让受害者点击包含JavaScript代码的网页的过程。然后，受害者的网页浏览器会处理JavaScript代码，并将浏览器绑定到Kali
    Linux上的BeEF服务器。
- en: 'For this exercise, we''ll be using the following topology:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个练习，我们将使用以下拓扑结构：
- en: '![](img/6189fb95-6088-4d4d-9b43-31783dfee3a4.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6189fb95-6088-4d4d-9b43-31783dfee3a4.png)'
- en: 'Let''s start using BeEF to exploit XSS vulnerabilities:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用BeEF来利用XSS漏洞：
- en: 'To open BeEF, go to **Applications** | **08 – Exploitation Tools** | **beef
    xss framework**. The BeEF service will start and display the following details
    to access the BeEF interface:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要打开BeEF，转到**应用程序** | **08 – Exploitation Tools** | **beef xss framework**。BeEF服务将启动并显示以下细节以访问BeEF界面：
- en: '![](img/18de4963-6b2f-4483-95fe-b19301d2ca72.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18de4963-6b2f-4483-95fe-b19301d2ca72.png)'
- en: WEB UI and hook URLs are important. The JavaScript hook is usually embedded
    into a web page that is sent to the victim. Once accessed, the JavaScript will
    execute on the victim's browser and create a hook to the BeEF server. The IP address
    used in the hook script is the IP address of the BeEF server. In our lab, it is
    the Kali Linux (attacker) machine.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: WEB UI和hook URL很重要。 JavaScript hook通常嵌入到发送给受害者的网页中。一旦访问，JavaScript将在受害者的浏览器上执行，并创建到BeEF服务器的hook。
    hook脚本中使用的IP地址是BeEF服务器的IP地址。在我们的实验室中，它是Kali Linux（攻击者）机器。
- en: 'The web browser will automatically open to the BeEF login portal. If it does
    not open, use `http://127.0.0.1:3000/ui/panel`:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Web浏览器将自动打开到BeEF登录门户。如果没有打开，请使用`http://127.0.0.1:3000/ui/panel`：
- en: '![](img/ee2553fa-1934-4107-80cf-cae16a0952fa.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee2553fa-1934-4107-80cf-cae16a0952fa.png)'
- en: The username is `beef` and you will have set the password when initially starting
    BeEF.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 用户名是`beef`，并且在最初启动BeEF时将设置密码。
- en: 'Start the Apache web service on Kali Linux:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Kali Linux上启动Apache Web服务：
- en: '[PRE6]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Edit the web page located in the web server directory.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑位于Web服务器目录中的网页。
- en: '[PRE7]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Insert the code within the head of the HTML page as shown here:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入如下所示的HTML页面头部中的代码：
- en: '![](img/4aed4a96-864a-469c-bba6-f0438bfcc84c.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aed4a96-864a-469c-bba6-f0438bfcc84c.png)'
- en: The IP address belongs to the Kali Linux machine that is running the BeEF server.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: IP地址属于运行BeEF服务器的Kali Linux机器。
- en: 'On your Windows machine, open the web browser and insert the IP address of
    the Kali Linux machine:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Windows机器上，打开Web浏览器并插入Kali Linux机器的IP地址：
- en: '![](img/312443b0-41b0-49d5-be63-40b968c9eda9.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](img/312443b0-41b0-49d5-be63-40b968c9eda9.png)'
- en: 'Head back over to your Kali Linux machine. You now have a hooked browser. Click
    on the hooked browser:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到您的Kali Linux机器。您现在有一个被钩住的浏览器。单击被钩住的浏览器：
- en: '![](img/fc935547-fba6-4dfa-a583-e6354feffcb7.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc935547-fba6-4dfa-a583-e6354feffcb7.png)'
- en: Click on the `Commands` tab. Here, you'll be able to execute actions on the
    victim's web browser. Let's display a notification on the client's side.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击`命令`选项卡。在这里，您可以在受害者的Web浏览器上执行操作。让我们在客户端显示一个通知。
- en: 'Click on the Commands tab | Social Engineering | Fake Notification Bar:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击命令选项卡|社会工程学|伪造通知栏：
- en: '![](img/fceefd0d-19bd-4b9a-a606-c93b21655624.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fceefd0d-19bd-4b9a-a606-c93b21655624.png)'
- en: The column on the far right will display a description of the attack. When you're
    ready, click on Execute to launch it.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 最右侧的列将显示攻击的描述。准备好后，单击执行以启动它。
- en: 'Now, head on over to the Windows machine. You''ll see that a fake notification
    bar appears in the web browser:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到Windows机器。您会看到Web浏览器中出现一个伪造的通知栏：
- en: '![](img/728450c8-bf0b-486c-8094-8941ebc67a22.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/728450c8-bf0b-486c-8094-8941ebc67a22.png)'
- en: BeEF allows you to perform client-side attacks on the victim's browser interface.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: BeEF允许您对受害者的浏览器界面执行客户端攻击。
- en: In this section, we have covered various methods and techniques used to discover
    XSS vulnerabilities on a target, and we have performed XSS exploitation using
    BeEF. In the next section, we'll perform automatic web vulnerability scanning.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了用于发现目标上的XSS漏洞的各种方法和技术，并使用BeEF执行了XSS利用。在下一节中，我们将执行自动Web漏洞扫描。
- en: Discovering vulnerabilities automatically
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动发现漏洞
- en: In this section, we will take a look at using tools to help us automatically
    discover web applications and server vulnerabilities. Burp Suite, Acunetix, and
    OWASP ZAP will be used to perform vulnerability scanning.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍使用工具来帮助我们自动发现Web应用程序和服务器漏洞。将使用Burp Suite、Acunetix和OWASP ZAP执行漏洞扫描。
- en: Burp Suite
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Burp Suite
- en: In [Chapter 7](075f58ca-ff2a-48c7-9b90-17ddd4e408c9.xhtml), *Working with Vulnerability
    Scanners*, we outlined the benefits and functionality of using Burp Suite. In
    this section, we will further demonstrate how to perform automated vulnerability
    discovery using this tool.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](075f58ca-ff2a-48c7-9b90-17ddd4e408c9.xhtml)中，*使用漏洞扫描器*，我们概述了使用Burp Suite的好处和功能。在本节中，我们将进一步演示如何使用此工具执行自动漏洞发现。
- en: 'We can use Burp Suite to perform automated scans on specific pages or websites.
    Before we start, ensure that you have configured the following settings:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Burp Suite对特定页面或网站执行自动扫描。在开始之前，请确保您已配置以下设置：
- en: Configure the web browser on the attacker machine (Kali Linux) to work with
    Burp Suite Proxy. If you are having difficulty with this task, please revisit
    [Chapter 7](075f58ca-ff2a-48c7-9b90-17ddd4e408c9.xhtml), *Working with Vulnerability
    Scanners*.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在攻击者机器（Kali Linux）上配置Web浏览器以与Burp Suite代理一起使用。如果您在此任务中遇到困难，请重新查看[第7章](075f58ca-ff2a-48c7-9b90-17ddd4e408c9.xhtml)，*使用漏洞扫描器*。
- en: Ensure that you turn on the OWASP BWA virtual machine and capture its IP address.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您打开OWASP BWA虚拟机并捕获其IP地址。
- en: 'Once these configurations are in place, we can begin by taking the following
    steps:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些配置就位，我们可以开始采取以下步骤：
- en: Use the web browser on your Kali Linux machine to navigate to the **DVWA** within
    the OWASP BWA virtual machine.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Kali Linux机器上的Web浏览器导航到OWASP BWA虚拟机中的**DVWA**。
- en: 'Click on **SQL Injection** as shown here:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**SQL注入**如下所示：
- en: '![](img/dd2248ee-734a-45ce-9063-29fe5a322ba2.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd2248ee-734a-45ce-9063-29fe5a322ba2.png)'
- en: Open Burp Suite and ensure that **Intercept** is on.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Burp Suite并确保**拦截**已打开。
- en: 'On the DVWA web page, click the **Submit** button to send an HTTP request to
    the server:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在DVWA网页上，单击**提交**按钮将HTTP请求发送到服务器：
- en: '![](img/0a900c70-50af-4042-95aa-cf9952f9ec1d.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a900c70-50af-4042-95aa-cf9952f9ec1d.png)'
- en: 'In Burp Suite, you should be able to see the HTTP request. Right-click anywhere
    in the context window and select **Do an active scan**:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Burp Suite中，您应该能够看到HTTP请求。右键单击上下文窗口中的任何位置，然后选择**执行主动扫描**：
- en: '![](img/8370b5cf-c944-47c5-8467-f236801b1ab5.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8370b5cf-c944-47c5-8467-f236801b1ab5.png)'
- en: This will allow Burp Suite to perform an automated scan on the target web page
    to discover any web vulnerabilities.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许Burp Suite对目标网页执行自动扫描，以发现任何Web漏洞。
- en: 'The following is an example of the results after completing a scan using Burp
    Suite:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 完成使用Burp Suite进行扫描后的结果示例如下：
- en: '![](img/edf2e386-d418-4b5c-963c-a6c202b7f049.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/edf2e386-d418-4b5c-963c-a6c202b7f049.png)'
- en: Selecting each issue found will provide you with a breakdown of the specific
    vulnerability.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 选择找到的每个问题将为您提供特定漏洞的详细信息。
- en: In the next section, we will learn how to use Acunetix to discover web vulnerabilities.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用Acunetix发现Web漏洞。
- en: Acunetix
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Acunetix
- en: Acunetix is one of the most popular and recognized web application vulnerability
    scanners in the industry. It's currently one of the leading vulnerability scanners
    used among Fortune 500 companies. Acunetix is designed to deliver both advanced
    XSS and SQL injection attacks by scanning a target website or web server.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: Acunetix是业内最受欢迎和认可的Web应用程序漏洞扫描器之一。目前，它是财富500强公司中使用最广泛的漏洞扫描器之一。Acunetix旨在通过扫描目标网站或Web服务器交付先进的XSS和SQL注入攻击。
- en: 'To start using Acunetix, please observe the following steps:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Acunetix，请遵循以下步骤：
- en: Go to [https://www.acunetix.com/vulnerability-scanner/download/](https://www.acunetix.com/vulnerability-scanner/download/)
    and register for a trial version. Acunetix is a commercial product, but we are
    able to acquire a trial version for our exercise.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://www.acunetix.com/vulnerability-scanner/download/](https://www.acunetix.com/vulnerability-scanner/download/)并注册试用版本。Acunetix是一款商业产品，但我们可以获得试用版本进行练习。
- en: 'After completing the registration, you''ll be presented with the following
    screen:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成注册后，您将看到以下屏幕：
- en: '![](img/999655ad-e166-4d03-85b6-894acf563d4d.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/999655ad-e166-4d03-85b6-894acf563d4d.png)'
- en: Download the Linux version as we'll be using it on our attacker machine, Kali
    Linux.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 下载Linux版本，因为我们将在攻击者机器Kali Linux上使用它。
- en: 'After the `acunetix_trial.sh` file has been downloaded, use the `chmod +x acunetix_trial.sh`
    command to apply executable privileges to your local user account. To begin installation,
    use the `./acunetix_trial.sh` command as shown here:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载`acunetix_trial.sh`文件后，使用`chmod +x acunetix_trial.sh`命令为您的本地用户帐户应用可执行权限。要开始安装，请使用`./acunetix_trial.sh`命令，如下所示：
- en: '![](img/1c66772c-aefe-47bf-a663-6fa7a54bffe2.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c66772c-aefe-47bf-a663-6fa7a54bffe2.png)'
- en: On the command-line interface, read through and accept the **End User License
    Agreement** (**EULA**).
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行界面上，阅读并接受**最终用户许可协议**（**EULA**）。
- en: 'Open your web browser in Kali Linux and enter the following address, `https://kali:13443/`,
    to access the Acunetix user interface. Log in using the user account created during
    the setup process:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Kali Linux中打开您的Web浏览器，并输入以下地址`https://kali:13443/`，以访问Acunetix用户界面。使用在设置过程中创建的用户帐户登录：
- en: '![](img/168e73b6-2d46-47a3-ab0d-be81b69ab400.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](img/168e73b6-2d46-47a3-ab0d-be81b69ab400.png)'
- en: 'To begin a new scan, click on **Create new Target** or **Add Target**, as shown
    here:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始新的扫描，请单击**创建新目标**或**添加目标**，如下所示：
- en: '![](img/11b79283-7d0f-44d3-9ed2-544185c8ae28.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](img/11b79283-7d0f-44d3-9ed2-544185c8ae28.png)'
- en: 'The **Add Target** pop-up window will open, which allows you to specify a target:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**添加目标**弹出窗口将打开，允许您指定目标：'
- en: '![](img/f7240a89-ff37-42d9-8731-c9ca8faed639.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f7240a89-ff37-42d9-8731-c9ca8faed639.png)'
- en: 'After adding a target, you''ll be presented with options for customizing your
    scan:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加目标后，您将看到自定义扫描选项：
- en: '![](img/f4b4bd21-dab9-4f71-951c-9315ec2ee22a.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4b4bd21-dab9-4f71-951c-9315ec2ee22a.png)'
- en: For now, we will leave all the options with their default settings.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将保留所有选项的默认设置。
- en: 'Specify the type of scan and reporting options:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定扫描类型和报告选项：
- en: '![](img/ee4c16f7-db4f-4ead-a9f4-7e8cadf04b1d.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee4c16f7-db4f-4ead-a9f4-7e8cadf04b1d.png)'
- en: 'Acunetix allows you to generate the following types of report for your business
    needs:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: Acunetix允许您为您的业务需求生成以下类型的报告：
- en: Affected items
  id: totrans-295
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受影响的项目
- en: Developer
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员
- en: Executive
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行
- en: Quick
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速
- en: Compliance reports
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合规性报告
- en: CWE 2011
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CWE 2011
- en: HIPAA
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HIPAA
- en: ISO 27001
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ISO 27001
- en: NIST SP800 53
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NIST SP800 53
- en: OWASP Top 10 2013
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP Top 10 2013
- en: OWASP Top 10 2017
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP Top 10 2017
- en: PCI SDD 3.2
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PCI SDD 3.2
- en: Sarbanes Oxley
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 萨班斯-奥克斯利法案
- en: STIG DISA
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: STIG DISA
- en: WASC Threat Classification
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WASC威胁分类
- en: When you're ready, start the scan on the target.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您准备好时，请在目标上启动扫描。
- en: 'Once the scan is complete, a summary is provided on the main Acunetix dashboard,
    as shown here:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描完成后，在主Acunetix仪表板上提供了摘要，如下所示：
- en: '![](img/15232b4a-ba70-4231-a066-79052ea0ccd8.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15232b4a-ba70-4231-a066-79052ea0ccd8.png)'
- en: You can quickly see the duration of the scan and any high-risk vulnerabilities
    found.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以快速查看扫描的持续时间和发现的任何高风险漏洞。
- en: 'To see a detailed list of vulnerabilities found, click on the **Vulnerabilities**
    tab and select one of the web vulnerabilities:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看找到的漏洞的详细列表，请单击**漏洞**选项卡，并选择其中一个Web漏洞：
- en: '![](img/3aa6b696-150e-41de-bb4e-576aea9dd2cf.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3aa6b696-150e-41de-bb4e-576aea9dd2cf.png)'
- en: 'To create a report, click on **Generate Report**. The reporting wizard will
    allow you to specify the type of report that is most suitable based on the objective
    of the web application penetration test. Once the report has been generated, you
    can download the file onto your desktop. The following shows a PDF version of
    the executive report:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建报告，请单击**生成报告**。报告向导将允许您根据Web应用程序渗透测试的目标指定最合适的报告类型。生成报告后，您可以将文件下载到桌面上。以下是执行报告的PDF版本：
- en: '![](img/0121a183-9f36-493f-8147-55977b2f0e28.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0121a183-9f36-493f-8147-55977b2f0e28.png)'
- en: Acunetix is definitely a must-have tool as part of your penetration testing
    arsenal. It will allow you to quickly perform black box testing on any web applications
    and present findings in an easy-to-read and understandable report.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: Acunetix绝对是您渗透测试工具箱中必不可少的工具。它将允许您快速对任何Web应用程序进行黑盒测试，并以易于阅读和理解的报告呈现发现结果。
- en: In the next section, we will learn how to use OWASP ZAP to perform web vulnerability
    assessments.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用OWASP ZAP执行Web漏洞评估。
- en: OWASP ZAP
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OWASP ZAP
- en: The OWASP **Zed Attack Proxy** (**ZAP**) project was created by OWASP as a free
    security tool for discovering vulnerabilities on web servers and applications
    with a simple and easy-to-use interface.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP **Zed Attack Proxy**（**ZAP**）项目是由OWASP创建的免费安全工具，用于发现Web服务器和应用程序上的漏洞，具有简单易用的界面。
- en: OWASP ZAP is pre-installed in Kali Linux. To start, let's perform a web vulnerability
    scan on our target OWASP BWA virtual machine.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP ZAP预先安装在Kali Linux中。首先，让我们对目标OWASP BWA虚拟机执行Web漏洞扫描。
- en: 'To start with using OWASP ZAP, perform the following steps:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用OWASP ZAP，请执行以下步骤：
- en: 'Open OWASP ZAP and then navigate to Applications | 03 - Web Application Analysis
    | OWASP-ZAP. On the interface, click on Automated Scan, as shown here:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开OWASP ZAP，然后导航到应用程序 | 03-Web应用程序分析 | OWASP-ZAP。在界面上，点击自动扫描，如下所示：
- en: '![](img/2061bc20-6840-422d-a5ab-51479a9db37a.png)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2061bc20-6840-422d-a5ab-51479a9db37a.png)'
- en: 'Enter the IP address of the OWASP BWA virtual machine and click Attack to begin
    the security scan:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入OWASP BWA虚拟机的IP地址，然后单击“攻击”以开始安全扫描：
- en: '![](img/56e0d854-2bfc-443e-ae4c-24fd1c2c81c6.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56e0d854-2bfc-443e-ae4c-24fd1c2c81c6.png)'
- en: 'During the scanning phase, OWASP ZAP will perform spidering on the target.
    **Spidering** is a technique in which the web security scanner detects hidden
    directories and attempts to access them (crawling):'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在扫描阶段期间，OWASP ZAP将对目标执行蜘蛛爬行。**蜘蛛爬行**是一种技术，其中Web安全扫描程序检测隐藏的目录并尝试访问它们（爬行）：
- en: '![](img/a836afd6-7964-41d5-8651-916ef2632caf.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a836afd6-7964-41d5-8651-916ef2632caf.png)'
- en: 'When the scan is complete, click on the Alerts tab to see all web-based vulnerabilities
    found and the locations of each on the target:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描完成后，单击“警报”选项卡，以查看在目标上发现的所有基于Web的漏洞及其位置：
- en: '![](img/8ba840a6-1592-4fbc-a5c7-5971d905df1e.png)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ba840a6-1592-4fbc-a5c7-5971d905df1e.png)'
- en: 'Upon selecting a vulnerability, OWASP will display both the HTTP head and body
    when they are returned from the target server:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择漏洞后，OWASP将显示从目标服务器返回的HTTP头和正文：
- en: '![](img/9eb1000e-c212-4d9b-9706-8f2a5378778f.png)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9eb1000e-c212-4d9b-9706-8f2a5378778f.png)'
- en: If you look closely at the preceding screenshot, you will see that OWASP ZAP
    has highlighted the affected area of the web coding.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细观察前面的屏幕截图，您会发现OWASP ZAP已经突出显示了Web编码的受影响区域。
- en: 'Once a security scan is complete, you can create and export a report. To do
    this, click on Report | Generate HTML Report. The application will allow you to
    save the report to your desktop. The following is a sample report created using
    OWASP ZAP:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安全扫描完成后，您可以创建和导出报告。要做到这一点，请单击报告 | 生成HTML报告。该应用程序将允许您将报告保存到您的桌面。以下是使用OWASP ZAP创建的样本报告：
- en: '![](img/7f01fa60-3283-4f1f-9f7b-ec0d599cd970.png)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f01fa60-3283-4f1f-9f7b-ec0d599cd970.png)'
- en: Additionally, OWASP ZAP allows you to generate reports in multiple formats based
    on your requirements. Be sure to explore the other functions of this amazing tool.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，OWASP ZAP允许您根据您的需求以多种格式生成报告。一定要探索这个令人惊叹的工具的其他功能。
- en: Summary
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Having completed this chapter, you are now able to perform web application penetration
    testing, bypass login using SQL injection attacks, find tables in databases and
    retrieve user credentials, perform various types of XSS attacks on web applications,
    and successfully launch client-side attacks using BeEF.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您现在可以执行Web应用程序渗透测试，使用SQL注入攻击绕过登录，查找数据库中的表并检索用户凭据，对Web应用程序执行各种类型的XSS攻击，并成功地使用BeEF启动客户端攻击。
- en: I hope this chapter will prove helpful to your studies and career. In the next
    chapter, you'll be learning about penetration testing best practices.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望本章对你的学习和职业有所帮助。在下一章中，您将学习有关渗透测试最佳实践的知识。
- en: Questions
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'The following are some questions based on the topics we have covered in this
    chapter:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是基于本章涵盖的主题的一些问题：
- en: What SQL statement is used to specify a table within a database?
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于指定数据库中的表的SQL语句是什么？
- en: How do you close a statement in SQL?
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在SQL中关闭语句？
- en: How do you add a new record in a database?
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在数据库中添加新记录？
- en: What tool can perform a client-side attack?
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么工具可以执行客户端攻击？
- en: Further reading
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**XSS**: [https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)](https://www.owasp.org/index.php/Cross-site_Scripting_(XSS))'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XSS**：[https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)](https://www.owasp.org/index.php/Cross-site_Scripting_(XSS))'
- en: '**SQL injection**: [https://www.owasp.org/index.php/SQL_Injection](https://www.owasp.org/index.php/SQL_Injection)'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL注入**：[https://www.owasp.org/index.php/SQL_Injection](https://www.owasp.org/index.php/SQL_Injection)'
