- en: Evaluating Input Validation Checks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估输入验证检查
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下操作步骤：
- en: Testing for reflected cross-site scripting
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试反射型跨站脚本
- en: Testing for stored cross-site scripting
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试存储型跨站脚本
- en: Testing for HTTP verb tampering
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试HTTP动词篡改
- en: Testing for HTTP Parameter Pollution
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试HTTP参数污染
- en: Testing for SQL injection
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试SQL注入
- en: Testing for command injection
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试命令注入
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Failure to validate any input received from the client before using it in the
    application code is one of the most common security vulnerabilities found in web
    applications. This flaw is the source for major security issues, such as SQL injection
    and **cross-site scripting** (**XSS**). Web-penetration testers must evaluate
    and determine whether any input is reflected back or executed upon by the application.
    We'll learn how to use Burp to perform such tests.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用应用程序代码之前未验证从客户端接收的任何输入，是在Web应用程序中发现的最常见的安全漏洞之一。这个缺陷是导致主要安全问题的根源，比如SQL注入和跨站脚本（XSS）。Web渗透测试人员必须评估并确定应用程序是否反射回任何输入或执行。我们将学习如何使用Burp来执行这样的测试。
- en: Software tool requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件工具要求
- en: 'In order to complete the recipes in this chapter, you will need the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章的操作步骤，您需要以下内容：
- en: OWASP Broken Web Applications (VM)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP Broken Web Applications（VM）
- en: OWASP Mutillidae link
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP Mutillidae链接
- en: Burp Proxy Community or Professional ([https://portswigger.net/burp/](https://portswigger.net/burp/))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Burp Proxy Community或Professional ([https://portswigger.net/burp/](https://portswigger.net/burp/))
- en: Testing for reflected cross-site scripting
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试反射型跨站脚本
- en: Reflected cross-site scripting occurs when malicious JavaScript is injected
    into an input field, parameter, or header and, after returning from the web server,
    is executed within the browser. Reflected XSS occurs when the execution of the
    JavaScript reflects in the browser only and is not a permanent part of the web
    page. Penetration testers need to test all client values sent to the web server
    to determine whether XSS is possible.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当恶意JavaScript被注入到输入字段、参数或标头中，并在从Web服务器返回后在浏览器中执行时，就会发生反射型跨站脚本。反射型XSS发生在JavaScript的执行仅在浏览器中反映，而不是网页的永久部分。渗透测试人员需要测试发送到Web服务器的所有客户端值，以确定是否可能发生XSS。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using OWASP Mutillidae II, let's determine whether the application protects
    against reflected **cross-site scripting** (**XSS**).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II，让我们确定应用程序是否防范了反射型跨站脚本（XSS）。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'From the OWASP Mutilliae II menu, select Login by navigating to OWASP 2013
    | A3 - Cross Site Scripting (XSS) | Reflected (First Order) | Pen Test Tool Lookup:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从OWASP Mutilliae II菜单中，通过导航到OWASP 2013 | A3 - 跨站脚本（XSS）| 反射（一级）| 渗透测试工具查找，选择登录：
- en: '![](img/00286.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00286.jpeg)'
- en: 'Select a tool from the drop-down listing and click the Lookup Tool button.
    Any value from the drop-down list will work for this recipe:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉列表中选择一个工具，然后点击查找工具按钮。下拉列表中的任何值都适用于此操作：
- en: '![](img/00287.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00287.jpeg)'
- en: 'Switch to Burp Proxy | HTTP history and find the HTTP message you just created
    by selecting the lookup tool. Note that in the request is a parameter called `ToolID`.
    In the following example, the value is `16`:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp Proxy | HTTP历史记录，并通过选择查找工具来找到您刚刚创建的HTTP消息。请注意，在请求中有一个名为`ToolID`的参数。在下面的示例中，值为`16`：
- en: '![](img/00288.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00288.jpeg)'
- en: 'Flip over to the Response tab and note the JSON returned from the request.
    You can find the JavaScript function in the response more easily by typing `PenTest` in
    the search box at the bottom. Note that the `tool_id` is reflected in a response
    parameter called `toolIDRequested`. This may be an attack vector for XSS:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到响应选项卡，并注意从请求返回的JSON。您可以通过在底部的搜索框中输入`PenTest`来更容易地找到响应中的JavaScript函数。请注意，`tool_id`在名为`toolIDRequested`的响应参数中反射。这可能是XSS的攻击向量：
- en: '![](img/00289.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00289.jpeg)'
- en: 'Send the request over to Repeater. Add an XSS payload within the `ToolID` parameter
    immediately following the number. Use a simple payload such as `<script>alert(1);</script>`:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将请求发送到Repeater。在数字后面的`ToolID`参数中添加一个XSS有效负载。使用一个简单的有效负载，比如`<script>alert(1);</script>`：
- en: '![](img/00290.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00290.jpeg)'
- en: 'Click Go and examine the returned JSON response, searching for `PenTest`. Notice
    our payload is returned exactly as inputted. It looks like the developer is not
    sanitizing any of the input data before using it. Let''s exploit the flaw:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“Go”并检查返回的JSON响应，搜索`PenTest`。注意我们的有效负载正好如输入的那样返回。看起来开发人员在使用之前没有对任何输入数据进行消毒。让我们利用这个缺陷：
- en: '![](img/00291.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00291.jpeg)'
- en: Since we are working with JSON instead of HTML, we will need to adjust the payload
    to match the structure of the JSON returned. We will fool the JSON into thinking
    the payload is legitimate. We will modify the original `<script>alert(1);</script>`
    payload to `"}} )%3balert(1)%3b//` instead.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们使用的是JSON而不是HTML，我们需要调整有效负载以匹配返回的JSON的结构。我们将欺骗JSON，使其认为有效负载是合法的。我们将原始的`<script>alert(1);</script>`有效负载修改为`"}}
    )%3balert(1)%3b//`。
- en: Switch to the Burp Proxy | Intercept tab. Turn Interceptor on with the button
    Intercept is on.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp Proxy | 拦截选项卡。通过打开“拦截器打开”按钮打开拦截器。
- en: Return to Firefox, select another tool from the drop-down list, and click the
    Lookup Tool button.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Firefox，从下拉列表中选择另一个工具，然后点击查找工具按钮。
- en: 'While Proxy | Interceptor has the request paused, insert the new payload of `"}}
    )%3balert(1)%3b//` immediately after the `Tool ID` number:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代理|拦截器暂停请求时，在“工具ID”号之后立即插入新的有效负载`"}} )%3balert(1)%3b//`：
- en: '![](img/00292.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00292.jpeg)'
- en: Click the Forward button. Turn Interceptor off by toggling to Intercept is off.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击前进按钮。通过切换到拦截器关闭拦截器。
- en: 'Return to the Firefox browser and see the pop-up alert box displayed. You''ve
    successfully shown a **proof of concept** (**PoC**) for the reflected XSS vulnerability:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Firefox浏览器，查看弹出的警报框。您已成功展示了反射型XSS漏洞的概念证明（PoC）：
- en: '![](img/00293.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00293.jpeg)'
- en: How it works...
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Due to inadequate input cleansing prior to using data received from the client. In
    this case, the penetration testing tools identifier is reflected in the response
    as it is received from the client, allowing an attack vector for an XSS attack.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在使用来自客户端接收的数据之前未进行充分的输入清理。在这种情况下，渗透测试工具标识符会在从客户端接收到的响应中反射，为XSS攻击提供了攻击向量。
- en: Testing for stored cross-site scripting
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试存储的跨站脚本
- en: Stored cross-site scripting occurs when malicious JavaScript is injected into
    an input field, parameter, or header and, after returning from the web server,
    is executed within the browser and becomes a permanent part of the page. Stored
    XSS occurs when the malicious JavaScript is stored in the database and is used
    later to populate the display of a web page. Penetration testers need to test
    all client values sent to the web server to determine whether XSS is possible.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 存储的跨站脚本发生在恶意JavaScript被注入输入字段、参数或标头后，从Web服务器返回后在浏览器中执行并成为页面的永久部分。当恶意JavaScript存储在数据库中并稍后用于填充网页的显示时，就会发生存储的XSS。渗透测试人员需要测试发送到Web服务器的所有客户端值，以确定是否可能发生XSS。
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using OWASP Mutillidae II, let's determine whether the application protects
    against stored cross-site scripting.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II，让我们确定应用程序是否防范存储的跨站脚本。
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'From the OWASP Mutilliae II menu, select Login by navigating to OWASP 2013
    | A3 - Cross Site Scripting (XSS) | Persistent (First Order) | Add to your blog:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从OWASP Mutilliae II菜单中，通过导航到OWASP 2013 | A3 - 跨站脚本（XSS）| 持久（一级）| 添加到您的博客，选择登录：
- en: '![](img/00294.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00294.jpeg)'
- en: 'Place some verbiage into the text area. Before clicking the Save Blog Entry
    button, let''s try a payload with the entry:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本区域中放入一些文字。在点击保存博客条目按钮之前，让我们尝试一个带有该条目的有效负载：
- en: '![](img/00295.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00295.jpeg)'
- en: Switch to the Burp Proxy | Intercept tab. Turn Interceptor on with the button
    Intercept is on.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp代理|拦截选项卡。使用拦截器按钮打开拦截器。
- en: 'While Proxy | Interceptor has the request paused, insert the new payload of
    `<script>alert(1);</script>` immediately following the verbiage you added to the
    blog:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代理|拦截器暂停请求时，立即插入新的有效负载`<script>alert(1);</script>`，并将其放在您添加到博客的文字后面：
- en: '![](img/00296.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00296.jpeg)'
- en: Click the Forward button. Turn Interceptor off by toggling to Intercept is off.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击转发按钮。通过切换到拦截器关闭拦截器。
- en: 'Return to the Firefox browser and see the pop-up alert box displayed:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Firefox浏览器，查看显示的弹出警报框：
- en: '![](img/00297.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00297.jpeg)'
- en: Click the OK button to close the pop-ups. Reload the page and you will see the
    alert pop-up again. This is because your malicious script has become a permanent
    part of the page. You've successfully shown a **proof of concept** (**PoC**) for
    the stored XSS vulnerability!
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“确定”按钮关闭弹出窗口。重新加载页面，您将再次看到警报弹出窗口。这是因为您的恶意脚本已成为页面的永久部分。您已成功展示了存储XSS漏洞的概念证明（PoC）！
- en: How it works...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Stored or persistent XSS occurs because the application not only neglects to
    sanitize the input but also stores the input within the database. Therefore, when
    a page is reloaded and populated with database data, the malicious script is executed
    along with that data.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 存储型或持久型XSS之所以会发生，是因为应用程序不仅忽略对输入的消毒，而且还将输入存储在数据库中。因此，当重新加载页面并用数据库数据填充页面时，恶意脚本将与数据一起执行。
- en: Testing for HTTP verb tampering
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试HTTP动词篡改
- en: HTTP requests can include methods beyond GET and POST. As a penetration tester,
    it is important to determine which other HTTP verbs (that is, methods) the web
    server allows. Support for other verbs may disclose sensitive information (for
    example, TRACE) or allow for a dangerous invocation of application code (for example,
    DELETE). Let's see how Burp can help test for HTTP verb tampering.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP请求可以包括除GET和POST之外的方法。作为渗透测试人员，确定Web服务器允许哪些其他HTTP动词（即方法）是很重要的。对其他动词的支持可能会泄露敏感信息（例如TRACE）或允许危险地调用应用程序代码（例如DELETE）。让我们看看Burp如何帮助测试HTTP动词篡改。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using OWASP Mutillidae II, let's determine whether the application allows HTTP
    verbs beyond GET and POST.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II，让我们确定应用程序是否允许除GET和POST之外的HTTP动词。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Navigate to the homepage of OWASP Mutillidae II.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到OWASP Mutillidae II的主页。
- en: 'Switch to Burp Proxy | HTTP history and look for the HTTP request you just
    created while browsing to the homepage of Mutillidae. Note the method used is
    GET. Right-click and send the request to Intruder:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp代理|HTTP历史记录，并查找您在浏览Mutillidae主页时创建的HTTP请求。注意使用的方法是GET。右键单击并将请求发送到入侵者：
- en: '![](img/00298.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00298.jpeg)'
- en: 'In the Intruder | Positions tab, clear all suggested payload markers. Highlight
    the `GET` verb, and click the Add $ button to place payload markers around the
    verb:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在入侵者|位置选项卡中，清除所有建议的有效负载标记。突出显示`GET`动词，并单击添加$按钮将有效负载标记放在动词周围：
- en: '![](img/00299.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00299.jpeg)'
- en: 'In the Intruder | Payloads tab, add the following values to the Payload Options
    [Simple list] text box:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在入侵者|有效负载选项卡中，将以下值添加到有效负载选项[简单列表]文本框中：
- en: OPTIONS
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项
- en: HEAD
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头
- en: POST
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布
- en: PUT
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放置
- en: DELETE
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除
- en: TRACE
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪
- en: TRACK
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪
- en: CONNECT
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接
- en: PROPFIND
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PROPFIND
- en: PROPPATCH
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PROPPATCH
- en: MKCOL
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MKCOL
- en: COPY
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制
- en: '![](img/00300.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00300.jpeg)'
- en: Uncheck the Payload Encoding box at the bottom of the Payloads page and then
    click the Start attack button.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消Payloads页面底部的Payload Encoding复选框，然后单击开始攻击按钮。
- en: 'When the attack results table appears, and the attack is complete, note all
    of the verbs returning a status code of 200\. This is worrisome as most web servers
    should not be supporting so many verbs. In particular, the support for TRACE and
    TRACK would be included in the findings and final report as vulnerabilities:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当攻击结果表出现并攻击完成时，请注意所有返回状态码为200的动词。这是令人担忧的，因为大多数Web服务器不应该支持这么多动词。特别是对TRACE和TRACK的支持将包括在调查结果和最终报告中作为漏洞：
- en: '![](img/00301.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00301.jpeg)'
- en: How it works...
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作...
- en: Testing for HTTP verb tampering includes sending requests against the application
    using different HTTP methods and analyzing the response received. Testers need
    to determine whether a status code of 200 is returned for any of the verbs tested,
    indicating the web server allows requests of this verb type.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 测试HTTP动词篡改包括使用不同的HTTP方法发送请求并分析接收到的响应。测试人员需要确定是否对任何测试的动词返回了状态码200，这表明Web服务器允许此动词类型的请求。
- en: Testing for HTTP Parameter Pollution
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试HTTP参数污染
- en: '**HTTP Parameter Pollution** (**HPP**) is an attack in which multiple HTTP
    parameters are sent to the web server with the same name. The intention is to
    determine whether the application responds in an unanticipated manner, allowing
    exploitation. For example, in a GET request, additional parameters can be added
    to the query string—in this fashion: `“&name=value”`—where name is a duplicate
    parameter name already known by the application code. Likewise, HPP attacks can
    be performed on POST requests by duplicating a parameter name in the POST body
    data.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP参数污染**（**HPP**）是一种攻击，其中多个HTTP参数以相同的名称发送到Web服务器。其目的是确定应用程序是否以意想不到的方式响应，从而进行利用。例如，在GET请求中，可以向查询字符串添加额外的参数，如此：`“&name=value”`，其中name是应用程序代码已知的重复参数名称。同样，HPP攻击也可以在POST请求中执行，方法是在POST主体数据中重复参数名称。'
- en: Getting ready
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using OWASP Mutillidae II, let's determine whether the application allows HPP
    attacks.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II，让我们确定应用程序是否容易受到HPP攻击。
- en: How to do it...
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'From the OWASP Mutilliae II menu, select Login by navigating to OWASP 2013
    | A1 - Injection (Other) | HTTP Parameter Pollution | Poll Question:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从OWASP Mutilliae II菜单中，通过导航到OWASP 2013 | A1 - Injection (Other) | HTTP Parameter
    Pollution | Poll Question选择登录：
- en: '![](img/00302.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00302.jpeg)'
- en: 'Select a tool from one of the radio buttons, add your initials, and click the
    Submit Vote button:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从单选按钮中选择一个工具，添加你的缩写，然后点击提交投票按钮：
- en: '![](img/00303.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00303.jpeg)'
- en: 'Switch to the Burp Proxy | HTTP history tab, and find the request you just
    performed from the User Poll page. Note the parameter named `choice`. The value
    of this parameter is Nmap. Right-click and send this request to Repeater:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp代理|HTTP历史选项卡，并找到刚刚从用户投票页面执行的请求。注意名为`choice`的参数。该参数的值是Nmap。右键单击并将此请求发送到Repeater：
- en: '![](img/00304.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00304.jpeg)'
- en: 'Switch to the Burp Repeater and add another parameter with the same name to
    the query string. Let''s pick another tool from the User Poll list and append
    it to the query string, for example, `“&choice=tcpdump”`. Click Go to send the
    request:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp Repeater并在查询字符串中添加另一个具有相同名称的参数。让我们从用户投票列表中选择另一个工具，并将其附加到查询字符串，例如`“&choice=tcpdump”`。单击Go发送请求：
- en: '![](img/00305.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00305.jpeg)'
- en: 'Examine the response. Which choice did the application code accept? This is
    easy to find by searching for the `Your choice was` string. Clearly, the duplicate
    choice parameter value is the one the application code accepted to count in the
    User Poll vote:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查响应。应用程序代码接受了哪个选择？通过搜索`Your choice was`字符串很容易找到。显然，应用程序代码接受了重复的选择参数值来计入用户投票：
- en: '![](img/00306.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00306.jpeg)'
- en: How it works...
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The application code fails to check against multiple parameters with the same
    name when passed into a function. The result is that the application usually acts
    upon the last parameter match provided. This can result in odd behavior and unexpected
    results.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序代码未能检查传递给函数的具有相同名称的多个参数。结果是应用程序通常对最后一个参数匹配进行操作。这可能导致奇怪的行为和意外的结果。
- en: Testing for SQL injection
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试SQL注入
- en: A SQL injection attack involves an attacker providing input to the database,
    which is received and used without any validation or sanitization. The result
    is divulging sensitive data, modifying data, or even bypassing authentication
    mechanisms.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入攻击涉及攻击者向数据库提供输入，而数据库在没有任何验证或净化的情况下接收和使用该输入。结果是泄露敏感数据，修改数据，甚至绕过身份验证机制。
- en: Getting ready
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the OWASP Mutillidae II Login page, let's determine whether the application
    is vulnerable to **SQL injection** (**SQLi**) attacks.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II登录页面，让我们确定应用程序是否容易受到**SQL注入**（**SQLi**）攻击。
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'From the OWASP Mutilliae II menu, select Login by navigating to OWASP 2013
    | A1-Injection (SQL) | SQLi – Bypass Authentication | Login:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从OWASP Mutilliae II菜单中，通过导航到OWASP 2013 | A1-Injection (SQL) | SQLi – Bypass
    Authentication | Login选择登录：
- en: '![](img/00307.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00307.jpeg)'
- en: At the Login screen, place invalid credentials into the `username` and `password`
    text boxes. For example, `username` is `tester` and `password` is `tester`. Before
    clicking the Login button, let's turn on Proxy | Interceptor.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在登录屏幕上，将无效的凭据放入`username`和`password`文本框中。例如，`username`是`tester`，`password`是`tester`。在点击登录按钮之前，让我们打开代理|拦截器。
- en: Switch to the Burp Proxy | Intercept tab. Turn the Interceptor on by toggling
    to Intercept is on.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp代理|拦截器选项卡。通过切换到拦截器打开拦截器。
- en: 'While Proxy | Interceptor has the request paused, insert the new payload of
    `'' or 1=1--<space>` within the username parameter and click the Login button:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代理|拦截器暂停请求时，在用户名参数中插入新的有效负载`' or 1=1--<space>`，然后点击登录按钮：
- en: '![](img/00308.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00308.jpeg)'
- en: Click the Forward button. Turn Interceptor off by toggling to Intercept is off.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击前进按钮。通过切换到拦截器关闭拦截器。
- en: Return to the Firefox browser and note you are now logged in as admin!
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Firefox浏览器，注意你现在已经以管理员身份登录！
- en: How it works...
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The tester account did not exist in the database; however, the `' or 1=1--<space>` payload
    resulted in bypass the authentication mechanism because the SQL code constructed
    the query based on unsanitized user input. The account of admin is the first account
    created in the database, so the database defaulted to that account.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 测试账户在数据库中不存在；然而，`' or 1=1--<space>`有效负载导致绕过身份验证机制，因为SQL代码基于未经净化的用户输入构造了查询。管理员账户是数据库中创建的第一个账户，因此数据库默认使用该账户。
- en: There's more...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We used a SQLi wordlist from wfuzz within Burp Intruder to test many different
    payloads within the same username field. Examine the response for each attack
    in the results table to determine whether the payload successfully performed a
    SQL injection.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Burp Intruder中使用了wfuzz的SQLi wordlist来测试同一用户名字段中的许多不同payloads。检查结果表中每次攻击的响应，以确定payload是否成功执行了SQL注入。
- en: The construction of SQL injection payloads requires some knowledge of the backend
    database and the particular syntax required.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 构建SQL注入payload需要一些对后端数据库和特定语法的了解。
- en: Testing for command injection
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试命令注入
- en: Command injection involves an attacker attempting to invoke a system command,
    normally performed at a terminal session, within an HTTP request instead. Many
    web applications allow system commands through the UI for troubleshooting purposes.
    A web-penetration tester must test whether the web page allows further commands
    on the system that should normally be restricted.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 命令注入涉及攻击者尝试在HTTP请求中调用系统命令，通常在终端会话中执行。许多Web应用程序允许通过UI进行系统命令以进行故障排除。Web渗透测试人员必须测试网页是否允许在通常应受限制的系统上执行进一步的命令。
- en: Getting ready
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, you will need the SecLists Payload for Unix commands:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您将需要Unix命令的SecLists Payload：
- en: SecLists-master | Fuzzing | `FUZZDB_UnixAttacks.txt`
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SecLists-master | Fuzzing | `FUZZDB_UnixAttacks.txt`
- en: 'Download from GitHub: [https://github.com/danielmiessler/SecLists](https://github.com/danielmiessler/SecLists)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从GitHub下载：[https://github.com/danielmiessler/SecLists](https://github.com/danielmiessler/SecLists)
- en: Using the OWASP Mutillidae II DNS Lookup page, let's determine whether the application
    is vulnerable to command injection attacks.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OWASP Mutillidae II DNS Lookup页面，让我们确定应用程序是否容易受到命令注入攻击。
- en: How to do it...
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'From the OWASP Mutilliae II menu, select DNS Lookup by navigating to OWASP
    2013 | A1-Injection (Other) | Command Injection | DNS Lookup:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从OWASP Mutilliae II菜单中，通过导航到OWASP 2013 | A1-Injection (Other) | Command Injection
    | DNS Lookup来选择DNS Lookup：
- en: '![](img/00309.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00309.jpeg)'
- en: 'On the DNS Lookup page, type the IP address `127.0.0.1` in the text box and
    click the Lookup DNS button:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在DNS Lookup页面，将IP地址`127.0.0.1`输入到文本框中，然后点击Lookup DNS按钮：
- en: '![](img/00310.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00310.jpeg)'
- en: 'Switch to the Burp Proxy | HTTP history tab and look for the request you just
    performed. Right-click on Send to Intruder:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Burp Proxy | HTTP history标签，并查找您刚刚执行的请求。右键单击Send to Intruder：
- en: '![](img/00311.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00311.jpeg)'
- en: 'In the Intruder | Positions tab, clear all suggested payload markers with the
    Clear $ button. In the `target_host` parameter, place a pipe symbol (`|`) immediately
    following the `127.0.0.1` IP address. After the pipe symbol, place an `X`. Highlight
    the `X` and click the Add $ button to wrap the `X` with payload markers:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Intruder | Positions标签中，使用Clear $按钮清除所有建议的payload标记。在`target_host`参数中，在`127.0.0.1`
    IP地址后面放置一个管道符号(`|`)。在管道符号后面放置一个`X`。突出显示`X`，然后点击Add $按钮将`X`用payload标记包装起来：
- en: '![](img/00312.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00312.jpeg)'
- en: 'In the Intruder | Payloads tab, click the Load button. Browse to the location
    where you downloaded the SecLists-master wordlists from GitHub. Navigate to the
    location of the `FUZZDB_UnixAttacks.txt` wordlist and use the following to populate
    the Payload Options [Simple list] box: SecLists-master |Fuzzing |  `FUZZDB_UnixAttacks.txt`'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Intruder | Payloads标签中，点击Load按钮。浏览到您从GitHub下载SecLists-master wordlists的位置。导航到`FUZZDB_UnixAttacks.txt`
    wordlist的位置，并使用以下内容填充Payload Options [Simple list]框：SecLists-master | Fuzzing
    | `FUZZDB_UnixAttacks.txt`
- en: '![](img/00313.jpeg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00313.jpeg)'
- en: Uncheck the Payload Encoding box at the bottom of the Payloads tab page and
    then click the Start Attack button.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Payloads标签页的底部取消选中Payload Encoding框，然后点击Start Attack按钮。
- en: 'Allow the attack to continue until you reach payload `50`. Notice the responses
    through the Render tab around payload `45` or so. We are able to perform commands,
    such as `id`, on the operating system, which displays the results of the commands
    on the web page:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许攻击继续，直到达到payload `50`。注意在payload `45`左右的Render标签周围的响应。我们能够在操作系统上执行命令，比如`id`，它会在网页上显示命令的结果：
- en: '![](img/00314.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00314.jpeg)'
- en: How it works...
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Failure to define and validate user input against an acceptable list of system
    commands can lead to command injection vulnerabilities. In this case, the application
    code does not confine system commands available through the UI, allowing visibility
    and execution of commands on the operating system that should be restricted.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 未能定义和验证用户输入是否符合可接受的系统命令列表可能导致命令注入漏洞。在这种情况下，应用程序代码未限制通过UI可用的系统命令，允许在操作系统上查看和执行应该受限制的命令。
