- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Preparing Our First Vulnerable Cloud Lab Environment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备我们的第一个脆弱云实验环境
- en: In *[Chapter 1](B19755_01.xhtml)*, *Getting Started with Penetration Testing
    Labs in the Cloud*, we discussed several key topics that are essential to building
    intentionally vulnerable lab environments in the cloud. At this point, you are
    probably eager to get your feet wet and very excited to start working on some
    hands-on exercises. The good news is that we won’t have to wait much longer since
    we will be working on our first penetration testing cloud lab environment in this
    chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在*[第1章](B19755_01.xhtml)*《云端渗透测试实验室入门》中，我们讨论了几个在云端构建有意漏洞实验环境的关键主题。此时，你可能已经迫不及待想要动手实践，并非常期待开始进行一些动手练习。好消息是，我们无需再等太久，因为本章将带领我们开始第一个渗透测试云实验环境的构建。
- en: We will start the hands-on section of this chapter by creating an empty Amazon
    **Simple Storage Service** (**S3**) bucket and configuring it for static website
    hosting. We will then make the bucket misconfigured by modifying its access control
    settings accordingly. We will complete the setup by uploading a few sample files
    into our S3 bucket and make the setup a bit more realistic. Of course, setting
    up the vulnerable cloud lab environment is just the first part! The second part
    involves testing the security configuration of our lab environment by simulating
    the attack process from an attacker’s point of view. Once we are done with the
    tests, we will proceed with the cleanup step by deleting the bucket, along with
    the files stored inside it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从本章的动手部分开始，通过创建一个空的Amazon **Simple Storage Service**（**S3**）桶，并将其配置为静态网站托管。接着，我们将通过修改其访问控制设置使该桶配置错误。然后，我们将上传一些示例文件到S3桶中，使该环境更加真实。当然，设置脆弱的云实验环境只是第一步！第二步是通过模拟攻击者的攻击过程来测试实验环境的安全配置。测试完成后，我们将进行清理操作，删除桶以及其中存储的文件。
- en: 'That said, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我们将涵盖以下主题：
- en: Designing our first cloud penetration testing lab environment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计我们的第一个云渗透测试实验室环境
- en: Preparing our first vulnerable environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备我们的第一个脆弱环境
- en: Testing and hacking our first vulnerable environment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试和黑客攻击我们的第一个脆弱环境
- en: Cleaning up
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理工作
- en: While working on the hands-on solutions of this chapter, we will cover relevant
    security concepts and mechanisms that can be used to manage access control in
    S3 buckets. Having a good understanding of how these security mechanisms work
    will help you prepare different variations of misconfigured S3 buckets that can
    be part of more complex penetration testing lab environments.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的动手解决方案中，我们将介绍与安全相关的概念和机制，这些概念和机制可用于管理S3桶的访问控制。深入理解这些安全机制的工作原理，将帮助你为更复杂的渗透测试实验环境准备不同的配置错误的S3桶变种。
- en: With this in mind, let’s get started!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 既然如此，让我们开始吧！
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before we start, we must have the following ready:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们必须准备好以下内容：
- en: An AWS account, which will serve as the *target account* that contains the vulnerable
    environment and resources
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个AWS账户，将作为*目标账户*，包含脆弱的环境和资源
- en: A second AWS account, which will serve as the *attacker’s account*
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个AWS账户，将作为*攻击者账户*
- en: Feel free to create these AWS accounts by going to [https://aws.amazon.com/free/](https://aws.amazon.com/free/).
    You may proceed with the next steps once these accounts are ready.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问[https://aws.amazon.com/free/](https://aws.amazon.com/free/)来创建这些AWS账户。账户创建好后，你就可以继续进行下一步操作。
- en: Note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This chapter primarily focuses on building a sample vulnerable lab environment
    on AWS. Of course, we need to have our **Microsoft Azure** and **Google Cloud
    Platform** (**GCP**) accounts ready once we reach the hands-on portion of the
    succeeding chapters of this book. In the meantime, setting up two AWS accounts
    should do the trick for now.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要聚焦于在AWS上构建一个样本脆弱实验环境。当然，一旦进入后续章节的动手部分，我们还需要准备好**Microsoft Azure**和**Google
    Cloud Platform**（**GCP**）账户。在此之前，设置两个AWS账户已经足够了。
- en: Designing our first cloud penetration testing lab environment
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计我们的第一个云渗透测试实验室环境
- en: 'In *[Chapter 1](B19755_01.xhtml)*, *Getting Started with Penetration Testing
    Labs in the Cloud*, we discussed how modern cloud applications are designed, developed,
    and deployed. We took a closer look at how distributed multi-tier architectures
    and horizontal scaling strategies make it possible to independently scale specific
    tiers to handle increased user traffic:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在*[第 1 章](B19755_01.xhtml)*《在云中入门渗透测试实验室》中，我们讨论了现代云应用程序是如何设计、开发和部署的。我们仔细研究了分布式多层架构和水平扩展策略如何使得可以独立地扩展特定层次，以应对增加的用户流量：
- en: '![](image/B19755_02_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_02_01.jpg)'
- en: Figure 2.1 – Generic multi-tiered architecture diagram from Chapter 1
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – 第 1 章中的通用多层架构图
- en: 'Here, we have designed the system to have separate tiers for the web servers,
    application servers, and databases. Given that this is one of the common cloud
    architecture implementations, you might be wondering, *how* *would this look like
    when implemented on a cloud platform such as AWS?* The answer to this question
    is simple! It would look more or less the same when implemented on AWS! For one
    thing, the resources in *Figure 2**.1* would simply have their own corresponding
    set of resources and services on AWS (similar to what is shown in *Figure 2**.2*):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们设计的系统具有单独的层次结构来区分 Web 服务器、应用程序服务器和数据库。鉴于这是云架构实现中的一种常见模式，你可能会想知道，*当在像 AWS
    这样的云平台上实现时，它会是什么样的？* 这个问题的答案很简单！在 AWS 上实现时，它看起来几乎是一样的！首先，*图 2.1*中的资源将简单地有自己对应的
    AWS 资源和服务（类似于*图 2.2*中展示的内容）：
- en: '![](image/B19755_02_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_02_02.jpg)'
- en: Figure 2.2 – How a distributed multi-tiered architecture can be implemented
    on AWS
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 如何在 AWS 上实现分布式多层架构
- en: In *Figure 2**.2*, we can see that the generic load balancer resource from *Figure
    2**.1* would be replaced with an **Amazon Elastic Load Balancing** (**ELB**) cloud
    resource. Similarly, the web servers would be replaced with several **Amazon Elastic
    Compute Cloud** (**EC2**) instances. The generic database server resource would
    then be replaced with a managed **Amazon Relational Database Service** (**RDS**)
    database resource.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 2.2*中，我们可以看到来自*图 2.1*的通用负载均衡器资源将被**Amazon Elastic Load Balancing**（**ELB**）云资源替换。同样，Web
    服务器将被多个**Amazon Elastic Compute Cloud**（**EC2**）实例替换。通用数据库服务器资源随后将被托管的**Amazon
    Relational Database Service**（**RDS**）数据库资源替换。
- en: At this point, you might be wondering why we have an extra resource box (that
    is, a box that represents an Amazon S3 bucket) in *Figure 2**.2*! Well, even if
    Amazon EC2 instances have storage volumes attached to them, cloud engineers generally
    decouple the application architecture further by storing files and objects inside
    **Amazon S3** buckets and database records inside **Amazon RDS** database instances.
    This allows the application implementation deployed inside the fleet of EC2 instances
    (virtual machines) to be stateless (making auto-scaling easier to implement) since
    the *state* is stored inside the S3 buckets and the RDS database instances.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能会想知道为什么在*图 2.2*中我们有一个额外的资源框（也就是表示 Amazon S3 存储桶的框）！其实，即使 Amazon EC2
    实例已经附加了存储卷，云工程师通常会通过将文件和对象存储在**Amazon S3** 存储桶中以及将数据库记录存储在**Amazon RDS**数据库实例中，进一步解耦应用程序架构。这使得部署在
    EC2 实例（虚拟机）集群中的应用程序能够保持无状态（从而更容易实现自动扩展），因为*状态*被存储在 S3 存储桶和 RDS 数据库实例中。
- en: What’s Amazon S3?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是 Amazon S3？
- en: '**Amazon S3** is an object storage service built to store and retrieve a variety
    of files. We can think of Amazon S3 as an online service where we can create *file
    storage containers* (also known as S3 buckets) that can store any number of files
    uploaded through the web interface, a CLI utility, an SDK, or the API. Of course,
    we can also download files from these buckets using a similar set of options.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**Amazon S3** 是一个对象存储服务，旨在存储和检索各种文件。我们可以把 Amazon S3 看作是一个在线服务，我们可以创建*文件存储容器*（也叫
    S3 存储桶），这些容器可以存储通过 Web 界面、CLI 工具、SDK 或 API 上传的任意数量的文件。当然，我们也可以使用类似的选项从这些存储桶中下载文件。'
- en: 'Amazon S3 plays an important role in modern applications deployed on AWS. Many
    cloud applications and systems running on AWS make use of S3 buckets to store
    files of various file types and formats. This includes data engineering and machine
    learning systems, similar to what we have in *Figure 2**.3*:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**Amazon S3** 在现代部署在 AWS 上的应用程序中扮演着重要角色。许多运行在 AWS 上的云应用程序和系统利用 S3 存储桶来存储各种类型和格式的文件。这包括数据工程和机器学习系统，类似于我们在*图
    2.3*中看到的内容：'
- en: '![](image/B19755_02_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_02_03.jpg)'
- en: Figure 2.3 – Where machine learning and data engineering systems store data
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 机器学习和数据工程系统存储数据的位置
- en: Here, we have a machine learning engineering system that utilizes managed machine
    learning and data engineering services such as **Amazon SageMaker** (a managed
    machine learning service) and **Amazon Athena** (a serverless, interactive analytics
    service) to process data stored inside Amazon S3 buckets. *Where does the cloud
    data reside before and after the data processing operations?* In most cases, the
    data would be stored inside Amazon S3 buckets, especially when dealing with data
    engineering and machine learning engineering workloads. As we can see, Amazon
    S3 is one of the most used services on AWS. An application deployed on AWS would
    most likely store files inside an S3 bucket (or in multiple S3 buckets). Its versatility
    and scalability make it a go-to choice for storing various types of files and
    data in the cloud. When deploying an application on AWS, it is a common practice
    to leverage S3 buckets for efficient and secure file storage, whether it involves
    hosting static website assets, storing user-uploaded content, or even serving
    as a data lake for large-scale analytics.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个机器学习工程系统，利用**Amazon SageMaker**（托管的机器学习服务）和**Amazon Athena**（无服务器的交互式分析服务）等托管机器学习和数据工程服务来处理存储在
    Amazon S3 桶中的数据。*在数据处理操作之前和之后，云数据存储在哪里？* 在大多数情况下，数据会存储在 Amazon S3 桶中，特别是在处理数据工程和机器学习工程工作负载时。如我们所见，Amazon
    S3 是 AWS 上使用最广泛的服务之一。部署在 AWS 上的应用程序最有可能将文件存储在 S3 桶中（或多个 S3 桶中）。其多功能性和可扩展性使其成为在云中存储各种类型的文件和数据的首选。部署应用程序时，利用
    S3 桶进行高效和安全的文件存储是一种常见做法，无论是托管静态网站资源、存储用户上传的内容，还是作为大规模分析的数据湖。
- en: In some cases, files stored in Amazon S3 may contain **personally identifiable
    information** (**PII**), along with other sensitive information that must be protected
    at all costs. This could involve details such as names, addresses, social security
    numbers, or financial information, which can pose a significant risk if accessed
    by unauthorized individuals. Safeguarding this information is essential to maintain
    privacy and comply with data protection regulations. It is important to note that
    S3 buckets can be attacked by malicious actors directly without them having to
    go through the load balancer and web application tiers in *Figure 2**.2*. This
    means that if the S3 bucket is misconfigured (for example, the sensitive files
    stored in the bucket are publicly accessible), the S3 files and data can be stolen
    by attackers no matter how secure the load balancer and web application tiers
    are.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，存储在 Amazon S3 中的文件可能包含**个人可识别信息**（**PII**）以及其他必须加以保护的敏感信息。这些信息可能包括姓名、地址、社会安全号码或财务信息，如果被未经授权的人访问，可能会造成重大风险。保护这些信息对于维护隐私和遵守数据保护法规至关重要。需要注意的是，S3
    桶可能会直接遭到恶意攻击者的攻击，而无需经过负载均衡器和网页应用层，如*图 2.2*所示。这意味着，如果 S3 桶配置错误（例如，存储在桶中的敏感文件可以公开访问），无论负载均衡器和网页应用层如何安全，攻击者都可以窃取
    S3 桶中的文件和数据。
- en: 'In the past couple of years, misconfigured S3 buckets have led to a significant
    number of data breaches that leaked millions of records containing PII, sensitive
    corporate information, and even credentials. Here are some of the highlights from
    the previous years:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年中，错误配置的 S3 桶导致了大量数据泄露事件，泄露了包含 PII、敏感企业信息甚至凭证的数百万条记录。以下是过去几年的一些重要事件：
- en: In 2017, a significant number of S3 buckets were found to be misconfigured,
    resulting in the exposure of sensitive information, including PII, credit reports,
    and even government and military data.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 2017 年，发现大量 S3 桶配置错误，导致敏感信息的泄露，包括 PII、信用报告，甚至是政府和军事数据。
- en: In 2018, an IT firm exposed data from several Fortune 100 companies, leading
    to the exposure of various types of sensitive information and proprietary data.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 2018 年，一家 IT 公司泄露了多家财富 100 强公司的数据，导致各种类型的敏感信息和专有数据被曝光。
- en: In 2019, a vendor for half the Fortune 100 companies inadvertently exposed a
    terabyte of backups, while a healthcare provider’s misconfigured S3 bucket exposed
    medical records and patient-doctor records.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 2019 年，一家为半数财富 100 强公司提供服务的供应商不小心暴露了 1TB 的备份数据，而一家医疗服务提供商错误配置的 S3 桶暴露了医疗记录和患者与医生的记录。
- en: In 2020, a consumer ratings and reviews website had a misconfigured S3 bucket
    that exposed senior citizens’ data, and a global technology company experienced
    an incident where unauthorized individuals broke into its unsecured AWS S3 silo.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2020 年，一个消费者评分和评论网站的 S3 存储桶配置错误，暴露了老年人的数据，而一家全球科技公司也经历了一次事件，未经授权的人员闯入了其未加固的
    AWS S3 存储空间。
- en: In 2022, a misconfigured S3 bucket leaked around 3 TB (terabytes!) of sensitive
    airport data, which exposed the PII of the airline employees.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2022 年，一个配置错误的 S3 存储桶泄露了约 3 TB（太字节！）的敏感机场数据，暴露了航空公司员工的个人身份信息（PII）。
- en: These incidents, along with other reported leaks during the past few years,
    highlighted the widespread nature of S3 bucket misconfigurations and the potential
    risks associated with them.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件以及过去几年报告的其他泄露事件，突显了 S3 存储桶配置错误的普遍性及其可能带来的风险。
- en: Note
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information about this topic, feel free to check out the following
    link: [https://github.com/nagwww/s3-leaks](https://github.com/nagwww/s3-leaks).'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于这个话题的信息，欢迎查看以下链接：[https://github.com/nagwww/s3-leaks](https://github.com/nagwww/s3-leaks)。
- en: Why are attacks on S3 buckets so prevalent?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么攻击 S3 存储桶如此普遍？
- en: Cloud engineers and developers generally have a poor understanding of how the
    different access control mechanisms work together when securing S3 buckets. In
    addition to this, the complexity of managing access control policies and permissions
    within S3 buckets adds another layer of challenge. The multitude of options and
    settings available can overwhelm inexperienced users, increasing the likelihood
    of misconfigurations and accidental exposure of sensitive information. This can
    lead to misconfigured S3 buckets leaking and exposing private and sensitive information
    to unauthorized users.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 云工程师和开发人员通常对不同的访问控制机制如何协同工作以保护 S3 存储桶的理解较差。除此之外，在 S3 存储桶内管理访问控制策略和权限的复杂性增加了另一层挑战。可用的众多选项和设置可能会让经验不足的用户感到不知所措，增加配置错误和敏感信息意外暴露的可能性。这可能导致配置错误的
    S3 存储桶泄露并将私密和敏感信息暴露给未经授权的用户。
- en: 'That said, having a solid understanding of what security measures are available
    would help us secure files inside S3 buckets better. At the same time, this would
    allow us to design and build realistic penetration testing labs involving S3\.
    If you are wondering what security mechanisms are available to secure the files
    stored inside these S3 buckets, here’s a quick list:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，了解可用的安全措施将有助于我们更好地保护 S3 存储桶中的文件。同时，这也将使我们能够设计和构建涉及 S3 的实际渗透测试实验室。如果你想知道有哪些安全机制可以保护存储在这些
    S3 存储桶中的文件，这里有一个快速的列表：
- en: '**Identity and Access Management (IAM) policies**: By configuring IAM policies,
    organizations can define granular permissions and access controls for users, groups,
    and roles within their AWS accounts. This allows for fine-grained control over
    who can perform actions on S3 buckets, such as read, write, or delete operations.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份与访问管理（IAM）策略**：通过配置 IAM 策略，组织可以为其 AWS 账户中的用户、组和角色定义精细的权限和访问控制。这可以更精确地控制谁可以对
    S3 存储桶执行操作，如读取、写入或删除操作。'
- en: '**Bucket policies**: Bucket policies provide an additional layer of access
    control at the bucket level. With bucket policies, organizations can define rules
    and conditions that govern access to specific S3 buckets. This includes allowing
    or denying access based on various factors such as IP addresses, user agents,
    or specific AWS accounts.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储桶策略**：存储桶策略在存储桶级别提供了额外的访问控制层。通过存储桶策略，组织可以定义管理对特定 S3 存储桶访问的规则和条件。这包括基于各种因素（如
    IP 地址、用户代理或特定 AWS 账户）允许或拒绝访问。'
- en: '**Access Control Lists (ACLs)**: ACLs offer another mechanism for managing
    access to S3 buckets and objects. ACLs allow organizations to specify permissions
    for individual objects within a bucket, providing more fine-grained control over
    file-level access. By setting appropriate ACLs, organizations can grant read or
    write access to specific users or groups while restricting access to others.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问控制列表（ACLs）**：ACL 提供了另一种管理对 S3 存储桶和对象访问的机制。ACL 允许组织为存储桶中的单个对象指定权限，从而提供更精细的文件级访问控制。通过设置适当的
    ACL，组织可以授予特定用户或组读取或写入权限，同时限制其他人的访问。'
- en: '**Virtual Private Cloud (VPC) endpoint policies**: VPC endpoint policies allow
    organizations to control access to S3 buckets from within their VPC environments.
    By defining endpoint policies, organizations can specify which VPCs or subnets
    can access specific S3 buckets. This helps prevent unauthorized access from outside
    the VPC and enhances the security of files stored in S3 buckets by limiting access
    to trusted network environments.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟私有云 (VPC) 终端节点策略**：VPC 终端节点策略允许组织控制其 VPC 环境内对 S3 存储桶的访问。通过定义终端节点策略，组织可以指定哪些
    VPC 或子网可以访问特定的 S3 存储桶。这有助于防止来自 VPC 外部的未经授权访问，并通过限制对受信任网络环境的访问，增强存储在 S3 存储桶中的文件的安全性。'
- en: '**AWS Organizations Service Control Policies (SCPs)**: SCPs are part of AWS
    Organizations and enable organizations to set fine-grained permissions across
    multiple AWS accounts. By defining SCPs, organizations can enforce centralized
    security policies that apply to all member accounts. This includes controlling
    access to S3 buckets and ensuring that consistent security measures are applied
    across the organization. By leveraging SCPs, organizations can strengthen the
    overall security posture of their S3 buckets, ensuring that files are protected
    uniformly across an enterprise.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS 组织服务控制策略 (SCPs)**：SCPs 是 AWS 组织的一部分，允许组织在多个 AWS 账户之间设置精细的权限。通过定义 SCPs，组织可以强制执行适用于所有成员账户的集中式安全策略。这包括控制对
    S3 存储桶的访问，并确保在整个组织内应用一致的安全措施。通过利用 SCPs，组织可以增强其 S3 存储桶的整体安全态势，确保文件在整个企业中得到统一保护。'
- en: Important note
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: While new S3 buckets created after April 2023 have ACLs disabled by default
    during the bucket creation process, it is still possible to enable them through
    a configuration change while the S3 bucket is being configured and created. At
    the same time, S3 buckets with ACLs disabled can be modified and have ACLs enabled
    and restored after bucket creation. Despite this enforcement of secure defaults,
    a significant number of S3 buckets created before April 2023 continue to rely
    on ACLs, along with the other discussed S3 security mechanisms. Therefore, having
    a thorough comprehension of these security mechanisms is crucial for both setting
    up cloud-based penetration testing lab environments and ensuring the correct configuration
    of S3 security settings.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 2023 年 4 月之后创建的新 S3 存储桶在创建过程中默认禁用 ACL，但仍然可以通过配置更改在 S3 存储桶配置和创建时启用 ACL。同时，禁用
    ACL 的 S3 存储桶可以在存储桶创建后被修改并启用恢复 ACL。尽管采取了强制安全默认设置，但在 2023 年 4 月之前创建的相当一部分 S3 存储桶仍依赖于
    ACL，并与其他讨论的 S3 安全机制一起使用。因此，全面理解这些安全机制对于设置基于云的渗透测试实验环境以及确保 S3 安全设置的正确配置至关重要。
- en: Even with the security mechanisms and guardrails available alongside the security
    upgrades released by the cloud platform, misconfigurations are still present in
    a significant number of existing S3 buckets. In addition to this, no matter how
    secure the other components of the cloud architecture are, a misconfigured S3
    bucket would still result in a data leak since the files stored in the S3 buckets
    can be accessed directly in a significant number of cases.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 即使云平台发布了安全机制和安全升级的防护措施，仍有相当一部分现有的 S3 存储桶存在错误配置。除此之外，无论云架构的其他组件多么安全，错误配置的 S3
    存储桶仍然会导致数据泄露，因为在许多情况下，存储在 S3 存储桶中的文件可以直接访问。
- en: 'In this chapter, we will focus on preparing a misconfigured S3 bucket in our
    AWS account. Before building our first cloud penetration testing lab environment
    (that is, a single misconfigured S3 bucket), we must have a good idea of what
    the most common S3 bucket misconfigurations are:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于在我们的 AWS 账户中准备一个错误配置的 S3 存储桶。在构建我们的第一个云渗透测试实验环境（即单个错误配置的 S3 存储桶）之前，我们必须清楚了解最常见的
    S3 存储桶错误配置是什么：
- en: '**Guest/anonymous users can perform operations on the objects stored in the
    bucket**: This misconfiguration enables attackers or unauthorized individuals
    to access and manipulate the files and folders stored in the bucket. Unauthorized
    users can list the contents of the bucket, retrieve objects from it, and even
    upload their own files, potentially leading to unauthorized data exposure, modification,
    or deletion.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访客/匿名用户可以对存储在存储桶中的对象执行操作**：此错误配置使得攻击者或未经授权的个人能够访问和操作存储在存储桶中的文件和文件夹。未经授权的用户可以列出存储桶中的内容，从中检索对象，甚至上传自己的文件，这可能导致未经授权的数据暴露、修改或删除。'
- en: '**“Authenticated users” (anyone with an AWS account) can list files and read
    and write objects to the S3 bucket**: This misconfiguration allows *any user with
    an AWS account* to have the ability to list, read, and write objects stored in
    the bucket. This means that any individual or user with AWS credentials can access
    and modify the bucket’s contents.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“已认证用户”（任何拥有 AWS 账户的人）可以列出文件并读取和写入 S3 存储桶中的对象**：此配置错误允许*任何拥有 AWS 账户的用户*列出、读取和写入存储桶中的对象。这意味着任何拥有
    AWS 凭证的个人或用户都可以访问并修改存储桶的内容。'
- en: '**The ACL configuration of the S3 bucket can be read by an external user**:
    This misconfiguration helps attackers gain additional information about the security
    configuration of the bucket.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**S3 存储桶的 ACL 配置可以被外部用户读取**：此配置错误帮助攻击者获取有关存储桶安全配置的更多信息。'
- en: '**The S3 bucket access logging setup is disabled in CloudTrail**: This misconfiguration
    prevents AWS users from auditing the event history for the S3 bucket(s) (including
    the actions performed by an entity or resource on our S3 buckets).'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**S3 存储桶访问日志记录在 CloudTrail 中已禁用**：此配置错误阻止 AWS 用户审核 S3 存储桶的事件历史记录（包括实体或资源在 S3
    存储桶上执行的操作）。'
- en: Note
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If this is your first time encountering **CloudTrail**, it is simply an AWS
    service that helps monitor and record AWS account activity. This service plays
    an important role in helping enable governance, compliance, operational auditing,
    and risk auditing in AWS accounts. Disabling access logging for an S3 bucket in
    CloudTrail means that no logs will be generated to track and record the bucket’s
    access activity. This can limit the ability to detect unauthorized access attempts,
    troubleshoot problems, and maintain a complete record of bucket activity for compliance
    and security purposes.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是您第一次遇到**CloudTrail**，它是一个 AWS 服务，帮助监控和记录 AWS 账户活动。此服务在帮助启用治理、合规性、操作审计和风险审计方面发挥着重要作用。在
    CloudTrail 中禁用 S3 存储桶的访问日志记录意味着不会生成日志来追踪和记录存储桶的访问活动。这可能会限制检测未经授权的访问尝试、排除故障并为合规性和安全目的保持完整的存储桶活动记录的能力。
- en: 'With a clearer understanding of the typical misconfigurations that can occur
    in S3 buckets, we can now move forward and design and build our first cloud penetration
    testing lab environment. Specifically, our focus will be on designing a lab environment
    that involves a single S3 bucket that’s been intentionally misconfigured to simulate
    real-world vulnerabilities. Our misconfigured S3 bucket will store a few sample
    files, similar to what is shown in *Figure 2**.4*:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更加清晰地理解 S3 存储桶可能出现的典型配置错误，我们现在可以继续前进，设计并建立我们的第一个云渗透测试实验室环境。具体而言，我们的重点将是设计一个实验室环境，其中包含一个故意配置错误的
    S3 存储桶，用于模拟现实世界中的漏洞。我们的配置错误的 S3 存储桶将存储一些示例文件，类似于*图 2.4*中所示的内容：
- en: '![](image/B19755_02_04.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_02_04.jpg)'
- en: Figure 2.4 – How our S3 bucket will be configured
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 我们的 S3 存储桶将如何配置
- en: 'As shown in *Figure 2**.4*, we will configure the S3 bucket to have the following
    properties and configuration settings:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图 2.4*所示，我们将配置 S3 存储桶，使其具备以下属性和配置设置：
- en: '**Static website hosting** – **ENABLED**: This configuration enables static
    website hosting for the specified S3 bucket, allowing it to serve static web pages
    and assets directly from the bucket.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态网站托管** – **已启用**：此配置启用指定 S3 存储桶的静态网站托管，使其能够直接从存储桶提供静态网页和资产。'
- en: '**Block public access** – **DISABLED**: This configuration (when enabled) helps
    prevent accidental exposure of sensitive data by enforcing restrictions on public
    access. However, when this configuration setting is disabled, anonymous users
    and unauthorized entities may be able to access the bucket and the objects stored
    inside it (especially with a misconfigured S3 bucket).'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阻止公共访问** – **已禁用**：此配置（启用时）通过强制限制公共访问来帮助防止敏感数据的意外暴露。然而，当此配置设置被禁用时，匿名用户和未经授权的实体可能能够访问存储桶及其中的对象（特别是当
    S3 存储桶配置错误时）。'
- en: '**Bucket policy** – **AUTHENTICATED USERS CAN RETRIEVE OBJECTS**: This configuration
    allows authenticated users (that is, *anyone* with an AWS account) to retrieve
    objects from the S3 bucket, granting them access to the stored data.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储桶策略** – **已认证用户可以检索对象**：此配置允许已认证用户（即*任何*拥有 AWS 账户的人）从 S3 存储桶中检索对象，从而允许他们访问存储的数据。'
- en: '**Access control list (ACL)** – **AUTHENTICATED USERS CAN LIST OBJECTS**: This
    allows authenticated users to list the objects within the S3 bucket.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问控制列表（ACL）** – **认证用户可以列出对象**：这允许认证用户列出 S3 存储桶中的对象。'
- en: In addition to these, we will be uploading a few sample files we might see in
    a typical S3 bucket. Now that we’ve discussed how our vulnerable lab environment
    will be (mis)configured, we can proceed with the hands-on portion of this chapter!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些，我们还将上传一些在典型 S3 存储桶中可能看到的示例文件。现在我们已经讨论了脆弱实验环境的（误）配置，接下来可以进行本章的动手实践部分！
- en: Important note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is important to note that while we’re focusing on Amazon S3 in this chapter,
    similar issues and incidents have affected companies using Azure Blob Storage
    and Google Cloud Storage. These services, similar to Amazon S3, have encountered
    comparable security challenges and vulnerabilities.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然我们在本章中专注于 Amazon S3，但类似的问题和事件也影响了使用 Azure Blob Storage 和 Google Cloud
    Storage 的公司。这些服务与 Amazon S3 类似，也面临着类似的安全挑战和漏洞。
- en: Preparing our first vulnerable environment
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备我们的第一个脆弱环境
- en: As discussed in the previous section, our first vulnerable environment will
    be composed of a single misconfigured Amazon S3 bucket containing a few sample
    files. There are a variety of ways to create an empty S3 bucket. In this chapter,
    we’ll use the AWS Management Console to create our bucket.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前一部分所讨论的，我们的第一个脆弱环境将由一个配置错误的 Amazon S3 存储桶和一些示例文件组成。创建空 S3 存储桶有多种方式。本章中，我们将使用
    AWS 管理控制台来创建存储桶。
- en: 'This section is composed of four subparts:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含四个子部分：
- en: Creating an empty S3 bucket
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个空的 S3 存储桶
- en: Configuring the S3 bucket to host a static website
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 S3 存储桶以托管静态网站
- en: Updating the S3 bucket configuration settings
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新 S3 存储桶的配置设置
- en: Uploading files to the S3 bucket
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传文件到 S3 存储桶
- en: Important note
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Since we’ll be preparing an intentionally vulnerable S3 bucket, make sure you
    *don’t* use this S3 bucket to store production data (or files that contain sensitive
    information).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将准备一个故意脆弱的 S3 存储桶，请确保*不要*使用此 S3 存储桶来存储生产数据（或包含敏感信息的文件）。
- en: Creating an empty S3 bucket
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个空的 S3 存储桶
- en: We will start by creating an empty S3 bucket. Make sure that you are logged
    in using the “target account” (the first AWS account).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建一个空的 S3 存储桶开始。请确保你使用“目标账户”（第一个 AWS 账户）登录。
- en: Important note
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You may also opt to choose **N. Virginia** as the region where the S3 bucket
    will be created. Feel free to update the current region using the dropdown located
    in the top-left corner of the page before proceeding.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以选择将 **N. Virginia** 作为 S3 存储桶创建的区域。在继续操作之前，随时可以使用页面左上角的下拉菜单更新当前区域。
- en: 'With this in mind, let’s proceed with creating the empty S3 bucket from the
    AWS Management Console:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这一点，让我们开始使用 AWS 管理控制台创建空的 S3 存储桶：
- en: Type **s3** in the search bar:![](image/B19755_02_05.jpg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索栏中输入 **s3**：![](image/B19755_02_05.jpg)
- en: Figure 2.5 – Navigating to the S3 console
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.5 – 导航到 S3 控制台
- en: Select **S3** from the list of results (as highlighted in *Figure 2**.5*).
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从结果列表中选择 **S3**（如*图 2.5*所示）。
- en: Next, click the **Create bucket** button, as highlighted in *Figure 2**.6*:![](image/B19755_02_06.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击 **创建存储桶** 按钮，如*图 2.6*所示：![](image/B19755_02_06.jpg)
- en: Figure 2.6 – Locating the Create bucket button
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.6 – 定位创建存储桶按钮
- en: You should see the **Create bucket** button near the top right-hand corner of
    the page.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该能在页面右上角附近看到 **创建存储桶** 按钮。
- en: Note
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to note that the user interface may change once every few years.
    However, this shouldn’t prevent us from proceeding with creating the required
    resources as the attributes and properties to be configured pretty much stay the
    same (except for a few new properties and options).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，用户界面可能会每隔几年发生一次变化。然而，这不应妨碍我们继续创建所需资源，因为需要配置的属性和设置基本保持不变（除了少数新增的属性和选项）。
- en: Under **Bucket name**, specify a bucket name that is globally unique across
    all AWS users:![](image/B19755_02_07.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **存储桶名称** 下，指定一个全球唯一的存储桶名称：![](image/B19755_02_07.jpg)
- en: Figure 2.7 – Creating an S3 bucket
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.7 – 创建 S3 存储桶
- en: If you are having a hard time naming your S3 bucket, you may name your S3 bucket
    **sample-web-bucket-<6-8 random alphanumeric characters>**. It may take you a
    few tries to come up with a valid and globally unique S3 bucket name.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你在命名 S3 存储桶时遇到困难，可以将 S3 存储桶命名为**sample-web-bucket-<6-8 位随机字母数字字符>**。可能需要尝试几次才能得出一个有效且全球唯一的
    S3 存储桶名称。
- en: Note
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For guidelines on how to name S3 buckets, feel free to check the following
    link: [https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html).'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何命名 S3 存储桶的指南，请查看以下链接：[https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html)。
- en: In addition to this, choose **US East (N. Virginia) us-east-1** from the list
    of options in the **AWS Region** select box.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请从**AWS 区域**选择框的选项列表中选择**美国东部（弗吉尼亚北部）us-east-1**。
- en: Select the **ACLs enabled** option, similar to what is shown in *Figure 2**.8*:![](image/B19755_02_08.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**启用 ACL**选项，类似于*图 2.8*中所示的那样：![](image/B19755_02_08.jpg)
- en: Figure 2.8 – Configuring the Object Ownership settings
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.8 – 配置对象所有权设置
- en: Setting the **Object Ownership** configuration value to **Object writer** will
    make the objects owned by the AWS account that uploads them. This means that the
    AWS account that owns the object can use ACLs to grant access to other users (even
    if that AWS account that uploaded the objects is not the owner of the bucket).
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将**对象所有权**配置值设置为**对象写入者**将使对象成为上传它们的 AWS 账户的所有物。这意味着拥有对象的 AWS 账户可以使用 ACL 来授予其他用户访问权限（即使上传对象的
    AWS 账户并不是存储桶的所有者）。
- en: Important note
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: 'Note that AWS regularly updates and improves the user experience when using
    the AWS Management Console. In some cases, the default configuration settings
    are changed when creating resources after a certain date. For example, AWS has
    a new set of default settings for S3 Block Public Access and S3 Object Ownership
    when creating new S3 buckets after April 2023\. That said, you might have to click
    a few additional buttons and see a few differences when using the AWS Management
    Console by the time you read this book. Feel free to check the following link
    for more information about this topic: [https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-faq.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-faq.html).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，AWS 定期更新并改善 AWS 管理控制台的用户体验。在某些情况下，创建资源时的默认配置设置可能会发生变化，尤其是在某些日期之后。例如，从 2023
    年 4 月开始，AWS 为 S3 存储桶的公共访问阻止（S3 Block Public Access）和 S3 对象所有权（S3 Object Ownership）设置了一组新的默认设置。因此，到你阅读这本书时，使用
    AWS 管理控制台时可能需要点击几个额外的按钮，并且会看到一些差异。有关此主题的更多信息，请查看以下链接：[https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-faq.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-faq.html)。
- en: Uncheck the **Block all public access** checkbox, similar to what is shown in
    *Figure 2**.9*:![](image/B19755_02_09.jpg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选中**阻止所有公共访问**复选框，类似于*图 2.9*中所示的那样：![](image/B19755_02_09.jpg)
- en: Figure 2.9 – Turning off Block all public access
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.9 – 关闭阻止所有公共访问
- en: In addition to this, make sure you toggle the **I acknowledge that the current
    settings might result in this bucket and the objects within becoming public**.
    checkbox *ON*. This will allow you to specify a bucket or access point policy
    that grants public access.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除此之外，确保你将**我知道当前设置可能导致此存储桶及其中的对象变为公开**的复选框设置为*ON*。这将允许你指定一个存储桶或访问点策略，以授予公共访问权限。
- en: You should see a success notification, similar to what is shown in *Figure 2**.10*:![](image/B19755_02_10.jpg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该会看到一个成功通知，类似于*图 2.10*中所示的那样：![](image/B19755_02_10.jpg)
- en: Figure 2.10 – Locating the View details button
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.10 – 定位查看详细信息按钮
- en: Click the **View details** button to navigate to the specific S3 bucket page
    of the bucket we just created.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**查看详细信息**按钮，跳转到我们刚刚创建的 S3 存储桶的具体页面。
- en: Wasn’t that easy? Of course, we’re just getting started – we’ll have to configure
    this S3 bucket in the next few sections of this chapter!
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这不是很简单吗？当然，我们才刚刚开始——接下来的几节内容中，我们将继续配置这个 S3 存储桶！
- en: Configuring the S3 bucket to host a static website
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 S3 存储桶以托管静态网站
- en: 'Continuing where we left off in the previous section, let’s proceed by configuring
    our S3 bucket for static website hosting. You would be surprised how easy it is
    to set this up! That said, let’s proceed:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接着我们在上一节的内容，继续配置我们的 S3 存储桶以进行静态网站托管。你会惊讶于这项配置是多么简单！话不多说，让我们继续：
- en: Click **Properties** to navigate to the **Properties** tab, as highlighted in
    *Figure 2**.11*:![](image/B19755_02_11.jpg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**属性**以导航到**属性**标签，如*图2.11*中所示：![](image/B19755_02_11.jpg)
- en: Figure 2.11 – Navigating to the Properties tab
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.11 – 导航到属性标签
- en: 'We should see the following under the **Properties** tab: (1) **Bucket overview**,
    (2) **Bucket versioning**, (3) **Tags**, (4) **Default encryption**, (5) **Intelligent-Tiering
    Archive configurations**, (6) **Server access logging**, (7) **AWS CloudTrail
    data events**, (8) **Event notifications**, (9) **Amazon EventBridge**, (10) **Transfer
    acceleration**, (11) **Object Lock**, (12) **Requester pays**, and (13) **Static**
    **website hosting**.'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们应该在**属性**标签下看到以下内容：（1）**桶概览**，（2）**桶版本控制**，（3）**标签**，（4）**默认加密**，（5）**智能分层归档配置**，（6）**服务器访问日志**，（7）**AWS
    CloudTrail 数据事件**，（8）**事件通知**，（9）**Amazon EventBridge**，（10）**传输加速**，（11）**对象锁**，（12）**请求者付费**，和（13）**静态**
    **网站托管**。
- en: Scroll down to the bottom of the page until you reach the **Static website**
    **hosting** pane:![](image/B19755_02_12.jpg)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动到页面底部，直到看到**静态网站****托管**面板：![](image/B19755_02_12.jpg)
- en: Figure 2.12 – Editing the Static website hosting settings
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.12 – 编辑静态网站托管设置
- en: Click the **Edit** button, as highlighted in *Figure 2**.12*.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**编辑**按钮，如*图2.12*中所示。
- en: Enable static website hosting by selecting the **Enable** option (refer to *Figure
    2**.13*):![](image/B19755_02_13.jpg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**启用**选项来启用静态网站托管（参见*图2.13*）：![](image/B19755_02_13.jpg)
- en: Figure 2.13 – Enabling static website hosting for the S3 bucket
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.13 – 为S3桶启用静态网站托管
- en: After that, make sure you specify **index.html** in the **Index** **document**
    field.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之后，确保在**索引** **文档**字段中指定**index.html**。
- en: Scroll down to the bottom of the page and click the **Save** **changes** button.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动到页面底部并点击**保存** **更改**按钮。
- en: At this point, the bucket is still empty, so clicking the **Bucket website endpoint**
    link provided (after clicking the **Save changes** button) would give us a **404
    Not Found** error response. Do not worry – we will upload a custom **index.html**
    file later after we have updated the access control settings of the bucket in
    the next section.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，桶仍然为空，因此点击提供的**Bucket网站端点**链接（点击**保存更改**按钮后）将会返回一个**404 未找到**的错误响应。请不要担心——我们将在下一部分更新桶的访问控制设置后上传自定义的**index.html**文件。
- en: Updating the S3 bucket configuration settings
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新S3桶配置设置
- en: 'Now that we’ve configured our S3 bucket for static website hosting, the next
    part involves configuring the bucket to allow anyone with an AWS account to list
    and access objects stored inside the bucket. That said, we will update the bucket
    policy and the ACL configuration settings in the next set of steps:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为S3桶配置了静态网站托管，下一部分涉及配置桶以允许任何拥有AWS账户的用户列出和访问存储在桶中的对象。也就是说，我们将在接下来的步骤中更新桶策略和ACL配置设置：
- en: 'Click the **Permissions** tab (next to the **Properties** tab). We should see
    the following under the **Permissions** tab: (1) **Permissions overview**, (2)
    **Block public access (bucket settings)**, (3) **Bucket policy**, (4) **Object
    Ownership**, (5) **Access control list (ACL)**, and (6) **Cross-origin resource**
    **sharing (CORS)**.'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**权限**标签（位于**属性**标签旁边）。我们应该在**权限**标签下看到以下内容：（1）**权限概览**，（2）**阻止公共访问（桶设置）**，（3）**桶策略**，（4）**对象所有权**，（5）**访问控制列表（ACL）**，和（6）**跨源资源**
    **共享（CORS）**。
- en: Next, click the **Edit** button (as highlighted in *Figure 2**.14*) to specify
    a new bucket policy:![](image/B19755_02_14.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**编辑**按钮（如*图2.14*中所示），以指定新的桶策略：![](image/B19755_02_14.jpg)
- en: Figure 2.14 – Editing Bucket policy
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.14 – 编辑桶策略
- en: In *Figure 2**.14*, we can see that no bucket policy is specified at the moment.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在*图2.14*中，我们可以看到当前没有指定桶策略。
- en: 'After clicking the **Edit** button, specify the following bucket policy in
    the text area:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**编辑**按钮后，在文本框中指定以下桶策略：
- en: '[PRE0]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Make sure you replace **<BUCKET NAME>** with the bucket name of the S3 bucket
    you created. This should give you a bucket policy similar to what we have in *Figure
    2**.15*:'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将**<BUCKET NAME>**替换为你创建的S3桶的桶名。这样你应该能得到一个类似于*图2.15*中的桶策略：
- en: '![](image/B19755_02_15.jpg)'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_02_15.jpg)'
- en: Figure 2.15 – Specifying a bucket policy
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.15 – 指定桶策略
- en: This S3 bucket policy enables *any* AWS account to retrieve objects from the
    **sample-web-bucket-abc123** S3 bucket. You might be surprised that what we have
    in *Figure 2**.15* is a relatively common misconfiguration found across S3 buckets
    around the world!
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该 S3 存储桶策略使*任何* AWS 账户都可以从**sample-web-bucket-abc123** S3 存储桶中检索对象。你可能会惊讶地发现，我们在*图
    2.15*中看到的配置，实际上是全球范围内 S3 存储桶中常见的配置错误！
- en: Important note
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: It is important to note that changing the **"Action"** parameter value from
    **"s3:GetObject"** to **"*"** would allow *any* AWS account to perform unwanted
    actions (for example, uploading files) to our S3 bucket. We don’t want other users
    having write access to our bucket! Why? For one thing, malicious authenticated
    users would be able to upload multiple large files into our S3 bucket (which would
    impact our AWS bill). That said, the use of a wildcard or asterisk (**"*"**) should
    be avoided when working with policies whenever possible, even if we’re designing
    an intentionally vulnerable S3 bucket.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，将**"Action"**参数值从**"s3:GetObject"**更改为**"*"**将允许*任何* AWS 账户执行不必要的操作（例如，上传文件）到我们的
    S3 存储桶中。我们不希望其他用户拥有写入访问权限到我们的存储桶！为什么呢？首先，恶意的已认证用户将能够向我们的 S3 存储桶上传多个大型文件（这会影响我们的
    AWS 账单）。也就是说，在处理策略时，应该尽量避免使用通配符或星号（**"*"**），即使我们设计的是一个故意脆弱的 S3 存储桶。
- en: Scroll down to the bottom of the page and click the **Save** **changes** button.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动到页面底部，点击**保存** **更改**按钮。
- en: Now, let’s modify the **Access control list (ACL)** configuration settings.
    Click the **Edit** button, as highlighted in *Figure 2**.16*:![](image/B19755_02_16.jpg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们修改**访问控制列表（ACL）**配置设置。点击**编辑**按钮，如*图 2.16*所示：![](image/B19755_02_16.jpg)
- en: Figure 2.16 – Editing the ACL configuration
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.16 – 编辑 ACL 配置
- en: Here, we can see the current ACL configuration of our S3 bucket. By default,
    only the bucket owner (you) can perform operations on the bucket.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到当前的 S3 存储桶 ACL 配置。默认情况下，只有存储桶的所有者（你）才能在存储桶上执行操作。
- en: Under **Edit access control list (ACL)** | **Access control list (ACL)**, toggle
    the **List** checkbox *ON* under the **Objects** column for the **Authenticated
    users group** grantee, similar to what we have in *Figure 2**.17*:![](image/B19755_02_17.jpg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**编辑访问控制列表（ACL）** | **访问控制列表（ACL）**下，点击**对象**列中**已认证用户组**授权方的**列出**复选框，并将其设置为*开启*，类似于我们在*图
    2.17*中看到的：![](image/B19755_02_17.jpg)
- en: Figure 2.17 – Allowing Authenticated users group to list objects inside the
    bucket
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.17 – 允许认证用户组列出存储桶中的对象
- en: This should allow anyone with an AWS account to list the objects in our S3 bucket.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该允许任何拥有 AWS 账户的人列出我们 S3 存储桶中的对象。
- en: Note
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: Feel free to check out [https://aws.amazon.com/blogs/security/iam-policies-and-bucket-policies-and-acls-oh-my-controlling-access-to-s3-resources/](https://aws.amazon.com/blogs/security/iam-policies-and-bucket-policies-and-acls-oh-my-controlling-access-to-s3-resources/)
    for more information on how permission control works when multiple access control
    mechanisms are in place.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎查看[https://aws.amazon.com/blogs/security/iam-policies-and-bucket-policies-and-acls-oh-my-controlling-access-to-s3-resources/](https://aws.amazon.com/blogs/security/iam-policies-and-bucket-policies-and-acls-oh-my-controlling-access-to-s3-resources/)了解更多关于在多种访问控制机制存在时，权限控制是如何工作的。
- en: Make sure to toggle the **I understand the effects of these changes on my objects
    and buckets**. checkbox *ON*:![](image/B19755_02_18.jpg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将**我理解这些更改对我的对象和存储桶的影响**复选框设置为*开启*：![](image/B19755_02_18.jpg)
- en: Figure 2.18 – Confirming the ACL modifications to be applied
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.18 – 确认将应用的 ACL 修改
- en: Given that this configuration change may have unintended consequences (from
    a security standpoint), AWS requires us to review and confirm the changes being
    applied.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 鉴于此配置更改可能带来意想不到的后果（从安全角度来看），AWS 要求我们审查并确认所应用的更改。
- en: Important note
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: AWS recommends that ACLs are disabled since we can rely on S3 bucket policies,
    IAM policies, VPC endpoint policies, and AWS Organizations SCPs when managing
    access control in S3 in most scenarios and use cases. However, despite the warnings
    and guardrails available, a lot of existing S3 buckets are still misconfigured
    and vulnerable since only new S3 buckets are protected by the latest set of guardrails
    enforced by AWS.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 建议禁用 ACL，因为在大多数场景和用例中，我们可以依赖 S3 存储桶策略、IAM 策略、VPC 端点策略以及 AWS 组织的 SCP 来管理
    S3 的访问控制。然而，尽管存在警告和防护措施，许多现有的 S3 存储桶仍然配置错误并存在漏洞，因为只有新创建的 S3 存储桶才会受到 AWS 强制执行的最新防护措施的保护。
- en: Now that we’ve modified the bucket policy along with the ACL configuration settings,
    we’ll proceed with uploading files to our S3 bucket in the next section.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经修改了存储桶策略和 ACL 配置设置，接下来将在下一节中继续上传文件到我们的 S3 存储桶。
- en: Uploading files to the S3 bucket
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将文件上传到 S3 存储桶
- en: Our setup would not be complete without files inside our vulnerable S3 bucket.
    That said, we will upload a few sample files we might see in a typical S3 bucket.
    There are a variety of ways to upload files to an S3 bucket. One option would
    be to upload files using the AWS Management Console. Another option would be to
    use the **AWS CLI** to upload files via the command line.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有存放在我们的易受攻击的 S3 存储桶中的文件，设置就不完整了。也就是说，我们将上传一些我们可能在典型的 S3 存储桶中看到的示例文件。有多种方法可以将文件上传到
    S3 存储桶。一种选择是使用 AWS 管理控制台上传文件。另一种选择是使用 **AWS CLI** 通过命令行上传文件。
- en: 'In the next set of steps, we’ll use the AWS CLI to upload files to our S3 bucket:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将使用 AWS CLI 将文件上传到我们的 S3 存储桶：
- en: Open a new browser tab and navigate to the AWS console. Type **shell** in the
    search bar and select **CloudShell** from the list of results, similar to what
    we have in *Figure 2**.19*:![](image/B19755_02_19.jpg)
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的浏览器标签页，导航到 AWS 控制台。在搜索栏中输入 **shell**，从结果列表中选择 **CloudShell**，就像我们在 *图
    2.19* 中看到的那样：![](image/B19755_02_19.jpg)
- en: Figure 2.19 – Navigating to the CloudShell console
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.19 – 导航到 CloudShell 控制台
- en: If you have not used **AWS CloudShell** before, it is simply a browser-based
    command-line terminal where we can run different commands to manage our resources.
    You’ll be surprised how convenient it is to use CloudShell in the succeeding set
    of steps!
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你之前没有使用过 **AWS CloudShell**，它其实是一个基于浏览器的命令行终端，我们可以在其中运行不同的命令来管理我们的资源。在接下来的步骤中，你会惊讶于使用
    CloudShell 的便利性！
- en: Note
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'It is important to note that AWS CloudShell may not be supported in other AWS
    regions. For more information, feel free to check the following link: [https://docs.aws.amazon.com/cloudshell/latest/userguide/supported-aws-regions.html](https://docs.aws.amazon.com/cloudshell/latest/userguide/supported-aws-regions.html).'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，AWS CloudShell 可能不支持其他 AWS 区域。如需更多信息，请随时查看以下链接：[https://docs.aws.amazon.com/cloudshell/latest/userguide/supported-aws-regions.html](https://docs.aws.amazon.com/cloudshell/latest/userguide/supported-aws-regions.html)。
- en: Click the **Close** button when you see the **Welcome to AWS CloudShell** pop-up
    window:![](image/B19755_02_20.jpg)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你看到 **欢迎使用 AWS CloudShell** 弹出窗口时，点击 **关闭** 按钮：![](image/B19755_02_20.jpg)
- en: Figure 2.20 – Closing the welcome popup
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.20 – 关闭欢迎弹窗
- en: In *Figure 2**.20*, we can see that **AWS CloudShell** comes pre-installed with
    the AWS CLI, Python, and Node.js, along with other tools. In addition to this,
    we have 1 GB of free storage available (per AWS region) where we can manage, upload,
    and download the files that will be used for resource management and creation.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 *图 2.20* 中，我们可以看到 **AWS CloudShell** 已预安装 AWS CLI、Python 和 Node.js 以及其他工具。此外，我们还可以使用
    1 GB 的免费存储（按 AWS 区域划分），在其中管理、上传和下载用于资源管理和创建的文件。
- en: Once you close the pop-up window, you should see a terminal where you can type
    and run bash commands.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关闭弹出窗口后，你应该能看到一个终端，在终端中可以输入并运行 bash 命令。
- en: 'In the terminal of our CloudShell environment (right after the **$** sign),
    run the following bash commands:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 CloudShell 环境的终端（**$** 符号后面），运行以下 bash 命令：
- en: '[PRE1]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The **mkdir** command is used to create a new directory named **files**. After
    that, the **cd** command is used to navigate to the newly created directory.
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**mkdir** 命令用于创建一个名为 **files** 的新目录。之后，使用 **cd** 命令进入新创建的目录。'
- en: 'Next, let’s run the following commands to download the **sample_website.zip**
    file into the **files** directory we just created:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们运行以下命令，将 **sample_website.zip** 文件下载到我们刚创建的 **files** 目录中：
- en: '[PRE2]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will generate a set of logs, similar to what we have in *Figure 2**.21*:'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将生成一组日志，类似于我们在 *图 2.21* 中看到的内容：
- en: '![](image/B19755_02_21.jpg)'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_02_21.jpg)'
- en: Figure 2.21 – Running commands on AWS CloudShell
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.21 – 在 AWS CloudShell 中运行命令
- en: What’s inside the **sample_website.zip** file we just downloaded? As we’ll see
    in the next set of steps, the **sample_website.zip** file contains an **index.html**
    file, along with a directory containing a backup copy of the backend code of the
    application.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们刚刚下载的 **sample_website.zip** 文件里面有什么？正如我们在接下来的步骤中看到的，**sample_website.zip**
    文件包含一个 **index.html** 文件，以及一个目录，里面有应用程序的后端代码备份副本。
- en: 'List all the files in the current directory using the **ls** command:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **ls** 命令列出当前目录中的所有文件：
- en: '[PRE3]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: At this point, we should only have the **sample_website.zip** file in our current
    directory.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此时，我们的当前目录中应该只剩下**sample_website.zip**文件。
- en: 'Let’s extract the contents of the **sample_website.zip** file using the **unzip**
    command:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用**unzip**命令提取**sample_website.zip**文件的内容：
- en: '[PRE4]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This should give us a set of logs, similar to what we have in the following
    block:'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会给我们一组日志，类似于以下代码块中的内容：
- en: '[PRE5]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Before performing the upload command, let’s delete the **sample_website.zip**
    file from the **files** directory:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行上传命令之前，让我们从**files**目录删除**sample_website.zip**文件：
- en: '[PRE6]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, let’s upload the files to the S3 bucket using the **aws s3 cp** command
    (this should take around 10 to 15 seconds to complete):'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用**aws s3 cp**命令将文件上传到 S3 存储桶（这大约需要 10 到 15 秒的时间完成）：
- en: '[PRE7]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Make sure you replace **<INSERT S3 BUCKET NAME>** with the name of your S3 bucket.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将**<INSERT S3 BUCKET NAME>**替换为你的 S3 存储桶名称。
- en: Note
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'In this step, we used the **AWS CLI** to upload files from a directory inside
    our AWS CloudShell environment to our S3 bucket. If this is your first time using
    the AWS CLI, it is simply a command-line tool for managing AWS resources, which
    includes creating and configuring resources, deploying applications, and managing
    security settings. For more information about the AWS CLI, feel free to check
    out the following video: [https://www.youtube.com/watch?v=EAFRKMe6j08](https://www.youtube.com/watch?v=EAFRKMe6j08).'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们使用**AWS CLI**从 AWS CloudShell 环境中的一个目录将文件上传到我们的 S3 存储桶。如果这是你第一次使用 AWS
    CLI，它只是一个用于管理 AWS 资源的命令行工具，包括创建和配置资源、部署应用程序和管理安全设置。有关 AWS CLI 的更多信息，请查看以下视频：[https://www.youtube.com/watch?v=EAFRKMe6j08](https://www.youtube.com/watch?v=EAFRKMe6j08)。
- en: Navigate back to the S3 console and locate the **Static website hosting** configuration
    settings under the **Properties** tab. Click the **Bucket website endpoint** link
    (as highlighted in *Figure 2**.22*):![](image/B19755_02_22.jpg)
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 S3 控制台，并在**属性**选项卡下找到**静态网站托管**配置设置。点击**存储桶网站端点**链接（如*图 2.22*所示）：![](image/B19755_02_22.jpg)
- en: Figure 2.22 – Locating the Bucket website endpoint link
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.22 – 定位存储桶网站端点链接
- en: 'We should see a maintenance page, similar to what is shown in *Figure 2**.23*:'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们应该看到一个维护页面，类似于*图 2.23*中所示：
- en: '![](image/B19755_02_23.jpg)'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_02_23.jpg)'
- en: Figure 2.23 – Verifying that the files have been uploaded to S3
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.23 – 验证文件是否已上传至 S3
- en: Note that the **index.html** page we uploaded to the S3 bucket is returned and
    rendered when the request is made since it is the configured index document of
    the static website.
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，我们上传到 S3 存储桶的**index.html**页面在发出请求时会被返回并渲染，因为它是静态网站的配置索引文档。
- en: With that, our setup is complete! In the next section, we’ll test our vulnerable
    environment and check if our current setup works and is configured as expected.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们的设置就完成了！在下一部分，我们将测试我们的脆弱环境，并检查当前设置是否正常工作，并按预期配置。
- en: Testing and hacking our first vulnerable environment
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试并攻击我们的第一个脆弱环境
- en: In this section, we’ll try to emulate how an attacker might behave when trying
    to hack our vulnerable S3 bucket. Attackers might use a specialized set of automated
    tools, but we should do just fine without those tools in this chapter.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将尝试模拟攻击者在试图攻击我们脆弱的 S3 存储桶时可能的行为。攻击者可能会使用一套专门的自动化工具，但在本章节中，我们即使没有这些工具，也应该能顺利进行。
- en: Inspecting and verifying the S3 bucket’s security
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查并验证 S3 存储桶的安全性
- en: We will start by verifying the security configuration of the S3 bucket we created
    using a series of manual checks.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过一系列手动检查来验证我们创建的 S3 存储桶的安全配置。
- en: Important note
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is unethical and illegal to attack cloud resources owned by another user
    or company. Before we start, make sure you read the *Examining the considerations
    when building penetration testing lab environments in the cloud* section of *[Chapter
    1](B19755_01.xhtml)*, *Getting Started with Penetration Testing Labs in the Cloud*,
    since we will be simulating the attack process to validate whether the misconfigurations
    and vulnerabilities and present are exploitable.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击属于其他用户或公司拥有的云资源是违反道德且非法的。在我们开始之前，请确保阅读*《构建渗透测试实验室环境时需要考虑的事项》*部分，位于*《云中的渗透测试实验室入门》*的*第1章*中，因为我们将模拟攻击过程来验证配置错误和漏洞是否存在并且可被利用。
- en: 'With that out of the way, we can proceed with testing and hacking our vulnerable
    cloud lab setup:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一来，我们可以继续测试和攻击我们脆弱的云实验室设置：
- en: Continuing where we left off in the previous section, right-click on the center
    of the maintenance page and select **View Page Source** from the list of options
    available. This should let us see the frontend HTML code of the maintenance page,
    similar to what we have in *Figure 2**.24*:![](image/B19755_02_24.jpg)
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一节中继续未完的操作，右键单击维护页面的中心位置，并从可用选项列表中选择**查看页面源代码**。这将让我们看到与*图 2.24*所示类似的维护页面前端
    HTML 代码：![](image/B19755_02_24.jpg)
- en: Figure 2.24 – View Page Source
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.24 – 查看页面源代码
- en: Since this is a static page, we shouldn’t be able to find other links or references
    to resources we can inspect further.
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于这是一个静态页面，我们应该无法找到其他链接或资源引用以进一步检查。
- en: Next, navigate to **http://<S3 BUCKET URL>.s3-website-us-east-1.amazonaws.com/.git**
    to check whether (1) a **.git** directory exists and (2) the **.git** directory
    is public. Make sure you replace **<S3 BUCKET URL>** with the name of the bucket
    you created. You should see an error message similar to what is shown in *Figure
    2**.25*:![](image/B19755_02_25.jpg)
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，访问**http://<S3 BUCKET URL>.s3-website-us-east-1.amazonaws.com/.git**来检查（1）是否存在**.git**目录，（2）**.git**目录是否为公共的。确保将**<S3
    BUCKET URL>**替换为你创建的存储桶名称。你应该看到类似于*图 2.25*所示的错误信息：![](image/B19755_02_25.jpg)
- en: Figure 2.25 – 404 Not Found
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.25 – 404 未找到
- en: As shown in *Figure 2**.25*, no such file or directory exists inside the bucket.
    You may check for other files such as **README.md** but since we have a good idea
    of what is inside the bucket, we can skip these additional steps for now.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如*图 2.25*所示，存储桶内不存在此类文件或目录。你可以检查其他文件，例如**README.md**，但由于我们已经对存储桶中的内容有了大致了解，因此目前可以跳过这些附加步骤。
- en: Let’s also check whether the files and directories inside the S3 bucket will
    be listed by navigating to **https://<S3 BUCKET URL>.s3.amazonaws.com/**. Make
    sure you replace **<S3 BUCKET URL>** with the name of your S3 bucket:![](image/B19755_02_26.jpg)
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以通过访问**https://<S3 BUCKET URL>.s3.amazonaws.com/**来检查 S3 存储桶内的文件和目录是否会被列出。确保将**<S3
    BUCKET URL>**替换为你的 S3 存储桶名称：![](image/B19755_02_26.jpg)
- en: Figure 2.26 – Checking whether we can list the contents of the bucket
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.26 – 检查我们是否能列出存储桶内容
- en: This should give us an **Access Denied** error message, similar to what is shown
    in *Figure 2**.26*. Would this mean that we won’t be able to access the files
    as a guest user (public access) inside the bucket? Not necessarily! We’ll see
    that this is the case in the very next step.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会给我们一个**访问被拒绝**的错误信息，类似于*图 2.26*所示。 这是否意味着我们无法作为访客用户（公共访问）访问存储桶内的文件？不一定！我们将在下一步中看到这种情况。
- en: Note
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you’re familiar with the different URLs that are available when working
    with S3 buckets. In addition to the URLs we checked in the previous step, you
    may also want to check **https://s3.amazonaws.com/<S3 BUCKET URL>/** (after replacing
    **<S3 BUCKET URL>** with the name of the S3 bucket).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 S3 存储桶时，确保你熟悉可用的不同 URL。除了我们在上一步中检查过的 URL，你还可以检查**https://s3.amazonaws.com/<S3
    BUCKET URL>/**（在此处将**<S3 BUCKET URL>**替换为 S3 存储桶的名称）。
- en: Next, let’s check whether we can access some of the known files inside the bucket.
    Since the S3 bucket is configured to host a static website, it will probably have
    an **index.html** file (unless the bucket is configured to have a different index
    document). That said, let’s navigate to **https://<S3 BUCKET URL>.s3.amazonaws.com/index.html**.
    Similar to the previous step, make sure you replace **<S3 BUCKET URL>** with the
    name of your S3 bucket:![](image/B19755_02_27.jpg)
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们检查是否可以访问存储桶中的一些已知文件。由于 S3 存储桶配置为托管静态网站，它可能包含**index.html**文件（除非存储桶配置为使用其他索引文件）。因此，让我们访问**https://<S3
    BUCKET URL>.s3.amazonaws.com/index.html**。与上一步相同，确保将**<S3 BUCKET URL>**替换为你的 S3
    存储桶名称：![](image/B19755_02_27.jpg)
- en: Figure 2.27 – Checking whether we can access the index.html file
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.27 – 检查我们是否能访问 index.html 文件
- en: This should render the maintenance page, similar to what we have in *Figure
    2**.27*. Note that we should be able to access the other files stored in this
    bucket since the S3 bucket is most likely configured to allow reads from unauthenticated
    users. However, since we do not know about the existence of certain files from
    the point of view of a guest user, we’ll skip any similar or related steps for
    now. Of course, checking all possible keys through brute-force methods inside
    the S3 bucket using an automated script is an option (but not recommended).
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该呈现维护页面，类似于我们在*图 2.27*中的内容。请注意，我们应该能够访问存储在此存储桶中的其他文件，因为 S3 存储桶很可能被配置为允许未经身份验证的用户读取。然而，由于我们无法从访客用户的角度得知某些文件的存在，因此我们暂时跳过任何类似或相关的步骤。当然，使用自动化脚本通过暴力破解方法检查存储桶中的所有可能密钥也是一种选择（但不推荐）。
- en: Open a private browsing window. Navigate to [https://aws.amazon.com/console/](https://aws.amazon.com/console/)
    and sign in to your second AWS account:![](image/B19755_02_28.jpg)
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个私密浏览窗口。访问[https://aws.amazon.com/console/](https://aws.amazon.com/console/)并登录到你的第二个
    AWS 账户：![](image/B19755_02_28.jpg)
- en: Figure 2.28 – Opening a private browsing window
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.28 – 打开私密浏览窗口
- en: You may decide to use a different browser altogether when signing in to your
    second AWS account. Note that we are simulating the experience from an attacker’s
    point of view.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当登录到第二个 AWS 账户时，你可能会决定完全使用不同的浏览器。请注意，我们正在模拟从攻击者的角度体验这一过程。
- en: Type **shell** in the search bar. Select **CloudShell** from the list of results,
    as highlighted in *Figure 2**.29*:![](image/B19755_02_29.jpg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入**shell**。从结果列表中选择**CloudShell**，如*图 2.29*所示：![](image/B19755_02_29.jpg)
- en: Figure 2.29 – Navigating to the CloudShell console
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.29 – 导航到 CloudShell 控制台
- en: Click the **Close** button if you see the **Welcome to AWS CloudShell** pop-up
    window.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果看到**欢迎使用 AWS CloudShell**的弹出窗口，请点击**关闭**按钮。
- en: 'Set the **S3_BUCKET** variable value to the name of the S3 bucket we created
    earlier:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**S3_BUCKET**变量值设置为我们之前创建的 S3 存储桶的名称：
- en: '[PRE8]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Make sure you replace the value of **<INSERT S3 BUCKET NAME>** with the name
    of the S3 bucket we created earlier.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将**<INSERT S3 BUCKET NAME>**的值替换为我们之前创建的 S3 存储桶的名称。
- en: 'List the contents of the S3 bucket using the **aws s3 ls** command with the
    **--no-sign-request** flag enabled:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用启用**--no-sign-request**标志的**aws s3 ls**命令列出 S3 存储桶的内容：
- en: '[PRE9]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This should yield an error message stating **An error occurred (AccessDenied)
    when calling the ListObjectsV2 operation:** **Access Denied**.
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该产生一个错误消息，内容为**调用 ListObjectsV2 操作时发生错误：** **访问被拒绝**。
- en: Note
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Using the **--no-sign-request** flag with the **aws s3 ls** command disables
    the requirement for AWS request signing. By default, AWS CLI requests are signed
    with AWS credentials to ensure authentication and authorization. However, when
    **--no-sign-request** is used, the command skips the signing process and allows
    unauthenticated and unsigned requests to be made to list the objects or files
    in the specified S3 bucket.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 使用带有**--no-sign-request**标志的**aws s3 ls**命令会禁用 AWS 请求签名的要求。默认情况下，AWS CLI 请求会使用
    AWS 凭证进行签名，以确保身份验证和授权。然而，当使用**--no-sign-request**时，命令会跳过签名过程，允许未经身份验证和未签名的请求列出指定
    S3 存储桶中的对象或文件。
- en: 'List the contents of the S3 bucket using the **aws s3 ls** command, this time
    without the **--****no-sign-request** flag:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**aws s3 ls**命令列出 S3 存储桶的内容，这次不使用**--no-sign-request**标志：
- en: '[PRE10]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This should successfully return the contents of the bucket (that is, the **index.html**
    file, along with the **backup** folder).
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该成功返回存储桶的内容（即**index.html**文件以及**backup**文件夹）。
- en: 'Let’s check whether we can download the **index.html** file from the S3 bucket
    to the CloudShell environment:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查一下能否从 S3 存储桶下载**index.html**文件到 CloudShell 环境：
- en: '[PRE11]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This should log a message similar to the following:'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该记录一条类似以下的消息：
- en: '[PRE12]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This means that we can list and download files as an authenticated user!
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着我们可以作为经过身份验证的用户列出和下载文件！
- en: Important note
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Take note that this is *not* the same account we used to create the bucket.
    Of course, since we intentionally configured the S3 bucket to have this behavior,
    this should not be a surprise.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这与我们用来创建存储桶的账户*不同*。当然，由于我们故意配置了 S3 存储桶以具有此行为，因此这不应令人惊讶。
- en: 'Next, let’s check whether we can upload a sample file from the CloudShell environment
    to the S3 bucket:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们检查一下能否从 CloudShell 环境向 S3 存储桶上传一个示例文件：
- en: '[PRE13]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This should return a message similar to the following:'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该返回类似以下的消息：
- en: '[PRE14]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This means that we cannot upload files to the S3 bucket as an authenticated
    user.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着我们无法作为认证用户向S3桶上传文件。
- en: Note
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that attackers may also check whether they can retrieve and set the ACL
    of the bucket by using the **aws s3api get-bucket-acl** and **aws s3api put-bucket-acl**
    commands. For more information about this topic, feel free to check out [https://bit.ly/3mbwlb5](https://bit.ly/3mbwlb5)
    and [https://bit.ly/3SAPq2o](https://bit.ly/3SAPq2o).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，攻击者也可以检查他们是否能够通过使用**aws s3api get-bucket-acl**和**aws s3api put-bucket-acl**命令来检索和设置桶的ACL。有关此主题的更多信息，请随时查看[https://bit.ly/3mbwlb5](https://bit.ly/3mbwlb5)和[https://bit.ly/3SAPq2o](https://bit.ly/3SAPq2o)。
- en: It is important to note that we intentionally configured the S3 bucket to allow
    read-only access to authenticated users since we do not want other authenticated
    users to upload files to our S3 bucket.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，我们故意配置了S3桶以允许认证用户只读访问，因为我们不希望其他认证用户向我们的S3桶上传文件。
- en: Downloading and inspecting the files stored in the S3 bucket
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载并检查存储在S3桶中的文件
- en: 'In the previous section, we confirmed that we can download files from the S3
    bucket as an authenticated user using the **aws s3 cp** command. In this section,
    we’ll proceed with downloading and inspecting all the files stored in the vulnerable
    S3 bucket:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们确认了可以使用**aws s3 cp**命令作为认证用户从S3桶下载文件。在本节中，我们将继续下载并检查存储在漏洞S3桶中的所有文件：
- en: 'Let’s start by using the **mkdir** command to create the **downloaded** directory:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先使用**mkdir**命令创建**downloaded**目录：
- en: '[PRE15]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, navigate to the **downloaded** directory using the **cd** command:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用**cd**命令进入**downloaded**目录：
- en: '[PRE16]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Use the **aws s3 cp** command to download all the files stored in the target
    S3 bucket to the CloudShell local directory:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**aws s3 cp**命令将目标S3桶中存储的所有文件下载到CloudShell本地目录：
- en: '[PRE17]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here, we used the **--recursive** flag to recursively download all the files
    stored in the S3 bucket:'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们使用了**--recursive**标志来递归下载存储在S3桶中的所有文件：
- en: '![](image/B19755_02_30.jpg)'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_02_30.jpg)'
- en: Figure 2.30 – Logs generated after executing the aws s3 cp command
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.30 – 执行aws s3 cp命令后生成的日志
- en: Here, we’re using a different AWS account to download the files stored inside
    the S3 bucket. *Scary, right?*
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们使用不同的AWS账户从S3桶中下载存储的文件。*吓人吧？*
- en: Note
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: What this means is that *any* user with an AWS account, hypothetically including
    unauthorized users, could potentially access and download the files stored in
    the S3 bucket. Here, we demonstrated that we can download the contents of the
    misconfigured bucket with just a few commands using a different and completely
    unrelated AWS account.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着*任何*拥有AWS账户的用户，假设包括未授权用户，都有可能访问并下载存储在S3桶中的文件。在这里，我们展示了使用一个不同且完全无关的AWS账户，只需几个命令就能下载配置错误的桶中的内容。
- en: 'Now, let’s use the following command to install the **tree** command:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令安装**tree**命令：
- en: '[PRE18]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With the **tree** command installed, let’s use it to generate a file tree of
    the current directory:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装了**tree**命令后，让我们使用它来生成当前目录的文件树：
- en: '[PRE19]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This should generate and print a file tree similar to what we have in *Figure
    2**.31*:'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该生成并打印一个类似于*图 2.31*的文件树：
- en: '![](image/B19755_02_31.jpg)'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_02_31.jpg)'
- en: Figure 2.31 – File tree generated using the tree command
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.31 – 使用tree命令生成的文件树
- en: Using the **tree** command without **arguments/flags** would recursively list
    all files and give us a very long list of files and directories.
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用没有**参数/标志**的**tree**命令会递归列出所有文件，并给我们一个非常长的文件和目录列表。
- en: 'Now, let’s run the following command to limit the results (the tree depth)
    and display the hidden files as well:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们运行以下命令来限制结果（树的深度）并显示隐藏文件：
- en: '[PRE20]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This should return a file tree similar to what we have in *Figure 2**.32*:'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该返回一个类似于*图 2.32*的文件树：
- en: '![](image/B19755_02_32.jpg)'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_02_32.jpg)'
- en: Figure 2.32 – Results after running the tree command
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.32 – 运行tree命令后的结果
- en: From the tree results shown in *Figure 2**.32*, we can infer that the backend
    web framework that’s being used is **Hapi.js** ([https://hapi.dev/](https://hapi.dev/)).
    In addition to this, the **dotenv** **npm** package is used to manage and load
    environment variables. *Figure 2**.23* also shows that there’s a **.env** file
    stored inside the **/****backup/backend** directory.
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从*图2**.32*中显示的树结果中，我们可以推断出正在使用的后端Web框架是**Hapi.js**（[https://hapi.dev/](https://hapi.dev/)）。除此之外，**dotenv**
    **npm**软件包用于管理和加载环境变量。*图2**.23*还显示，在**/****backup/backend**目录中存储了一个**.env**文件。
- en: Note
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To avoid hardcoding secrets, variables, and configuration settings inside the
    application code, development teams may utilize packages such as **dotenv** to
    load credentials and environment variables from **.env** files. Alternatively,
    development and engineering teams may utilize YAML or JSON files as well. One
    of the common mistakes developers make involves forgetting to exclude these in
    the code repository. This means that anyone with access to the repository (or
    the backup of a repository) would be able to get a copy of the file containing
    the credentials and variables used in the application as well.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免在应用程序代码中硬编码秘密、变量和配置设置，开发团队可以利用**dotenv**等软件包从**.env**文件中加载凭据和环境变量。另外，开发和工程团队也可以使用YAML或JSON文件。开发人员常犯的一个常见错误是忘记在代码存储库中排除这些文件。这意味着任何能访问存储库（或存储库备份）的人都可以获得包含应用程序中使用的凭据和变量的文件的副本。
- en: 'Let’s run the following command to see what’s inside the **.****env** file:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行以下命令查看**.****env**文件中的内容：
- en: '[PRE21]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This should give us placeholder values for **AWS_ACCESS_KEY_ID** and **AWS_SECRET_ACCESS_KEY**,
    similar to what we have in the following configuration block:'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将为我们提供**AWS_ACCESS_KEY_ID**和**AWS_SECRET_ACCESS_KEY**的占位值，类似于我们在以下配置块中的内容：
- en: '[PRE22]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that in a more realistic scenario, we might find other credentials and
    keys here as well. It is also worth noting that credentials may be found hardcoded
    inside the repository’s code base.
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，在更现实的情况下，我们可能会在这里找到其他凭据和密钥。值得注意的是，凭据可能会在存储库的代码库中找到硬编码。
- en: Note
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '*What will an attacker do once these credentials have been obtained?* The attacker
    can now perform malicious actions using the accounts associated with these credentials.
    For example, attackers may use the credentials of an email service (for example,
    **SendGrid**) to send phishing emails to attack other individuals or organizations.
    Attackers may also be able to access databases after getting access to the *.env*,
    *YAML*, or *JSON* files since these files will most likely contain database credentials
    as well.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '*一旦攻击者获得这些凭据，他们会做什么？* 攻击者现在可以使用与这些凭据相关联的帐户执行恶意操作。例如，攻击者可能使用电子邮件服务（例如，**SendGrid**）的凭据发送钓鱼邮件来攻击其他个人或组织。在获取*.env*、*YAML*或*JSON*文件后，攻击者还可能能够访问数据库，因为这些文件很可能也包含数据库凭据。'
- en: At this point, we should have a good idea of how to prepare and test a relatively
    simple vulnerable cloud resource. Of course, production environments would most
    likely have other resources deployed in the same account. Do not worry – we’ll
    see the complexity of our vulnerable cloud environments grow as we work on the
    hands-on examples of the succeeding chapters.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们应该对如何准备和测试一个相对简单的易受攻击的云资源有一个很好的想法。当然，生产环境很可能在同一账户中部署了其他资源。不用担心 - 随着我们在接下来的章节中进行实践示例的工作，我们将看到我们易受攻击的云环境的复杂性增长。
- en: Cleaning up
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理
- en: 'Cleaning up the cloud resources we created or deployed is a crucial step when
    working with vulnerable cloud applications and environments. If we don’t clean
    up the resources we created right away, we might end up having our resources attacked
    by malicious users. That said, let’s proceed with deleting the resources we created
    in this chapter:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 清理我们创建或部署的云资源是处理易受攻击的云应用程序和环境时的关键步骤。如果我们不立即清理创建的资源，我们可能会发现我们的资源受到恶意用户的攻击。因此，让我们继续删除本章中创建的资源：
- en: Let’s start by logging in to the AWS Management Console using the account we
    used to create the S3 bucket. Remember that we have two accounts – the “target”
    AWS account and the “attacker” AWS account. We’ll proceed with signing in to the
    “target” AWS account as we used that account to create the S3 bucket.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开始使用我们用来创建S3存储桶的帐户登录到AWS管理控制台。请记住，我们有两个帐户 - “目标”AWS帐户和“攻击者”AWS帐户。我们将继续登录到“目标”AWS帐户，因为我们使用该帐户创建了S3存储桶。
- en: Type **shell** in the search bar and select **CloudShell** from the list of
    results, as shown in *Figure 2**.33*:![](image/B19755_02_33.jpg)
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索栏中输入**shell**并从搜索结果中选择**CloudShell**，如*图 2**.33*所示：![](image/B19755_02_33.jpg)
- en: Figure 2.33 – Navigating to the CloudShell console
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.33 – 导航到CloudShell控制台
- en: Click the **Close** button when you see the **Welcome to AWS CloudShell** pop-up
    window.
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当您看到**欢迎使用AWS CloudShell**的弹出窗口时，点击**关闭**按钮。
- en: 'In the terminal of our CloudShell environment (right after the **$** sign),
    run the following bash command:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的CloudShell环境的终端中（在**$**符号后），运行以下bash命令：
- en: '[PRE23]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here, we are setting the **S3_BUCKET** variable’s value with the name of the
    S3 bucket we created earlier. Make sure you replace the value of **<INSERT S3
    BUCKET NAME>** with the name of your S3 bucket.
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，我们正在设置**S3_BUCKET**变量的值，该值为我们之前创建的S3存储桶的名称。确保将**<INSERT S3 BUCKET NAME>**的值替换为您自己的S3存储桶名称。
- en: 'Now, let’s use the **aws s3 rb** (remove bucket) command to delete the bucket,
    along with all the objects inside it:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用**aws s3 rb**（删除存储桶）命令来删除该存储桶以及其中的所有对象：
- en: '[PRE24]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This should yield a set of logs, similar to what we have in *Figure 2**.34*:'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将生成一组日志，类似于*图 2**.34*中展示的内容：
- en: '![](image/B19755_02_34.jpg)'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](image/B19755_02_34.jpg)'
- en: Figure 2.34 – Logs generated after running the aws s3 rb command
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.34 – 执行aws s3 rb命令后生成的日志
- en: The command we executed will delete all the objects inside the bucket and then
    delete the S3 bucket once it’s empty.
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们执行的命令将删除存储桶中的所有对象，然后在存储桶为空时删除该S3存储桶。
- en: Note
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note that we should be careful when using the **aws s3 rb** command in production
    since we will lose all files inside the bucket when object versioning is disabled.
    We must have a backup of the files stored inside the bucket before running this
    command. Feel free to check out the following link for more details: [https://docs.aws.amazon.com/AmazonS3/latest/userguide/delete-bucket.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/delete-bucket.html).'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在生产环境中使用**aws s3 rb**命令时需要小心，因为在禁用对象版本控制的情况下，我们将丢失存储桶中的所有文件。在运行此命令之前，必须先备份存储桶中的文件。欲了解更多详情，请访问以下链接：[https://docs.aws.amazon.com/AmazonS3/latest/userguide/delete-bucket.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/delete-bucket.html)。
- en: That’s pretty much it! Since we’re only dealing with a relatively simple setup,
    the cleanup process is expected to be straightforward.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！由于我们只处理相对简单的设置，因此清理过程预计会很简单。
- en: Summary
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we designed and prepared our first intentionally vulnerable
    lab environment in the cloud. We started by creating an empty S3 bucket using
    the AWS Management Console. After that, we configured the bucket for static website
    hosting. We also modified the access control settings of the S3 bucket and allowed
    other authenticated AWS users to list and retrieve objects from our bucket. To
    complete the setup, we uploaded sample files to our S3 bucket.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们设计并准备了第一个故意存在漏洞的云实验室环境。我们首先通过AWS管理控制台创建了一个空的S3存储桶。之后，我们配置了该存储桶用于静态网站托管。我们还修改了S3存储桶的访问控制设置，允许其他经过身份验证的AWS用户列出并检索我们存储桶中的对象。为了完成设置，我们将示例文件上传到S3存储桶中。
- en: We proceeded by testing our setup by inspecting and verifying the S3 bucket’s
    security configuration using a series of steps, which included several terminal
    commands. After confirming that we could download files from the S3 bucket using
    a second AWS account (not used to create the bucket), we proceeded with downloading
    and inspecting all the files stored in the bucket. Finally, we wrapped things
    up by cleaning up and deleting the resources we created in this chapter.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过一系列步骤测试了我们的设置，包括一些终端命令，检查并验证了S3存储桶的安全配置。在确认可以使用第二个AWS帐户（未用于创建存储桶）从S3存储桶下载文件后，我们继续下载并检查了存储桶中所有的文件。最后，我们通过清理并删除本章中创建的资源来结束操作。
- en: In the next chapter, we will focus on how to use **Infrastructure as Code**
    (**IaC**) tools and strategies to help us build and manage complex vulnerable
    lab environments in the cloud. If you’re wondering whether or not we can automate
    the steps we have performed in this chapter, then the next chapter is for you!
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将重点介绍如何使用**基础设施即代码**（**IaC**）工具和策略，帮助我们在云中构建和管理复杂的易受攻击的实验室环境。如果您在想我们是否可以自动化本章中执行的步骤，那么下一章将为您解答！
- en: Further reading
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'For more information on the topics covered in this chapter, feel free to check
    out the following resources:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 若想了解本章涉及的更多信息，可以查看以下资源：
- en: '*IAM Policies and Bucket Policies and* *ACLs* ([https://aws.amazon.com/blogs/security/iam-policies-and-bucket-policies-and-acls-oh-my-controlling-access-to-s3-resources/](https://aws.amazon.com/blogs/security/iam-policies-and-bucket-policies-and-acls-oh-my-controlling-access-to-s3-resources/))'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*IAM 策略和存储桶策略以及* *ACL* ([https://aws.amazon.com/blogs/security/iam-policies-and-bucket-policies-and-acls-oh-my-controlling-access-to-s3-resources/](https://aws.amazon.com/blogs/security/iam-policies-and-bucket-policies-and-acls-oh-my-controlling-access-to-s3-resources/))'
- en: '*S3 – Managing access with* *ACLs* ([https://docs.aws.amazon.com/AmazonS3/latest/userguide/acls.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acls.html))'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*S3 - 使用* *ACL* 管理访问权限 ([https://docs.aws.amazon.com/AmazonS3/latest/userguide/acls.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acls.html))'
- en: '*Heads-Up: Amazon S3 Security Changes Are Coming in April of* *2023* ([https://aws.amazon.com/blogs/aws/heads-up-amazon-s3-security-changes-are-coming-in-april-of-2023/](https://aws.amazon.com/blogs/aws/heads-up-amazon-s3-security-changes-are-coming-in-april-of-2023/))'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*提醒：亚马逊 S3 安全性变更将于* *2023年4月* 到来 ([https://aws.amazon.com/blogs/aws/heads-up-amazon-s3-security-changes-are-coming-in-april-of-2023/](https://aws.amazon.com/blogs/aws/heads-up-amazon-s3-security-changes-are-coming-in-april-of-2023/))'
- en: '*Controlling ownership of objects and disabling ACLs for your* *bucket* ([https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html))'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*控制对象所有权并禁用存储桶的 ACL* ([https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html))'
- en: '*Default settings for new S3 buckets* *FAQ* ([https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-faq.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-faq.html))'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*新 S3 存储桶的默认设置* *常见问题* ([https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-faq.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-faq.html))'
