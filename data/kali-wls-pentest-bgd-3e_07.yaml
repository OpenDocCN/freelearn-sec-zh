- en: Chapter 7. Advanced WLAN Attacks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 高级WLAN攻击
- en: '|   | *"To know your enemy, you must become your enemy."* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *“知己知彼，百战不殆。”* |   |'
- en: '|   | --*Sun Tzu, Art of War* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*孙子，《孙子兵法》* |'
- en: '*As a penetration tester, it is important to know the advanced attacks a hacker
    can do, even if you might not check or demonstrate them during a penetration test.
    This chapter is dedicated to showing how a hacker can conduct advanced attacks
    using wireless access as the starting point.*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*作为一名渗透测试员，了解黑客可以执行的高级攻击非常重要，即使你在渗透测试中可能不会检查或演示这些攻击。本章将展示黑客如何利用无线接入点作为起点来实施高级攻击。*'
- en: In this chapter, we will take a look at how we can conduct advanced attacks
    using what we have learned so far. We will primarily focus on the **Man-in-the-Middle**
    (**MITM**) attack, which requires a certain amount of skill and practice to conduct
    successfully. Once we have done this, we will use this MITM attack as a base from
    which to conduct more sophisticated attacks such as eavesdropping and session
    hijacking.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何利用到目前为止学到的知识进行高级攻击。我们将主要关注**中间人**（**MITM**）攻击，这种攻击需要一定的技巧和实践才能成功实施。一旦我们完成这一步，我们将利用MITM攻击作为基础，进行更复杂的攻击，比如窃听和会话劫持。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: MITM attack
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间人攻击
- en: Wireless eavesdropping using MITM
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MITM进行无线窃听
- en: Session hijacking using MITM
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MITM进行会话劫持
- en: A Man-in-the-Middle attack
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中间人攻击
- en: MITM attacks are probably one of the most potent attacks on a WLAN system. There
    are different configurations that can be used to conduct the attack. We will use
    the most common one—the attacker is connected to the internet using a wired LAN
    and is creating a fake access point on his client card. This access point broadcasts
    an SSID similar to a local hotspot in the vicinity. A user may accidently get
    connected to this fake access point (or can be forced to via the higher signal
    strength theory we discussed in the previous chapters) and may continue to believe
    that he is connected to the legitimate access point.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: MITM攻击可能是对WLAN系统最具威胁的攻击之一。可以使用不同的配置来进行此攻击。我们将使用最常见的配置——攻击者通过有线局域网连接到互联网，并在其客户端卡上创建一个虚假的接入点。这个接入点广播一个与附近本地热点相似的SSID。用户可能会不小心连接到这个虚假的接入点（或者根据我们在前几章讨论的较强信号理论，被迫连接到该接入点），并可能继续认为自己连接的是合法的接入点。
- en: The attacker can now transparently forward all the user's traffic over the internet
    using the bridge he has created between the wired and wireless interfaces.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者现在可以通过他在有线和无线接口之间创建的桥接，透明地转发所有用户的互联网流量。
- en: In the following lab exercise, we will simulate this attack.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的实验中，我们将模拟此攻击。
- en: Time for action – Man-in-the-Middle attack
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 中间人攻击
- en: 'Follow these instructions to get started:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下指示开始：
- en: 'To create the MITM attack setup, we will first create a soft access point called
    `mitm` on the hacker laptop using `airbase-ng`. We run the following command:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建MITM攻击环境，我们将首先在黑客的笔记本上使用`airbase-ng`创建一个名为`mitm`的软接入点。我们运行以下命令：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output of the command is as follows:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该命令的输出如下：
- en: '![Time for action – Man-in-the-Middle attack](graphics/B09903_07_01.jpg)'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 中间人攻击](graphics/B09903_07_01.jpg)'
- en: It is important to note that `airbase-ng`, when run, creates an interface `at0`
    (a tap interface). Think of this as the wired-side interface of our software-based
    access point `mitm`:![Time for action – Man-in-the-Middle attack](graphics/B09903_07_02.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要注意的是，当运行`airbase-ng`时，它会创建一个接口`at0`（一个tap接口）。可以把它当作我们基于软件的接入点`mitm`的有线侧接口：![行动时间
    – 中间人攻击](graphics/B09903_07_02.jpg)
- en: 'Let''s now create a bridge on the hacker''s laptop, consisting of the wired
    (`eth0`) and wireless interface (`at0`). The succession of commands used for this
    is as follows:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们在黑客的笔记本上创建一个由有线接口（`eth0`）和无线接口（`at0`）组成的桥接。使用的命令序列如下：
- en: '`brctl addbr mitm-bridge`'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`brctl addbr mitm-bridge`'
- en: '`brctl addif mitm-bridge eth0`'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`brctl addif mitm-bridge eth0`'
- en: '`brctl addif mitm-bridge at0`'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`brctl addif mitm-bridge at0`'
- en: '`ifconfig eth0 0.0.0.0 up`'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ifconfig eth0 0.0.0.0 up`'
- en: '`ifconfig at0 0.0.0.0 up`'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ifconfig at0 0.0.0.0 up`'
- en: '![Time for action – Man-in-the-Middle attack](graphics/B09903_07_03.jpg)'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 中间人攻击](graphics/B09903_07_03.jpg)'
- en: 'We can assign an IP address to this bridge and check the connectivity with
    the gateway. Please note that we can do this using DHCP as well. We can assign
    an IP address to the bridge interface with the following command:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以为这个桥接分配一个IP地址，并检查与网关的连接性。请注意，我们也可以使用DHCP来完成此操作。我们可以通过以下命令为桥接接口分配IP地址：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Time for action – Man-in-the-Middle attack](graphics/B09903_07_04.jpg)'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时刻 – 中间人攻击](graphics/B09903_07_04.jpg)'
- en: We can then try pinging the gateway `192.168.0.1` to ensure that we are connected
    to the rest of the network.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后我们可以尝试ping网关`192.168.0.1`，以确保我们已连接到网络的其余部分。
- en: 'Let''s now turn on IP forwarding in the kernel, so that routing and packet
    forwarding can happen correctly, using the following command:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们开启内核中的IP转发功能，以便路由和数据包转发能够正确进行，使用以下命令：
- en: '[PRE2]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output of the command is as follows:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命令的输出如下：
- en: '![Time for action – Man-in-the-Middle attack](graphics/B09903_07_05.jpg)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时刻 – 中间人攻击](graphics/B09903_07_05.jpg)'
- en: Now let's connect a wireless client to our access point `mitm`. It will automatically
    get an IP address over DHCP (the server running on the wired-side gateway). The
    client machine in this case receives the IP address `192.168.0.197`. We can ping
    the wired-side gateway `192.168.0.1` to verify connectivity:![Time for action
    – Man-in-the-Middle attack](graphics/B09903_07_06.jpg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们将一个无线客户端连接到我们的接入点`mitm`。它将自动通过DHCP（运行在有线网关上的服务器）获取IP地址。在这种情况下，客户端机器接收到IP地址`192.168.0.197`。我们可以通过ping有线网关`192.168.0.1`来验证连接性：![行动时刻
    – 中间人攻击](graphics/B09903_07_06.jpg)
- en: We can see that the host responds to the `ping` requests, as shown here:![Time
    for action – Man-in-the-Middle attack](graphics/B09903_07_07.jpg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到主机响应了`ping`请求，如下所示：![行动时刻 – 中间人攻击](graphics/B09903_07_07.jpg)
- en: We can also verify that the client is connected by looking at the `airbase-ng`
    terminal on the hacker's machine:![Time for action – Man-in-the-Middle attack](graphics/B09903_07_08.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以通过查看黑客机器上的`airbase-ng`终端来验证客户端是否已连接：![行动时刻 – 中间人攻击](graphics/B09903_07_08.jpg)
- en: It is interesting to note here that, because all the traffic is being relayed
    from the wireless interface to the wired-side, we have full control over the traffic.
    We can verify this by starting Wireshark and sniffing on the `at0` interface:![Time
    for action – Man-in-the-Middle attack](graphics/B09903_07_09.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有趣的是，由于所有流量都从无线接口转发到有线接口，我们可以完全控制流量。我们可以通过启动Wireshark并在`at0`接口上嗅探来验证这一点：![行动时刻
    – 中间人攻击](graphics/B09903_07_09.jpg)
- en: Let's now ping the gateway `192.168.0.1` from the client machine. We can see
    the packets in Wireshark (apply a display filter for ICMP), even though the packets
    are not destined for us. This is the power of MITM attacks:![Time for action –
    Man-in-the-Middle attack](graphics/B09903_07_10.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们从客户端机器ping网关`192.168.0.1`。即使这些数据包并不发送给我们，我们也能在Wireshark中看到这些数据包（应用ICMP显示过滤器）。这就是MITM攻击的威力：![行动时刻
    – 中间人攻击](graphics/B09903_07_10.jpg)
- en: '*What just happened?*'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We successfully created the setup for a wireless MITM attack. We did this by
    creating a fake access point and bridging it with our Ethernet interface. This
    ensured that any wireless client connecting to the fake access point will perceive
    that it is connected to the internet via the wired LAN.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地创建了一个无线中间人攻击（MITM）的设置。我们通过创建一个假接入点，并将其与以太网接口桥接来实现这一点。这确保了任何连接到假接入点的无线客户端都会感知到自己通过有线局域网连接到了互联网。
- en: Have a go hero – MITM over pure wireless
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来吧，英雄 – 纯无线MITM攻击
- en: In the previous exercise, we bridged the wireless interface with a wired one.
    As we noted earlier, this is one of the possible connection architectures for
    an MITM. There are other combinations possible as well. An interesting one would
    be to have two wireless interfaces, one that creates the fake access point and
    the other interface that is connected to the authorized access point. Both these
    interfaces are bridged. So, when a wireless client connects to our fake access
    point, it gets connected to the authorized access point through the attacker's
    machine.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个练习中，我们将无线接口与有线接口桥接。如前所述，这是MITM攻击的一种可能连接架构。还有其他组合也是可能的。一种有趣的方式是使用两张无线网卡，其中一张用于创建假接入点，另一张则连接到授权的接入点。这两张网卡会被桥接。因此，当无线客户端连接到我们的假接入点时，它会通过攻击者的机器连接到授权的接入点。
- en: Please note that this configuration would require the use of two wireless cards
    on the attacker's laptop.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个配置需要攻击者的笔记本电脑上使用两张无线网卡。
- en: Check whether you can conduct this attack using the in-built card on your laptop
    along with the external one—bear in mind, you may not have the injection drives
    required for this activity. This should be a good challenge!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 检查是否可以使用笔记本电脑内置的网卡与外部网卡一起进行此攻击——请注意，您可能没有执行此操作所需的注入驱动程序。这应该是一个不错的挑战！
- en: Wireless eavesdropping using MITM
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MITM进行无线窃听
- en: In the previous lab, we learned how to create a setup for MITM. Now, we will
    take a look at how to do wireless eavesdropping with this setup.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个实验中，我们学习了如何创建MITM设置。现在，我们将看看如何使用此设置进行无线窃听。
- en: The whole lab revolves around the principle that all the victim's traffic is
    now routed through the attacker's computer. Thus, the attacker can eavesdrop on
    all the traffic sent to and from the victim's machine wirelessly.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 整个实验的核心原则是：受害者的所有流量现在都通过攻击者的计算机路由。因此，攻击者可以无线窃听受害者计算机发送和接收的所有流量。
- en: Time for action – wireless eavesdropping
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 无线窃听
- en: 'Follow these instructions to get started:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明开始操作：
- en: Replicate the entire setup as in the previous lab. Fire up Wireshark. Interestingly,
    even the MITM-bridge shows up. This interface would allow us to peer into the
    bridge traffic, if we wanted to:![Time for action – wireless eavesdropping](graphics/B09903_07_11.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制前一个实验中的所有设置。启动Wireshark。有趣的是，即使是MITM-bridge也显示了出来。如果我们愿意，可以通过此接口查看桥接流量：![行动时间
    - 无线窃听](graphics/B09903_07_11.jpg)
- en: Start sniffing on the `at0` interface so that we can monitor all traffic sent
    and received by the wireless client. On the wireless client, open up any web page.
    In my case, the wireless access point is also connected to LAN and I will open
    it up by using the address `http://192.168.0.1`:![Time for action – wireless eavesdropping](graphics/B09903_07_12.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`at0`接口上开始嗅探，以便我们可以监控无线客户端发送和接收的所有流量。在无线客户端上，打开任意网页。以我的情况为例，无线接入点还连接到LAN，我将通过地址`http://192.168.0.1`打开它：![行动时间
    - 无线窃听](graphics/B09903_07_12.jpg)
- en: Sign in with your password and enter the management interface.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用密码登录并进入管理界面。
- en: In Wireshark, we should be seeing a lot of activity:![Time for action – wireless
    eavesdropping](graphics/B09903_07_13.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Wireshark中，我们应该看到大量的活动：![行动时间 - 无线窃听](graphics/B09903_07_13.jpg)
- en: Set a filter for HTTP to see only the web traffic:![Time for action – wireless
    eavesdropping](graphics/B09903_07_14.jpg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置HTTP过滤器，仅查看网页流量：![行动时间 - 无线窃听](graphics/B09903_07_14.jpg)
- en: We can easily locate the HTTP post request that was used to send the password
    to the wireless access point:![Time for action – wireless eavesdropping](graphics/B09903_07_15.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以轻松找到用于将密码发送到无线接入点的HTTP post请求：![行动时间 - 无线窃听](graphics/B09903_07_15.jpg)
- en: '*What just happened?*'
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: The MITM setup we created now allows us to eavesdrop on the victim's wireless
    traffic without the victim knowing. This is possible because, in an MITM, all
    the traffic is relayed via the attacker's machine. Thus, all of the victim's unencrypted
    traffic is available for eavesdropping for the attacker.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的MITM设置现在允许我们在受害者不知情的情况下窃听其无线流量。这之所以可能，是因为在MITM中，所有流量都通过攻击者的机器中转。因此，受害者的所有未加密流量都可以被攻击者窃听。
- en: Session hijacking over wireless
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无线会话劫持
- en: One of the other interesting attacks we can build on top of MITM is application
    session hijacking. During an MITM attack, the victim's packets are sent to the
    attacker. It is now the attacker's responsibility to relay this to the legitimate
    destination and relay the responses from the destination to the victim. An interesting
    thing to note is that, during this process, the attacker can modify the data in
    the packets (if unencrypted and unprotected from tampering). This means he can
    modify, mangle, and even silently drop packets.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我们可以在MITM攻击之上构建的有趣攻击是应用会话劫持。在MITM攻击过程中，受害者的数据包被发送到攻击者。此时，攻击者的责任是将这些数据包转发到合法目的地，并将目的地的响应转发给受害者。需要注意的是，在此过程中，攻击者可以修改数据包中的数据（如果未加密且未防篡改）。这意味着他可以修改、篡改，甚至默默丢弃数据包。
- en: In this next example, we will take a look at DNS hijacking over wireless using
    the MITM setup. Then, using DNS hijacking, we will hijack the browser session
    to [https://www.google.com](https://www.google.com).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个例子中，我们将查看如何使用MITM设置进行无线DNS劫持。然后，利用DNS劫持，我们将劫持浏览器会话并访问[https://www.google.com](https://www.google.com)。
- en: Time for action – session hijacking over wireless
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 无线会话劫持
- en: Set up the test exactly as in the MITM attack lab. On the victim, let's fire
    up the browser and type in [https://www.google.com](https://www.google.com). Let's
    use Wireshark to monitor this traffic. Your screen should resemble the following:![Time
    for action – session hijacking over wireless](graphics/B09903_07_16.jpg)
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照MITM攻击实验中的设置进行测试。在受害者机器上，启动浏览器并输入[https://www.google.com](https://www.google.com)。我们使用Wireshark来监控此流量。你的屏幕应该类似于以下内容：![行动时间
    – 无线网络中的会话劫持](graphics/B09903_07_16.jpg)
- en: Apply a Wireshark filter for DNS and, as we can see, the victim is making DNS
    requests for [https://www.google.com](https://www.google.com):![Time for action
    – session hijacking over wireless](graphics/B09903_07_17.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对DNS应用Wireshark过滤器，如我们所见，受害者正在为[https://www.google.com](https://www.google.com)发出DNS请求：![行动时间
    – 无线网络中的会话劫持](graphics/B09903_07_17.jpg)
- en: 'In order to hijack the browser session, we will need to send fake DNS responses
    that will resolve the IP address of [https://www.google.com](https://www.google.com)
    to the hacker machine''s IP address `192.168.0.199`. The tool that we will use
    for this is called `dnsspoof` and the syntax is as follows:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了劫持浏览器会话，我们需要发送伪造的DNS响应，将[https://www.google.com](https://www.google.com)的IP地址解析为黑客机器的IP地址`192.168.0.199`。我们将使用的工具是`dnsspoof`，其语法如下：
- en: '[PRE3]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output of the command is as follows:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命令的输出如下：
- en: '![Time for action – session hijacking over wireless](graphics/B09903_07_18.jpg)'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 无线网络中的会话劫持](graphics/B09903_07_18.jpg)'
- en: Refresh the browser windows and now, as we can see through Wireshark, as soon
    as the victim makes a DNS request for any host (including [https://www.google.com](https://www.google.com)),
    `dnsspoof` replies back.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新浏览器窗口，现在，我们可以通过Wireshark看到，一旦受害者向任何主机（包括[https://www.google.com](https://www.google.com)）发出DNS请求，`dnsspoof`便会回复。
- en: On the victim's machine, we see an error that says **Unable to connect**. This
    is because we made the IP address for [https://www.google.com](https://www.google.com)
    as `192.168.0.199`, which is the hacker machine's IP, but there is no service
    listening on port `80`:![Time for action – session hijacking over wireless](graphics/B09903_07_19.jpg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在受害者机器上，我们看到错误提示**无法连接**。这是因为我们将[https://www.google.com](https://www.google.com)的IP地址设置为`192.168.0.199`，即黑客机器的IP，但`80`端口上没有服务在监听：![行动时间
    – 无线网络中的会话劫持](graphics/B09903_07_19.jpg)
- en: 'Let''s run Apache on Kali using the following command:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在Kali上运行Apache：
- en: '[PRE4]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the command is as follows:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命令的输出如下：
- en: '![Time for action – session hijacking over wireless](graphics/B09903_07_20.jpg)'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 无线网络中的会话劫持](graphics/B09903_07_20.jpg)'
- en: Now, once we refresh the browser on the victim, we are greeted with the **It
    Works!** default page of Apache:![Time for action – session hijacking over wireless](graphics/B09903_07_21.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，一旦我们刷新受害者的浏览器，浏览器便显示Apache的默认**It Works!**页面：![行动时间 – 无线网络中的会话劫持](graphics/B09903_07_21.jpg)
- en: This demonstration shows how it is possible to intercept data and send spoofed
    responses to hijack sessions on the victim.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本示范展示了如何拦截数据并发送伪造的响应来劫持受害者的会话。
- en: '*What just happened?*'
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We did an application hijacking attack using a wireless MITM as the base. So,
    what happened behind the scenes? The MITM setup ensured that we were able to see
    all the packets sent by the victim. As soon as we saw a DNS request packet coming
    from the victim, the `dnsspoof` program running on the attacker's laptop sent
    a DNS response to the victim with the attacker machine's IP address that of [https://www.google.com](https://www.google.com).
    The victim's laptop accepted this response and the browser sent an HTTP request
    to the attacker's IP address on port `80`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进行了一次应用劫持攻击，基于无线MITM攻击。那幕后发生了什么？MITM的设置确保我们能够看到受害者发送的所有数据包。一旦我们看到受害者发出的DNS请求数据包，运行在攻击者笔记本上的`dnsspoof`程序就会向受害者发送一个DNS响应，包含攻击者机器的IP地址（即[https://www.google.com](https://www.google.com)的地址）。受害者的笔记本接受了这个响应，并且浏览器向攻击者的IP地址发出了HTTP请求，端口为`80`。
- en: In the first part of the experiment, there was no listening process on port
    `80` of the attacker's machine and thus, Firefox responded with an error. Then,
    once we started the Apache server on the attacker's machine on port `80` (the
    default port), the browser's request received a response from the attacker's machine
    with the default **It Works!** page.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在实验的第一部分，攻击者机器的`80`端口上没有监听进程，因此，Firefox报错。然后，一旦我们在攻击者的机器上启动了`80`端口（默认端口）的Apache服务器，浏览器的请求便收到了攻击者机器的响应，并显示了默认的**It
    Works!**页面。
- en: This lab shows us that, once we have full control of the lower layers (Layer
    2 in this case), it is easy to hijack applications running on higher layers such
    as DNS clients and web browsers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 本实验向我们展示了，一旦我们完全控制了较低层（在此为第二层），就很容易劫持运行在更高层的应用程序，如DNS客户端和网页浏览器。
- en: Have a go hero – application hijacking challenge
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动手吧，英雄——应用程序劫持挑战
- en: The next step in session hijacking using a wireless MITM will be to modify the
    data being transmitted by the client. Explore software available on Kali called
    **Ettercap**. This will help you create search and replace filters for network
    traffic.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用无线MITM进行会话劫持的下一步是修改客户端传输的数据。探索Kali中可用的软件**Ettercap**。这将帮助你创建用于网络流量的搜索和替换过滤器。
- en: In this challenge, write a simple filter to replace all occurrences of security
    in the network traffic to insecurity. Try searching Google for security and check
    whether the results show up for insecurity instead.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个挑战中，编写一个简单的过滤器，将网络流量中所有的安全出现的地方替换为不安全。尝试在Google上搜索安全，查看结果是否会显示为不安全。
- en: Finding security configurations on the client
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找客户端的安全配置
- en: In previous chapters, we have seen how to create Honeypots for open access points,
    WEP-protected and WPA, but, when we are in the field and see probe requests from
    the client, how do we know which network the probed SSID belongs to?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们已经看到如何为开放接入点、WEP保护和WPA创建蜜罐，但是，当我们在现场并看到客户端的探测请求时，如何知道探测的SSID属于哪个网络呢？
- en: Though this seems tricky at first, the solution to this problem is simple. We
    need to create access points advertising the same SSID but with different security
    configurations simultaneously. When a roaming client searches for a network, it
    will automatically connect to one of these access points based on the network
    configuration stored on it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这开始看起来有点棘手，但这个问题的解决方案其实很简单。我们需要同时创建广播相同SSID但具有不同安全配置的接入点。当客户端漫游时，它会根据存储在客户端上的网络配置，自动连接到这些接入点之一。
- en: So, let the games begin!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让游戏开始吧！
- en: Time for action – deauthentication attack on the client
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时刻 – 对客户端的去认证攻击
- en: 'We will assume that the wireless client has a network `Wireless Lab` configured
    on it, and it actively sends probe requests for this network, when it is not connected
    to any access point. In order to find the security configuration of this network,
    we will need to create multiple access points. For our discussion, we will assume
    that the client profile is an open network, WEP protected, WPA-PSK, or WPA2-PSK.
    This means we will have to create four access points:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设无线客户端上配置了一个名为`Wireless Lab`的网络，并且当它未连接到任何接入点时，会主动发送该网络的探测请求。为了找到该网络的安全配置，我们需要创建多个接入点。对于我们的讨论，我们假设客户端配置的网络为开放网络、WEP保护、WPA-PSK或WPA2-PSK。这意味着我们将需要创建四个接入点：
- en: To do this, we will first create four virtual interfaces—`wlan0mon` to `wlan0mon3`,
    using the `iw wlan0 interface add wlan0mon type monitor` command multiple times
    adding 1 to the end of the monitor name each time:![Time for action – deauthentication
    attack on the client](graphics/B09903_07_22.jpg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，我们将首先创建四个虚拟接口——从`wlan0mon`到`wlan0mon3`，使用命令`iw wlan0 interface add wlan0mon
    type monitor`多次执行，每次将监视器名称的末尾加1：![行动时刻 – 对客户端的去认证攻击](graphics/B09903_07_22.jpg)
- en: You can view all these newly created interfaces using the `iwconfig` command:![Time
    for action – deauthentication attack on the client](graphics/B09903_07_23.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用命令`iwconfig`查看所有这些新创建的接口：![行动时刻 – 对客户端的去认证攻击](graphics/B09903_07_23.jpg)
- en: Now we will create the open AP on `wlan0mon`:![Time for action – deauthentication
    attack on the client](graphics/B09903_07_24.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将在`wlan0mon`上创建开放AP：![行动时刻 – 对客户端的去认证攻击](graphics/B09903_07_24.jpg)
- en: Let's create the WEP protected AP on `wlan0mon1`:![Time for action – deauthentication
    attack on the client](graphics/B09903_07_25.jpg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`wlan0mon1`上创建WEP保护的AP：![行动时刻 – 对客户端的去认证攻击](graphics/B09903_07_25.jpg)
- en: The WPA-PSK AP will be on `wlan0mon2`:![Time for action – deauthentication attack
    on the client](graphics/B09903_07_26.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WPA-PSK AP将位于`wlan0mon2`上：![行动时刻 – 对客户端的去认证攻击](graphics/B09903_07_26.jpg)
- en: WPA2-PSK AP will be on `wlan0mon3`:![Time for action – deauthentication attack
    on the client](graphics/B09903_07_27.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WPA2-PSK AP将位于`wlan0mon3`上：![行动时刻 – 对客户端的去认证攻击](graphics/B09903_07_27.jpg)
- en: We can run `airodump-ng` on the same channel to ensure that all four access
    points are up and running, as shown in the following screenshot:![Time for action
    – deauthentication attack on the client](graphics/B09903_07_28.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在相同的频道上运行`airodump-ng`，以确保所有四个接入点都在正常运行， 如下图所示：![行动时间 – 客户端去认证攻击](graphics/B09903_07_28.jpg)
- en: Now let's switch the Wi-Fi on the roaming client. Depending on which `Wireless
    Lab` network you connected it to previously, it will connect to that security
    configuration. In my case, it connects to the WPA-PSK network, as shown in the
    following screenshot:![Time for action – deauthentication attack on the client](graphics/B09903_07_29.jpg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们切换漫游客户端的 Wi-Fi。根据您之前连接的 `Wireless Lab` 网络，它将连接到相应的安全配置。以我的情况为例，它连接到 WPA-PSK
    网络，如下图所示：![行动时间 – 客户端去认证攻击](graphics/B09903_07_29.jpg)
- en: '*What just happened?*'
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We created multiple Honeypots with the same SSID but different security configurations.
    Depending on which configuration the client had stored for the `Wireless Lab`
    network, it connected to the appropriate one.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了多个具有相同 SSID 但不同安全配置的蜜罐。根据客户端为 `Wireless Lab` 网络存储的配置，它将连接到相应的网络。
- en: This technique can come in handy as, if you are doing a penetration test, you
    won't know which security configurations the client has on its laptop. This allows
    you to find the appropriate one by setting a bait for the client. This technique
    is also called **WiFishing**.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这一技巧非常有用，因为在进行渗透测试时，您并不清楚客户端笔记本上存储的具体安全配置。通过设置诱饵，您可以找到合适的配置。这种技术也称为**WiFishing**。
- en: Have a go hero – baiting clients
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试试看 – 诱饵客户端
- en: Create different security configurations on the client for the same SSID, and
    check whether your set of Honeypots is able to detect them.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端上为相同的 SSID 创建不同的安全配置，并检查您的蜜罐集合是否能够检测到它们。
- en: It is important to note that many Wi-Fi clients might not actively probe for
    networks they have stored in their profile. It might not be possible to detect
    these networks using the technique we discussed here.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，许多 Wi-Fi 客户端可能不会主动探测它们在配置文件中存储的网络。使用我们在这里讨论的技术可能无法检测到这些网络。
- en: Pop quiz – advanced WLAN attacks
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速小测验 – 高级 WLAN 攻击
- en: Q1\. In an MITM attack, who is in the middle?
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. 在 MITM 攻击中，谁处于中间？
- en: The access point
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接入点
- en: The attacker
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者
- en: The victim
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 受害者
- en: None of the above
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上都不是
- en: 'Q2\. `dnsspoof`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. `dnsspoof`：
- en: Spoofs DNS requests
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 欺骗 DNS 请求
- en: Spoofs DNS responses
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 欺骗 DNS 响应
- en: Needs to run on the DNS server
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要在 DNS 服务器上运行
- en: Needs to run on the access point
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要在接入点上运行
- en: 'Q3\. A wireless MITM attack can be orchestrated:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Q3\. 无线 MITM 攻击可以通过以下方式进行：
- en: On all wireless clients at the same time
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时在所有无线客户端上
- en: Only one channel at a time
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一次只能使用一个频道
- en: On any SSID
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何 SSID 上
- en: Both 2 and 3
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2 和 3
- en: Q4\. Which is the interface closest to the victim in our MITM setup?
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Q4\. 在我们的 MITM 设置中，哪个接口最接近受害者？
- en: '`at0`'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`at0`'
- en: '`eth0`'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`eth0`'
- en: '`br0`'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`br0`'
- en: '`en0`'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`en0`'
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to conduct advanced attacks using wireless as
    the base. We created a setup for an MITM attack over wireless and then used it
    to eavesdrop on the victim's traffic. We then used the same setup to hijack the
    application layer of the victim (web traffic, to be specific) using a DNS poisoning
    attack.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何利用无线进行高级攻击。我们为无线 MITM 攻击创建了一个设置，然后用它窃听受害者的流量。接着，我们利用相同的设置，通过 DNS
    欺骗攻击劫持了受害者的应用层（具体来说是 Web 流量）。
- en: In the next chapter, we will learn how to conduct a wireless penetration test
    right from the planning, discovery, and attack to the reporting stage. We will
    also touch upon the best practices to secure WLANs.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何从规划、发现、攻击到报告阶段进行无线渗透测试。我们还将讨论如何保护 WLAN 的最佳实践。
