- en: Chapter 7. Working with Modules for Penetration Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。使用渗透测试模块
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Working with scanner auxiliary modules
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用扫描器辅助模块
- en: Working with auxiliary admin modules
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用辅助管理员模块
- en: SQL injection and DOS attack modules
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL注入和DOS攻击模块
- en: Post-exploitation modules
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后渗透模块
- en: Understanding the basics of module building
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解模块构建的基础知识
- en: Analyzing an existing module
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析现有模块
- en: Building your own post-exploitation module
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建您自己的后渗透模块
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the first chapter where we discussed about the Metasploit framework basics,
    we stated that it has a modular architecture. This means that all the exploits,
    payloads, encoders, and so on are present in the form of modules. Modular architecture
    makes it easier to extend the functionality of the framework. Any programmer can
    develop his/her own module and port it easily into the framework. A complete penetration
    testing process can include several modules in operation. For example, we start
    with an exploitation module, then we use a payload module, then we can use several
    post exploitation modules once the target has been compromised. At last, we can
    also use different modules to connect to the database and store our findings and
    results. Even though modules are not very much talked about while working with
    Metasploit, they form the crux of the framework, so it is essential to have a
    deep understanding of it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论Metasploit框架基础知识的第一章中，我们提到它具有模块化架构。这意味着所有的利用、有效载荷、编码器等都以模块的形式存在。模块化架构使得扩展框架的功能变得更加容易。任何程序员都可以开发自己的模块，并将其轻松地移植到框架中。完整的渗透测试过程可以包括多个模块的操作。例如，我们从一个利用模块开始，然后使用有效载荷模块，一旦目标被攻破，我们可以使用多个后渗透模块。最后，我们还可以使用不同的模块连接到数据库并存储我们的发现和结果。尽管在使用Metasploit时很少谈到模块，但它们构成了框架的核心，因此有必要对其有深入的了解。
- en: In this chapter, we will particularly focus on the `pentest/exploits/framework3/modules`
    directory which contains a complete list of useful modules which can ease our
    task of penetration testing. The use of modules is very much similar to what we
    have been doing so far, but there is a slight difference in the functionality.
    Later in the chapter, we will also analyze some of the existing modules and finally
    conclude the chapter by learning how to develop our own modules for Metasploit.
    So let us start our experiments with modules.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将特别关注`pentest/exploits/framework3/modules`目录，其中包含一整套有用的模块，可以简化我们的渗透测试任务。模块的使用方式与我们迄今为止所做的非常相似，但功能上有一些差异。在本章的后面，我们还将分析一些现有的模块，并最终通过学习如何为Metasploit开发自己的模块来结束本章。让我们开始使用模块进行实验。
- en: Working with scanner auxiliary modules
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用扫描器辅助模块
- en: Let us begin our experimentation with scanner modules. We have already learnt
    about scanning in detail using Nmap. In this recipe, we will analyze some of the
    ready-made scanning modules which ships with the framework. Even though Nmap is
    a powerful scanning tool, still there can be situations where we have to perform
    a specific type of scan, such as scanning for the presence of a MySQL database.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用扫描器模块进行实验。我们已经详细了解了使用Nmap进行扫描。在这个示例中，我们将分析一些随框架提供的现成扫描模块。尽管Nmap是一个强大的扫描工具，但仍然可能出现需要执行特定类型的扫描的情况，例如扫描MySQL数据库的存在。
- en: Metasploit provides us with a complete list of such useful scanners. Let us
    move ahead and practically implement some of them.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit为我们提供了一个完整的有用扫描器列表。让我们继续实际实施其中一些。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To find the list of available scanners, we will have to browse to `/pentest/exploits/framework3/modules/auxiliary/scanner`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到可用扫描器的列表，我们需要浏览到`/pentest/exploits/framework3/modules/auxiliary/scanner`。
- en: You can find a collection of more than 35 useful scan modules which can be used
    under various penetration testing scenarios.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以找到一组超过35个有用的扫描模块，可在各种渗透测试场景下使用。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let us start with a basic HTTP scanner. You will see that there are many different
    HTTP scan options available. We will discuss few of them here.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从基本的HTTP扫描器开始。您会发现有许多不同的HTTP扫描选项可用。我们将在这里讨论其中一些。
- en: Consider the `dir_scanner` script. This will scan a single host or a complete
    range of networks to look for interesting directory a listings that can be further
    explored to gather information.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑`dir_scanner`脚本。这将扫描单个主机或完整的网络范围，以寻找可以进一步探索以收集信息的有趣目录列表。
- en: 'To start using an auxiliary module, we will have to perform the following steps
    in our msfconsole:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用辅助模块，我们需要在msfconsole中执行以下步骤：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `show options` command will list all the available optional parameters that
    you can pass along with the scanner module. The most important one is the `RHOSTS`
    parameter which will help us in targeting either a single computer or a range
    of computers in a network.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`show options`命令将列出您可以与扫描器模块一起传递的所有可选参数。最重要的是`RHOSTS`参数，它将帮助我们定位网络中的单台计算机或一系列计算机。'
- en: How it works...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let us discuss a specific scanner module involving some extra inputs. The `mysql_login`
    scanner module is a brute force module which scans for the availability of the
    MySQL server on the target and tries to login to the database by brute force attacking
    it:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论涉及一些额外输入的特定扫描器模块。`mysql_login`扫描器模块是一个暴力模块，它扫描目标上MySQL服务器的可用性，并尝试通过暴力攻击登录到数据库：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, there are many different parameters that we can pass with this
    module. The better we leverage the powers of a module, the greater are our chances
    of successful penetration testing. We can provide a complete list of usernames
    and passwords which the module can use and try on the target machine.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们可以传递许多不同的参数给这个模块。我们充分利用模块的功能，我们成功进行渗透测试的机会就越大。我们可以提供一个完整的用户名和密码列表，模块可以使用并尝试在目标机器上使用。
- en: 'Let us provide this information to the module:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向模块提供这些信息：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we are ready to use brute force. The last step will be selecting the target
    and provide the run command to execute the module:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备使用暴力破解。最后一步将是选择目标并提供运行命令以执行该模块：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The output shows that the module starts the process by first looking for the
    presence of the MySQL server on the target. Once it has figured out, it starts
    trying for the combinations of usernames and password provided to it through the
    external text file. This is also one of the most widely used modular operations
    of Metasploit in the current scenario. A lot of automated brute force modules
    have been developed to break weak passwords.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示，该模块首先查找目标上是否存在MySQL服务器来启动进程。一旦找到，它就开始尝试使用外部文本文件中提供的用户名和密码组合。这也是当前情况下Metasploit最广泛使用的模块操作之一。已经开发了许多自动化暴力破解模块来破解弱密码。
- en: There's more...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Let us go through a quick and easy way of generating password files using Metasploit.
    Having a decent list of password files can be helpful during brute-force penetration
    testing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过Metasploit快速简单地生成密码文件的方法。在暴力渗透测试期间，拥有一个体面的密码文件列表可能会有所帮助。
- en: Generating passwords using "Crunch"
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用"Crunch"生成密码
- en: 'For any brute force attack, it is imperative that we have a sizeable list of
    password files which we will be using in these types of attacks. Password lists
    can be procured from online resources or the pen-tester has the option of using
    John The Ripper to generate a password list. Alternatively, one can also use the
    "crunch" utility of Backtrack to generate such a list based on the characters
    being used. You can find the "crunch" utility in `/pentest/passwords/crunch`.
    In case it is missing in your version of Backtrack, then you can install it by
    passing the following command in the terminal window:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何暴力破解攻击，我们都必须拥有一个可观的密码文件列表，这些列表将在此类攻击中使用。密码列表可以从在线资源获取，或者渗透测试人员可以选择使用John
    The Ripper生成密码列表。或者，也可以使用Backtrack的"crunch"实用程序基于正在使用的字符生成此类列表。您可以在`/pentest/passwords/crunch`中找到"crunch"实用程序。如果在您的Backtrack版本中缺少它，则可以通过在终端窗口中传递以下命令来安装它：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The basic syntax of crunch looks as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: crunch的基本语法如下：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let us understand the functionality of some of the useful parameters of the
    crunch utility:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一些crunch实用程序的有用参数的功能：
- en: '`min-len:` Minimum length string to start at'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min-len:` 起始的最小长度字符串'
- en: '`max-len:` Maximum length string to end at'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max-len:` 结束的最大长度字符串'
- en: '`charset:` Defines the character set to use'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charset:` 定义要使用的字符集'
- en: '`-b:` Number[type: kb/mb/gb] - it specifies the size of the output file'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-b:` 数量[类型：kb/mb/gb] - 它指定输出文件的大小'
- en: '`-f </path/to/charset.lst> <charset-name>:` Allows us to specify a character
    set from the `charset.lst`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-f </path/to/charset.lst> <charset-name>:` 允许我们从`charset.lst`中指定字符集'
- en: '`-o <wordlist.txt>:` Defines the file to save the output'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-o <wordlist.txt>:` 定义要保存输出的文件'
- en: '`-t <@*%^>:` This is used to add those texts which are sure to appear in the
    password'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-t <@*%^>:` 用于添加那些肯定会出现在密码中的文本'
- en: 'A complete documentation on the crunch utility can be found at the following
    URL:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在以下网址找到有关crunch实用程序的完整文档：
- en: '[http://sourceforge.net/projects/crunch-wordlist/files/crunch-wordlist/](http://sourceforge.net/projects/crunch-wordlist/files/crunch-wordlist/)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://sourceforge.net/projects/crunch-wordlist/files/crunch-wordlist/](http://sourceforge.net/projects/crunch-wordlist/files/crunch-wordlist/)'
- en: You can go through the complete documentation to figure out how we can use this
    utility to generate long and complex password lists.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以阅读完整的文档，以找出如何使用此实用程序生成长且复杂的密码列表。
- en: Working with auxiliary admin modules
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用辅助管理模块
- en: Moving ahead with our module experiment, we will learn about some admin modules
    which can be really handy during penetration testing. The admin modules can serve
    different purposes, such as it can look for an admin panel, or it can try for
    admin login, and so on. It depends upon the functionality of the module. Here
    we will look at a simple admin auxiliary module named the `mysql_enum` module.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 继续进行我们的模块实验，我们将了解一些在渗透测试期间非常有用的管理模块。管理模块可以用于不同的目的，例如可以查找管理面板，或者可以尝试进行管理登录等。这取决于模块的功能。在这里，我们将看一下一个名为`mysql_enum`模块的简单管理辅助模块。
- en: Getting ready
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The `mysql_enum` module is a special utility module for MySQL database servers.
    This module provides simple enumeration of the MySQL database server provided
    proper credentials are granted to connect remotely. Let us understand it in detail
    by using the module.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`mysql_enum`模块是MySQL数据库服务器的特殊实用程序模块。只要提供了适当的凭据以远程连接，该模块就可以对MySQL数据库服务器进行简单枚举。让我们通过使用该模块详细了解它。'
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will start with launching the msfconsole and providing the path for the
    auxiliary module:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从启动msfconsole并提供辅助模块的路径开始：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see, the module accepts password, username, and RHOST as parameters.
    This can help the module in first searching for the existence of a MySQL database
    and then apply the credentials to try for remote login. Let us analyze the output
    of the `exploit` command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，该模块接受密码、用户名和RHOST作为参数。这可以帮助模块首先搜索MySQL数据库的存在，然后应用凭据尝试远程登录。让我们分析`exploit`命令的输出：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The module responds with lots of useful information. It tells us that `cmdshell`
    and remote access has been enabled on our target MySQL setup. It also returns
    the database name which is currently in process on the target machine.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块返回了大量有用的信息。它告诉我们在目标MySQL设置上已启用了`cmdshell`和远程访问。它还返回了目标机器上当前正在处理的数据库名称。
- en: There are several similar modules available for other services such as MSSQL
    and Apache. The working process is similar for most of the modules. Remember to
    use the show options command in order to make sure that you are passing the required
    parameters to the module.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他服务（如MSSQL和Apache），也有几个类似的模块可用。大多数模块的工作过程都是类似的。请记住使用show options命令，以确保您传递了模块所需的参数。
- en: How it works...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: These auxiliary admin modules function by a simple enumeration process by launching
    a connection and then passing the username and password combination. It can also
    be used to check whether anonymous login is supported by the database server or
    not. We can also test for a default username and password like MySQL uses "scott"
    and "tiger" as default login credentials.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些辅助管理模块通过简单的枚举过程运行，通过建立连接然后传递用户名和密码组合。它还可以用于检查数据库服务器是否支持匿名登录。我们还可以测试默认用户名和密码，就像MySQL使用“scott”和“tiger”作为默认登录凭据一样。
- en: SQL injection and DOS attack modules
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL注入和DOS攻击模块
- en: Metasploit is friendly for both penetration testers as well as hackers. The
    reason for this is that a penetration tester has to think from the hacker's perspective
    in order to secure their network, services, applications, and so on. The SQL injection
    and DOS modules helps penetration testers in attacking their own services in order
    to figure out if they are susceptible to such attacks. So let's discuss some of
    these modules in detail.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit对渗透测试人员和黑客都很友好。原因是渗透测试人员必须从黑客的角度思考，以确保他们的网络、服务、应用程序等安全。SQL注入和DOS模块帮助渗透测试人员攻击自己的服务，以确定它们是否容易受到此类攻击。因此，让我们详细讨论一些这些模块。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The SQL injection module uses a known vulnerability in the database type to
    exploit it and provide unauthorized access. The vulnerability is known to affect
    Oracle 9i and 10g. Metasploit contains several modules that use a known exploit
    in the Oracle database in order to break them through query injection. The modules
    can be found in `modules/auxiliary/sqli/oracle`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入模块利用数据库类型中已知的漏洞并提供未经授权的访问。这个漏洞已知会影响Oracle 9i和10g。Metasploit包含几个模块，这些模块利用Oracle数据库中已知的漏洞来进行查询注入。这些模块可以在`modules/auxiliary/sqli/oracle`中找到。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let us analyze an oracle vulnerability named **Oracle DBMS_METADATA XML** vulnerability.
    This vulnerability will escalate the privilege from `DB_USER` to `DB_ADMINISTRATOR`
    (Database Administrator). We will be using the `dbms_metadata_get_xml` module:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一个名为**Oracle DBMS_METADATA XML**的Oracle漏洞。这个漏洞将把权限从`DB_USER`提升到`DB_ADMINISTRATOR`（数据库管理员）。我们将使用`dbms_metadata_get_xml`模块：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The module requests for similar parameters which we have seen so far. The database
    first checks to login by using the default login credentials, that is, "scott"
    and "tiger" as the default username and password respectively. Once the module
    gains login as a database user, it then executes the exploit to escalate the privilege
    to the database administrator. Let us execute the module as a test run on our
    target.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块请求类似我们迄今为止见过的参数。数据库首先通过使用默认登录凭据，即“scott”和“tiger”作为默认用户名和密码来检查登录。一旦模块以数据库用户身份登录，它就会执行利用程序以提升权限到数据库管理员。让我们在目标上执行模块作为测试运行。
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: On successful execution of the module, the user privilege will be escalated
    from `DB_USER` to `DB_ADMINISTRATOR`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 模块成功执行后，用户权限将从`DB_USER`提升到`DB_ADMINISTRATOR`。
- en: The next module that we will cover is related to the **Denial Of Service (DOS)**
    attack. We will analyze a simple IIS 6.0 vulnerability which allows the attacker
    to crash the server by sending a POST request containing more than 40000 request
    parameters. We will analyze the vulnerability shortly. This module has been tested
    on an unpatched Windows 2003 server running IIS 6.0\. The module we will be using
    is `ms10_065_ii6_asp_dos:`
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要介绍的下一个模块与**拒绝服务（DOS）**攻击有关。我们将分析一个简单的IIS 6.0漏洞，允许攻击者通过发送包含超过40000个请求参数的POST请求来使服务器崩溃。我们将很快分析这个漏洞。该模块已在运行IIS
    6.0的未打补丁的Windows 2003服务器上进行了测试。我们将使用的模块是`ms10_065_ii6_asp_dos:`
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once the module is executed using the run command, it will start attacking the
    target IIS server by sending an HTTP request on port 80 with the URI as page.asp.
    Successful execution of the module will lead to a complete denial of the service
    of the IIS server.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦使用run命令执行模块，它将通过在端口80上发送HTTP请求，以URI为page.asp来攻击目标IIS服务器。模块的成功执行将导致IIS服务器完全拒绝服务。
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let us take a quick look at the two vulnerabilities. The oracle database vulnerability
    is exploited by injecting a custom PL/SQL function which is executed in SYS context
    and it elevates the privilege of user "scott" as administrator.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下这两个漏洞。通过注入一个自定义的PL/SQL函数来利用Oracle数据库漏洞，该函数在SYS上下文中执行，并将用户“scott”的权限提升为管理员。
- en: 'Consider this example function:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例函数：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now injecting this function in the vulnerable procedure will lead to a privilege
    escalation for the user scott.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将此函数注入到易受攻击的过程中将导致用户scott的权限提升。
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding lines of codes explain the injection process. The detailed analysis
    of vulnerability in the Oracle software is beyond the scope of the book.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码行解释了注入过程。对Oracle软件中漏洞的详细分析超出了本书的范围。
- en: Now moving the DOS attack module which exploits vulnerability in the IIS 6.0
    server. The attacker sends a POST request which includes more than 40000 request
    parameters, and is sent in the form of an `application/x-www-form-urlencoded`
    encoding type.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在移动DOS攻击模块，它利用IIS 6.0服务器中的漏洞。攻击者发送一个包含超过40000个请求参数的POST请求，并以`application/x-www-form-urlencoded`编码类型发送。
- en: 'Here is a part of a script that serves the module:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是服务模块的一部分脚本：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, the script generates a payload size of more than 40000\. Then,
    a connection is established on port 80 to send an HTTP request to the IIS server.
    Once the request has been rendered by the server, it will crash and will stop
    working unless restarted.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，脚本生成了超过40000的有效负载大小。然后，在端口80上建立连接，向IIS服务器发送HTTP请求。一旦服务器渲染了请求，它将崩溃并停止工作，除非重新启动。
- en: Post-exploitation modules
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后期利用模块
- en: So far, we have worked a lot on the post exploitation phase using various powers
    of meterpreter. However, we also have a separate dedicated list of modules that
    can enhance our penetration testing experience. As they are post exploitation
    modules, we will need an active session with our target. We can use any of the
    methods described in previous chapters to gain access to our target.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经在后渗透阶段使用了meterpreter的各种功能。然而，我们还有一个单独的专用模块列表，可以增强我们的渗透测试体验。由于它们是后渗透模块，我们将需要与目标建立一个活动会话。我们可以使用前几章描述的任何方法来访问我们的目标。
- en: Getting ready
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The post module is a collection of some of the most interesting and handy features
    that you can use while penetration testing. Let us quickly analyze some of them
    here. Here we are using an unpatched Windows 7 machine as our target with an active
    meterpreter session.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 后模块是一组最有趣和方便的功能的集合，您可以在渗透测试中使用。让我们快速分析其中一些。在这里，我们使用一个未打补丁的Windows 7机器作为我们的目标，并且有一个活动的meterpreter会话。
- en: How to do it...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: You can locate the post modules in `modules/post/windows/gather`. Let us start
    with a simple `enum_logged_on_users` module. This post module will list the current
    logged in users in the Windows machine.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`modules/post/windows/gather`中找到后模块。让我们从一个简单的`enum_logged_on_users`模块开始。这个后模块将列出Windows机器中当前登录的用户。
- en: We will execute the module through our active meterpreter session. Also, keep
    in mind to escalate the privilege by using the `getsystem` command in order to
    avoid any errors during the execution of the module.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过我们的活动meterpreter会话执行模块。还要记住使用`getsystem`命令提升权限，以避免在执行模块时出现任何错误。
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Successful execution of the module shows us two tables. The first table reflects
    the currently logged in user and the second table reflects the recently logged
    in user. Follow the correct path while executing the modules. We have used the
    `run` command to execute the modules as they are all in the form of Ruby script
    so meterpreter can easily identify it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的成功执行向我们展示了两个表。第一个表反映了当前登录的用户，第二个表反映了最近登录的用户。在执行模块时，请遵循正确的路径。我们使用`run`命令来执行模块，因为它们都是以Ruby脚本的形式存在，所以meterpreter可以轻松识别它。
- en: Let us take one more example. There is an interesting post module that captures
    a screenshot of the target desktop. This module can be useful when we have to
    know whether there is any active user or not. The module we will use is `screen_spy.rb:`
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再举一个例子。有一个有趣的后模块可以捕获目标桌面的截图。当我们需要知道是否有任何活动用户时，这个模块就会很有用。我们将使用的模块是`screen_spy.rb:`
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You might have noticed how easy and useful post modules can be. In the coming
    future, the developers of Metasploit will be focusing more on post modules rather
    than meterpreter as it greatly enhances the functionality of penetration testing.
    So if you are looking to contribute to the Metasploit community then you can work
    on post modules.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到后模块可以是多么简单和有用。在未来，Metasploit的开发人员将更多地专注于后模块，而不是meterpreter，因为它极大地增强了渗透测试的功能。因此，如果您希望为Metasploit社区做出贡献，那么您可以致力于后模块。
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We can analyze the scripts of `enum_logged_on_user.rb` and `screen_spy.rb` at
    `modules/post/windows/gather`. It can help us in getting insight about how these
    modules function.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`modules/post/windows/gather`中分析`enum_logged_on_user.rb`和`screen_spy.rb`的脚本。这可以帮助我们了解这些模块的功能。
- en: Understanding the basics of module building
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解模块构建的基础知识
- en: So far, we have seen the utility of modules and the power that they can add
    to the framework. In order to master the framework, it is essential to understand
    the working and building of modules. This will help us in quickly extending the
    framework according to our needs. In the next few recipes, we will see how we
    can use ruby scripting to build our own modules and import them into the framework.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了模块的效用以及它们可以为框架增加的功能。为了掌握框架，了解模块的工作和构建是至关重要的。这将帮助我们根据我们的需求快速扩展框架。在接下来的几个示例中，我们将看到如何使用Ruby脚本构建我们自己的模块并将其导入框架。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To start building our own module we will need basic knowledge of Ruby scripting.
    We have already discussed the use and implementation of Ruby in meterpreter scripting.
    In this recipe, we will see how we can use Ruby to start building modules for
    the framework. The process is very much similar to meterpreter scripting. The
    difference lies in using a set of pre-defined lines that will be required in order
    to make the framework understand the requirements and nature of the module. So
    let us discuss some of the essential requirements for module building.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始构建我们自己的模块，我们需要基本的Ruby脚本知识。我们已经讨论了在meterpreter脚本中使用和实现Ruby。在这个示例中，我们将看到如何使用Ruby来开始为框架构建模块。这个过程与meterpreter脚本非常相似。不同之处在于使用一组预定义的行，这些行将需要以使框架了解模块的要求和性质。因此，让我们讨论一些模块构建的基本要求。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Every module in the framework is in the form of a Ruby script and is located
    in the modules directory. We will have to import some of the framework libraries
    depending on our needs. Let us move ahead and see how we can import the libraries
    in our script and design a fully-functional module.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 框架中的每个模块都以Ruby脚本的形式存在，并位于模块目录中。根据我们的需求，我们将不得不导入一些框架库。让我们继续前进，看看我们如何在脚本中导入库并设计一个完全功能的模块。
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Let us start with some of the basics of module building. In order to make our
    module readable for the framework, we will have to import MSF libraries:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从模块构建的一些基础知识开始。为了使我们的模块对框架可读，我们将不得不导入MSF库：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is the first and foremost line of every script. This line tells that the
    module will include all the dependencies and functionalities of the Metasploit
    framework.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是每个脚本的首要行。这一行表示该模块将包括Metasploit框架的所有依赖项和功能。
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This line defines the class which inherits the properties of the auxiliary
    family. The auxiliary module can import several functionalities such as scanning,
    opening connections, using the database, and so on:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这行定义了一个类，该类继承了辅助家族的属性。辅助模块可以导入多种功能，如扫描、建立连接、使用数据库等：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `include` statement can be used to include a particular functionality of
    the framework into our own module. For example, if we are building a scanner module
    then we can include it as:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`include`语句可用于将框架的特定功能包含到我们自己的模块中。例如，如果我们正在构建一个扫描器模块，那么我们可以将其包含为：'
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This line will include the functionality of a remote TCP scan in the module.
    This line will pull out the main scan module libraries from the Metasploit library:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这行将在模块中包含远程TCP扫描的功能。这行将从Metasploit库中提取主要扫描模块库：
- en: '[PRE20]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The next few lines of script give us an introduction about the module like
    its name, version, author, description, and so on:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的下几行向我们介绍了模块的名称、版本、作者、描述等：
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The next few lines of the script are used to initialize values for the script.
    The options which are marked as `true` are those which are essentially required
    for the modules, whereas the options marked as `no` are optional. These values
    can be passed/changed during the execution of the module.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的下几行用于初始化脚本的值。标记为`true`的选项是模块基本所需的选项，而标记为`no`的选项是可选的。这些值可以在执行模块时传递/更改。
- en: These are some common lines of script that you will find in every module. Analysis
    of in-built scripts is the best way to learn more about script building. There
    are a few documentations available for learning module building. The best way
    to learn is by mastering Ruby scripting and by analyzing existing modules. In
    the next recipe, we will analyze a complete module from scratch.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是您在每个模块中都会找到的一些常见脚本行。分析内置脚本是了解脚本构建的最佳方法。有一些文档可供学习模块构建。学习的最佳方法是掌握Ruby脚本编写，并分析现有模块。在下一个示例中，我们将从头开始分析一个完整的模块。
- en: Analyzing an existing module
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析现有模块
- en: Now that we have built some background about module building in our previous
    recipe, our next step will be to analyze existing modules. It is highly recommended
    that you should look at the scripts of existing modules if you have to learn and
    dive deeper into module and platform development.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在上一个示例中建立了一些关于模块构建的背景，我们的下一步将是分析现有模块。强烈建议您查看现有模块的脚本，以便更深入地了解模块和平台开发。
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will analyze a simple ftp module here in order to dive deeper into module
    building.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里分析一个简单的ftp模块，以便更深入地了解模块构建。
- en: We will proceed from where we left off in the previous recipe. We have already
    discussed the basic template of the module in the previous recipe so here we will
    start from the main body of the script.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从上一个示例中离开的地方继续。我们已经在上一个示例中讨论了模块的基本模板，所以在这里我们将从脚本的主体开始。
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will be analyzing the ftp anonymous access module. You can find the main
    script at the following location: `pentest/exploits/framework3/modules/auxiliary/scanner/ftp/anonymous.rb`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将分析ftp匿名访问模块。您可以在以下位置找到主要脚本：`pentest/exploits/framework3/modules/auxiliary/scanner/ftp/anonymous.rb`
- en: 'Here is the complete script for your reference:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您参考的完整脚本：
- en: '[PRE22]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Let us move to the next section and analyze the script in detail.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到下一节，详细分析脚本。
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Let us start with the analysis of the main script body to understand how it
    works:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从分析主要脚本主体开始，以了解其工作原理：
- en: '[PRE23]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This function is used to begin the connection. The res variable holds the Boolean
    value true or false. The `connect_login` function is a specific function used
    by the module to establish a connection with the remote host. Depending upon the
    success or failure of connection, the Boolean value is stored in res.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数用于开始连接。res变量保存布尔值true或false。`connect_login`函数是模块用于与远程主机建立连接的特定函数。根据连接的成功或失败，布尔值存储在res中。
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Once the connection has been set up, the module tries to check if the anonymous
    user has read/write privileges or not. The `write_check` variable checks if a
    write operation is possible or not. Then it is checked whether the operation succeeded
    or not. Depending upon the status of the privilege, a message is printed on the
    screen. If the write operation fails then the status is printed as `ro` or `read-only:`
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦连接建立，模块会尝试检查匿名用户是否具有读/写权限。`write_check`变量检查写操作是否可能。然后检查操作是否成功。根据权限的状态，在屏幕上打印消息。如果写操作失败，则状态将打印为`ro`或`read-only:`
- en: '[PRE25]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The next function is used to report authorization info. It reflects important
    parameters such as host, port, user, pass, and so on. These are the values that
    appear to us when we use the `show options` command so these values are user dependent.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个函数用于报告授权信息。它反映了重要的参数，如主机、端口、用户、密码等。这些是我们使用`show options`命令时出现的值，因此这些值是用户相关的。
- en: This was a quick demonstration of how a simple module functions within the framework.
    You can change the existing scripts accordingly to meet your needs. This makes
    the platform extremely portable to development. As I have said it, the best way
    to learn more about module building is by analyzing the existing scripts.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单演示，演示了一个简单模块在框架内的功能。您可以相应地更改现有脚本以满足您的需求。这使得平台非常适合开发。正如我所说，了解更多关于模块构建的最佳方法是通过分析现有脚本。
- en: In the next recipe, we will see how to build our own module and pass it into
    the framework.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们将看到如何构建我们自己的模块并将其传递到框架中。
- en: Building your own post-exploitation module
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建您自己的后渗透模块
- en: Now we have covered enough background about building modules. Here, we will
    see an example of how we can build our own module and add it into the framework.
    Building modules can be very handy as they will give us the power of extending
    the framework depending on our need.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了足够的关于构建模块的背景知识。在这里，我们将看到一个示例，说明我们如何构建自己的模块并将其添加到框架中。构建模块非常方便，因为它们将使我们有能力根据我们的需求扩展框架。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let us build a small post exploitation module that will enumerate all the installed
    applications on the target machine. As it is a post exploitation module, we will
    require a compromised target in order to execute the module.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个小的后渗透模块，该模块将枚举目标计算机上安装的所有应用程序。由于这是一个后渗透模块，我们需要一个受损的目标才能执行该模块。
- en: 'To start with building the module, we will first import the framework libraries
    and include the required dependencies:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始构建模块，我们将首先导入框架库并包含所需的依赖项：
- en: '[PRE26]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The script starts with including the Metasploit core libraries. Then, we build
    up the class that extends the properties of Msf::Post modules.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本以包含Metasploit核心库开始。然后，我们建立了一个扩展Msf::Post模块属性的类。
- en: Next, we create the `initialize` function which is used to initialize and define
    the module properties and description. This basic structure remains the same in
    almost all modules. The thing to note here is that we have included 'rex', as
    well as 'registry' libraries. This will make the framework easy to figure out
    our requirements in the module.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建`initialize`函数，该函数用于初始化和定义模块属性和描述。这种基本结构在几乎所有模块中都是相同的。这里需要注意的是，我们已经包含了'rex'和'registry'库。这将使框架更容易理解我们在模块中的需求。
- en: 'Now, our next step will be to create a table that can display our extracted
    result. We have a special library `Rex::Ui::Text` which can be used for this task.
    We will have to define different columns:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的下一步将是创建一个可以显示我们提取结果的表格。我们有一个特殊的库`Rex::Ui::Text`，可以用于此任务。我们将不得不定义不同的列：
- en: '[PRE27]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The script body starts with building the table and providing different column
    names. Then, a separate array of registry locations is created which will be used
    to enumerate the application list. The array will consist of different registry
    entries that contain information about installed applications on the target machine.
    The application information is maintained in a separate array named as `apps`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本主体以构建表格并提供不同的列名开始。然后，创建一个单独的注册表位置数组，该数组将用于枚举应用程序列表。该数组将包含包含有关目标计算机上安装的应用程序的信息的不同注册表条目。应用程序信息维护在一个名为`apps`的单独数组中。
- en: 'Then, we start the enumeration process by running a loop that looks into different
    registry locations stored in the `appskey` array:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过运行一个循环来开始枚举过程，该循环查看存储在`appskey`数组中的不同注册表位置：
- en: '[PRE28]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The next lines of script populate the table with different values in the respective
    columns. The script uses an in-built function `registry_getvaldata` which fetches
    the values and adds them to the table:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的下一行用不同的值填充表格的相应列。脚本使用内置函数`registry_getvaldata`，该函数获取值并将其添加到表中：
- en: '[PRE29]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The last few lines of the script are used for storing the information in a separate
    text file named `applications.txt`. The file is populated by using the `store_loot`
    function which stores the complete table in the text file.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的最后几行用于将信息存储在名为`applications.txt`的单独文本文件中。脚本使用`store_loot`函数将完整的表格存储在文本文件中。
- en: Finally, an output is displayed on the screen stating that the file has been
    created and results have been stored in it.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在屏幕上显示输出，指出文件已创建，并将结果存储在其中。
- en: The next step will be to store the complete program in a respective directory.
    You have to make sure that you choose the correct directory for storing your module.
    This will help the framework in clearly understanding the utility of the module
    and will maintain a hierarchy. Maintaining a hierarchy while updating modules
    will help in keeping a proper track of what exactly the module is targeting. For
    example, keeping an Internet Explorer module under the `modules/exploits/windows/browser`
    directory will help us in easily locating any new or existing browser module at
    this location.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步将是将完整的程序存储在相应的目录中。您必须确保选择正确的目录来存储您的模块。这将有助于框架清楚地理解模块的实用性，并将维护一个层次结构。在更新模块时保持层次结构将有助于准确跟踪模块的目标。例如，将Internet
    Explorer模块保留在`modules/exploits/windows/browser`目录下，将有助于我们轻松地在此位置找到任何新的或现有的浏览器模块。
- en: 'To identify the location of module storage, there are the following points
    you should look at:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定模块存储位置，您应该查看以下要点：
- en: Type of module
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块类型
- en: Operation performed by the module
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块执行的操作
- en: Affected software or operating system
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受影响的软件或操作系统
- en: Metasploit follows the hierarchy of 'generalized to specialized' format for
    storing modules. It starts with the type of modules such as an exploit module
    or an auxiliary module. Then it picks up a generalized name, for example the name
    of an affected operating system. Then it creates a more specialized functionality,
    for example the module is used for browsers. Finally, the most specific naming
    is used like the name of the browser that the module is targeting.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit遵循存储模块的“通用到专用”的层次结构格式。它从模块类型开始，例如利用模块或辅助模块。然后选择一个通用名称，例如受影响的操作系统的名称。然后创建更专业的功能，例如模块用于浏览器。最后，使用最具体的命名，例如模块针对的浏览器的名称。
- en: Let us consider our module. This module is a post exploitation module that is
    used to enumerate a Windows operating system and gathers information about the
    system. So our module should follow this convention for storing.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑我们的模块。这个模块是一个后渗透模块，用于枚举Windows操作系统并收集有关系统的信息。因此，我们的模块应该遵循存储的约定。
- en: So our destination folder should be `modules/post/windows/gather/`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的目标文件夹应该是`modules/post/windows/gather/`。
- en: You can save the module with your desired name and with a.rb extension. Let's
    save it as `enum_applications.rb`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用你想要的名称和.a.rb扩展名保存模块。让我们把它保存为`enum_applications.rb`。
- en: How it works...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它的工作原理是...
- en: 'Once we have saved the module in its preferred directory, the next step will
    be to execute it and see if it is working fine. We have already seen the process
    of module execution in previous recipes. The module name is used to execute it
    from the MSF terminal:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们把模块保存在它的首选目录中，下一步就是执行它，看看它是否正常工作。我们已经在之前的示例中看到了模块执行的过程。模块名称用于在MSF终端中执行它：
- en: '[PRE30]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This was a small example of how you can build and add your own module to the
    framework. You definitely need a sound knowledge of Ruby scripting if you want
    to build good modules. You can also contribute to the Metasploit community by
    releasing your module and let others. benefit from it.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个小例子，说明了如何构建和添加自己的模块到框架中。如果你想构建好的模块，你肯定需要对Ruby脚本有扎实的知识。你也可以通过发布你的模块来为Metasploit社区做出贡献，并让其他人受益。
