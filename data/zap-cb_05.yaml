- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Testing of Session Management
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话管理测试
- en: Welcome to [*Chapter 5*](B18829_05.xhtml#_idTextAnchor200)! In this chapter,
    we will walk you through the recipes related to session management. The topics
    covered in this chapter will showcase to you how to use OWASP ZAP to capture and
    use session tokens that can then be used in multiple types of attacks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到[*第 5 章*](B18829_05.xhtml#_idTextAnchor200)！在这一章节中，我们将带领您完成与会话管理相关的实用技巧。本章涵盖的主题将向您展示如何使用OWASP
    ZAP来捕获和使用会话令牌，并可以在多种类型的攻击中使用。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下实用技巧：
- en: Testing for cookie attributes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试Cookie属性
- en: Testing for cross-site request forgery (CSRF)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试跨站请求伪造（CSRF）
- en: Testing for logout functionality
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试注销功能
- en: Testing for session hijacking
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话劫持测试
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you will need to install OWASP ZAP Proxy and OWASP Juice Shop
    on your machine to intercept traffic between the browser and OWASP Juice Shop.
    In addition, utilize your PortSwigger account for access to the PortSwigger Academy
    labs that will be used in this chapter’s recipes. Lastly, the use of the Mutillidae
    II Docker environment is required to complete some of the attacks.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您需要在计算机上安装OWASP ZAP代理和OWASP Juice Shop以拦截浏览器和OWASP Juice Shop之间的流量。此外，利用您的PortSwigger帐户访问PortSwigger
    Academy实验室，这些实验室将在本章的实例中使用。最后，使用Mutillidae II Docker环境是完成某些攻击所必需的。
- en: Mutillidae setup
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mutillidae设置
- en: Mutillidae is an open source, insecure, and vulnerable web application used
    for training and learning with various types of vulnerability to be exploited
    with hints and help. This will help you learn how to perform attacks ranging from
    easy to more complicated. You can find more information about the project at [https://owasp.org/www-project-mutillidae-ii/](https://owasp.org/www-project-mutillidae-ii/).
    We are going to be using the Docker image for the simplicity of setup.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Mutillidae是一个开放源代码、不安全且易受攻击的Web应用程序，用于训练和学习各种类型的漏洞，通过提示和帮助来利用攻击。这将帮助您学习如何执行从简单到更复杂的攻击。您可以在[https://owasp.org/www-project-mutillidae-ii/](https://owasp.org/www-project-mutillidae-ii/)找到有关该项目的更多信息。为了简化设置，我们将使用Mutillidae
    II Docker镜像。
- en: 'The first step is to git clone or download the GitHub repository:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是git克隆或下载GitHub存储库：
- en: '[https://github.com/Nanjuan/mutillidae-docker-nes](https://github.com/Nanjuan/mutillidae-docker-nes)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/Nanjuan/mutillidae-docker-nes](https://github.com/Nanjuan/mutillidae-docker-nes)'
- en: 'Once you have downloaded the GitHub repository, navigate to that folder in
    your terminal and view the file to make sure it looks as shown in *Figure 5**.1*:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您下载了GitHub存储库，请在终端中导航到该文件夹，并查看文件以确保其如*图 5**.1*所示：
- en: '![Figure 5.1 – Downloaded Mutillidae Repository](image/Figure_05.01_B18829.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 下载的Mutillidae存储库](image/Figure_05.01_B18829.jpg)'
- en: Figure 5.1 – Downloaded Mutillidae Repository
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 下载的Mutillidae存储库
- en: 'When you are inside the Mutillidae directory, run the following Docker command:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您在Mutillidae目录中时，请运行以下Docker命令：
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Figure 5.2 – Mutillidae directory](image/Figure_05.02_B18829.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – Mutillidae 目录](image/Figure_05.02_B18829.jpg)'
- en: Figure 5.2 – Mutillidae directory
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – Mutillidae 目录
- en: 'Once Docker has finished setting up the environment, open your browser and
    navigate to localhost. You might notice that the localhost URL will redirect to
    **localhost/database-offline.php**, as shown in *Figure 5**.3*:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦Docker设置完成，请打开浏览器并导航到localhost。您可能注意到localhost URL将重定向到**localhost/database-offline.php**，如*图
    5**.3*所示：
- en: '![Figure 5.3 – Localhost of Mutillidae](image/Figure_05.03_B18829.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – Mutillidae 的本地主机](image/Figure_05.03_B18829.jpg)'
- en: Figure 5.3 – Localhost of Mutillidae
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – Mutillidae 的本地主机
- en: Next, press the **Click here** button in *step 1,* as shown in *Figure 5**.3*.
    This will pop up a message. Click **OK**.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在*步骤 1*中按下**点击此处**按钮，如*图 5**.3*所示。这将弹出一个消息。点击**确定**。
- en: '![Figure 5.4 – Click here message](image/Figure_05.04_B18829.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – 点击此处消息](image/Figure_05.04_B18829.jpg)'
- en: Figure 5.4 – Click here message
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 点击此处消息
- en: 'After you click **OK**, the application will redirect to the Mutillidae main
    page, as shown in *Figure 5**.5*:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**后，应用程序将重定向到Mutillidae主页，如*图 5**.5*所示：
- en: '![Figure 5.5 – Mutillidae home page](image/Figure_05.05_B18829.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – Mutillidae 主页](image/Figure_05.05_B18829.jpg)'
- en: Figure 5.5 – Mutillidae home page
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – Mutillidae 主页
- en: This completes the setup.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成。
- en: Testing for cookie attributes
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Cookie属性
- en: Cookies are text files stored by websites on your computer. Websites utilize
    cookies to track users’ activities, provide a personalized experience, and/or
    for session management. Therefore, in most cases, cookies contain a wealth of
    private information about users, which makes them a target for criminals.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Cookies是网站存储在计算机上的文本文件。网站使用cookies来跟踪用户活动、提供个性化体验和/或进行会话管理。因此，在大多数情况下，cookies包含大量关于用户的私密信息，使其成为犯罪分子的攻击目标。
- en: 'Due to the sensitivity of the data that could be stored in the cookies, the
    industry has created cookie attributes to help secure the cookie’s data. Here
    are the attributes that could be set and an explanation of each one:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于cookie中可能存储的数据非常敏感，业界已经创建了cookie属性来帮助保护cookie数据。以下是可以设置的属性及其解释：
- en: '**The** **Secure attribute**:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Secure属性**：'
- en: The **Secure** attribute ensures that the cookie is sent over HTTPS to prevent
    man-in-the-middle attacks.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**Secure**属性确保cookie通过HTTPS发送，以防止中间人攻击。'
- en: '**The** **HttpOnly attribute**:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HttpOnly属性**：'
- en: The **HttpOnly** attribute is set to prevent client-side scripts from accessing
    the cookie data. This attribute is used as another layer of protection against
    cross-site scripting attacks.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpOnly**属性被设置为防止客户端脚本访问cookie数据。此属性作为防御跨站脚本攻击的另一层保护。'
- en: '**The** **Domain attribute**:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Domain属性**：'
- en: The **Domain** attribute is used to set the scope of where the cookie can be
    used. If the domain in the request URL does not match the domain in the **Domain**
    attribute, the cookie will be invalid.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**Domain**属性用于设置cookie可以使用的域范围。如果请求URL中的域与**Domain**属性中的域不匹配，cookie将无效。'
- en: '**The** **Path attribute**:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Path属性**：'
- en: The **Path** attribute is set to specify the path the cookie can use. If the
    path matches, then the cookie will be sent in the request.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**Path**属性被设置为指定cookie可以使用的路径。如果路径匹配，则cookie将在请求中发送。'
- en: '**The** **Expires attribute**:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Expires属性**：'
- en: The **Expires** attribute is set to specify the lifetime of the cookie.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**Expires**属性被设置为指定cookie的生命周期。'
- en: '**The** **SameSite attribute**:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SameSite属性**：'
- en: The **SameSite** attribute is set to limit sending the cookie with cross-site
    requests. This attribute is used to limit sharing cookies with third parties and
    as a protection from **cross-site request forgery** (**CSRF**) attacks. The **SameSite**
    attribute can be set to one of these values, **Strict**, **Lax**, or **None**.
    If you set the value to **None**, the cookie will be sent in cross-site requests.
    If you set the value to **Strict**, the cookie will only be sent to the site where
    it originated. If you set the value to **Lax**, the cookie will be sent if the
    URL equals the cookie’s domain, even if it was originated by a third party.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**SameSite**属性被设置为限制在跨站请求中发送cookie。此属性用于限制与第三方共享cookie，并作为防御**跨站请求伪造**（**CSRF**）攻击的保护。**SameSite**属性可以设置为以下值之一：**Strict**、**Lax**或**None**。如果将值设置为**None**，cookie将会在跨站请求中发送。如果将值设置为**Strict**，cookie将仅发送到它的来源站点。如果将值设置为**Lax**，即使cookie是由第三方创建的，只要URL与cookie的域匹配，cookie仍会被发送。'
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need to start ZAP and ensure that it is intercepting
    the communications between the server and your browser. In addition, you need
    a user account for the PortSwigger Academy ([portswigger.net/web-security](http://portswigger.net/web-security)).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，您需要启动ZAP并确保它正在拦截服务器与浏览器之间的通信。此外，您需要一个PortSwigger Academy的用户账户（[portswigger.net/web-security](http://portswigger.net/web-security)）。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'By default, ZAP has rules in the Passive Scanner that alert if one of the previously
    defined attributes is not set. In this recipe, we are going to start a PortSwigger
    lab to see the cookie alert in ZAP. The following steps guide you through this
    process:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，ZAP在被动扫描器中具有规则，如果未设置之前定义的某个属性，将发出警报。在本教程中，我们将启动PortSwigger实验室，查看ZAP中的cookie警报。以下步骤将引导您完成此过程：
- en: The first step is to browse [portswigger.net/web-security](http://portswigger.net/web-security)
    and click on **All Labs** in the top navigation bar.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是浏览[portswigger.net/web-security](http://portswigger.net/web-security)，然后点击顶部导航栏中的**All
    Labs**。
- en: 'Once you are on the Labs page, click on **Exploiting cross-site scripting to
    steal cookies >>**, as shown in *Figure 5**.6*:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进入实验室页面，点击**Exploiting cross-site scripting to steal cookies >>**，如*图5.6*所示：
- en: '![Figure 5.6 – The PortSwigger lab](image/Figure_05.06_B18829.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图5.6 – PortSwigger实验室](image/Figure_05.06_B18829.jpg)'
- en: Figure 5.6 – The PortSwigger lab
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 – PortSwigger实验室
- en: 'Click on **Access the lab**, as shown in *Figure 5**.7*, and log in:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **访问实验室**，如 *图 5.7* 所示，并登录：
- en: '![Figure 5.7 – Accessing the lab](image/Figure_05.07_B18829.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – 访问实验室](image/Figure_05.07_B18829.jpg)'
- en: Figure 5.7 – Accessing the lab
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 访问实验室
- en: 'The lab provides a vulnerable application. Once the application is opened,
    add it to the scope in ZAP by clicking on the **New Context** button in ZAP and
    choosing the application as the **Top Node** in the **New Context** window, as
    shown in *Figure 5**.8*:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实验提供了一个易受攻击的应用程序。打开该应用程序后，点击 ZAP 中的 **新建上下文** 按钮，并在 **新建上下文** 窗口中选择该应用程序作为 **顶级节点**，如
    *图 5.8* 所示：
- en: '![Figure 5.8 – The New Context window](image/Figure_05.08_B18829.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – 新建上下文窗口](image/Figure_05.08_B18829.jpg)'
- en: Figure 5.8 – The New Context window
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – 新建上下文窗口
- en: Click on the target icon to only show findings for in-scope applications.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击目标图标，只有在范围内的应用程序才会显示发现的内容。
- en: 'Right-click the Contexts and click on **Spider…**, as shown in *Figure 5**.9*,
    to spider the website:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击上下文，点击 **蜘蛛爬取...**，如 *图 5.9* 所示，开始对网站进行爬取：
- en: '![Figure 5.9 – Spidering](image/Figure_05.09_B18829.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – 爬虫抓取](image/Figure_05.09_B18829.jpg)'
- en: Figure 5.9 – Spidering
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 爬虫抓取
- en: Doing so will add the spider to the bottom window of ZAP if it was not there,
    and you will see the progress bar.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做会将爬虫添加到 ZAP 的底部窗口（如果它不在那里），你会看到进度条。
- en: 'Once the spidering is complete, click on the **Alerts** tab in the bottom window.
    You can see that ZAP discovered that this application’s cookie does not contain
    the **HttpOnly** flag and the **SameSite** attribute, as shown in *Figure 5**.10*:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成蜘蛛爬取后，点击底部窗口中的 **警报** 标签。你会看到 ZAP 发现该应用程序的 cookie 没有包含 **HttpOnly** 标志和 **SameSite**
    属性，如 *图 5.10* 所示：
- en: '![Figure 5.10 – Cookie alerts](image/Figure_05.10_B18829.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10 – Cookie 警报](image/Figure_05.10_B18829.jpg)'
- en: Figure 5.10 – Cookie alerts
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – Cookie 警报
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作原理...
- en: In this lab, we have seen how ZAP can be used to test for missing cookie security
    attributes. ZAP contains built-in rules to trigger an alert if a cookie does not
    contain the security cookie attributes. ZAP discovers these findings passively;
    an active scan is not required.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，我们已经看到如何使用 ZAP 来测试缺失的 cookie 安全属性。ZAP 内置了规则，如果 cookie 缺少安全属性，会触发警报。ZAP
    被动地发现这些问题；无需进行主动扫描。
- en: Testing for cross-site request forgery (CSRF)
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试跨站请求伪造 (CSRF)
- en: In this recipe, we will cover how to perform CSRF, where we will be able to
    post a comment as a different user. The application needs to be secure as a CSRF
    vulnerability allows the attacker to take advantage and get users to change sensitive
    information without them knowing.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本实验中，我们将介绍如何执行 CSRF 攻击，在此过程中，我们能够以不同的用户身份发布评论。应用程序需要足够安全，因为 CSRF 漏洞允许攻击者利用该漏洞，使用户在不知情的情况下更改敏感信息。
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To prepare for this recipe, please start ZAP and Mutillidae II. Make sure that
    ZAP intercepts traffic from the Mutillidae II application. You will also need
    a testing account in Mutillidae II to post the message.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备这个实验，请启动 ZAP 和 Mutillidae II。确保 ZAP 拦截来自 Mutillidae II 应用程序的流量。你还需要一个 Mutillidae
    II 测试账户来发布消息。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The first step is to log in to Mutillidae II with the account you created and
    navigate to the blog, and while the proxy is enabled, submit a blog post in the
    application Using the drop-down, go to OWASP 2013, then to A8 - Cross Site Request
    Forgery (CSRF), and then to Add to your Blog. With the proxy enabled, submit a
    blog post in the application:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是使用你创建的账户登录到 Mutillidae II，导航到博客页面，并在启用代理的情况下，提交博客帖子。在应用程序中使用下拉菜单，进入 OWASP
    2013，再到 A8 - 跨站请求伪造 (CSRF)，然后添加到你的博客。在启用代理的情况下，提交博客帖子：
- en: '![Figure 5.11 – The Mutillidae Add Blog page](image/Figure_05.11_B18829.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.11 – Mutillidae 添加博客页面](image/Figure_05.11_B18829.jpg)'
- en: Figure 5.11 – The Mutillidae Add Blog page
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11 – Mutillidae 添加博客页面
- en: '![Figure 5.12 – Mutillidae Current Blog Entries](image/Figure_05.12_B18829.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.12 – Mutillidae 当前博客条目](image/Figure_05.12_B18829.jpg)'
- en: Figure 5.12 – Mutillidae Current Blog Entries
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 – Mutillidae 当前博客条目
- en: 'Go to ZAP Proxy and right click on the POST request, and click on **Generate
    Anti-CSRF** **test FORM**:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入 ZAP Proxy，右键点击 POST 请求，点击 **生成反-CSRF** **测试表单**：
- en: '![Figure 5.13 – Generate Anti-CSRF Test FORM](image/Figure_05.13_B18829.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.13 – 生成反-CSRF测试表单](image/Figure_05.13_B18829.jpg)'
- en: Figure 5.13 – Generate Anti-CSRF Test FORM
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – 生成反-CSRF测试表单
- en: 'This will open a screen with the fields and CSRF token on the page:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个屏幕，页面上显示表单字段和 CSRF 令牌：
- en: '![Figure 5.14 – Blog Entry csrf-token field](image/Figure_05.14_B18829.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.14 – 博客条目 csrf-token 字段](image/Figure_05.14_B18829.jpg)'
- en: Figure 5.14 – Blog Entry csrf-token field
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.14 – 博客条目 csrf-token 字段
- en: 'Log in as another user in the same browser, and then on the form, we are going
    to enter a random CSRF token and the attacker blog entry:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以另一个用户身份登录同一浏览器，然后在表单中输入随机的CSRF令牌和攻击者博客条目：
- en: '![Figure 5.15 – Mutillidae CSRF token field manipulation](image/Figure_05.15_B18829.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.15 – Mutillidae CSRF令牌字段操控](image/Figure_05.15_B18829.jpg)'
- en: Figure 5.15 – Mutillidae CSRF token field manipulation
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.15 – Mutillidae CSRF令牌字段操控
- en: 'Notice that after clicking the **Submit** button on the ZAP anti-CSRF form,
    the page redirects to the blog page with your blog entry submitted by the anti-CSRF
    form created by ZAP Proxy:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，在点击ZAP反CSRF表单上的**提交**按钮后，页面会重定向到博客页面，并提交了通过ZAP代理创建的反CSRF表单的博客条目：
- en: '![Figure 5.16– The CSRF payload](image/Figure_05.16_B18829.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.16 – CSRF有效载荷](image/Figure_05.16_B18829.jpg)'
- en: Figure 5.16– The CSRF payload
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.16 – CSRF有效载荷
- en: How it works...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: For this recipe, you were able to submit a request without any CSRF token to
    a victim user. This is done by abusing a misconfiguration on the application code
    that allows a request to be accepted without validating the CSRF token and the
    user that is logged into the application.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，你能够在没有任何CSRF令牌的情况下向受害者用户提交请求。这是通过滥用应用程序代码中的配置错误来完成的，该错误允许在没有验证CSRF令牌和已登录用户的情况下接受请求。
- en: Testing for logout functionality
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试注销功能
- en: This recipe focuses on testing the logout mechanism of the website. The logout
    mechanism is important in applications to terminate active sessions. Some attacks,
    such as cross-site scripting and CSRF, depend on having an active session present
    for a user account. Therefore, having well-built and configured logout functionality
    to terminate active sessions after a predefined time frame or after the user logout
    can help prevent cross-site scripting and CSRF attacks.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方专注于测试网站的注销机制。注销机制在应用程序中很重要，用于终止活动会话。一些攻击，如跨站脚本和CSRF，依赖于用户账户中存在活动会话。因此，拥有构建良好且配置合理的注销功能，可以帮助防止跨站脚本和CSRF攻击，通过在预定时间框架后或用户注销后终止活动会话。
- en: 'There are three elements that session termination requires and that should
    be tested for:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 会话终止需要测试的三个要素如下：
- en: The first one is a logout function. This usually appears as the logout button
    on most websites. The button should be present on all pages, and it should be
    noticeable so that the user cannot miss it when they decide to log out.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一项是注销功能。这通常表现为大多数网站上的注销按钮。该按钮应出现在所有页面上，并且应引人注意，确保用户在决定注销时不会错过。
- en: The second is the session timeout period. The session timeout period specifies
    the length of the inactivity period before a session is terminated.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二项是会话超时期。会话超时期指定会话在被终止之前的不活动时长。
- en: The third is server-side session termination. The application must ensure that
    the session state is terminated on the server side when a user logs out or the
    timeout period has been surpassed.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三项是服务器端会话终止。应用程序必须确保在用户注销或超时后，服务器端会话状态被终止。
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To get ready for this lab, ensure that OWASP Juice Shop is running and that
    ZAP is intercepting the communications between the browser and OWASP Juice Shop.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备这次实验，请确保OWASP Juice Shop正在运行，并且ZAP正在拦截浏览器与OWASP Juice Shop之间的通信。
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'In this lab, we will test to see whether the session is terminated on the server
    side when a user has logged out. Follow these steps to see how to do this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本实验中，我们将测试当用户注销时，服务器端会话是否被终止。按照以下步骤来查看如何做到这一点：
- en: Start the OWASP Juice Shop application.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动OWASP Juice Shop应用程序。
- en: Start ZAP and add OWASP Juice Shop to the scope.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动ZAP并将OWASP Juice Shop添加到范围中。
- en: Open Juice Shop and go to the login page.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Juice Shop并进入登录页面。
- en: Open ZAP and add a breakpoint by clicking on the green circle **Set break on
    all requests and responses** button. The green circle button will then turn red.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开ZAP并点击绿色圆圈**设置在所有请求和响应上断点**按钮来添加断点。绿色圆圈按钮会变为红色。
- en: Log in as the administrator. The administrator credentials are [admin@juice-sh.op](mailto:admin@juice-sh.op)
    for the email address and **admin123** as the password.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员身份登录。管理员凭据是[admin@juice-sh.op](mailto:admin@juice-sh.op)作为电子邮件地址，**admin123**作为密码。
- en: 'Click the **Step** button until you see the response to the login request that
    contains the token ID, as seen in *Figure 5**.17*. Then click on **Continue**:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**步骤**按钮，直到看到包含令牌 ID 的登录请求响应，如*图 5.17*所示。然后点击**继续**：
- en: '![Figure 5.17 – JWT token ID](image/Figure_05.17_B18829.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.17 – JWT 令牌 ID](image/Figure_05.17_B18829.jpg)'
- en: Figure 5.17 – JWT token ID
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.17 – JWT 令牌 ID
- en: 'In the Juice Shop application, click on **Account**, then **Orders & Payments**,
    and then click on **Order History**, as seen in *Figure 5**.18*:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Juice Shop 应用中，点击**账户**，然后点击**订单与支付**，接着点击**订单历史**，如*图 5.18*所示：
- en: '![Figure 5.18 – Order History to Orders & Payment](image/Figure_05.18_B18829.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.18 – 订单历史到订单与支付](image/Figure_05.18_B18829.jpg)'
- en: Figure 5.18 – Order History to Orders & Payment
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.18 – 订单历史到订单与支付
- en: Log out of Juice Shop by clicking on **Account** and then **Logout**.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**账户**，然后点击**注销**，以退出 Juice Shop。
- en: 'Open ZAP, and in the **History** tab, search for the GET request to the following
    **/rest/order-history** URL, as shown in *Figure 5**.19*:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 ZAP，在**历史**标签中，搜索以下**/rest/order-history** URL 的 GET 请求，如*图 5.19*所示：
- en: '![Figure 5.19 – The GET request of /rest/order-history](image/Figure_05.19_B18829.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.19 – /rest/order-history 的 GET 请求](image/Figure_05.19_B18829.jpg)'
- en: Figure 5.19 – The GET request of /rest/order-history
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.19 – /rest/order-history 的 GET 请求
- en: 'Right-click the request and select **Open/Resend with Request Editor…**, as
    shown in *Figure 5**.20*:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击请求，选择**用请求编辑器打开/重新发送...**，如*图 5.20*所示：
- en: '![Figure 5.20 – Request Editor](image/Figure_05.20_B18829.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.20 – 请求编辑器](image/Figure_05.20_B18829.jpg)'
- en: Figure 5.20 – Request Editor
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.20 – 请求编辑器
- en: This will open the **Manual Request Editor**. In the request editor, you can
    edit the request.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开**手动请求编辑器**。在请求编辑器中，你可以编辑请求。
- en: 'Click on **Send** to resend the request:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**发送**以重新发送请求：
- en: '![Figure 5.21 – Manual Request Editor Send](image/Figure_05.21_B18829.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.21 – 手动请求编辑器发送](image/Figure_05.21_B18829.jpg)'
- en: Figure 5.21 – Manual Request Editor Send
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.21 – 手动请求编辑器发送
- en: 'After sending the request, the **Response** tab will open, which will include
    the server response. You can see that the request was accepted, and the response
    included the order history of the admin user, as shown in *Figure 5**.22*:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发送请求后，**响应**标签将打开，其中将包括服务器的响应。你可以看到请求被接受，并且响应中包含了管理员用户的订单历史，如*图 5.22*所示：
- en: '![Figure 5.22 – Order history response](image/Figure_05.22_B18829.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.22 – 订单历史响应](image/Figure_05.22_B18829.jpg)'
- en: Figure 5.22 – Order history response
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.22 – 订单历史响应
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this lab, we resent a request as the admin user after the user has already
    signed out. The request was accepted by the server, and a response was sent with
    the user’s information, which proves that even though we have logged out as the
    admin user, the application has not terminated the admin user’s session in the
    backend, which allowed us to perform unauthorized action.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，我们作为管理员用户在用户已经注销后重新发送请求。该请求被服务器接受，且返回了包含用户信息的响应，这证明即使我们作为管理员用户已经注销，应用程序并没有在后台终止管理员用户的会话，这使得我们能够执行未经授权的操作。
- en: There’s more...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: Other types of logout functionality tests, such as session timeout, can be tested
    by waiting at incremental times (i.e., 15 minutes, 30 minutes, 1 hour, 1 day).
    To test, log in to the application and set a timer. Wait at incremental times
    to hopefully obtain a successful logout. Once the time has passed, attempt to
    refresh the web application page, perform an action on the application, or resend
    a request to trigger a session timeout on applications.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 其他类型的注销功能测试，例如会话超时，可以通过等待递增时间进行测试（即 15 分钟、30 分钟、1 小时、1 天）。测试时，登录应用程序并设置计时器，等待递增的时间段，希望能够成功注销。时间过后，尝试刷新网页应用页面、在应用程序上执行操作，或重新发送请求以触发应用程序的会话超时。
- en: See also
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'A similar attack that exploits session variables is Session Puzzling or Session
    Variable Overloading. Applications that use session variables for multiple purposes
    are vulnerable to this kind of attack. The following link contains more information
    about this type of attack: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/08-Testing_for_Session_Puzzling](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/08-Testing_for_Session_Puzzling).'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种利用会话变量的攻击是会话拼图攻击或会话变量重载攻击。使用会话变量处理多个目的的应用程序容易受到这种攻击。有关这种攻击的更多信息，请参见以下链接：[https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/08-Testing_for_Session_Puzzling](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/08-Testing_for_Session_Puzzling)。
- en: Testing for session hijacking
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试会话劫持
- en: In this recipe, we will be walking through how to hijack a session by exploiting
    a web session’s control mechanism, known as the session token, and using this
    token, aka cookie, to take over an unsuspecting user’s session. Common compromises
    are due to tokens being predictable through session sniffing, malicious JavaScript
    code (i.e., XSS, CSRF), or **machine-in-the-middle** (**MiTM**) attacks.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将演示如何通过利用web会话控制机制（即会话令牌）劫持会话，并使用该令牌（即cookie）接管一个不知情用户的会话。常见的漏洞包括会话嗅探、恶意JavaScript代码（如XSS、CSRF）或**中间人攻击**（**MiTM**）导致令牌可预测。
- en: We will use MiTM attacks to steal a session token via a cross-site scripting
    attack and replay the stolen token on another user that will compromise their
    session, logging into that user’s authenticated Juice Shop account.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用MiTM攻击通过跨站脚本攻击盗取会话令牌，并将盗取的令牌重放到另一个用户的会话中，进而劫持该用户的Juice Shop账户。
- en: Getting ready
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To prepare for this recipe, please start ZAP and OWASP Juice Shop. Make sure
    that ZAP intercepts traffic at the OWASP Juice Shop application home page, and
    register/create two different users.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备此教程，请启动ZAP和OWASP Juice Shop。确保ZAP在OWASP Juice Shop应用程序主页拦截流量，并注册/创建两个不同的用户。
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行...
- en: We’ll lead you through steps on how to conduct session hijacking by utilizing
    two users in OWASP Juice Shop, capturing a session cookie or token via MiTM and
    loading this into a different user’s request, hijacking that session, and authenticating
    to a user’s account.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将引导您通过以下步骤，教您如何利用OWASP Juice Shop中的两个用户进行会话劫持，通过MiTM攻击捕获会话cookie或令牌，并将其加载到另一个用户的请求中，劫持该会话并验证用户账户。
- en: 'The following steps guide you through this process:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导您完成此过程：
- en: 'Open ZAP’s **Manual Explore** page, enter the Juice Shop URL, and click on
    **Launch Browser**, as seen in *Figure 5**.23*:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开ZAP的**手动探索**页面，输入Juice Shop URL，并点击**启动浏览器**，如*图 5.23*所示：
- en: '![Figure 5.23 – Manual Explore in the Juice Shop URL](image/Figure_05.23_B18829.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.23 – Juice Shop URL中的手动探索](image/Figure_05.23_B18829.jpg)'
- en: Figure 5.23 – Manual Explore in the Juice Shop URL
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.23 – Juice Shop URL中的手动探索
- en: Start by going to **Account** to **Login** to **Not Yet** **a Customer**.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，进入**账户**，选择**登录**，然后选择**还不是客户**。
- en: Create a **User1@email.com** with any password and anything for the security
    question.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**User1@email.com**，密码可以随便设置，安全问题也随便填写。
- en: After creating the first user, repeat *step 1* and *step 2* to create a **User2@email.com**.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第一个用户后，重复*步骤 1*和*步骤 2*来创建**User2@email.com**。
- en: Log in to Juice Shop with the *User1* account.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*User1*账户登录到Juice Shop。
- en: Set break on all requests and responses and refresh the logged-in web page of
    *User1*.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有请求和响应上设置断点，并刷新*User1*的已登录网页。
- en: 'This can be achieved either through the **Manual Explore** browser that was
    launched or in the Workspace Window:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过启动的**手动探索**浏览器或工作区窗口来实现：
- en: '![Figure 5.24 – Set break on all requests and responses](image/Figure_05.24_B18829.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.24 – 在所有请求和响应上设置断点](image/Figure_05.24_B18829.jpg)'
- en: Figure 5.24 – Set break on all requests and responses
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.24 – 在所有请求和响应上设置断点
- en: In ZAP, you will see a new tab open called **Break**, as seen in *Figure 5**.25*,
    in the **Workspace Window** that captured the *User1* session (JWT) token.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ZAP中，您将看到一个新的标签页，名为**Break**，如*图 5.25*所示，它会显示捕获的*User1*会话（JWT）令牌。
- en: 'Copy all text between **token=** and **Upgrade-Insecure-Requests** from the
    request:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制请求中**token=**和**Upgrade-Insecure-Requests**之间的所有文本：
- en: '![Figure 5.25 – Captured session token](image/Figure_05.25_B18829.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图5.25 – 捕获的会话令牌](image/Figure_05.25_B18829.jpg)'
- en: Figure 5.25 – Captured session token
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.25 – 捕获的会话令牌
- en: Log out of *User1* and log in with *User2*.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登出*User1*账户并使用*User2*账户登录。
- en: While logged in as *User2*, open the browser **Inspect** tool and go to the
    **Storage** tab.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以*User2*身份登录的状态下，打开浏览器的**检查**工具并转到**存储**标签。
- en: In the cookies’ jar, click to open the drop-down menu and select the Juice Shop
    URL.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Cookies的储存区中，点击打开下拉菜单并选择Juice Shop网址。
- en: Replace the token element of *User2* with the session token of *User1* and hit
    *Enter* on the keyboard.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将*User2*的令牌元素替换为*User1*的会话令牌，然后按下键盘上的*Enter*键。
- en: Refresh the browser web page and open the **Account** menu of Juice Shop. It
    will now show *User1* as being logged in instead of *User2*, successfully hijacking
    *User1*’s session.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新浏览器网页并打开Juice Shop的**账户**菜单。现在将显示*User1*已经登录，而不是*User2*，成功劫持了*User1*的会话。
- en: How it works...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: The act of taking control of a user’s session without the user’s knowledge or
    consent is known as session hijacking. This may be accomplished by obtaining the
    user’s **JSON Web Token** (**JWT**), a token used to authenticate users in a web
    application.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 用户会话在未获得用户知情或同意的情况下被控制的行为称为会话劫持。此操作通常通过获取用户的**JSON Web Token**（**JWT**）来实现，该令牌用于在网页应用程序中验证用户身份。
- en: An attacker who obtains a victim’s JWT can impersonate the victim and acquire
    access to the victim’s account. This is accomplished by putting the stolen JWT
    in the HTTP header of a web application request. Because the JWT seems to be authentic
    and provided by the application, the application will treat the request as if
    it came from the victim.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 获取受害者JWT的攻击者可以冒充受害者并访问其账户。这是通过将被窃取的JWT放入网页应用请求的HTTP头部来实现的。由于JWT看起来是合法的，并且由应用程序提供，应用程序会将请求当作来自受害者的请求处理。
- en: Attackers can gain a victim’s JWT in a variety of ways, including phishing attacks,
    MiTM attacks, and exploiting weaknesses in the application or the victim’s device.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以通过多种方式获取受害者的JWT，包括网络钓鱼攻击、中间人攻击（MiTM）以及利用应用程序或受害者设备中的弱点。
- en: There’s more...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: ZAP can scan for JWT token vulnerabilities by going into **Options** and scrolling
    down to the **JWT** settings within **General** | **Enable Client Configuration
    Scan**. Later, in [*Chapter 10*](B18829_10.xhtml#_idTextAnchor362), *Advanced
    Attack Techniques*, within the *Working with JSON Web Tokens* recipe, we’ll review
    how this is used and abused in ZAP. In addition, these tokens can be decoded using
    the **Encode/Decode/Hash** tool to see what is contained within, such as the header
    algorithm, username, password, token expiration, and so on. In *Chapter 12*, we’ll
    further discuss the structure of JWT tokens, how to decode them, and showcase
    attacks that can be attempted.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: ZAP可以通过进入**选项**并滚动到**常规**中的**JWT**设置来扫描JWT令牌漏洞，勾选**启用客户端配置扫描**。稍后，在[*第10章*](B18829_10.xhtml#_idTextAnchor362)，“*高级攻击技术*”中，在*操作JSON
    Web令牌*这一食谱中，我们将回顾如何在ZAP中使用和滥用它。此外，这些令牌可以通过**编码/解码/哈希**工具进行解码，以查看其中的内容，如头部算法、用户名、密码、令牌过期时间等。在*第12章*中，我们将进一步讨论JWT令牌的结构、如何解码它们，并展示可以尝试的攻击方法。
- en: See also
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Consider further reading to understand session hijacking and to understand
    remediations for this type of attack:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步理解会话劫持及其缓解方法，可以考虑阅读更多资料：
- en: '[https://owasp.org/www-community/attacks/Session_hijacking_attack#](https://owasp.org/www-community/attacks/Session_hijacking_attack#)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://owasp.org/www-community/attacks/Session_hijacking_attack#](https://owasp.org/www-community/attacks/Session_hijacking_attack#)'
- en: '[https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)'
- en: '[https://owasp.deteact.com/cheat/cheatsheets/Input_Validation_Cheat_Sheet.html](https://owasp.deteact.com/cheat/cheatsheets/Input_Validation_Cheat_Sheet.html)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://owasp.deteact.com/cheat/cheatsheets/Input_Validation_Cheat_Sheet.html](https://owasp.deteact.com/cheat/cheatsheets/Input_Validation_Cheat_Sheet.html)'
