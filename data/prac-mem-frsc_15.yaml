- en: 'Chapter 11: Malware Detection and Analysis with macOS Memory Forensics'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章：利用 macOS 内存取证进行恶意软件检测与分析
- en: Previously, attacks on macOS, as well as the development of specific malware
    for this operating system, were single events and were often limited to trivial
    adware. In 2020–2021, the main threat to macOS was still the adware **Shlayer**
    ([https://redcanary.com/threat-detection-report/threats/shlayer/](https://redcanary.com/threat-detection-report/threats/shlayer/)),
    but we are increasingly seeing targeted attacks with advanced threat actors behind
    them. A good example is **APT32** or **OceanLotus**, a Vietnamese-linked group,
    which targeted macOS users with backdoors, delivered via malicious Microsoft Word
    documents.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，针对 macOS 的攻击以及针对该操作系统特定恶意软件的开发，通常是偶发事件，并且常常局限于琐碎的广告软件。在 2020 到 2021 年期间，macOS
    面临的主要威胁仍然是广告软件 **Shlayer**（[https://redcanary.com/threat-detection-report/threats/shlayer/](https://redcanary.com/threat-detection-report/threats/shlayer/)），但我们越来越多地看到背后有先进威胁行为者的定向攻击。一个典型例子是
    **APT32** 或 **OceanLotus**，这是一个与越南相关的组织，曾通过恶意的 Microsoft Word 文档向 macOS 用户传播后门。
- en: 'The growing popularity of macOS in enterprise environments has triggered the
    appearance of various macOS post-exploitation tools: **MacShellSwift**, **MacC2**,
    **PoshC2**, and the **Empire** post-exploitation framework. Moreover, **Malware-as-a-Service**
    for macOS ([https://www.computerworld.com/article/3626431/scary-malware-as-a-service-mac-attack-discovered.html](https://www.computerworld.com/article/3626431/scary-malware-as-a-service-mac-attack-discovered.html))
    has already appeared on darknet forums.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: macOS 在企业环境中日益流行，促使了各种 macOS 后渗透工具的出现：**MacShellSwift**、**MacC2**、**PoshC2**
    和 **Empire** 后渗透框架。此外，针对 macOS 的 **恶意软件即服务**（[https://www.computerworld.com/article/3626431/scary-malware-as-a-service-mac-attack-discovered.html](https://www.computerworld.com/article/3626431/scary-malware-as-a-service-mac-attack-discovered.html)）已经出现在暗网论坛上。
- en: Not surprisingly, new devices powered by M1 chips have not escaped the attention
    of cyber criminals either. Thus, **Red Canary** specialists recently discovered
    a new malware, Silver Sparrow, targeting Macs equipped with the new M1 processors
    ([https://www.macworld.co.uk/news/new-malware-m1-mac-3801981/](https://www.macworld.co.uk/news/new-malware-m1-mac-3801981/)).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 不足为奇的是，搭载 M1 芯片的新设备也没有逃脱网络犯罪分子的关注。因此，**Red Canary** 的专家最近发现了一种新的恶意软件 Silver
    Sparrow，专门攻击配备新 M1 处理器的 Mac（[https://www.macworld.co.uk/news/new-malware-m1-mac-3801981/](https://www.macworld.co.uk/news/new-malware-m1-mac-3801981/)）。
- en: 'All this news tells us one thing: we need to know the tools and understand
    macOS analysis techniques. That is what this chapter will focus on.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些新闻告诉我们一件事：我们需要了解工具并掌握 macOS 分析技术。这正是本章将要重点讨论的内容。
- en: 'Here are the topics that will be covered:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将要覆盖的主题：
- en: Learning the peculiarities of macOS analysis with Volatility
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Volatility 学习 macOS 分析的特点
- en: Investigating network connections
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查网络连接
- en: Analyzing processes and process memory
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析进程和进程内存
- en: Recovering the filesystem
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恢复文件系统
- en: Obtaining user application data
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取用户应用程序数据
- en: Searching for malicious activity
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻找恶意活动
- en: Learning the peculiarities of macOS analysis with Volatility
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Volatility 学习 macOS 分析的特点
- en: In the previous chapter, we talked about the difficulties you may encounter
    when creating memory dumps and corresponding profiles for Volatility on macOS.
    However, that is not all. As you remember, Volatility relies on the Kernel Debug
    Kit to create macOS profiles in order to get all the data you need for parsing.
    This data is critical to the tool's performance because the data structures and
    algorithms used change from one kernel version to the next. At the same time,
    Apple no longer includes all the type information in the KDK, which leads to errors
    in the execution of many plugins. Another problem is that some Volatility plugins
    for macOS use Intel-specific data. Thus, plugins that work on memory dumps pulled
    from hosts on Intel may not work with dumps pulled from hosts on M1\. Further
    on, we will use plugins that work for both Intel and M1 where it is possible,
    and where it is impossible, we will try to specify all the nuances. Besides, since
    the analysis methodology itself and searching for anomalies in macOS memory dumps
    will not differ significantly from those in Windows and Linux, this time we will
    focus on discussing tools and methods for obtaining certain information, rather
    than on the investigation methodology itself.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了在macOS上创建内存转储和相应配置文件时可能遇到的困难。然而，这并非全部。如您所知，Volatility依赖于内核调试工具包（Kernel
    Debug Kit，KDK）来创建macOS配置文件，以获取解析所需的所有数据。此数据对工具的性能至关重要，因为使用的数据结构和算法会随着内核版本的不同而变化。同时，Apple不再在KDK中包含所有类型信息，这导致许多插件在执行时出现错误。另一个问题是，某些Volatility插件使用了Intel特定的数据。因此，适用于从Intel主机提取的内存转储的插件可能无法与从M1主机提取的转储一起使用。接下来，我们将使用适用于Intel和M1的插件（如果可能的话），在不适用的情况下，我们将尽力说明所有细节。此外，由于分析方法本身和在macOS内存转储中寻找异常的过程与Windows和Linux没有显著差异，这次我们将重点讨论获取特定信息的工具和方法，而不是具体的调查方法。
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To analyze macOS memory dumps, we will use both Linux and Windows systems. We
    will still work with Volatility 2.6.1 running on Ubuntu 21.04 (Hirsute) and programs
    such as Bulk Extractor will run on Windows. For the examples, we will use memory
    dumps from macOS Sierra 10.12.6, however, all the described manipulations can
    be applied to newer macOS versions as well.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了分析macOS内存转储，我们将同时使用Linux和Windows系统。我们仍然会在Ubuntu 21.04（Hirsute）上运行Volatility
    2.6.1，并且像Bulk Extractor这样的程序将运行在Windows上。在示例中，我们将使用来自macOS Sierra 10.12.6的内存转储，但所有描述的操作也可以应用于更新版本的macOS。
- en: Investigating network connections
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调查网络连接
- en: Network activity analysis helps us determine which processes are establishing
    network connections, as well as which IP addresses and ports are being used. Since
    most malware and post-exploitation tools establish network connections, investigating
    network activity is one of our top priorities. In the case of macOS, Volatility
    offers a number of plugins to examine network interfaces, active network connections,
    and the contents of routing tables.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 网络活动分析帮助我们确定哪些进程正在建立网络连接，以及使用了哪些IP地址和端口。由于大多数恶意软件和后期利用工具都会建立网络连接，因此调查网络活动是我们的首要任务之一。在macOS的情况下，Volatility提供了多个插件来检查网络接口、活动网络连接以及路由表的内容。
- en: 'We can use the `mac_ifconfig` plugin to get information about the configuration
    of the network interfaces of the host under investigation:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`mac_ifconfig`插件获取有关被调查主机网络接口配置的信息：
- en: '![Figure 11.1 – Volatility mac_ifconfig output'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.1 – Volatility mac_ifconfig 输出'
- en: '](img/Figure_11.1_B17056.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.1_B17056.jpg)'
- en: Figure 11.1 – Volatility mac_ifconfig output
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – Volatility mac_ifconfig 输出
- en: As you can see in the figure, this plugin provides information about the names
    of interfaces, their assigned IP and MAC addresses, as well as the set promiscuous
    mode.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，该插件提供了有关接口名称、分配的IP和MAC地址，以及设置的混杂模式的信息。
- en: Important Note
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Promiscuous mode is a mode for a network interface controller that forces the
    controller to pass all the incoming traffic to the CPU, rather than passing only
    frames that the controller is programmed to receive.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 混杂模式是一种网络接口控制器模式，它强制控制器将所有传入的流量传递给CPU，而不仅仅是传递控制器被编程接收的帧。
- en: 'In our case, we see the following interfaces:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们看到以下接口：
- en: '`lo0` – Loopback Interface'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lo0` – 回环接口'
- en: '`gif0` – Software Network Interface'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gif0` – 软件网络接口'
- en: '`stf0` – 6to4 Tunnel Interface'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stf0` – 6to4隧道接口'
- en: '`en0` – Ethernet with IPv4 and IPv6 addresses'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`en0` – 带有IPv4和IPv6地址的以太网'
- en: '`utun0` – VPN and Back to My Mac Interface'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utun0` – VPN 和“回到我的 Mac”接口'
- en: 'You can use the `mac_netstat` and `mac_network_conns` plugins to get information
    about network connections. The first plugin will show us information about both
    active connections and open sockets:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `mac_netstat` 和 `mac_network_conns` 插件来获取关于网络连接的信息。第一个插件将显示关于活动连接和开放套接字的信息：
- en: '![Figure 11.2 – Volatility mac_netstat output'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.2 – Volatility mac_netstat 输出'
- en: '](img/Figure_11.2_B17056.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.2_B17056.jpg)'
- en: Figure 11.2 – Volatility mac_netstat output
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – Volatility mac_netstat 输出
- en: 'At the same time, `mac_network_conns` provides information only about network
    connections:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，`mac_network_conns` 插件仅提供网络连接的信息：
- en: '![Figure 11.3 – Volatility mac_network_conns output](img/Figure_11.3_B17056.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.3 – Volatility mac_network_conns 输出](img/Figure_11.3_B17056.jpg)'
- en: Figure 11.3 – Volatility mac_network_conns output
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – Volatility mac_network_conns 输出
- en: 'In addition to network connection analysis, Volatility provides the possibility
    to study the routing table. The `mac_route` plugin is suitable for this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了网络连接分析，Volatility 还提供了研究路由表的功能。`mac_route` 插件适用于此：
- en: '![Figure 11.4 – Volatility mac_route output'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.4 – Volatility mac_route 输出'
- en: '](img/Figure_11.4_B17056.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.4_B17056.jpg)'
- en: Figure 11.4 – Volatility mac_route output
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – Volatility mac_route 输出
- en: In the output of this plugin, we can see source and destination IP addresses,
    the name of the interface, and starting from OS X 10.7, we can also see sent/received
    statistics and expiration/delta times.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个插件的输出中，我们可以看到源 IP 和目标 IP 地址、接口名称，并且从 OS X 10.7 开始，我们还可以看到发送/接收统计数据和过期/时间差。
- en: 'Another way to inspect network activity is to use the Bulk Extractor tool and
    the well-known net parser:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种检查网络活动的方式是使用 Bulk Extractor 工具和著名的 net 解析器：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As a result, we get the `packets.pcap` file, which contains the network capture
    from the memory dump. To analyze this file we can, as before, use **Wireshark**:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，我们得到一个 `packets.pcap` 文件，里面包含了来自内存转储的网络捕获数据。为了分析这个文件，我们可以像之前一样，使用 **Wireshark**：
- en: '![Figure 11.5 – Network capture analysis'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.5 – 网络捕获分析'
- en: '](img/Figure_11.5_B17056.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.5_B17056.jpg)'
- en: Figure 11.5 – Network capture analysis
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 网络捕获分析
- en: In this way, we can get information about the network activity on macOS. A natural
    complement to investigating the network is to look at active processes. This is
    what we will talk about next.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们可以获取关于 macOS 网络活动的信息。研究网络活动的自然补充是查看活动进程。这就是我们接下来要讨论的内容。
- en: Analyzing processes and process memory
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析进程和进程内存
- en: Processes can be analyzed both to look for anomalies and identify potentially
    malicious processes, and to observe user activity. As before, Volatility provides
    a number of plugins for obtaining data about processes and their memory. For example,
    the `mac_pslist`, `mac_pstree`, and `mac_tasks` plugins can be used to get a list
    of processes. From a practical point of view, `mac_tasks` is considered the most
    reliable source of information on active processes. This plugin, unlike `mac_pslist`,
    enumerates tasks and searches for the process objects instead of relying on a
    linked list of processes, which can be corrupted during macOS memory acquisition.
    Nevertheless, during testing on the latest versions of the operating system, the
    `mac_pstree` plugin turns out to be the most efficient, correctly displaying results
    for macOS on both Intel and M1 chips.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 进程可以被分析，用来寻找异常、识别潜在的恶意进程，以及观察用户活动。与之前一样，Volatility 提供了多个插件用于获取关于进程及其内存的数据。例如，`mac_pslist`、`mac_pstree`
    和 `mac_tasks` 插件可以用来获取进程列表。从实际操作的角度来看，`mac_tasks` 被认为是获取活动进程信息的最可靠来源。与 `mac_pslist`
    不同，`mac_tasks` 插件枚举任务并搜索进程对象，而不是依赖于可能在 macOS 内存获取过程中被损坏的进程链表。然而，在最新版本的操作系统上测试时，`mac_pstree`
    插件表现得最为高效，能够正确显示针对 Intel 和 M1 芯片的 macOS 结果。
- en: 'The plugins are launched in the same way as for Windows and Linux:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的启动方式与 Windows 和 Linux 相同：
- en: '![Figure 11.6 – Volatility mac_pstree output'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.6 – Volatility mac_pstree 输出'
- en: '](img/Figure_11.6_B17056.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.6_B17056.jpg)'
- en: Figure 11.6 – Volatility mac_pstree output
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – Volatility mac_pstree 输出
- en: 'In addition to the list of processes themselves, we are of course also interested
    in the arguments used to start these processes. To get this data, we can use the
    `mac_psaux` plugin:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了进程本身的列表，我们当然也对启动这些进程时使用的参数感兴趣。为了获取这些数据，我们可以使用 `mac_psaux` 插件：
- en: '![Figure 11.7 – Volatility mac_psaux output'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.7 – Volatility mac_psaux 输出'
- en: '](img/Figure_11.7_B17056.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.7_B17056.jpg)'
- en: Figure 11.7 – Volatility mac_psaux output
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.7 – Volatility mac_psaux 输出
- en: In the output of this plugin, you can find not only arguments but also full
    paths to executable files. However, when working with memory dumps taken from
    macOS on an M1 chip, this plugin can work incorrectly and cause errors.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在此插件的输出中，你不仅可以找到参数，还可以找到可执行文件的完整路径。然而，在处理从带有 M1 芯片的 macOS 获取的内存转储时，这个插件可能无法正常工作并导致错误。
- en: 'In addition to the startup arguments of the processes, we should not forget
    about the history of the command line. In this case, we can use the `mac_bash`
    plugin, which retrieves commands executed in the shell, and the `mac_bash_hash`
    plugin, which displays the command alias hash table. Another way to find such
    information is to investigate the memory of the processes related to the Terminal
    application. We can extract executables and process memory for analysis with the
    `mac_procdump` and `mac_memdump` plugins respectively. However, at the moment,
    these plugins only correctly extract data for memory dumps obtained from hosts
    with an Intel chip. Despite this, for both Intel and M1 chips, we still have an
    opportunity to examine allocated memory blocks in each process, their permissions,
    and the names of the mapped files. This can be done with the `mac_proc_maps` plugin:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 除了进程的启动参数外，我们还不能忘记命令行的历史记录。在这种情况下，我们可以使用 `mac_bash` 插件，它可以检索在 shell 中执行的命令，以及
    `mac_bash_hash` 插件，它显示命令别名的哈希表。另一种获取此类信息的方法是调查与终端应用程序相关的进程内存。我们可以分别使用 `mac_procdump`
    和 `mac_memdump` 插件提取可执行文件和进程内存进行分析。然而，目前这些插件只能正确提取从具有 Intel 芯片的主机获得的内存转储数据。尽管如此，对于
    Intel 和 M1 芯片，我们仍然有机会检查每个进程中分配的内存块、它们的权限以及映射文件的名称。这可以通过 `mac_proc_maps` 插件来完成：
- en: '![Figure 11.8 – Volatility mac_proc_maps output'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.8 – Volatility mac_proc_maps 输出'
- en: '](img/Figure_11.8_B17056.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.8_B17056.jpg)'
- en: Figure 11.8 – Volatility mac_proc_maps output
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8 – Volatility mac_proc_maps 输出
- en: 'As you can see in *Figure 11.8*, in the output of this plugin, we can find
    information about the files used by the process as well as their full path on
    disk. If necessary, we can also retrieve these memory blocks with the `mac_dump_maps`
    plugin. If we are interested in a particular block, we can specify its start address
    with the `-s` option, as shown next:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在 *图 11.8* 中所见，在此插件的输出中，我们可以找到进程所使用的文件及其在磁盘上的完整路径。如果需要，我们还可以使用 `mac_dump_maps`
    插件提取这些内存块。如果我们对特定的内存块感兴趣，可以使用 `-s` 选项指定其起始地址，如下所示：
- en: '![Figure 11.9 – Volatility mac_dump_maps results'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.9 – Volatility mac_dump_maps 结果'
- en: '](img/Figure_11.9_B17056.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.9_B17056.jpg)'
- en: Figure 11.9 – Volatility mac_dump_maps results
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – Volatility mac_dump_maps 结果
- en: As you can see, the contents of the first Siri process memory block have been
    successfully extracted and can be analyzed separately by additional tools. This
    way, we can try to extract executables, libraries, and other files. However, there
    is one more way of analyzing and extracting process-related files. Let's discuss
    it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，第一个 Siri 进程内存块的内容已成功提取，并且可以通过其他工具单独进行分析。通过这种方式，我们可以尝试提取可执行文件、库和其他文件。然而，还有一种分析和提取与进程相关文件的方法。让我们来讨论一下。
- en: Recovering the filesystem
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恢复文件系统
- en: 'The methods of dealing with the filesystem in macOS memory are also not unique.
    First of all, we can examine the open file descriptors of a process using the
    `mac_lsof` plugin. Its launch, as well as the output format, does not differ from
    the corresponding plugin for Linux:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 macOS 内存中文件系统的方法也并非独特。首先，我们可以使用 `mac_lsof` 插件检查进程的打开文件描述符。它的启动和输出格式与 Linux
    对应的插件没有区别：
- en: '![Figure 11.10 – Volatility mac_lsof output'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.10 – Volatility mac_lsof 输出'
- en: '](img/Figure_11.10_B17056.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.10_B17056.jpg)'
- en: Figure 11.10 – Volatility mac_lsof output
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – Volatility mac_lsof 输出
- en: 'As you see, here we can also use the `-p` option to identify a specific process
    and see the files related to it. In addition, we can collect information about
    all the files stored in the file cache. The `mac_list_files` plugin will help
    us with this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们还可以使用 `-p` 选项来标识特定进程并查看与之相关的文件。此外，我们还可以收集有关文件缓存中存储的所有文件的信息。`mac_list_files`
    插件将帮助我们完成这项工作：
- en: '![Figure 11.11 – Volatility mac_list_files output'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.11 – Volatility mac_list_files 输出'
- en: '](img/Figure_11.11_B17056.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.11_B17056.jpg)'
- en: Figure 11.11 – Volatility mac_list_files output
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.11 – Volatility mac_list_files 输出
- en: 'You can use the `mac_recover_filesystem` plugin to export files. Of course,
    Volatility also has the `mac_dump_file` plugin, for exporting specific files,
    but at the moment, this plugin shows poor results with the latest versions of
    macOS. The process for starting the `mac_recover_filesystem` plugin also remains
    the same:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `mac_recover_filesystem` 插件来导出文件。当然，Volatility 也有 `mac_dump_file` 插件，用于导出特定文件，但目前该插件在最新版本的
    macOS 上显示出不佳的效果。启动 `mac_recover_filesystem` 插件的过程仍然保持不变：
- en: '[PRE1]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The contents of the output folder in our case look like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，输出文件夹的内容如下所示：
- en: '![Figure 11.12 – Volatility mac_recover_filesystem results'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.12 – Volatility mac_recover_filesystem 结果'
- en: '](img/Figure_11.12_B17056.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.12_B17056.jpg)'
- en: Figure 11.12 – Volatility mac_recover_filesystem results
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.12 – Volatility mac_recover_filesystem 结果
- en: 'This way, we can recover the main locations and various files from the cached
    filesystem. Here, you can also find files related to a user''s bash history:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们可以从缓存的文件系统中恢复主要位置和各种文件。在这里，你还可以找到与用户的 bash 历史相关的文件：
- en: '![Figure 11.13 – Recovered bash history files'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.13 – 恢复的 bash 历史文件'
- en: '](img/Figure_11.13_B17056.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.13_B17056.jpg)'
- en: Figure 11.13 – Recovered bash history files
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13 – 恢复的 bash 历史文件
- en: The disadvantage of the plugin is that it currently does not work correctly
    on memory dumps collected from hosts with an M1 chip. If you work with older versions
    of macOS, you can also use the **PhotoRec** tool, which supports the HFS+ filesystem.
    This option is available for versions before High Sierra, since the default filesystem
    for mac computers using macOS 10.13 or later is APFS.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件的缺点是，它目前在从带有 M1 芯片的主机收集的内存转储上无法正常工作。如果你使用的是旧版本的 macOS，你还可以使用 **PhotoRec**
    工具，它支持 HFS+ 文件系统。此选项适用于 High Sierra 之前的版本，因为 macOS 10.13 或更高版本的默认文件系统是 APFS。
- en: As you can see, exporting files from macOS memory is not an easy task, especially
    when it comes to the latest versions of the operating system. Nevertheless, there
    are some positive aspects. One of them is the ability to retrieve data from specific
    user applications quite easily.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，从 macOS 内存中导出文件并非易事，特别是对于最新版本的操作系统。然而，也有一些积极的方面。其中之一是能够相对容易地从特定用户应用程序中恢复数据。
- en: Obtaining user application data
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取用户应用数据
- en: 'By default, macOS users have access to built-in applications from Apple, such
    as Calendar, Contacts, and Notes. Due to their quality and convenience, these
    applications have won the love of users, as well as the interest of investigators.
    Volatility provides a set of ready-to-use plugins allowing you to extract data
    from the above-mentioned applications. For example, to retrieve events from `Calendar.app`,
    you can use the `mac_calendar` plugin. To retrieve the contents of Notes messages,
    you can use `mac_notesapp`, and for contacts from `Contacts.app`, you can use
    `mac_contacts`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，macOS 用户可以访问 Apple 提供的内建应用程序，如日历、联系人和备忘录。由于这些应用程序的高质量和便捷性，它们赢得了用户的喜爱，也吸引了调查人员的兴趣。Volatility
    提供了一套现成的插件，允许你提取上述应用程序中的数据。例如，要从 `Calendar.app` 中恢复事件，可以使用 `mac_calendar` 插件。要恢复备忘录中的内容，可以使用
    `mac_notesapp`，而要恢复 `Contacts.app` 中的联系人，则可以使用 `mac_contacts`：
- en: '[PRE2]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once you have this data, you can use regular expressions or YARA rules with
    the `mac_yarascan` plugin to try to find more information about the contact. For
    example, the email address associated with the contact.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得了这些数据，你可以使用正则表达式或 YARA 规则与 `mac_yarascan` 插件一起尝试找到更多关于该联系人的信息。例如，与该联系人相关的电子邮件地址。
- en: 'Since we are talking about user activity, we should not forget the more general
    plugins that allow us to get data on what programs the user is running or what
    devices have been connected. In the first case, we use those same plugins to analyze
    the running processes. At the same time, if there is a need to associate a process
    with a specific user, we can use the `mac_list_sessions` plugin, which enumerates
    sessions from the session hash table. The way this plugin works is as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们讨论的是用户活动，我们不应忘记那些更为通用的插件，它们允许我们获取有关用户正在运行的程序或已连接的设备的数据。在第一种情况下，我们使用相同的插件来分析正在运行的进程。同时，如果需要将某个进程与特定用户关联，我们可以使用
    `mac_list_sessions` 插件，它从会话哈希表中枚举会话。该插件的工作方式如下：
- en: '![Figure 11.14 – Volatility mac_list_sessions output'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.14 – Volatility mac_list_sessions 输出'
- en: '](img/Figure_11.14_B17056.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.14_B17056.jpg)'
- en: Figure 11.14 – Volatility mac_list_sessions output
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.14 – Volatility mac_list_sessions 输出
- en: In this way, we get information about the process ID, its name, and the name
    of the associated user.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们可以获得进程 ID、进程名称以及关联用户的名称信息。
- en: 'With connected devices, we can turn to the familiar `mac_mount` and `mac_dmesg`
    plugins:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于连接的设备，我们可以转向熟悉的 `mac_mount` 和 `mac_dmesg` 插件：
- en: '![Figure 11.15 – Volatility mac_mount and mac_dmesg plugins'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.15 – Volatility mac_mount 和 mac_dmesg 插件'
- en: '](img/Figure_11.15_B17056.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.15_B17056.jpg)'
- en: Figure 11.15 – Volatility mac_mount and mac_dmesg plugins
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.15 – Volatility mac_mount 和 mac_dmesg 插件
- en: As you can see in *Figure 11.15*, these plugins are full analogues to the Linux
    plugins of the same name.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在*图 11.15*中看到的，这些插件与 Linux 系统中同名的插件完全相同。
- en: Another interesting plugin for retrieving user data is `mac_keychaindump`. As
    the name implies, this plugin tries to recover possible keychain keys. Subsequently,
    if the recovery is successful, you can try to use `Chainbreaker2` ([https://github.com/n0fate/chainbreaker](https://github.com/n0fate/chainbreaker))
    and get the data on the name, account, password, as well as timestamps for the
    creation and last modification of the record in the keychain. However, it is important
    to keep in mind that at the time of writing the book, the last officially supported
    version of macOS is Catalina.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的插件是 `mac_keychaindump`，它可以帮助恢复用户数据。顾名思义，这个插件尝试恢复可能存在的钥匙串密钥。随后，如果恢复成功，你可以尝试使用
    `Chainbreaker2`（[https://github.com/n0fate/chainbreaker](https://github.com/n0fate/chainbreaker)）获取关于名称、账户、密码，以及钥匙串记录的创建和最后修改的时间戳。然而，值得注意的是，在编写本书时，最后一个正式支持的
    macOS 版本是 Catalina。
- en: 'Of course, we should not forget to analyze processes related to browsers, email
    agents, and messengers, as they can contain a lot of useful data, including the
    URLs visited, email addresses, and conversations. To get this data, we can analyze
    the memory of relevant processes using the `mac_memdump` or `mac_dump_maps` plugins
    along with keyword, regular expression, or YARA rules searches. On the other hand,
    we can use the **Bulk** **Extractor** tool and the **email** parser to retrieve
    URLs and email addresses:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们不能忘记分析与浏览器、邮件客户端和即时通讯软件相关的进程，因为它们可能包含大量有用数据，包括访问的 URL、电子邮件地址和对话内容。为了获取这些数据，我们可以分析相关进程的内存，使用
    `mac_memdump` 或 `mac_dump_maps` 插件，结合关键字、正则表达式或 YARA 规则的搜索。另一方面，我们可以使用**Bulk**
    **Extractor** 工具和**邮件**解析器来提取 URL 和电子邮件地址：
- en: '![Figure 11.16 – Bulk Extractor email parser'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.16 – Bulk Extractor 邮件解析器'
- en: '](img/Figure_11.16_B17056.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.16_B17056.jpg)'
- en: Figure 11.16 – Bulk Extractor email parser
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.16 – Bulk Extractor 邮件解析器
- en: 'In the output folder, we are interested in two files – `email_histogram.txt`
    and `url_histogram.txt`, which contain all the email addresses and URLs extracted
    from the memory dump, respectively:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出文件夹中，我们关注两个文件——`email_histogram.txt` 和 `url_histogram.txt`，它们分别包含从内存转储中提取的所有电子邮件地址和
    URL：
- en: '![Figure 11.17 – Extracted URLs'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.17 – 提取的 URLs'
- en: '](img/Figure_11.17_B17056.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.17_B17056.jpg)'
- en: Figure 11.17 – Extracted URLs
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.17 – 提取的 URLs
- en: This way, we can analyze different user data. Our last topic of discussion will
    be the searching for and investigation of malicious activity.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们可以分析不同的用户数据。我们最后讨论的话题将是如何搜索和调查恶意活动。
- en: Searching for malicious activity
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索恶意活动
- en: 'Searching for malicious activity in macOS basically boils down to the basic
    elements we dealt with in the previous chapters: looking for suspicious network
    connections, looking for anomalies in processes, looking for code injection, looking
    for traces of hooking techniques used, and examining the commands executed in
    the shell. For example, `-f0L` as one of the command-line arguments, and to unpack
    a protected archive into a directory under `/tmp` using the `unzip` command. At
    the same time, running scripts and commands in the shell can be used in more sophisticated
    attacks when threat actors have direct access to the host.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 中搜索恶意活动基本上归结为我们在前几章中处理的基本元素：寻找可疑的网络连接，寻找进程中的异常，寻找代码注入，寻找使用的钩子技术的痕迹，以及检查
    shell 中执行的命令。例如，`-f0L` 作为命令行参数之一，用于通过 `unzip` 命令将受保护的归档解压到 `/tmp` 目录下。同时，在 shell
    中运行脚本和命令也可能在更复杂的攻击中被威胁行为者使用，尤其是当他们直接访问主机时。
- en: 'To look for code injection, we can use the familiar `mac_malfind` plugin. However,
    please note here that running the plugin on memory dumps taken from hosts on the
    M1 chip may cause execution errors:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找代码注入，我们可以使用熟悉的`mac_malfind`插件。然而，请注意，在从 M1 芯片的主机上获取的内存转储上运行该插件可能会导致执行错误：
- en: '![Figure 11.18 – Volatility mac_malfind output'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.18 – Volatility mac_malfind 输出'
- en: '](img/Figure_11.18_B17056.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.18_B17056.jpg)'
- en: Figure 11.18 – Volatility mac_malfind output
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.18 – Volatility mac_malfind 输出
- en: This method comes in handy for detecting injections made with `ptrace` or the
    `NSCreateObjectFileImageFromMemory` API. Also, be prepared for a lot of false-positive
    results, which will need to be double-checked.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法对于检测通过`ptrace`或`NSCreateObjectFileImageFromMemory` API进行的注入非常有用。另外，准备好应对大量的误报结果，这些结果需要进行二次检查。
- en: 'Do not forget about the injection of malicious libraries into processes either.
    In this case, the `mac_proc_maps` and `mac_dyld_maps` plugins can be useful. If
    the malicious library tries to hide itself, the `mac_ldrmodules` plugin, which
    compares the output of `mac_proc_maps` with the list of libraries obtained from
    `libdl`, can be used:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 也不要忘记查找恶意库注入进程的痕迹。在这种情况下，`mac_proc_maps`和`mac_dyld_maps`插件可能会很有用。如果恶意库试图隐藏自己，可以使用`mac_ldrmodules`插件，该插件将`mac_proc_maps`的输出与从`libdl`获得的库列表进行比较：
- en: '![Figure 11.19 – Volatility mac_ldrmodules output'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.19 – Volatility mac_ldrmodules 输出'
- en: '](img/Figure_11.19_B17056.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.19_B17056.jpg)'
- en: Figure 11.19 – Volatility mac_ldrmodules output
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.19 – Volatility mac_ldrmodules 输出
- en: If necessary, you can also extract libraries of interest using the `mac_librarydump`
    plugin, which extracts any executable from process memory.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，你还可以使用`mac_librarydump`插件提取感兴趣的库，该插件能够从进程内存中提取任何可执行文件。
- en: 'One of the distinguishing features of malicious activity analysis in macOS
    is the search for traces of persistence, because in this operating system the
    techniques used for persistence will be different from those discussed earlier.
    The most common techniques used by threat actors and malware are the following
    MITRE ATT&CK sub-techniques:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS的恶意活动分析中，一个显著的特点是寻找持久性痕迹，因为在这个操作系统中，用于持久性的技术将不同于前面讨论的那些。威胁行为者和恶意软件最常用的技术包括以下MITRE
    ATT&CK子技术：
- en: '`T1547.011`: Plist Modification'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T1547.011`：Plist修改'
- en: '`T1547.007`: Re-Opened Applications'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T1547.007`：重新打开的应用程序'
- en: '`T1547.015`: Login Items'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T1547.015`：登录项'
- en: '`T1543.001`: Launch Agent'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T1543.001`：启动代理'
- en: '`T1543.004`: Launch Daemon'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T1543.004`：启动守护进程'
- en: '`T1546.004`: Unix Shell Configuration Modification'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T1546.004`：Unix Shell配置修改'
- en: '`T1053.003`: Cron'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T1053.003`：Cron'
- en: The first two sub-techniques can be used for both persistence and privilege
    escalation. To do so, attackers can modify or add paths to executables, add command-line
    arguments, and insert key/pair values to property list files (`plist`) in auto-run
    locations. To find traces of these sub-techniques, you can analyze `plist` files
    in `~/LaunchAgents` and `~/Library/Application` `Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm`
    locations. Also do not forget to check `~/Library/Preferences/com.apple.loginwindow.plist`,
    `~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist` and an application's
    `Info.plist` files. You can try to extract these files from the cached filesystem
    or check on the host itself.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个子技术可用于持久性和特权升级。攻击者可以修改或添加可执行文件的路径，添加命令行参数，并将键/值对插入自动启动位置的属性列表文件（`plist`）。要查找这些子技术的痕迹，你可以分析`~/LaunchAgents`和`~/Library/Application
    Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm`位置的`plist`文件。别忘了检查`~/Library/Preferences/com.apple.loginwindow.plist`、`~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist`以及应用程序的`Info.plist`文件。你可以尝试从缓存的文件系统中提取这些文件，或者直接在主机上检查。
- en: The Login Items, Launch Agent, and Launch Daemon sub-techniques use a similar
    approach. You should check `~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm`,
    `~/Library /Preferences/com.apple.loginitems.plist`, and the application's `/Contents
    /Library/Loginltems/` to find their traces. You should also check for new `plist`
    files in `/System/Library/LaunchAgents`, `/Library/LaunchAgents/`, `/Library /LaunchDaemons/`,
    and `~/Library/LaunchAgents/`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 登录项、启动代理和启动守护进程子技术使用类似的方法。你应该检查`~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm`、`~/Library/Preferences/com.apple.loginitems.plist`以及应用程序的`/Contents/Library/Loginltems/`，以查找它们的痕迹。你还应该检查`/System/Library/LaunchAgents`、`/Library/LaunchAgents/`、`/Library/LaunchDaemons/`和`~/Library/LaunchAgents/`中的新`plist`文件。
- en: The Unix Shell Configuration Modification sub-technique is associated with modifying
    the files used when running the Terminal application. Terminal basically uses
    `zsh`, which is the default shell for all macOS versions since macOS Catalina.
    Please note that, for legacy programs, `/etc/bashrc` is executed on startup. As
    a result, we should check `/etc/profile` and `/etc/profile.d`, along with `~/.bash_profile`,
    to find traces of this sub-technique. You can also check the `/etc/shells` file
    where the list of file paths for valid shells is located.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Unix Shell 配置修改子技术与运行终端应用程序时修改所使用的文件相关。终端基本上使用`zsh`，它是自 macOS Catalina 起所有 macOS
    版本的默认 shell。请注意，对于传统程序，`/etc/bashrc` 会在启动时执行。因此，我们应该检查 `/etc/profile` 和 `/etc/profile.d`，以及
    `~/.bash_profile`，以查找该子技术的痕迹。你还可以检查 `/etc/shells` 文件，其中包含有效 shell 的文件路径列表。
- en: 'The last sub-technique is similar to the one we saw in [*Chapter 9*](B17056_09_Final_JM_ePub.xhtml#_idTextAnchor141),
    *Malicious Activity Detection*, so we will not go into it here in detail. However,
    it is worth mentioning that the `T1547.006`: Kernel Modules and Extensions sub-technique,
    which involves loading a malicious `kext` using the `kextload` command, was also
    popular for earlier versions of macOS. However, since macOS Catalina, kernel extensions
    have been deprecated on macOS systems. Nevertheless, Volatility provides plugins
    to explore loaded kernel modules and extensions: `mac_lsmod` and `mac_lsmod_kext_map`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个子技术与我们在[*第 9 章*](B17056_09_Final_JM_ePub.xhtml#_idTextAnchor141)中看到的*恶意活动检测*相似，因此我们在这里不会详细讨论。然而，值得一提的是，`T1547.006`：内核模块和扩展子技术，它涉及使用
    `kextload` 命令加载恶意的 `kext`，在早期的 macOS 版本中非常流行。然而，自 macOS Catalina 起，内核扩展已被弃用。尽管如此，Volatility
    提供了插件来探索已加载的内核模块和扩展：`mac_lsmod` 和 `mac_lsmod_kext_map`：
- en: '![Figure 11.20 – Volatility mac_lsmod output'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.20 – Volatility mac_lsmod 输出'
- en: '](img/Figure_11.20_B17056.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.20_B17056.jpg)'
- en: Figure 11.20 – Volatility mac_lsmod output
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.20 – Volatility mac_lsmod 输出
- en: You can also use the `mac_moddump` plugin to export the specified kernel extension
    to disk. This sub-technique has often been used by rootkits to get persistence
    and escalate privileges.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 `mac_moddump` 插件将指定的内核扩展导出到磁盘。此子技术常常被 rootkit 用来保持持久性和提升权限。
- en: 'In general, as with Linux rootkits, macOS rootkits are now extremely hard to
    come by. However, even for this rare case, we have a number of plugins that allow
    us to detect the different hooking techniques used by this type of malware:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，与 Linux rootkit 一样，macOS rootkit 现在非常难以找到。然而，即使是这种罕见的情况，我们也有一些插件，可以让我们检测该类型恶意软件使用的不同钩子技术：
- en: '`mac_apihooks` – Checks for API hooks and allows you to detect inline hooking
    along with the Hooking Relocation Tables.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mac_apihooks` – 检查 API 钩子，允许你检测内联钩子及钩子重定位表。'
- en: '`mac_check_sysctl` – Lists all `sysctl` values and handlers. Since sysctl is
    an interface that allows userland components to communicate with the kernel, it
    was widely used by different rootkits. `Sysctl` hooks provide an opportunity to
    hide rootkit data and create backdoors.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mac_check_sysctl` – 列出所有 `sysctl` 值和处理程序。由于 sysctl 是允许用户空间组件与内核通信的接口，它被不同的
    rootkit 广泛使用。`Sysctl` 钩子提供了隐藏 rootkit 数据和创建后门的机会。'
- en: '`mac_check_trap_table` – Checks whether trap table entries are hooked. Trap
    table was implemented to satisfy requests to the BSD layer of OS X and macOS.
    Replacing trap table entries can be used for rootkit implementation, so it is
    also of interest to threat actors and malware.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mac_check_trap_table` – 检查是否有钩子影响 trap 表条目。Trap 表是为满足对 OS X 和 macOS BSD 层的请求而实现的。替换
    trap 表条目可以用于 rootkit 实现，因此它也引起了威胁行为者和恶意软件的兴趣。'
- en: '`mac_notifiers` – Detects rootkits that add hooks into I/O Kit. I/O Kit is
    a set of different tools and APIs that provides an opportunity to interact with
    hardware devices and can be abused by rootkits.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mac_notifiers` – 检测添加钩子的 rootkit，这些钩子插入 I/O Kit。I/O Kit 是一组不同的工具和 API，提供与硬件设备交互的机会，并可能被
    rootkit 滥用。'
- en: '`mac_trustedbsd` – Lists malicious `trustedbsd` policies. The TrustedBSD subsystem
    allows you to control access to system resources through policies that determine
    which processes can access which resources. Often these policies are one of the
    targets of rootkits.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mac_trustedbsd` – 列出恶意的 `trustedbsd` 策略。TrustedBSD 子系统允许你通过确定哪些进程可以访问哪些资源的策略来控制对系统资源的访问。这些策略通常是
    rootkit 的目标之一。'
- en: By searching for anomalies and traces of manipulation of the aforementioned
    objects, we can thus detect rootkits on macOS.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 通过搜索上述对象的异常和操作痕迹，我们可以检测到 macOS 上的 rootkit。
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The process of analyzing macOS memory dumps itself is not very different from
    that of Windows or Linux. However, there are a number of nuances to be considered.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 分析 macOS 内存转储的过程与分析 Windows 或 Linux 的过程并没有太大区别。然而，有一些细节需要注意。
- en: First, Volatility profiles for the latest versions of macOS are hardly available,
    and at the moment, the only more or less adequate way to get them is to use proprietary
    memory dumping solutions, where profiles can be created automatically along with
    the dump.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，最新版本 macOS 的 Volatility 配置文件几乎无法获得，目前，唯一相对可靠的获取方式是使用专有的内存转储解决方案，在该方案中，配置文件可以与转储一起自动创建。
- en: Secondly, not all of the Volatility plugins that work fine on older versions
    of macOS show good results on the latest versions of the operating system. In
    addition, the performance of the plugins may depend on the architecture of the
    chip used on the target host from which the dump was taken.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，并非所有在旧版本 macOS 上运行良好的 Volatility 插件在最新版本的操作系统上都能显示出良好的结果。此外，插件的性能可能取决于目标主机的芯片架构，该主机是从中提取转储的设备。
- en: Third, the tools that we used for file recovery from Windows and Linux, such
    as PhotoRec, will not be so helpful for macOS versions starting from macOS High
    Sierra, as they lack APFS support.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，我们曾用于从 Windows 和 Linux 恢复文件的工具（如 PhotoRec）对于从 macOS High Sierra 开始的 macOS
    版本帮助不大，因为它们不支持 APFS 文件系统。
- en: Otherwise, the methods of analysis of memory dumps themselves remain the same.
    When analyzing user activity, we tend to focus on running applications and the
    dynamic data they contain, Apple applications such as Calendar or Contacts, data
    from the Keychain, and mounted devices. To detect malicious activity, we focus
    on examining network connections, looking for anomalies in processes, detecting
    injected code and libraries, and detecting persistence techniques used.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，内存转储分析的方法本身保持不变。在分析用户活动时，我们倾向于关注正在运行的应用程序及其包含的动态数据，如 Apple 应用程序（如日历或联系人）、来自钥匙串的数据以及已挂载的设备。为了检测恶意活动，我们专注于检查网络连接，寻找进程中的异常，检测注入的代码和库，以及检测使用的持久性技术。
