- en: '*Chapter 13*: Hacking Web Servers and Web Apps'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第13章*：攻击Web服务器和Web应用程序'
- en: The purpose of hacking web servers and web apps is to search for and discover
    potential vulnerabilities. It helps us identify important upgrades that are needed
    for software, thus improving security and helping us recognize and respond to
    any malicious activity. Additionally, with so much being transacted online including
    shopping, banking, and communications, web apps give us an additional resource
    to gain access to a person's login credentials, private messages, and financial
    information.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击web服务器和web应用程序的目的是寻找并发现潜在的漏洞。它帮助我们识别需要升级的软件，从而提高安全性，帮助我们识别并应对任何恶意活动。此外，随着网上交易的增多，包括购物、银行业务和通信，web应用程序为我们提供了一个额外的途径，来获取个人的登录凭证、私人信息和财务数据。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Why web servers create security issues
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么web服务器会产生安全问题
- en: Types of architectures
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构类型
- en: Threats to both servers and applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对服务器和应用程序的威胁
- en: The vulnerabilities of web APIs, web shells, and webhooks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: web API、web shell和webhook的漏洞
- en: Detecting web server hacking attempts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测web服务器的攻击尝试
- en: Let's begin by discussing why web servers create security issues for us.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先讨论为什么web服务器会给我们带来安全问题。
- en: Why web servers create security issues
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么web服务器会产生安全问题
- en: It's important to understand that web applications and servers are not inherently
    secure. The fact is that they were never designed to be secure – they were designed
    for functionality and to provide a service. The responsibility for making them
    safe rests with us, as system administrators, coders, and security professionals.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，web应用程序和服务器本身并不是安全的。事实上，它们从未被设计为安全的——它们是为了功能性和提供服务而设计的。确保它们安全的责任在于我们，作为系统管理员、开发人员和安全专业人员。
- en: This is why attackers turn their attention to web servers and web application-level
    attacks – because a web server that hosts web applications is accessible from
    anywhere over the internet. This makes web servers an attractive target. Poorly
    configured web servers can create vulnerabilities in even the most carefully designed
    firewall systems. Attackers can exploit poorly configured web servers with known
    vulnerabilities to compromise the security of web applications. Furthermore, web
    servers with known vulnerabilities can harm the security of an organization, even
    if the web applications they host are secure.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么攻击者将注意力集中在web服务器和web应用程序级别攻击上的原因——因为托管web应用程序的web服务器可以通过互联网随时随地访问。这使得web服务器成为一个有吸引力的目标。配置不当的web服务器可能会在即使是最精心设计的防火墙系统中也创造出漏洞。攻击者可以利用已知漏洞的配置不当的web服务器来危及web应用程序的安全。此外，具有已知漏洞的web服务器即使托管的web应用程序本身是安全的，也可能危害组织的安全。
- en: Every open port on a web server is an entry point for a possible attack, especially
    if it hosts applications that use protocols such as HTTP and FTP. The operating
    system must protect the application from **Denial-of-Service** (**DOS**) attacks
    by ensuring that processes have sufficient resources to function properly. The
    real problem with these operating system security features is that they can be
    used against the application. Adding add-ons, plugins, and their configurations
    on top of the OS and its applications creates a perfect storm for attackers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: web服务器上的每个开放端口都是潜在攻击的入口，尤其是当它托管使用HTTP和FTP等协议的应用程序时。操作系统必须通过确保进程拥有足够的资源来正常运行，以保护应用程序免受**拒绝服务（DOS）**攻击。这些操作系统安全特性的真正问题在于，它们也可以被用来攻击应用程序。在操作系统及其应用程序上添加插件、附加组件和它们的配置，为攻击者创造了一个完美的攻击环境。
- en: Before you start trying to hack a web server, it's important to understand how
    they work.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始尝试攻击web服务器之前，了解它们是如何工作的非常重要。
- en: 'There are three main components to a web server:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: web服务器有三个主要组成部分：
- en: The web server software, which is what we want to attack.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: web服务器软件，这是我们想要攻击的目标。
- en: The website content/files, which need to be in a certain format for the web
    server to access and read them.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站内容/文件需要以特定格式存放，以便web服务器能够访问和读取它们。
- en: The operating system itself.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统本身。
- en: Every web server essentially works the same way; it receives a request from
    a user and then tries to find the file they want. Then, it reads the file and
    sends it to the user so that they can see it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个web服务器本质上都以相同的方式工作；它接收到用户的请求，然后尝试找到他们需要的文件。接着，它读取文件并将其发送给用户，以便他们可以查看。
- en: Every web server has a piece of software behind it called an HTTP daemon/service/server.
    The name varies, depending on the server. Apache/httpd is a popular HTTP daemon
    for Linux-based servers, while **Internet Information Server** (**IIS**) is a
    popular one for Windows servers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网页服务器背后都有一款名为 HTTP 守护进程/服务/服务器的软件。根据服务器的不同，名称也有所不同。Apache/httpd 是基于 Linux
    的服务器中流行的 HTTP 守护进程，而 **Internet Information Server**（**IIS**）则是 Windows 服务器中流行的守护进程。
- en: HTTP daemons essentially run in the background and receive requests from users
    on port **80** by default. So, every time you type [facebook.com](http://facebook.com)
    into your browser, your computer is sending a request to the Facebook web server
    to find out the files it needs to display for you to see the page.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 守护进程本质上在后台运行，默认通过端口**80**接收用户的请求。因此，每次你在浏览器中输入 [facebook.com](http://facebook.com)，你的计算机会向
    Facebook 网站服务器发送请求，以查找需要显示的文件，以便你能够查看该页面。
- en: The process of finding these files is called mapping URLs/domains to certain
    directories on the server, indexing, and so on. Then, when a user tries to access
    a file, it maps the filename onto the corresponding path that has been mapped
    to that URL.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 查找这些文件的过程被称为将 URL/域名映射到服务器上的特定目录、索引等。然后，当用户尝试访问某个文件时，它会将文件名映射到已经映射到该 URL 的对应路径。
- en: These web servers also contain security features, such as limiting the amount
    of physical memory it can access for each process, preventing unauthorized code
    execution, and ensuring certain file types are not allowed to be executed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些网页服务器还包含安全功能，例如限制每个进程可以访问的物理内存量、阻止未经授权的代码执行，以及确保某些文件类型无法被执行。
- en: Now, let's discuss the components of a web server.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论一下网页服务器的组成部分。
- en: Components of a web server
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网页服务器的组成部分
- en: First, we have the **document root**. This directory is where all the web content/files
    are stored. For example, if you have an **images** directory inside your document
    root, all the images can be accessed from [http://wayne-technologies.net/images/](http://wayne-technologies.net/images/).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有 **文档根目录**。这个目录是存储所有网页内容/文件的地方。例如，如果你的文档根目录中有一个 **images** 目录，所有图片都可以通过
    [http://wayne-technologies.net/images/](http://wayne-technologies.net/images/)
    进行访问。
- en: When a user requests a page using a URL, such as **wayne-technologies.net/**,
    it maps that URL onto the document root and then searches the folder for a file
    that matches that URL. This is called mapping URLs to files and folders. If it
    finds a match, it sends the contents of this file back to the user so that they
    can see it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户使用 URL 请求页面时，例如 **wayne-technologies.net/**，它会将该 URL 映射到文档根目录，然后在该文件夹中查找与该
    URL 匹配的文件。这就是将 URL 映射到文件和文件夹的过程。如果找到了匹配项，它会将该文件的内容发送回用户，以便他们可以查看。
- en: If no matching file is found, an index document such as the default page, or
    **index.php**, will be searched for and sent back if found.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未找到匹配的文件，将会搜索并返回一个索引文档，例如默认页面或 **index.php**，如果找到的话。
- en: If no index document is present, the server will typically return a **404**
    error to the user, saying that it can't find what they're looking for. A redirect
    may also be returned, telling them to look somewhere else for this file/content.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有索引文档，服务器通常会返回 **404** 错误给用户，表示找不到他们要找的内容。也可能返回重定向，告诉他们到其他地方查找此文件/内容。
- en: Second, we have the **server root**. This is the directory tree's top-level
    root directory, including the server's configuration and error, executable, and
    log files. It consists of the server's implementation code. Typically, the server
    root consists of four files. One file is dedicated to the server's implementation
    code, while the remaining three are subdirectories – that is, **conf**, **-logs**,
    and **-cgi-bin** – that contain configuration data, logs, and executables, respectively.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们有 **服务器根目录**。这是目录树的顶级根目录，包括服务器的配置文件、错误文件、可执行文件和日志文件。它由服务器的实现代码组成。通常，服务器根目录包含四个文件。一个文件专用于服务器的实现代码，而剩下的三个是子目录
    —— 即 **conf**、**-logs** 和 **-cgi-bin** —— 分别包含配置数据、日志和可执行文件。
- en: Third, there's the **virtual document tree**. In addition to the physical directory
    tree that stores content, a virtual document tree is maintained by HTTP daemon
    software. The purpose of the virtual tree is to map URLs onto files stored in
    the server's filesystem; for example, it may associate the **http://wayne-technologies.net/images**
    URL with an actual directory named **/var/www/images** on the server's filesystem.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，**虚拟文档树**。除了存储内容的物理目录树外，HTTP 守护进程软件还维护着一个虚拟文档树。虚拟树的目的是将 URL 映射到服务器文件系统中存储的文件；例如，它可能将
    **http://wayne-technologies.net/images** 这个 URL 与服务器文件系统中的实际目录 **/var/www/images**
    关联。
- en: Fourth, we have **virtual hosting**. This is where you may host multiple domains/websites
    on one web server. For example, you could have your main domain, [www.wayne-technologies.net](http://www.wayne-technologies.net),
    and then to add another site, you would have to create a subdomain such as **blog.wayne-technologies.net**
    that points to the same document root directory to keep everything separate under
    one roof. Using this method, you could also host an unlimited number of sites
    on one web server. However, keep in mind that each subdomain will need unique
    passwords/credentials to prevent unauthorized access.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第四，**虚拟主机**。这就是您可以在一台 web 服务器上托管多个域名/网站的地方。例如，您可以拥有主域名 [www.wayne-technologies.net](http://www.wayne-technologies.net)，然后要添加另一个站点，您需要创建一个子域名，比如
    **blog.wayne-technologies.net**，并将其指向相同的文档根目录，从而将所有内容都保持在一个服务器下分开。使用这种方法，您还可以在一台
    web 服务器上托管无限数量的站点。然而，请记住，每个子域名都需要唯一的密码/凭证以防止未经授权的访问。
- en: Fifth, we have the **web proxy**. A web proxy is a domain that acts as an intermediary
    between your computer and the website you are trying to access. When you type
    in an address, it goes through the proxy DNS server, which then forwards the request
    to your requested website's IP address. The response is sent back through the
    proxy server so that it cannot be traced back to you. Web proxies are used to
    help mask/hide your IP address, and anyone attempting to trace the request back
    to you will come up with a different IP.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第五，**web 代理**。web 代理是一个作为中介的域名，位于您的计算机和您试图访问的网站之间。当您输入一个地址时，它会通过代理 DNS 服务器，然后将请求转发到您请求的网站的
    IP 地址。响应通过代理服务器返回，这样就无法追踪到您。web 代理用于帮助隐藏您的 IP 地址，任何试图追踪请求的人都会得到一个不同的 IP。
- en: Next, we will talk about the different types of architecture you may experience.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论您可能会遇到的不同类型的架构。
- en: Types of architecture
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构类型
- en: Web server architecture is the overall layout of a web server. It gives an attacker
    an idea of how they can prepare for and deploy an attack. Let's discuss the most
    common web server architectures you may encounter.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Web 服务器架构是 web 服务器的整体布局。它为攻击者提供了如何准备和部署攻击的思路。让我们讨论一下您可能会遇到的最常见的 web 服务器架构。
- en: IIS web server architecture
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IIS web 服务器架构
- en: 'Let''s take a look at the typical architecture of a web server and its applications,
    as shown in the following diagram. This is based on an open source architecture.
    As you can see, a lot of moving parts and components are involved in supporting
    an application. A web server is designed to host multiple sites on one system,
    which adds to the complexity. Did your *hacker red flag* just go up? It should
    have. Anytime we talk about complexity, it means more areas to make mistakes,
    overlook settings, or miss an attack vector:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看一个典型的 web 服务器架构及其应用，如下图所示。这是基于开源架构的。正如您所看到的，支持一个应用程序需要涉及许多活动的组件和部分。web
    服务器设计用于在一台系统上托管多个站点，这增加了复杂性。您的*黑客警觉性*是不是已经升高了？应该是的。每当我们谈到复杂性时，就意味着存在更多的错误区域、忽略的设置或被遗漏的攻击途径：
- en: '![Figure 13.1 – A typical open source architecture for a web server and its
    applications'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.1 – 一个典型的开源 web 服务器架构及其应用'
- en: '](Images/B17486_13_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17486_13_01.jpg)'
- en: Figure 13.1 – A typical open source architecture for a web server and its applications
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1 – 一个典型的开源 web 服务器架构及其应用
- en: Open source web server architecture
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开源 web 服务器架构
- en: 'The three most popular open source web servers are **Apache httpd**, **Nginx**,
    and **lighttpd**. Their principal components are as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 三个最受欢迎的开源 web 服务器是 **Apache httpd**、**Nginx** 和 **lighttpd**。它们的主要组件如下：
- en: Apache, which is designed to be a secure, efficient, and extensible server
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache，旨在成为一个安全、高效且可扩展的服务器
- en: MySQL, which is ideal for storing data
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL，适用于存储数据
- en: PHP, which is a widely used, general-purpose scripting language that is especially
    suited for web development and can interact with MySQL to retrieve and store data
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP是一种广泛使用的通用脚本语言，特别适合网页开发，可以与MySQL进行交互，以检索和存储数据。
- en: Let's look into some of the challenges the Microsoft world gives us next.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来看看微软世界中的一些挑战。
- en: Microsoft
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 微软
- en: Microsoft's **Internet Information System** (**IIS**) is the most widely used
    web server software in the world, boasting over 800 million downloads. IIS is
    flexible, secure, and easy to host using HTTP/HTTPS, FTP, RTSP, SMTP, and much
    more. Microsoft uses application pools, which are an extremely useful part of
    IIS. They allow the administrator to set different resource limits for applications
    running on port **80**, or any other port you wish.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的**互联网信息服务**（**IIS**）是全球使用最广泛的网页服务器软件，已累计下载超过8亿次。IIS灵活、安全，且使用HTTP/HTTPS、FTP、RTSP、SMTP等协议进行托管非常简便。微软使用的应用程序池是IIS中的一个非常有用的功能，它允许管理员为运行在**80端口**或任何其他端口的应用程序设置不同的资源限制。
- en: But why should you care about setting up user accounts and application pools?
    There are many reasons why an administrator may want to establish individual identities
    or set up application pools to run independent versions of the same website.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么你需要关心设置用户帐户和应用程序池呢？管理员可能有很多原因希望为网站配置独立的身份，或设置应用程序池来运行相同网站的独立版本。
- en: For instance, imagine that you run a very busy web server with two separate
    websites on it – one dedicated to your business and another that's a marketing
    site for a client's new product release. It would be ideal if each site ran under
    its credentials and had an application pool. The business website would require
    more processes, while the marketing site may need additional memory and processor
    speeds to handle large quantities of traffic. On a traditional server, these requirements
    would conflict and cause problems. With IIS and application pools, you can easily
    configure user accounts and resource allocations for each site with specifications
    without them affecting each other.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设你运行一个非常繁忙的网页服务器，上面托管着两个独立的网站，一个是用于你的业务，另一个是为客户的新产品发布做的营销网站。理想情况下，每个网站都应该在各自的凭据下运行，并拥有独立的应用程序池。业务网站可能需要更多的处理进程，而营销网站可能需要更多的内存和处理器速度来处理大量的流量。在传统服务器上，这些需求可能会产生冲突并导致问题。而使用IIS和应用程序池，你可以轻松地为每个网站配置用户帐户和资源分配，确保它们不会互相干扰。
- en: What about security?
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 那么，安全性如何呢？
- en: Listen, I'm not trying to tell you that Microsoft's IIS is unhackable – far
    from it. Its history is quite sorted when it comes to being hacked, but it's come
    a long way.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 听着，我不是在告诉你微软的IIS是不可破解的——恰恰相反。它的历史在被黑客攻击方面相当复杂，但它已经取得了很大的进步。
- en: Application pools for running websites have default settings that mimic the
    original Windows Server 2003 version of IIS. Unless the administrator changes
    it, there are no anonymous users (which is what hackers want), and no direct access
    to the webroot (we'll talk about this in a second). With application pools, you
    can set up an anonymous user with limited rights, or create another restricted
    account, as we mentioned previously for your marketing site. This way, if one
    website is breached, there's no chance that a hacker could get into the other
    one because they're running under completely different security settings… in theory.
    Again, there are a plethora of attack vectors out there that have Microsoft pretty
    busy patching IIS, but the same can be said about Linux and Apache.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 用于运行网站的应用程序池有默认设置，模仿了原始Windows Server 2003版本的IIS。除非管理员更改设置，否则不会有匿名用户（这正是黑客所需要的），也没有直接访问网站根目录的权限（我们稍后会谈到这个）。通过应用程序池，你可以设置具有有限权限的匿名用户，或者创建另一个受限帐户，就像我们之前为你的营销网站提到的那样。这样，如果某个网站被攻破，黑客就无法进入另一个网站，因为它们运行在完全不同的安全设置下……理论上如此。再说一遍，尽管存在众多攻击途径，微软仍然忙于修补IIS，但Linux和Apache同样面临类似问题。
- en: Let's learn more about why web servers are compromised.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步了解为什么网页服务器会被攻破。
- en: Why are web servers compromised?
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么网页服务器会被攻破？
- en: 'The most common reasons for attackers to compromise a web server are as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客攻破网页服务器的最常见原因如下：
- en: Web servers are often used as attack launch points for attacking other applications.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页服务器常被用作攻击其他应用程序的攻击发起点。
- en: When an attacker compromises one system on the network, they can often use that
    system's access privileges to move around freely and gain access to additional
    systems that may host sensitive data. This is known as **privilege escalation**.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当攻击者突破网络中的一个系统时，他们往往能够利用该系统的访问权限自由移动，并访问可能存有敏感数据的其他系统。这被称为**特权提升**。
- en: Attackers are often able to use vulnerabilities in the web server's software
    to compromise the system because it's easy for developers to make mistakes when
    writing code, or they may leave backdoors and debug options open. Attackers can
    use these vulnerabilities and configuration errors to take control of a system.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击者通常能够利用网络服务器软件中的漏洞来突破系统，因为开发人员在编写代码时容易出错，或者他们可能会留下后门和调试选项。攻击者可以利用这些漏洞和配置错误来控制系统。
- en: Now, let's talk about adding web apps and how to do so more securely.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来谈谈添加网络应用程序以及如何更加安全地进行此操作。
- en: Adding web apps
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加网络应用程序
- en: Web applications are becoming more and more vulnerable to more sophisticated
    threats and attack vectors, which makes them less safe. In this section, we will
    teach you about web applications and attack vectors, and how to protect an organization's
    information from them. Web application hacking is a common method most attackers
    use to get into a system.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用程序正变得越来越容易受到更加复杂的威胁和攻击向量的影响，这使得它们变得不那么安全。在本节中，我们将向你介绍网络应用程序和攻击向量，以及如何保护组织的信息免受它们的侵害。网络应用程序黑客攻击是大多数攻击者用来入侵系统的常见方法。
- en: The best protection against web application hacking is to not have a vulnerable
    or insecure website. You can do this by evaluating the code and design practices
    before deploying your site.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 防止网络应用程序被黑客攻击的最佳方法是避免拥有一个脆弱或不安全的网站。你可以通过在部署站点之前评估代码和设计实践来实现这一点。
- en: A great example of why you need to secure code before deploying is what happened
    with Yahoo! Voices. The developers did not escape the input before inserting it
    into the database. As a result, a hacker was able to gain access to more than
    450,000 unpublished articles on the website.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一个需要在部署前确保代码安全的绝佳例子是 Yahoo! Voices 的事件。开发者在将输入插入数据库之前没有对其进行转义。结果，黑客能够访问网站上超过
    45 万篇未发布的文章。
- en: Now, let's look at some of the threats to web servers and applications.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看一些网络服务器和应用程序所面临的威胁。
- en: Threats to both servers and applications
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对服务器和应用程序的威胁
- en: What types of attacks can be launched at these technologies? Well, first, let's
    start with web servers.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术可能会遭受哪些类型的攻击？首先，让我们从网络服务器开始。
- en: Note
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You'll see some similarities in the attacks that are used to target both web
    servers and web applications as one can create a vector for the other.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现针对网络服务器和网络应用程序的攻击存在一些相似之处，因为一种攻击方式可能会为另一种攻击提供向量。
- en: Web server attacks
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络服务器攻击
- en: 'When it comes to the servers themselves, attackers can launch attacks against
    web servers using any of the following methods:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到服务器本身时，攻击者可以通过以下方法之一对网络服务器发起攻击：
- en: '**Denial of Service** (**DoS**): By launching a DoS/DDoS assault on a web server,
    an attacker attempts to bring the service down or make it inaccessible to legitimate
    users. A DoS/DDoS assault on a web server is frequently directed at high-profile
    web servers, including bank servers, credit card payment gateways, and even root
    name servers.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拒绝服务攻击**（**DoS**）：通过对网络服务器发起 DoS/DDoS 攻击，攻击者试图让服务瘫痪或使其对合法用户不可访问。网络服务器上的 DoS/DDoS
    攻击通常针对一些高知名度的服务器，包括银行服务器、信用卡支付网关，甚至根域名服务器。'
- en: '**Brute-force attacks**: Here, an attacker attempts to use combinations of
    usernames and passwords until one of them is found to be valid; these often result
    in a dictionary attack.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**暴力破解攻击**：在此攻击中，攻击者尝试使用用户名和密码的组合，直到找到有效的一个；这些攻击通常导致字典攻击。'
- en: '**DNS server hijacking**: This occurs when an attacker hacks a DNS server and
    modifies its mapping settings to redirect users'' requests to the attacker''s
    rogue server. As a result, when a user enters a genuine URL into a browser, the
    settings redirect the user to the attacker''s bogus site.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DNS 服务器劫持**：当攻击者入侵 DNS 服务器并修改其映射设置，将用户请求重定向到攻击者的恶意服务器时，就会发生 DNS 服务器劫持。因此，当用户在浏览器中输入真实的
    URL 时，设置会将用户重定向到攻击者的虚假网站。'
- en: '**DNS amplification attacks**: For this attack, the attacker spoofs a DNS request
    from a target and sends it to another open DNS resolver. The targeted DNS server
    will now send a large DNS response to the forged IP address of the victim. This
    can result in a large number of data packets being sent to the victim''s system
    and can overload and shut down the system.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DNS 放大攻击**：在这种攻击中，攻击者伪造目标的 DNS 请求，并将其发送到另一个开放的 DNS 解析器。目标 DNS 服务器随后将大型 DNS
    响应发送到受害者伪造的 IP 地址。这可能导致大量数据包被发送到受害者的系统，进而导致系统过载并关闭。'
- en: '**Directory traversal**: This attack consists of an attacker obtaining access
    to a hidden directory on a web server, bypassing normal access restrictions, and
    exposing data that shouldn''t be allowed to be accessed.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目录遍历**：这种攻击指的是攻击者通过绕过正常访问限制，获取对 Web 服务器上隐藏目录的访问权限，从而暴露本不应允许访问的数据。'
- en: '**Man-in-the-middle**: This method is where an attacker intercepts communications
    between two systems without either of them knowing. The attacker intercepts the
    communication and can view or edit it before passing it back to the systems.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中间人攻击**：这种方法是攻击者在两个系统之间截取通信，而两方都不知道。攻击者拦截通信，并可以在将其转发给系统之前查看或编辑数据。'
- en: '**Phishing attacks**: This is an attack in which the attacker sets up a fake
    website to trick users into entering sensitive data, such as passwords and credit
    card information.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络钓鱼攻击**：这是一种攻击方式，攻击者设置一个假网站来欺骗用户输入敏感数据，如密码和信用卡信息。'
- en: '**SQL injection**: This is a type of attack where an attacker attempts to access
    information from a database on a web server, which would normally be disallowed.
    However, if the web developer did not use parameterized queries when communicating
    with the database, it leaves the system vulnerable.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL 注入**：这是一种攻击类型，攻击者试图访问本应被禁止的 Web 服务器上的数据库信息。然而，如果 Web 开发者在与数据库通信时没有使用参数化查询，系统就会变得易受攻击。'
- en: '**Session initiation protocol** (**SIP**) and **real-time protocol** (**RTP**)
    are used for communication by **Voice over Internet Protocol** (**VoIP**) systems
    and are also vulnerable to this attack.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**会话初始化协议**（**SIP**）和**实时协议**（**RTP**）用于**互联网语音协议**（**VoIP**）系统的通信，并且也容易受到此类攻击。'
- en: '**HTTP response-splitting attack**: This is a web-based attack in which the
    attacker deceives the server by injecting new lines and arbitrary code into response
    headers. The attacker manipulates the input parameter and cleverly builds a request
    header that prompts the server to return two answers. By inserting header response
    data into the input field, the attacker makes a single request appear as two requests.
    Each request is then responded to by the web server. The attacker can provide
    malicious data to a vulnerable application, which then stores it in an HTTP response
    header.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTTP 响应拆分攻击**：这是一种基于 Web 的攻击，攻击者通过在响应头中注入新行和任意代码来欺骗服务器。攻击者操纵输入参数，巧妙地构建请求头，促使服务器返回两个响应。通过在输入字段中插入头部响应数据，攻击者使一个请求看起来像两个请求。然后，Web
    服务器会对每个请求作出响应。攻击者可以向易受攻击的应用程序提供恶意数据，应用程序将这些数据存储在 HTTP 响应头中。'
- en: '**Web cache poisoning attack**: This makes the intermediate web cache source
    less reliable because of web cache poisoning. In this attack, an attacker changes
    the cached content for a random URL that has malware on it. When requesting the
    required URL through the web cache, unaware users may mistakenly utilize the misidentified
    content rather than the genuine and secure material. The attacker causes the web
    server''s cache to be purged of actual cache content and asks it to store a specially
    crafted request. As a result, all the users on the web server''s cache will receive
    harmful content until the servers purge the web cache. Web cache poisoning attacks
    are possible if the web server and application have HTTP response-splitting flaws.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web 缓存投毒攻击**：这种攻击通过 Web 缓存投毒使中间的 Web 缓存源变得不可靠。在此攻击中，攻击者将缓存内容更改为一个随机 URL，该
    URL 包含恶意软件。当用户通过 Web 缓存请求所需的 URL 时，未察觉的用户可能错误地使用了被误认的内容，而不是正确且安全的内容。攻击者导致 Web
    服务器的缓存清除实际缓存内容，并要求它存储一个精心制作的请求。因此，Web 服务器缓存上的所有用户都会收到有害内容，直到服务器清除 Web 缓存。如果 Web
    服务器和应用程序存在 HTTP 响应拆分缺陷，就有可能发生 Web 缓存投毒攻击。'
- en: '**Secure shell** (**SSH**) **brute-force attack**: Attackers use the SSH protocol
    to make an encrypted SSH tunnel between two hosts so that they can send unencrypted
    data over an unprotected network. Most of the time, SSH runs on TCP port **22**.
    Attackers will scan SSH servers using bots. Once the credentials have been discovered,
    attackers will use this powerful new host as a base station to target internal
    systems and/or scan for vulnerabilities on auxiliary servers.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全外壳** (**SSH**) **暴力破解攻击**：攻击者使用 SSH 协议在两台主机之间建立加密的 SSH 隧道，以便能够在不受保护的网络上传输未加密的数据。大多数情况下，SSH
    运行在 TCP 端口 **22** 上。攻击者将使用机器人扫描 SSH 服务器。一旦发现凭证，攻击者将利用这个强大的新主机作为基站，瞄准内部系统和/或扫描辅助服务器上的漏洞。'
- en: '**Server-side request forgery** (**SSRF**) **attacks**: Attackers use SSRF
    flaws to send crafted requests to internal or backend servers through public web
    servers. These flaws come from the functions in an application being misused on
    public web servers. Internal servers are usually put in place by firewalls to
    keep unwanted traffic from getting into the network. SSRF flaws can allow attackers
    to send crafted requests from public web servers and connect to internal or backend
    servers directly.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器端请求伪造** (**SSRF**) **攻击**：攻击者利用 SSRF 漏洞，通过公共 Web 服务器向内部或后端服务器发送精心构造的请求。这些漏洞源于应用程序中的某些功能在公共
    Web 服务器上的滥用。内部服务器通常通过防火墙来防止不必要的流量进入网络。SSRF 漏洞可以使攻击者从公共 Web 服务器发送精心构造的请求，直接连接到内部或后端服务器。'
- en: Now, let's look at some common web server vulnerabilities.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一些常见的 Web 服务器漏洞。
- en: Common web server vulnerabilities
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常见的 Web 服务器漏洞
- en: Web servers may be configured with unnecessary features and services that create
    potential security holes. This could include files containing sensitive information,
    such as configuration files and scripts containing database names, user IDs, and
    passwords.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Web 服务器可能配置了不必要的功能和服务，这些可能带来潜在的安全漏洞。这些功能可能包括包含敏感信息的文件，如包含数据库名称、用户 ID 和密码的配置文件和脚本。
- en: 'Some of the most common misconfigurations include the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最常见的配置错误包括以下内容：
- en: File and directory permissions that have been set up incorrectly or that allow
    unauthorized access to sensitive data
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件和目录权限设置不当，或允许未经授权的访问敏感数据
- en: Default usernames and passwords that haven't been updated from their default
    settings, allowing anyone who knows it to access the system without a password
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未更新默认的用户名和密码，允许任何知道默认设置的人无密码访问系统
- en: Unused services or accounts being enabled, which may have been left by mistake
    or by previous attackers
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用未使用的服务或账户，这些服务或账户可能是由错误或之前的攻击者留下的
- en: Unnecessary features being enabled, which may have been installed for testing
    or development purposes and never removed after the site was put into production
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用不必要的功能，这些功能可能是为测试或开发目的安装的，但在网站投入生产后未被移除
- en: Poorly chosen passwords by administrators, allowing potential attackers to successfully
    guess administrative credentials, giving them unrestricted access to the web server
    itself
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员选择的密码不当，允许潜在攻击者成功猜测管理员凭证，从而使其不受限制地访问 Web 服务器本身
- en: Authorization attacks
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权攻击
- en: Here, the attacker finds a legitimate account with limited privileges, then
    logs in as that user, and gradually escalates privileges to access protected resources.
    Attackers then manipulate the HTTP requests to subvert the application authorization
    schemes by modifying input fields related to the user ID, username, access group,
    cost, filenames, file identifiers, and more.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，攻击者找到一个具有有限权限的合法账户，登录该账户后逐步提升权限以访问受保护的资源。然后，攻击者通过修改与用户 ID、用户名、访问组、费用、文件名、文件标识符等相关的输入字段，操控
    HTTP 请求，从而颠覆应用程序的授权机制。
- en: HTTP request tampering
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTTP 请求篡改
- en: HTTP request tampering is when someone tampers with the information in a client
    request by changing the values within the URL to falsify data or steal user information.
    This can be used to fool users into providing sensitive information or to spoof
    entire pages, giving an attacker access to privileges that they would not normally
    have.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 请求篡改是指攻击者通过修改 URL 中的值来篡改客户端请求中的信息，从而伪造数据或窃取用户信息。这可以用来欺骗用户提供敏感信息，或伪造整个页面，使攻击者获得他们通常没有的特权。
- en: Most of the time, HTTP request tampering is used to change hidden values in
    a URL, such as **HTTP_AUTHORIZATION**, or cookies that have been sent to the server
    with the request. The most common types of attacks that are dealt with include
    **cross-site scripting** (**XSS**) or **man-in-the-middle** (**MITM**) attacks,
    in which the attacker is intercepting requests and sending different values in
    each request. When these are done correctly, the server will assume that the attacker
    has access to these values (to make things easier for users), when it's just the
    attacker talking.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，HTTP 请求篡改用来更改 URL 中的隐藏值，如 **HTTP_AUTHORIZATION**，或已经随请求发送到服务器的 cookie。最常见的攻击类型包括
    **跨站脚本攻击**（**XSS**）或 **中间人攻击**（**MITM**），在这些攻击中，攻击者拦截请求并在每个请求中发送不同的值。当这些攻击执行得当时，服务器会认为攻击者可以访问这些值（为了方便用户），而实际上只是攻击者在操控数据。
- en: Authorization attacks are very easy to prevent by using HTTPS and other security
    measures. HTTPS encrypts the data being transferred, which prevents MITM attacks
    from intercepting requests to change information. Authentication will always be
    present when you're using HTTPS, so XSS or cookie injection is nearly impossible
    with encryption. Authentication can also be used to prevent invalid token manipulation,
    as tokens are usually encrypted before being sent to the server.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 HTTPS 和其他安全措施，可以轻松防止授权攻击。HTTPS 加密了传输的数据，从而防止中间人攻击拦截请求并修改信息。使用 HTTPS 时，身份验证始终存在，因此
    XSS 或 cookie 注入几乎不可能在加密情况下发生。身份验证还可以防止无效令牌的篡改，因为令牌通常会在发送到服务器之前进行加密。
- en: The most important step to take is verifying the authenticity of all the requests
    that are sent from a user, which can be achieved by requiring authentication for
    sensitive pages and checking that all the other requests have valid tokens attached.
    This will stop any type of HTTP request tampering attacks before they begin.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的步骤是验证所有来自用户的请求的真实性，可以通过要求敏感页面进行身份验证并检查其他所有请求是否附带有效的令牌来实现。这将有效阻止任何类型的 HTTP
    请求篡改攻击。
- en: Cookie parameter tampering
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cookie 参数篡改
- en: Cookie parameter tampering is when someone tampers with the information that's
    sent in a cookie from the client to the server by changing the values within a
    single cookie or multiple cookies. This can be used to fool users into providing
    sensitive data or to steal user information. Most of the time, this attack deals
    with manipulating session cookies, which are usually encrypted and unique for
    each user session. In most cases, the attacker is intercepting requests and sending
    different values in each request, specifically targeting the cookie that was used
    to access a protected service.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Cookie 参数篡改是指有人篡改从客户端发送到服务器的 cookie 中的信息，通过更改单个 cookie 或多个 cookie 内的值。这可以用来欺骗用户提供敏感数据或窃取用户信息。大多数情况下，这种攻击涉及篡改会话
    cookie，这些 cookie 通常是加密的并且对于每个用户会话都是唯一的。在大多数情况下，攻击者拦截请求，并在每个请求中发送不同的值，特别是针对用于访问受保护服务的
    cookie。
- en: Burp Suite ([https://portswigger.net](https://portswigger.net)) is a great tool
    to use to test your servers and apps for these types of attacks.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite ([https://portswigger.net](https://portswigger.net)) 是一个非常好的工具，可以用来测试你的服务器和应用程序是否受到这类攻击的威胁。
- en: Next, let's look at the potential threats to web applications.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来看看 Web 应用程序面临的潜在威胁。
- en: Web application attacks
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web 应用程序攻击
- en: Even if a web server has been set up securely or is protected by network security
    measures such as firewalls, a poorly written web application or the web server
    itself could give an attacker a way into the web server's security. An attacker
    can use many different types of attacks on web applications that aren't secure
    to get into the web server's security.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 即使 Web 服务器已经安全设置或通过防火墙等网络安全措施保护，一个编写不当的 Web 应用程序或 Web 服务器本身也可能为攻击者提供进入 Web 服务器安全的通道。攻击者可以利用许多不同类型的攻击方式，针对那些不安全的
    Web 应用程序进行攻击，从而突破 Web 服务器的安全防护。
- en: SQL injection attacks
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL 注入攻击
- en: SQL injection attacks occur when a developer does not properly validate their
    user input before passing it into a database. An attacker can inject SQL commands
    into the input and gain access to sensitive information on the server, such as
    usernames and passwords.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入攻击发生在开发人员未能正确验证用户输入，然后将其传入数据库时。攻击者可以将 SQL 命令注入到输入中，从而访问服务器上的敏感信息，如用户名和密码。
- en: 'To avoid this flaw, developers should always escape their user input with special
    escaping methods so that the input cannot affect the query:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这个漏洞，开发人员应该始终使用特殊的转义方法对用户输入进行转义，以确保输入无法影响查询：
- en: '[PRE0]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The **or 1=1** expression returns a value of **TRUE**, which can be used to
    get all the user IDs from the database. An attacker finds a flaw in a web application
    and uses it to get around normal security measures and get direct access to valuable
    data. When hackers try to do SQL injection attacks from things such as the web
    browser's address bar or form fields, queries, or searches, the hacker can get
    information that's not meant for them. Various commands can be used to modify
    data, delete massive amounts of data, or even create accounts within a web application.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**or 1=1**表达式返回一个**TRUE**值，可以用来获取数据库中的所有用户ID。攻击者发现Web应用程序中的漏洞，并利用该漏洞绕过正常的安全措施，直接访问有价值的数据。当黑客通过如Web浏览器的地址栏、表单字段、查询或搜索等方式进行SQL注入攻击时，黑客可以获取本不该属于他们的信息。各种命令可以用来修改数据、删除大量数据，甚至在Web应用程序中创建账户。'
- en: To avoid SQL injection attacks, it is necessary to securely store web application
    data. The web application data should have correct character types to avoid SQL
    injection attacks. Also, SQL injection attacks can be prevented by using one of
    the most basic secure programming techniques – parameterized queries. However,
    they are still vulnerable to SQL injection attacks because folks don't use prepared
    statements. Prepared statements are the most secure way to prevent SQL injection
    attacks.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免SQL注入攻击，有必要安全地存储Web应用程序数据。Web应用程序数据应该具有正确的字符类型，以避免SQL注入攻击。此外，可以通过使用最基本的安全编程技术之一——参数化查询来防止SQL注入攻击。然而，它们仍然容易受到SQL注入攻击，因为有些人没有使用预处理语句。预处理语句是防止SQL注入攻击的最安全方法。
- en: A prepared statement is an approach that helps prevent SQL injection attacks
    because it makes the web application explicitly indicate where user input goes
    in the statement. Many frameworks have adopted this method of preventing SQL injections,
    so developers don't have to worry about it.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理语句是一种帮助防止SQL注入攻击的方法，因为它要求Web应用程序明确指出用户输入在语句中的位置。许多框架已采用这种方法来防止SQL注入，因此开发人员不需要担心这一问题。
- en: However, there are still some web applications and developers that don't use
    prepared statements and can be vulnerable to SQL injection attacks, so be aware.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仍然有一些Web应用程序和开发人员没有使用预处理语句，可能会受到SQL注入攻击的影响，因此要保持警觉。
- en: Other web application attacks
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他Web应用程序攻击
- en: 'Let''s look at some other types of web application attacks you can use:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看其他一些你可以使用的Web应用程序攻击类型：
- en: '**DNS rebinding attacks**: This is when the hacker tries to fool the web browser''s
    DNS system into looking up an IP address that is not correct. This forces your
    browser to bypass the firewall and gives the hacker access.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DNS重绑定攻击**：这是指黑客试图欺骗Web浏览器的DNS系统，查找一个不正确的IP地址。这迫使浏览器绕过防火墙，从而使黑客获得访问权限。'
- en: '**Cookie snooping**: These attacks occur when the hacker steals your authentication
    to a website by sniffing cookies. Cookies are often sent back and forth during
    HTTP requests, so they contain lots of important information about what someone
    has done on a website. If any of that information is sensitive (such as the session
    ID or user identification), then it can be used to log in to that website remotely.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cookie嗅探**：这些攻击发生在黑客通过嗅探Cookies窃取你的网站认证信息时。Cookies在HTTP请求过程中经常被来回传送，因此它们包含了许多关于用户在网站上所做操作的重要信息。如果这些信息中包含敏感内容（如会话ID或用户身份识别信息），黑客就可以用这些信息远程登录该网站。'
- en: '**Cookie tampering**: In this attack, the attacker manipulates cookies as they
    travel to a browser from a web server. In other words, an attacker can change
    the cookie''s values before it reaches the user''s browser. If the altered cookie
    has any unauthorized privileges associated with it, then the attacker gains those
    privileges when performing malicious tasks.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cookie篡改**：在这种攻击中，攻击者在Cookies从Web服务器传输到浏览器的过程中进行篡改。换句话说，攻击者可以在Cookie到达用户浏览器之前改变其值。如果篡改后的Cookie具有任何未经授权的权限，那么攻击者在执行恶意任务时就可以获得这些权限。'
- en: '**Obfuscation application**: Attackers are usually very careful and ensure
    they hide their attacks and stay out of the way. **Intrusion detection systems**
    (**IDSs**) keep an eye out for signs of well-known attacks, which forces attackers
    to come up with new ways to stay unnoticed. This type of attack involves the attacker
    encrypting the attack to look like something else.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混淆应用**：攻击者通常非常小心，确保隐藏他们的攻击并保持低调。**入侵检测系统**（**IDSs**）会监视已知攻击的迹象，这迫使攻击者想出新的方法来保持不被察觉。这种攻击涉及攻击者加密攻击，使其看起来像是其他东西。'
- en: '**Parameter/form tampering**: This is a type of malicious intrusion in which
    an attacker exploits web applications that include parameters to authenticate
    users. This includes form fields for user login names and passwords.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数/表单篡改**：这是一种恶意入侵，攻击者利用包含用于验证用户身份的参数的Web应用程序。这包括用户登录名和密码的表单字段。'
- en: '**Cross-site scripting** (**XSS**): This is a security flaw that''s present
    in some web applications that allows attackers to gain unauthorized access to
    the victim''s system. Attackers can exploit this vulnerability by injecting malicious
    scripts into HTML forms or by enticing the vulnerable site''s visitors to click
    on an attacker-supplied link.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨站脚本攻击**（**XSS**）：这是某些Web应用程序中存在的一种安全漏洞，允许攻击者未经授权访问受害者的系统。攻击者可以通过向HTML表单注入恶意脚本或诱使易受攻击网站的访问者点击攻击者提供的链接来利用此漏洞。'
- en: '**Session hijacking**: This is a type of attack in which an attacker steals
    another user''s session ID and takes over their authenticated session. By taking
    control of the victim''s browsing session, the attackers can gain access to the
    victim''s account information without knowing their login credentials.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话劫持**：这是一种攻击方式，攻击者窃取另一个用户的会话ID，并接管其已认证的会话。通过控制受害者的浏览会话，攻击者可以在不知道登录凭证的情况下访问受害者的账户信息。'
- en: '**Unvalidated input attacks**: These are created so that an attacker can submit
    data to the frontend of a web application. The backend database can''t handle
    this information, leading to unintended behavior within the application.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未经验证的输入攻击**：这些攻击的目的是让攻击者能够向Web应用程序的前端提交数据。后端数据库无法处理这些信息，导致应用程序中出现意外行为。'
- en: '**Directory traversal/command execution**: This is another web server attack
    where attackers exploit web servers that can''t properly sanitize input. If the
    attack is successful, it allows attackers to read sensitive files, list directory
    contents, write files, and run arbitrary commands on the underlying system.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目录遍历/命令执行**：这是另一种Web服务器攻击，攻击者利用无法正确清理输入的Web服务器。如果攻击成功，攻击者可以读取敏感文件、列出目录内容、写入文件，并在底层系统上执行任意命令。'
- en: '**Denial of service attacks**: This is an attack in which a malicious party
    tries to make a machine or network resource unavailable for users. For example,
    they could try to send too many requests to a service, such as a web server. Attackers
    could also try to send malicious packets that will tie up resources or cause the
    system or application to fail.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拒绝服务攻击**：这是一种攻击，恶意方试图使计算机或网络资源无法为用户使用。例如，他们可能会尝试向服务（如Web服务器）发送过多的请求。攻击者还可能尝试发送恶意数据包，造成资源被占用或导致系统或应用程序崩溃。'
- en: '**SQL injection**: This is just like what we saw for web server attacks.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL注入**：这就像我们在Web服务器攻击中看到的那样。'
- en: '**XSS attacks**: Here, the attacker tricks someone into viewing a page containing
    a malicious script. When the user accesses this URL, the browser renders the page
    containing the malicious scripts, which could send requests to other applications
    or embed malicious code in pages.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XSS攻击**：在这里，攻击者欺骗某人查看包含恶意脚本的页面。当用户访问此URL时，浏览器渲染包含恶意脚本的页面，这些脚本可能会向其他应用程序发送请求或在页面中嵌入恶意代码。'
- en: '**Buffer overflow attacks**: This attack occurs when an application tries to
    put more data into a buffer than it can hold. This causes the excess data to spill
    out, corrupting other data in the process. Buffer overflows are frequently exploited
    by attackers.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓冲区溢出攻击**：当应用程序试图向缓冲区写入超出其容纳能力的数据时，就会发生此攻击。这会导致多余的数据溢出，进而破坏其他数据。缓冲区溢出经常被攻击者利用。'
- en: '**Source code disclosure**: This attack occurs when an attacker gains access
    to the source code or other information that could help them exploit vulnerabilities
    in the system. This threat occurs during product development, maintenance, and
    testing.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源代码泄露**：当攻击者获得源代码或其他可能帮助他们利用系统漏洞的信息时，就会发生这种攻击。这个威胁通常出现在产品开发、维护和测试阶段。'
- en: '**Cross-site request forgery attacks**: This attack forces an end user to execute
    unwanted actions on a web application that they''re currently authenticated in.
    The most common example of this is forcing users to make purchases or transfer
    funds.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨站请求伪造攻击**：这种攻击迫使最终用户在他们当前已认证的Web应用程序中执行不需要的操作。最常见的例子是强制用户进行购买或转账。'
- en: '**Command injection attacks**: This is an attack in which an attacker injects
    unauthorized commands into a command line that will run under the privileges of
    the user running them. If successful, attackers could gain access to operating
    system functions or download sensitive information.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令注入攻击**：这是一种攻击方式，攻击者将未经授权的命令注入到命令行中，这些命令将以运行它们的用户权限执行。如果攻击成功，攻击者可能获得操作系统功能的访问权限，或下载敏感信息。'
- en: '**Credential stuffing attacks**: Credential stuffing is the process of trying
    stolen credentials (usernames/passwords) on multiple websites. Most credential
    stuffing attacks are unsuccessful, but it can be worthwhile to monitor for this
    type of activity as users often use the same password on different sites. This
    could allow an attacker to gain access to other systems that were not part of
    the original attack.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**凭证填充攻击**：凭证填充是指在多个网站上尝试被盗用的凭证（用户名/密码）。大多数凭证填充攻击未能成功，但由于用户通常在不同站点使用相同的密码，因此监控这种活动可能是有价值的。这可能允许攻击者访问其他本不属于原始攻击的系统。'
- en: Now, let's learn more about the vulnerabilities of web APIs, web shells, and
    webhooks.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解Web API、Web Shell和Webhooks的漏洞。
- en: The vulnerabilities of web APIs, web shells, and webhooks
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web API、Web Shell和Webhooks的漏洞
- en: It is important to understand and be familiar with the vulnerabilities of web
    APIs, web shells, and webhooks. Recognizing best practices will help you provide
    greater security.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 理解并熟悉Web API、Web Shell和Webhooks的漏洞非常重要。认识到最佳实践有助于提供更高的安全性。
- en: Web APIs
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web API
- en: One of the most important parts of a website is its web **application programming
    interface** (**API**). The API takes data from a server and makes it compatible
    with another server. This way, other programs can read the information that would
    otherwise be difficult to access. With the help of an API, computer applications
    can perform actions on websites, such as posting comments. However, the API must
    be secure and not vulnerable to security concerns such as XSS.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 网站最重要的部分之一就是其Web **应用程序编程接口**（**API**）。API从服务器获取数据，并使其与另一个服务器兼容。通过这种方式，其他程序可以读取本来难以访问的信息。在API的帮助下，计算机应用程序可以在网站上执行操作，如发布评论。然而，API必须是安全的，不能存在XSS等安全漏洞。
- en: 'Some of the most popular APIs are as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最流行的API如下：
- en: '**SOAP API**: This is a standard that''s used by Microsoft and uses the **Web
    Services Description Language** (**WSDL**). WSDL is an XML language that contains
    information about how to communicate with a web server.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SOAP API**：这是一个由微软使用的标准，使用**Web服务描述语言**（**WSDL**）。WSDL是一种XML语言，包含有关如何与Web服务器通信的信息。'
- en: '**REST API**: REST stands for **Representational State Transfer**. This type
    of API is more of a software architectural style rather than an actual standard.
    It doesn''t include WSDL but does use HTTP methods (**GET**, **POST**, and so
    on) to communicate with web servers.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**REST API**：REST代表**表述性状态转移**。这种类型的API更多的是一种软件架构风格，而不是一个实际的标准。它不包括WSDL，但使用HTTP方法（**GET**、**POST**等）与Web服务器进行通信。'
- en: '**XML-RPC**: This is like the SOAP API in that XML-RPC is an interface rather
    than a specification. It is created using HTTP requests with XML supplied as the
    data format.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XML-RPC**：这类似于SOAP API，XML-RPC是一种接口，而不是一个规范。它通过HTTP请求创建，数据格式采用XML。'
- en: '**JSON-PRC**: This is a modern web API standard that uses **JavaScript Object
    Notation** (**JSON**) for its data format and HTTP requests for communication.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSON-RPC**：这是一种现代Web API标准，使用**JavaScript对象表示法**（**JSON**）作为数据格式，并使用HTTP请求进行通信。'
- en: Recent years have seen a huge rise in the use of web-based APIs to support different
    types of devices, such as mobile devices and loT devices. APIs are often used
    by these devices to communicate with backend web servers. To make these web-based
    APIs easier for people to use, developers often cut corners on security. This
    makes online web services more vulnerable to attacks. Attackers use a variety
    of methods to find and exploit flaws in these APIs. The attackers who want to
    get into an API have to figure out what API technologies are used, what security
    standards are used, and where they can attack.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，基于 Web 的 API 在支持不同类型的设备（如移动设备和物联网设备）方面得到了广泛应用。这些设备通常使用 API 与后端 Web 服务器进行通信。为了使这些
    Web API 更容易使用，开发者往往会在安全性上有所妥协。这使得在线 Web 服务更加容易受到攻击。攻击者使用各种方法来发现并利用这些 API 的漏洞。想要攻击
    API 的攻击者必须弄清楚所使用的 API 技术、所遵循的安全标准，以及他们可以攻击的地方。
- en: Now, let's discuss some API security best practices.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论一些 API 安全最佳实践。
- en: Best practices for API security
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API 安全最佳实践
- en: You should utilize the same strategies that work for web applications. In addition,
    you should set up a rate-limiting system to ensure an attacker can't make requests
    more frequently than legitimate users. You may also want to monitor your logs
    for requests from bots and scrapers as this could indicate attempts at gathering
    additional information on your application or website.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该采用适用于 Web 应用程序的相同策略。此外，你还应该设置速率限制系统，确保攻击者无法比合法用户更频繁地发起请求。你可能还需要监控日志，以检查来自机器人和抓取工具的请求，因为这可能表明攻击者正在试图收集有关你的应用程序或网站的额外信息。
- en: 'Here are some key points to help you out:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些帮助你的关键要点：
- en: Use HTTPS for encryption.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 HTTPS 进行加密。
- en: Use IP-based whitelists to gain access to APIs.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于 IP 的白名单来访问 API。
- en: Monitor and review logs.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控并审查日志。
- en: Parameterize statements in SQL queries.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 SQL 查询中参数化语句。
- en: Use quotas and throttling against your API.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对你的 API 使用配额和节流。
- en: Limit the request body and length of your API.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制 API 的请求体和长度。
- en: It's also important to understand security standards. Let's discuss some of
    these standards next.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 理解安全标准也很重要。接下来我们将讨论其中的一些标准。
- en: Web API security standards
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Web API 安全标准
- en: APIs, like any other software, have security flaws. They adhere to standards
    such as OAuth and SSL but include numerous vulnerabilities that attackers can
    use. If any of these standards are configured incorrectly, hackers can exploit
    them. Often, the developers of web applications don't think about the consequences
    of using security flaws in their API. For example, they'll use session IDs to
    identify users and allow access to information on their website or server without
    realizing how easy it is for hackers to reroute fraudulent traffic through an
    authorized user's connection. Administrators must check for security standards
    such as SSL when they're testing their web applications for vulnerabilities. They
    should also review XSS and SQL injection attacks to prevent future attacks on
    that API.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: API 和其他软件一样，也有安全漏洞。它们遵循像 OAuth 和 SSL 这样的标准，但也包含了许多攻击者可以利用的漏洞。如果这些标准配置不当，黑客就能利用它们。通常，Web
    应用程序的开发者没有意识到使用 API 中的安全漏洞会带来后果。例如，他们可能会使用会话 ID 来识别用户，并允许访问网站或服务器上的信息，而没有意识到黑客可以轻松地通过授权用户的连接将欺诈流量重定向过来。管理员在测试
    Web 应用程序的漏洞时，必须检查诸如 SSL 之类的安全标准。他们还应该审查 XSS 和 SQL 注入攻击，以防止未来对该 API 的攻击。
- en: Now, let's talk more about web shells and webhooks.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更详细地讨论一下网页 shell 和 Webhook。
- en: Web shells
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web Shell
- en: A web shell is a backdoor on a website or server that allows attackers access
    via HTTP/HTTPS. It can allow an attacker to upload and download files, execute
    system commands, modify server settings, view source code, and do other things.
    It's typically used to make the website or server more secure or easier to use
    by the administrators of that website or server. These types of shells are usually
    uploaded through vulnerabilities in the web application.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Web Shell 是一种存在于网站或服务器上的后门，允许攻击者通过 HTTP/HTTPS 进行访问。它可以让攻击者上传和下载文件、执行系统命令、修改服务器设置、查看源代码等。通常，它是为了使网站或服务器的管理员更方便地使用或更安全而存在的。这类
    shell 通常是通过 Web 应用程序中的漏洞上传的。
- en: Preventing the installation of a web shell
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 防止 Web Shell 的安装
- en: An attacker can send a series of requests to install a web shell on the server.
    The payload for this attack would look something like **http://kali:1337/index.php?install_shell=1&language=../../../../../etc/passwd%00**.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以发送一系列请求来在服务器上安装 Web Shell。这种攻击的负载看起来可能是这样的**http://kali:1337/index.php?install_shell=1&language=../../../../../etc/passwd%00**。
- en: To prevent this, make sure that the application has a strong input validation
    layer that is aware of the different types of above-the-fold input payloads. Note
    that this only prevents the installation of a web shell – it does not prevent
    an attacker from viewing any file on the system if they have been granted access
    to do so by another vulnerability.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这种情况发生，请确保应用程序具有强大的输入验证层，能够识别不同类型的上层输入负载。请注意，这只能防止安装 Web Shell - 如果攻击者已经通过其他漏洞获得访问权限，这并不能阻止他们查看系统上的任何文件。
- en: 'The following is an example of preventing the installation of a web shell:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个防止安装 Web Shell 的示例：
- en: '[PRE1]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Webhooks
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Webhooks
- en: Webhooks provide a communication channel between two web APIs. This allows one
    API to receive notifications from another, so information can be exchanged without
    a direct connection. Webhooks are a little harder to detect because the source
    of the data isn't always clear unless it's a POST request or uses a similar type
    of identifier. These types of requests may bring attention to your web application
    if you're not expecting them or if you don't know what to do with them.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Webhooks 提供了两个 Web API 之间的通信渠道。这允许一个 API 从另一个 API 接收通知，因此信息可以在没有直接连接的情况下交换。Webhooks
    很难被检测到，因为数据的来源并不总是清楚，除非它是一个 POST 请求或使用类似的标识符。如果你没有预期到这些请求，或者不知道如何处理它们，这些类型的请求可能会引起对你的
    Web 应用程序的关注。
- en: 'Many developers do not understand that webhooks require security, just like
    any other API endpoint: it is easy to make mistakes by doing what appears to be
    the right thing for a specific case, which can leave systems exposed to various
    attacks. These include MITM, replay, and arbitrary code execution attacks. The
    risk of attacks is higher when the webhooks are exposed to third parties, such
    as mobile applications or other outside services. It may be possible to blacklist
    certain IP addresses that appear to be performing these types of attacks, and
    implementing CAPTCHAs on your login pages will also help.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员不明白 Webhooks 需要像任何其他 API 端点一样具有安全性：通过做看起来对特定情况正确的事情，很容易犯错误，这可能会使系统暴露于各种攻击之下。这些攻击包括中间人攻击、重放攻击和任意代码执行攻击。当
    Webhooks 暴露给第三方时，如移动应用程序或其他外部服务，攻击的风险更高。可能可以将某些看起来正在执行这些类型攻击的 IP 地址列入黑名单，并在登录页面上实施
    CAPTCHA 也会有所帮助。
- en: Detecting web server hacking attempts
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测 Web 服务器的黑客攻击尝试
- en: There are several ways you can find out if your web server has been compromised.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以查明你的 Web 服务器是否被入侵。
- en: The first way is to monitor the logs from the web server. A good practice is
    to have more than one log file, but it's even better if they're monitored and
    sent to a separate system so that if something happens on the current web server,
    the logs will still be available.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是监视来自 Web 服务器的日志。一个好的做法是拥有多个日志文件，但如果它们被监视并发送到一个单独的系统，那就更好了，这样如果当前 Web 服务器发生了什么事情，日志仍然可用。
- en: Another way to do this is to audit ports on the web server. Make sure that all
    the open ports are accounted for and do not return any strange responses.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是审计 Web 服务器上的端口。确保所有打开的端口都有记录，并且不返回任何奇怪的响应。
- en: You should also look at traffic between the web server and users. If you see
    abnormally large requests or file downloads, this could be an indication of hacking
    attempts.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该查看 Web 服务器和用户之间的流量。如果你看到异常大的请求或文件下载，这可能是黑客攻击的迹象。
- en: Some other ways to protect your web servers/apps
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保护你的 Web 服务器/应用程序的其他方法
- en: The **machine.config** file specifies the resources that are available on the
    web server, including access to files, directories, and registry keys. Restrict
    access to these resources to prevent any kind of false file uploads and other
    dangerous requests.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**machine.config** 文件指定了 Web 服务器上可用的资源，包括对文件、目录和注册表键的访问。限制对这些资源的访问，以防止任何虚假文件上传和其他危险请求。'
- en: You should also make sure all your other applications are up to date to ensure
    they're patched against any vulnerabilities that may have been found in them.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该确保所有其他应用程序都是最新的，以确保它们已经修补了可能在其中发现的任何漏洞。
- en: Next, secure any certificates that are used for your keys. This is the easiest
    way to protect your keys. If you don't need them, remove them. If possible, restrict
    the permission of user accounts on the server. This will keep an attacker from
    gaining local administrator access.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，保护用于您的密钥的任何证书。这是保护您的密钥的最简单方法。如果您不需要它们，请删除它们。如果可能的话，限制服务器上用户帐户的权限。这将阻止攻击者获得本地管理员访问权限。
- en: Also, look into implementing secure coding practices. If your web pages aren't
    built securely, then hackers will be able to exploit that weakness and gain access
    to the system.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，研究实施安全编码实践。如果您的网页没有安全构建，黑客将能够利用这个弱点并访问系统。
- en: Finally, install security patches for your operating system and other applications
    as soon as they become available. The longer you wait, the more opportunities
    your system will have to be compromised. Patch management is an important part
    of secure computing.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一旦操作系统和其他应用程序的安全补丁发布，请立即安装。您等待的时间越长，您的系统就会有更多被入侵的机会。补丁管理是安全计算的重要组成部分。
- en: Now, let's look at web application security testing.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看网络应用安全测试。
- en: Web application security testing
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络应用安全测试
- en: Web application security testing is done to assess the performance and security
    of the apps you have in place. These types of tests should be scheduled regularly
    to ensure the app can handle a variety of different attacks.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用安全测试是为了评估您所拥有的应用程序的性能和安全性。这些类型的测试应定期安排，以确保应用程序能够应对各种不同的攻击。
- en: 'Here are some tips on how to get started with your web application security
    testing:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何开始进行网络应用安全测试的一些建议：
- en: Identify what you hope to learn by conducting the tests.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定您希望通过测试学到什么。
- en: Identify which performance and security issues are the most important for your
    project.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定对您的项目最重要的性能和安全问题。
- en: Create an attack plan before you start the testing process.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开始测试过程之前制定攻击计划。
- en: Perform the tests you have planned out.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行您计划的测试。
- en: Review the results of your testing and develop a plan for fixing any performance
    or security issues.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看测试结果并制定修复任何性能或安全问题的计划。
- en: Perform source code reviews.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行源代码审查。
- en: Evaluate the encoding schemes.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估编码方案。
- en: For more details on this topic, check out OWASP's *Testing Guide* at [https://owasp.org/www-project-web-security-testing-guide](https://owasp.org/www-project-web-security-testing-guide).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于这个主题的详细信息，请查看OWASP的*测试指南*，网址为[https://owasp.org/www-project-web-security-testing-guide](https://owasp.org/www-project-web-security-testing-guide)。
- en: At this point, I should mention that one of the best tools for testing the security
    of your web servers and their apps is Metasploit. Metasploit is an open source
    penetration testing software that allows users to find vulnerabilities in systems
    and networks and creates exploits for those vulnerabilities. This tool is a framework,
    which means that it is a platform that allows users to easily create custom tools
    and uses modules for different exploits.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我应该提到用于测试您的Web服务器及其应用程序安全性的最佳工具之一是Metasploit。Metasploit是一款开源渗透测试软件，允许用户发现系统和网络中的漏洞，并为这些漏洞创建利用。这个工具是一个框架，这意味着它是一个平台，允许用户轻松创建自定义工具，并使用不同漏洞的模块。
- en: 'Various things make Metasploit popular among the hacking community: it is free
    and has an immense library of user-generated scripts, modules, and modularization.
    You can also create modules.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit在黑客社区中受欢迎的原因有很多：它是免费的，并拥有庞大的用户生成的脚本、模块和模块化库。您还可以创建模块。
- en: Although the CEH exam doesn't cover a lot of information about the modules and
    plugins for Metasploit, I highly suggest that you learn about this awesome tool
    for your career. My recommendation would be *Metasploit 5.0 for Beginners – Second
    Edition*, from *Packt Publishing* ([https://www.packtpub.com/product/metasploit-5-0-for-beginners-second-edition/9781838982669](https://www.packtpub.com/product/metasploit-5-0-for-beginners-second-edition/9781838982669)).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管CEH考试并未涵盖有关Metasploit的模块和插件的大量信息，但我强烈建议您了解这个令人惊叹的工具，以促进您的职业发展。我推荐的是*Metasploit
    5.0 for Beginners – Second Edition*，由*Packt Publishing*出版（[https://www.packtpub.com/product/metasploit-5-0-for-beginners-second-edition/9781838982669](https://www.packtpub.com/product/metasploit-5-0-for-beginners-second-edition/9781838982669)）。
- en: There are so many attack tricks and tips you should be aware of for the real
    world. A whole book could be written about web server/application hacking. However,
    our goal here was to cover the information you'll need to know for the exam.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，有很多攻击技巧和提示你应该注意。关于Web服务器/应用程序的黑客攻击可以写一整本书。然而，我们在这里的目标是覆盖你需要了解的考试信息。
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed ways you can hack web servers and web apps. This
    allows you to discover existing and potential vulnerabilities. Then, we discussed
    why web servers and web apps create security issues. We talked about some of the
    different types of architectures you may experience and looked at some of the
    threats the wireless world presents us with. After that, we covered some attacks
    you can use for web application attacks. We covered some of the specifics and
    vulnerabilities of web APIs, web shells, and webhooks. Finally, we discussed some
    of the ways we can detect web server hacking attempts and prevent or limit what
    attackers can do.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了您可以黑客攻击Web服务器和Web应用程序的方法。这使您能够发现现有和潜在的漏洞。然后，我们讨论了为什么Web服务器和Web应用程序会产生安全问题。我们谈到了您可能遇到的不同类型的架构，并查看了无线世界给我们带来的一些威胁。之后，我们涵盖了一些您可以用于Web应用程序攻击的攻击。我们涵盖了Web
    API、Web shell和Webhook的一些具体漏洞和脆弱性。最后，我们讨论了一些我们可以检测Web服务器黑客攻击尝试并防止或限制攻击者可以做什么的方法。
- en: In the next chapter, we'll dive into hacking the **Internet of Things** (**IoT**)
    (or, as I like to say, Internet of THREATS) and **Operational Technology** (**OT**).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨黑客攻击**物联网**（**IoT**）（或者，正如我喜欢说的，威胁的互联网）和**运营技术**（**OT**）。
- en: Questions
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter''s material. You will find the answers in the *Assessments*
    section of the *Appendix*:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里是一些问题列表，供您测试对本章内容的了解。您将在*附录*的*评估*部分找到答案：
- en: A web application is best described by which of the following?
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪种描述最能概括一个Web应用程序？
- en: Code designed to be run client-side
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 旨在在客户端运行的代码
- en: Database SQL code
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据库SQL代码
- en: Web service targeting
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 面向Web服务的目标
- en: Code designed to be run server-side
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 旨在在服务器端运行的代码
- en: What is used to store session information?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于存储会话信息的是什么？
- en: A cookie
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个cookie
- en: A directory
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个目录
- en: A snoop
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个窥探者
- en: A file
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个文件
- en: The _________ scripting language is used on the client side.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: _________脚本语言用于客户端。
- en: PHP
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: PHP
- en: JavaScript
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: JavaScript
- en: ASP.NET
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: ASP.NET
- en: ASP
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: ASP
- en: Which of the following is used to access content that is not located in a website's
    root directory?
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪种用于访问不位于网站根目录中的内容？
- en: Directory traversal
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目录遍历
- en: Brute force
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 暴力破解
- en: SQL injection
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: SQL注入
- en: Port scanning
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 端口扫描
