- en: Introducing Android Forensics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Android取证
- en: 'Mobile forensics is a branch of digital forensics that is evolving in today''s
    digital era and is constantly changing as new phones are released and operating
    systems are updated. Android forensics deals with extracting, recovering, and
    analyzing data present on an Android device through various techniques. Due to
    the open nature of the Android operating system, these forensic techniques and
    methods can apply to more than just mobile phones: refrigerators, vehicle entertainment
    units, televisions, watches, and many more devices run Android.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 移动取证是数字取证的一个分支，正在当今的数字时代不断发展，并随着新手机的发布和操作系统的更新而不断变化。Android取证涉及通过各种技术提取、恢复和分析Android设备上的数据。由于Android操作系统的开放性，这些取证技术和方法不仅适用于手机，还可以应用于更多设备：冰箱、汽车娱乐系统、电视、手表等许多设备都运行Android系统。
- en: 'It''s important to have a clear understanding of the platform and other fundamentals
    before we dive in and find out how to extract data. In this chapter, we''ll cover
    the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解如何提取数据之前，清晰理解平台及其他基础知识非常重要。本章将涵盖以下内容：
- en: Mobile forensics
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动取证
- en: The mobile forensics approach
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动取证方法
- en: Challenges in mobile forensics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动取证中的挑战
- en: Android architecture
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android架构
- en: Android security
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android安全
- en: Android hardware components
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android硬件组件
- en: Android boot process
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android启动过程
- en: The world today is experiencing technological innovation like never before,
    and this growth is almost exponential in the field of mobile devices. Gartner,
    a technology research and advisory firm, in their forecasts published in January
    2018, estimated that mobile phone shipments in 2017 totaled 2.28 billion units
    and would increase to 2.32 billion in 2018\. This statistic alone reflects the
    unprecedented growth of mobile devices. Mobile phones have not only increased
    in number but also have become more sophisticated in terms of functionality. The
    increase of mobile phone subscribers from 1997 to 2018 is significantly high.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当今世界正经历着前所未有的技术创新，这种增长在移动设备领域几乎呈指数级增长。科技研究和咨询公司Gartner在2018年1月发布的预测中估计，2017年全球手机出货量为22.8亿部，预计2018年将增加到23.2亿部。仅这一统计数据就反映了移动设备前所未有的增长。手机不仅数量增加，而且在功能上也变得更加复杂。从1997年到2018年，手机用户数量的增长显著。
- en: You probably don't need to be told that smartphones are an increasingly large
    subset of mobile phones. The improvements in the computing power and data storage
    of these devices enable us to perform a wide range of activities, and we are increasingly
    becoming dependent on these mobile devices. Apart from performing routine tasks
    such as making calls and sending messages, and so on, these devices also support
    other activities such as sending emails, surfing the internet, recording videos,
    creating and storing documents, identifying locations with **Global Positioning
    System** (**GPS**) services, and managing business tasks. In other words, mobile
    devices are now repositories of sensitive personal information.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能不需要被告知，智能手机已成为移动电话中越来越大的一个子集。这些设备在计算能力和数据存储方面的改进，使我们能够执行各种活动，并且我们越来越依赖这些移动设备。除了执行日常任务，如打电话、发短信等，这些设备还支持其他活动，如发送电子邮件、浏览互联网、录制视频、创建和存储文档、通过**全球定位系统**（**GPS**）服务识别位置，以及管理业务任务。换句话说，移动设备现在已经成为敏感个人信息的存储库。
- en: Quite often, the data sitting in a device is more valuable than the device itself.
    Imagine a case involving the smartphone of a suspected terrorist; how useful would
    it be for law enforcement to access every contact, call, SMS, or email that the
    suspect had sent or received? Or, perhaps even better, every location that the
    phone had been? While much of this data is generally available through the service
    provider, that often requires additional warrants or subpoenas and can take a
    significant amount of time. And consider third-party applications; WhatsApp chat
    content, for example, is end-to-end encrypted, and no amount of subpoenas to Facebook
    can recover that data. This book will show you how to recover data, such as WhatsApp
    chats, that may not be recoverable through any other method. The fact that mobile
    forensics played a crucial role in solving cases such as the 2010 Times Square
    car bombing attempt and Boston marathon bombings, reaffirms the increasing role
    of mobile forensics in solving many cases.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 设备中的数据往往比设备本身更有价值。假设有一起涉及嫌疑恐怖分子智能手机的案件；如果执法机关能够访问嫌疑人发送或接收的每一条联系人、电话、短信或电子邮件，这将有多么有用？或者，更好的是，能够访问手机曾经所在的每一个位置？虽然大部分数据通常可以通过服务提供商获取，但这往往需要额外的搜查令或传票，而且可能需要相当长的时间。此外，考虑到第三方应用程序；例如，WhatsApp聊天内容是端到端加密的，任何数量的传票都无法从Facebook恢复这些数据。本书将向你展示如何恢复一些数据，比如WhatsApp聊天内容，这些数据通过其他方法可能无法恢复。移动取证在解决2010年时代广场汽车炸弹袭击未遂事件和波士顿马拉松爆炸案等案件中发挥了关键作用，进一步证明了移动取证在许多案件解决中的日益重要性。
- en: Mobile forensics
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动取证
- en: Mobile device forensics is a branch of digital forensics that deals with extracting,
    recovering, and analyzing digital evidence or data from a mobile device under
    forensically sound conditions. Simply put, it deals with accessing the data stored
    on devices, which includes SMS, contacts, call records, photos, videos, documents,
    application files, browsing history, and so on, and recovering data deleted from
    devices using various forensic techniques. It is important that the process of
    recovering or accessing details from a device is forensically sound if it has
    to be admitted in a court of law and to maintain the integrity of the evidence.
    If the evidence has to be admitted in a court of law, it's important to work only
    on the image file and not on the original device itself.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备取证是数字取证的一个分支，专门处理在取证环境下从移动设备中提取、恢复和分析数字证据或数据。简而言之，它涉及访问存储在设备上的数据，包括短信、联系人、通话记录、照片、视频、文档、应用程序文件、浏览历史等，并使用各种取证技术恢复设备中已删除的数据。如果证据必须在法庭上作为证据使用，那么恢复或访问设备详细信息的过程必须符合取证规范，以保持证据的完整性。如果证据需要在法庭上使用，重要的是只处理镜像文件，而不是原始设备本身。
- en: The term *forensically sound* is often used in the digital forensics community
    to clarify the correct use of a particular forensic technology or methodology.
    Mobile forensics, especially Android forensics, is evolving fast, owing to the
    fact that it has a total the market share of 85 percent (as per market research
    firm, IDC).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*取证规范*这一术语常用于数字取证领域，用以澄清某一特定取证技术或方法的正确使用。由于Android设备在市场上占据85%的份额（根据市场研究公司IDC的数据显示），移动取证，特别是Android取证，正在快速发展。'
- en: As explained by Eoghan Casey, in his book *Digital Forensics and Investigation*,
    forensic soundness is not just about keeping the original evidence unaltered.
    Even the routine task of acquiring data from a hard drive using a hardware write
    blocker may cause alterations (for example, making a hidden area of the hard drive
    accessible) on the drive. One of the keys to forensic soundness is documentation.
    Documenting how the device is handled from the beginning is very important. Hence,
    an investigation can be considered forensically sound if the acquisition process
    preserves the original data and its authenticity and integrity can be validated.
    Evidence integrity checks ensure that the evidence has not been tampered  with
    from the time it was collected. Integrity checks are done by comparing the digital
    fingerprint of the evidence taken at the time of collection with the digital fingerprint
    of the evidence in its current state.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Eoghan Casey在他的书《*数字取证与调查*》中所解释的，取证的准确性不仅仅是保持原始证据不被更改。即使是使用硬件写入阻止器从硬盘驱动器获取数据的常规操作，也可能会导致硬盘上的更改（例如，使隐藏区域变得可访问）。取证准确性的关键之一是文档记录。从一开始就记录设备的处理方式非常重要。因此，如果获取过程能够保持原始数据，并且能够验证其真实性和完整性，那么调查就可以被认为是取证上有效的。证据完整性检查确保证据自收集以来没有被篡改。通过将收集时的证据数字指纹与当前状态下的证据数字指纹进行比较来进行完整性检查。
- en: 'There is a growing need for mobile forensics due to several reasons, some of
    which include the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于以下一些原因，移动取证的需求正在不断增长：
- en: Use of mobile phones to store personal information
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动电话存储个人信息的使用
- en: Increased use of mobile phones to perform online activities
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动电话在执行在线活动中的使用增多
- en: Use of mobile phones in several crimes
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动电话在多种犯罪中的使用
- en: Mobile forensics on a particular device is primarily dependent on the underlying
    operating system. Hence, we have different fields such as Android forensics, iOS
    forensics, and so on.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对特定设备的移动取证主要依赖于底层操作系统。因此，我们有不同的领域，如Android取证、iOS取证等。
- en: The mobile forensics approach
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动设备取证方法
- en: 'Once the data is extracted from a device, different methods of analysis are
    used based on the underlying case. As each investigation is distinct, it is not
    possible to have a single definitive procedure for all of the cases. However,
    the overall process can be broken down into five phases, as shown in the following
    diagram:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦从设备中提取数据，根据案件的不同背景，使用不同的分析方法。由于每项调查都有其独特性，因此不可能为所有案件制定一个统一的确切程序。然而，整体过程可以分为五个阶段，如下图所示：
- en: '![](img/25998d33-34b3-45b8-9a26-ad0847a4405e.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25998d33-34b3-45b8-9a26-ad0847a4405e.png)'
- en: The following section discusses each phase in detail.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分将详细讨论每个阶段。
- en: Investigation preparation
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调查准备
- en: This phase begins when a request for examination is received. It involves preparing
    all of the paperwork and forms required to document chain of custody, ownership
    information, device model, purpose, information that the requestor is seeking,
    and so on. Chain of custody refers to the chronological documentation or paper
    trail, showing the seizure, custody, control, transfer, analysis, and disposition
    of physical or electronic evidence. From the details submitted by the requestor,
    it's important to have a clear understanding of the objective for each examination.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这一阶段从接收到检查请求时开始。它包括准备所有必要的文书和表格，以记录证据链、所有权信息、设备型号、目的、请求方所寻求的信息等。证据链指的是按时间顺序记录的文件或纸质档案，展示了物理或电子证据的扣押、保管、控制、转移、分析和处置。根据请求方提交的细节，重要的是要清楚地了解每项检查的目标。
- en: Seizure and isolation
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扣押和隔离
- en: 'Handling the device during seizure is one of the important steps while performing
    forensic analysis. The evidence is usually transported using anti-static bags,
    which are designed to protect electronic components against damage produced by
    static electricity. As soon as the device is seized, care should be taken to make
    sure that our actions don''t result in any data modification on the device. At
    the same time, any opportunity that can aid the investigation should also not
    be missed. The following are some of the points that need to be considered while
    handling an Android device during this phase:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 扣押设备时的处理是执行取证分析中的一个重要步骤。证据通常通过防静电袋运输，这些袋子旨在保护电子元件免受静电损坏。设备一旦被扣押，必须小心确保我们的操作不会导致设备上的数据修改。同时，也不应错过任何有助于调查的机会。以下是处理安卓设备时需要注意的几点：
- en: With increasing user awareness of security and privacy, most devices now have
    screen lock enabled. During the time of seizure, if there is a chance (for instance,
    the phone is recovered unlocked), disable the passcode. Some of the devices don't
    ask the user to reenter the passcode while disabling the lock screen option.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着用户对安全性和隐私的关注不断增加，现在大多数设备默认启用屏幕锁定。在扣押期间，如果有机会（例如，手机恢复解锁状态），请禁用密码。一些设备在禁用锁屏选项时，不要求用户重新输入密码。
- en: 'If the device is unlocked, try to change the settings of the device to allow
    greater access to the device. The following are some of the settings that can
    be considered to achieve this:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果设备已解锁，尝试更改设备设置以允许更大的访问权限。以下是一些可以考虑的设置，以实现这一目标：
- en: '**Enable USB debugging**: Enabling this option gives greater access to the
    device through the **Android Debug Bridge** (**ADB**) connection. We are going
    to cover the ADB in detail in [Chapter 2](b81853c6-388b-4e15-b8dd-deb5c1b5b36d.xhtml),
    *Setting Up the Android Forensic Environment*. This will greatly aid the forensic
    investigator during the data extraction process. In Android devices, this option
    is usually found under Settings | Developer options, as shown in the following
    screenshot. On newer Android versions starting from 4.2, developer options are
    hidden by default. To enable them, navigate to Settings | About Phone (or **Settings
    | System | About Phone** on Android 8.0 or higher)and tap on the Build number
    seven times.'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用 USB 调试**：启用此选项将通过**安卓调试桥**（**ADB**）连接为设备提供更大的访问权限。我们将在[第二章](b81853c6-388b-4e15-b8dd-deb5c1b5b36d.xhtml)《设置安卓取证环境》中详细介绍
    ADB。这将大大帮助取证调查人员在数据提取过程中。在安卓设备中，这个选项通常可以在设置 | 开发者选项下找到，如下图所示。从安卓4.2开始，新的安卓版本默认隐藏开发者选项。要启用它们，请转到设置
    | 关于手机（或在安卓8.0及更高版本中选择**设置 | 系统 | 关于手机**），然后点击“版本号”七次。'
- en: '**Enable the Stay Awake setting**: Enabling this option and charging the device
    will make the device stay awake; in other words, it doesn''t get locked. In Android
    devices, this option is usually found under Settings | Developer options, as shown
    in the following screenshot:'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用保持唤醒设置**：启用此选项并在充电时将使设备保持唤醒状态；换句话说，它不会被锁定。在安卓设备中，这个选项通常可以在设置 | 开发者选项下找到，如下图所示：'
- en: '![](img/38bd1af0-c2c8-4b6a-b8bb-170501540b49.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38bd1af0-c2c8-4b6a-b8bb-170501540b49.png)'
- en: '**Increase screen timeout**: This is the time for which the device will be
    active once it is unlocked. Depending on the device model, this time can be set
    up to 30 minutes. In most devices, it can be accessed under Settings | Display
    | Screen Timeout.'
  id: totrans-35
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增加屏幕超时**：这是设备解锁后保持活动状态的时间。根据设备型号，这个时间最长可以设置为30分钟。在大多数设备中，可以通过设置 | 显示 | 屏幕超时进行访问。'
- en: Please note that the location to access these items changes across different
    versions and models of Android phones and may not be available in all versions.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，访问这些选项的位置会因安卓手机的不同版本和型号而有所不同，某些版本可能没有该选项。
- en: In mobile forensics, it is of crucial importance to protect the seized device
    so that our interaction with the evidence (or, for that matter, an attacker's
    attempt to remotely interact with the device) doesn't change the evidence. In
    computer forensics, we have software and hardware write blockers that can perform
    this function. But in mobile forensics, since we need to interact with the device
    to pull the data, these write blockers are not of any use. Another important aspect
    is that we also need to prevent the device from interacting with a wireless radio
    network. As mentioned earlier, there is a high probability that an attacker can
    issue remote wipe commands to delete all of the data including emails, applications,
    photos, contacts, and other files on the device.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动取证中，保护被扣押设备至关重要，以确保我们与证据的互动（或者说攻击者试图远程与设备互动）不会改变证据内容。在计算机取证中，我们可以使用软件和硬件写保护器来执行此功能。但在移动取证中，由于我们需要与设备互动以提取数据，这些写保护器并不起作用。另一个重要方面是，我们还需要防止设备与无线电网络互动。如前所述，攻击者很可能会发出远程擦除命令，删除设备上的所有数据，包括电子邮件、应用程序、照片、联系人和其他文件。
- en: The Android Device Manager and several other third party apps allow the phone
    to be remotely wiped or locked. This can be done by signing into the Google account
    that is configured on the mobile. Using this software, an attacker can also locate
    the device that could pose a security risk. For all of these reasons, isolating
    the device from all communication sources is very important.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Android 设备管理器和其他一些第三方应用程序允许远程擦除或锁定手机。这可以通过登录配置在手机上的 Google 账户来完成。使用这些软件，攻击者还可以定位设备，这可能带来安全风险。出于这些原因，将设备与所有通信源隔离非常重要。
- en: Have you thought about remote wipe options without using the internet? **Mobile
    Device Management** (**MDM**) software, commonly used by companies to manage corporate
    devices, can provide remote wipe features just by sending an SMS. Isolating the
    device from all communication options is crucial.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有考虑过不通过互联网进行远程擦除的选项？**移动设备管理**（**MDM**）软件，企业常用来管理公司设备，可以通过发送短信来提供远程擦除功能。将设备与所有通信选项隔离是至关重要的。
- en: 'To isolate the device from a network, we can put the device in Airplane mode
    if we have access to the device. Airplane mode disables a device''s wireless transmission
    functions such as cellular radio, Wi-Fi, and Bluetooth. However, as Wi-Fi is now
    available in airplanes, some devices now allow Wi-Fi access in Airplane mode.
    The following screenshot shows the quick settings available by dragging down the
    top menu bar from the lock screen:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要将设备与网络隔离，如果我们能够访问该设备，可以将设备设置为飞行模式。飞行模式会禁用设备的无线传输功能，如蜂窝网络、Wi-Fi 和蓝牙。然而，由于现在飞机上也提供
    Wi-Fi，一些设备在飞行模式下也允许连接 Wi-Fi。以下截图显示了通过从锁屏下拉顶部菜单栏访问的快速设置：
- en: '![](img/786c71a1-7796-49eb-81bb-2a12aa009c3a.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/786c71a1-7796-49eb-81bb-2a12aa009c3a.png)'
- en: Note that these toggles are customizable and may not be available on every device;
    some devices may also require the device to be unlocked to make these changes.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些切换选项是可定制的，并且可能并非所有设备都能使用；有些设备可能还需要解锁设备才能进行这些更改。
- en: 'An alternate solution would be to use a Faraday bag or RF isolation box, as
    both effectively block signals to and from the mobile phone. One concern with
    these isolation methods is that, once they''re employed, it is difficult to work
    with the phone because you cannot see through it to use the touchscreen or keypad.
    For this reason, Faraday tents and rooms exist, as shown in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种解决方案是使用法拉第袋或 RF 隔离盒，它们都能有效地屏蔽手机信号的收发。这些隔离方法的一个问题是，一旦使用了它们，手机的触摸屏或键盘无法正常使用，因为你无法透过隔离设备查看手机。为了解决这个问题，存在法拉第帐篷和房间，如下图所示：
- en: '![](img/a0a74bbc-b4c9-4eac-a022-fa5e6bb3f328.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0a74bbc-b4c9-4eac-a022-fa5e6bb3f328.png)'
- en: Even after taking all of these precautions, certain automatic functions such
    as alarms can still trigger. If such a situation is encountered, it must be properly
    documented.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 即使采取了所有这些预防措施，某些自动功能，如闹钟，仍然可能会触发。如果遇到这种情况，必须正确记录。
- en: The acquisition phase
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取阶段
- en: 'The acquisition phase refers to extraction of data from the device. Due to
    the inherent security features of mobile devices, extracting the data is not always
    straightforward. The extraction method is decided largely depending on the operating
    system, make, and model. The following are the types of acquisition methods that
    can be used to extract data from a device:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 获取阶段指的是从设备中提取数据。由于移动设备固有的安全特性，提取数据并不总是简单直接的。提取方法主要取决于操作系统、品牌和型号。以下是可以用于从设备中提取数据的获取方法类型：
- en: '**Manual acquisition** is the simplest of all of the acquisition methods. The
    examiner uses the user interface of the phone to browse and investigate. No special
    tools or techniques are required here, but the limitation is that only the files
    and data visible through the normal user interface can be extracted. Data extracted
    through other methods can also be verified using this. It should be noted that
    this option can very easily modify data on the device (for instance, opening an
    unread SMS will mark it as read), so these changes should be documented as thoroughly
    as possible.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手动获取**是所有获取方法中最简单的一种。检查员使用手机的用户界面浏览和调查。这里不需要特殊的工具或技术，但其限制在于只能提取通过正常用户界面可见的文件和数据。通过其他方法提取的数据也可以通过这种方式进行验证。需要注意的是，这种选项非常容易修改设备上的数据（例如，打开未读的短信将其标记为已读），因此这些更改应尽可能详细地记录。'
- en: '**Logical acquisition**, also called **logical extraction**, generally refers
    to extracting the files that are present on a logical store such as a file system
    partition. This involves obtaining data types such as text messages, call history,
    and pictures from a phone. The logical extraction technique works by using the
    original equipment manufacturer **Applications Programming Interfaces** (**APIs**)
    for synchronizing the phone''s contents with a computer. This technique usually
    involves extracting the following evidence:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逻辑获取**，也称为**逻辑提取**，通常指的是提取存在于逻辑存储中的文件，如文件系统分区。这包括从手机中获取如短信、通话历史记录和图片等数据类型。逻辑提取技术通过使用原始设备制造商的**应用程序编程接口**（**API**）来同步手机内容与计算机。这种技术通常涉及提取以下证据：'
- en: Call logs
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通话记录
- en: SMS
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 短信
- en: MMS
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多媒体短信
- en: Browser history
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器历史记录
- en: People
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人物
- en: Contact methods
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联系方式
- en: Contacts extensions
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联系人扩展
- en: Contacts groups
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联系人组
- en: Contacts phones
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联系人电话
- en: Contacts setting
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联系人设置
- en: External Image Media (metadata)
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部图像媒体（元数据）
- en: External Image Thumbnail Media (metadata)
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部图像缩略图媒体（元数据）
- en: External Media, Audio, and Misc. (metadata)
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部媒体、音频及杂项（元数据）
- en: External Videos (meta data)
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部视频（元数据）
- en: MMSParts (includes full images sent via MMS)
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多媒体短信部分（包括通过MMS发送的完整图像）
- en: Location details (GPS data)
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置详情（GPS数据）
- en: Internet activity
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络活动
- en: Organizations
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织
- en: List of all applications installed and their versions
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有已安装应用及其版本列表
- en: Social networking app data such as WhatsApp, Skype, and Facebook
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交网络应用数据，如WhatsApp、Skype和Facebook
- en: '**File System acquisition** is a logical procedure and generally refers to
    the extraction of a full file system from a mobile device. File system acquisition
    can sometimes help in recovering the contents (stored in SQLite files) that are
    deleted from the device.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件系统获取**是一个逻辑过程，通常指从移动设备中提取完整的文件系统。文件系统获取有时可以帮助恢复从设备中删除的内容（存储在SQLite文件中）。'
- en: '**Physical acquisition** involves making a bit-for-bit copy of an entire flash
    storage device, equivalent to a full image of a hard drive. The data extracted
    using this method is usually in the form of raw data (as a hexadecimal dump) that
    can then be further parsed to obtain file system information or human-readable
    data. Since all investigations are performed on this image, this process also
    ensures that an original evidence is not altered.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物理获取**涉及对整个闪存存储设备进行逐位复制，相当于对硬盘的完整镜像。通过此方法提取的数据通常是原始数据（以十六进制转储的形式），然后可以进一步解析以获取文件系统信息或可读数据。由于所有调查工作都是在此镜像上进行的，这一过程也确保了原始证据未被更改。'
- en: Examination and analysis
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查和分析
- en: In this phase, different software tools are used to extract the data from the
    memory image. In addition to the tools, an investigator may also need the help
    of a hex editor, as tools do not always extract all of the data. There is no single
    tool that can be used in all cases. Hence, examination and analysis requires a
    sound knowledge of various file systems, file headers, and so on.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，使用不同的软件工具从内存映像中提取数据。除了工具外，调查员可能还需要十六进制编辑器的帮助，因为工具并不总是能提取所有数据。没有单一工具能够在所有情况下使用。因此，检查和分析需要对各种文件系统、文件头等有扎实的知识。
- en: Reporting
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '报告  '
- en: 'Documentation of the examination should be done throughout the process, noting
    down what was done in each phase. The following are a few points that might be
    documented by an examiner:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '在整个过程中应进行考试文档记录，记录下每个阶段所做的工作。以下是检查员可能记录的一些要点：  '
- en: The date and time the examination started
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '考试开始的日期和时间  '
- en: The physical condition of the phone
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '手机的物理状况  '
- en: The status of the phone when received (ON/OFF)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '收到手机时的状态（开/关）  '
- en: The make, model, and operating system of the phone
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '手机的品牌、型号和操作系统  '
- en: Pictures of the phone and individual components
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '手机及其各个组件的图片  '
- en: The tools used during the investigation (including the version number)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '调查过程中使用的工具（包括版本号）  '
- en: Data documented during the examination
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在检查过程中记录的数据  '
- en: The data extracted from the mobile device should be clearly presented to the
    recipient so that it can be imported into other software for further analysis.
    In the case of civil or criminal cases, wherever possible, pictures of data as
    it existed on the cellular phone should be collected, as they are visually compelling
    to a jury.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '从移动设备提取的数据应清晰地呈现给接收方，以便能够导入到其他软件中进行进一步分析。在民事或刑事案件中，尽可能地收集手机上存在的数据的图片，因为这些图片对陪审团来说具有视觉冲击力。  '
- en: Challenges in mobile forensics
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '移动取证中的挑战  '
- en: 'With the increased usage of Android devices and the wider array of communication
    platforms they support, the demand for forensic examination automatically has
    grown. While working with mobile devices, forensic analysts face a number of challenges.
    The following points shed light on some of the **mobile forensics challenges**
    faced today:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '随着Android设备的使用增加以及它们支持的通信平台种类的扩展，对取证检查的需求自然也增加了。在与移动设备合作时，取证分析员面临着许多挑战。以下几点揭示了今天面临的一些**移动取证挑战**：  '
- en: '**Preventing data alteration on the device**: One of the fundamental rules
    to remember in forensics is to preserve the original evidence. In other words,
    the forensic techniques that are applied on a device to extract any information
    should not alter the data present on the device. However, this is usually not
    practical with respect to mobile forensics because simply switching on a device
    might also change certain state variables present on the device. With mobile devices,
    background processes always run, and a sudden transition from one state to another
    can result in the loss or modification of data. Hence, there''s a chance that
    data may be altered either intentionally or unintentionally by the forensic analyst.
    Apart from this, there is a high possibility that an attacker (or the user) can
    remotely change or delete the contents of the device. As mobile phones use different
    communication channels (cellular, Wi-Fi, Bluetooth, infrared, and so on), the
    possibility of communicating through them should be eliminated. Features such
    as remote data wiping would enable an attacker to remotely wipe the entire device
    just by sending an SMS or by simply pressing a button that sends a wipe request
    to the Android device. Unlike computer forensics, mobile device forensics requires
    more than just isolating the device from the network, and *phones cannot always
    be left powered off during examination*.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**防止设备上的数据篡改**：法医学中的一个基本规则是保留原始证据。换句话说，应用于设备上的法医技术提取任何信息时，不应改变设备上现有的数据。然而，在移动设备法医学中，这通常并不实际，因为仅仅开启设备也可能会改变设备上的某些状态变量。在移动设备中，后台进程始终在运行，从一种状态到另一种状态的突然过渡可能会导致数据的丢失或修改。因此，数据可能会被法医分析师故意或无意地篡改。除此之外，攻击者（或用户）有很大可能性能够远程更改或删除设备的内容。由于移动电话使用不同的通信通道（如蜂窝网络、Wi-Fi、蓝牙、红外等），应该消除通过这些通道进行通信的可能性。像远程数据擦除这样的功能使得攻击者能够通过发送短信或仅仅按下一个按钮来向Android设备发送擦除请求，从而远程擦除整个设备。与计算机法医学不同，移动设备法医学不仅仅是将设备与网络隔离，*手机在检查期间不能总是保持关闭状态*。'
- en: '**The wide range of operating systems and device models**: The wide range of
    mobile operating systems available in the market makes the life of a forensic
    analyst more difficult. Although Android is the most dominant operating system
    in the mobile world, there are mobile devices that run on other operating systems
    including iOS, Blackberry, and Windows, that are often encountered during investigations.
    Also, for a given operating system, there are millions of mobile devices available
    that differ in OS versions, hardware, and various other features. Based on manufacturer,
    the approach to acquire forensic artifacts changes. To remain competitive, manufacturers
    release new models and updates so rapidly that it''s hard to keep a track of all
    of them. Sometimes, within the same operating system the data storage options
    and file structures also change, making it even more difficult. There''s no single
    tool that can work on all the available types of mobile operating systems. Hence,
    it is crucial for forensic analysts to remain updated on all of the latest changes
    and techniques, and to understand the underlying concepts in this book so they
    can succeed when the tools fail.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统和设备型号的广泛性**：市场上可用的各种移动操作系统使得法医分析师的工作更加困难。虽然Android是移动世界中最主流的操作系统，但仍有一些设备运行其他操作系统，包括iOS、Blackberry和Windows，这些设备在调查中经常遇到。此外，对于给定的操作系统，有成千上万的移动设备可用，它们在操作系统版本、硬件以及其他各种特性上有所不同。根据制造商的不同，获取法医证据的方法也会有所变化。为了保持竞争力，制造商快速发布新型号和更新，难以追踪所有设备。有时，即使是同一操作系统中，数据存储选项和文件结构也会发生变化，这让工作变得更加困难。目前没有任何单一工具能够适用于所有类型的移动操作系统。因此，法医分析师必须保持对最新变化和技术的更新，并理解本书中的基本概念，以便在工具失效时仍能成功。'
- en: '**Inherent security features**: As the concept of privacy is increasingly gaining
    importance, mobile manufacturers are moving towards implementing robust security
    controls on devices, which complicates the process of gaining access to the data.
    For example, if the device is passcode protected, the forensic investigator has
    to first find a way to bypass the passcode. Similarly, full disk encryption mechanisms
    implemented on many modern devices prevent law enforcement agencies and forensic
    analysts from accessing the information on the device. Apple''s iPhone encrypts
    all of the data present on the device by default using hardware keys built into
    the device. Beginning with Android Nougat, Android forces full disk encryption
    by default (though it can vary if the OS is modified by the manufacturer). At
    Google''s 2017 I/O conference, they announced that 80% of Android 7.0 Nougat devices
    were encrypted and 70% used a secure lock screen. These numbers will likely continue
    to grow as encryption is forced by more manufacturers during the initial setup
    process. It is very difficult for an examiner to break these encryption mechanisms
    using techniques such as brute force.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固有的安全特性**：随着隐私概念日益重要，手机制造商正朝着在设备上实施强大安全控制的方向发展，这使得获取设备数据的过程更加复杂。例如，如果设备设置了密码保护，法医调查员必须首先找到绕过密码的方法。同样，许多现代设备上实施的全盘加密机制阻止了执法机构和法医分析人员访问设备上的信息。苹果的iPhone默认使用内置硬件密钥加密设备上的所有数据。从Android
    Nougat开始，Android默认强制全盘加密（尽管如果操作系统被制造商修改，可能会有所不同）。在2017年Google I/O大会上，Google宣布80%的Android
    7.0 Nougat设备已加密，70%的设备使用了安全锁屏。随着越来越多的制造商在初始设置过程中强制加密，这些数字可能会继续增长。对于检查员来说，使用暴力破解等技术打破这些加密机制是非常困难的。'
- en: '**Legal issues**: Mobile devices can be involved in crimes that span across
    the globe and can cross geographical boundaries. In order to tackle these multi-jurisdictional
    issues, the forensic examiner needs to be aware of the nature of the crime and
    regional laws.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**法律问题**：移动设备可能涉及跨越全球的犯罪，并可能跨越地理边界。为了应对这些跨司法管辖区的问题，法医检查员需要了解犯罪的性质和区域法律。'
- en: Android architecture
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android架构
- en: Before we proceed with the internals of Android forensics, this section will
    introduce you to Android as an operating system and will cover various fundamental
    concepts that need to be understood to gain experience in the area of forensics.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究Android法医之前，本节将向您介绍Android作为操作系统，并介绍一些必须理解的基本概念，这些概念是获得法医经验所必需的。
- en: Any operating system (desktop or mobile phone) assumes the responsibility for
    managing the resources of the system and provides a way for applications to talk
    to hardware or physical components in order to accomplish certain tasks. The Android
    operating system is no different. It powers mobile phones, manages memory and
    processes, enforces security, takes care of networking issues, and so on. Android
    is open source and most of the code is released under the Apache 2.0 license.
    Practically, this means mobile phone device manufacturers can access it, freely
    modify it, and use the software according to the requirements of any device. This
    is one of the primary reasons for its spread in popularity.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 任何操作系统（桌面或手机）都负责管理系统资源，并为应用程序提供与硬件或物理组件进行交互的方式，以完成某些任务。Android操作系统也不例外。它为手机提供动力，管理内存和进程，执行安全性，处理网络问题等等。Android是开源的，大部分代码是根据Apache
    2.0许可证发布的。实际上，这意味着手机设备制造商可以访问它，免费修改它，并根据任何设备的需求使用该软件。这是其普及的主要原因之一。
- en: 'The Android operating system consists of a stack of layers running one above
    the other. Android architecture can be best understood by taking a look at what
    these layers are and what they do. The following screenshot (courtesy of [http://developer.android.com](http://developer.android.com)),
    shows the various layers involved in the Android software stack:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Android操作系统由一层层叠加运行的层组成。要最好地理解Android架构，需要了解这些层是什么以及它们的作用。以下屏幕截图（由[http://developer.android.com](http://developer.android.com)提供）展示了Android软件堆栈中涉及的各个层：
- en: '![](img/ac4d6da1-44b1-4485-bb5b-0b0fa9961f32.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac4d6da1-44b1-4485-bb5b-0b0fa9961f32.png)'
- en: Android architecture is in the form of a software stack comprising kernels,
    libraries, runtime environment, applications, middleware, and services. Each layer
    of the stack and elements within each layer, are integrated in a way to provide
    the optimal execution environment for mobile devices. The following sections focus
    on different layers of the Android stack, starting at the bottom with the Linux
    kernel.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Android 架构以软件栈的形式存在，包括内核、库、运行时环境、应用程序、中间件和服务。栈的每一层以及每一层中的元素，都是以一种最佳的方式集成在一起，为移动设备提供最佳的执行环境。接下来的章节将重点介绍
    Android 软件栈中的不同层，从底层的 Linux 内核开始。
- en: The Linux kernel
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux 内核
- en: The Android OS is built on top of the Linux kernel with some architectural changes
    made by Google. Linux was chosen as it is a portable platform that can be compiled
    easily on different hardware. The Linux kernel is positioned at the bottom of
    the software stack and provides a level of abstraction between the device hardware
    and the upper layers. It also acts as an abstraction layer between the software
    and hardware present on the device. To understand this better, consider the case
    of a camera click. What actually happens when you take a photo using the camera
    button on your mobile device? At some point, the hardware instruction (pressing
    a button) has to be converted into a software instruction (to take a picture and
    store it in the gallery). The kernel contains drivers that can facilitate this
    process. When the camera button click is detected, the instruction goes to the
    corresponding driver in the kernel, which sends the necessary commands to the
    camera hardware, similar to what occurs when a key is pressed on a keyboard. In
    simple terms, the drivers in the kernel control the underlying hardware. As shown
    in the previous screenshot, the kernel contains drivers related to Wi-Fi, Bluetooth,
    USB, audio, display, and so on.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Android 操作系统建立在 Linux 内核之上，并由 Google 做了一些架构上的改动。选择 Linux 是因为它是一个便于移植的平台，能够在不同硬件上轻松编译。Linux
    内核位于软件栈的最底层，为设备硬件和上层之间提供了一个抽象层。它还充当了软件与设备硬件之间的抽象层。为了更好地理解这一点，考虑一下拍照的过程。当你按下手机上的摄像头按钮拍照时，实际发生了什么？在某个时刻，硬件指令（按下按钮）必须转换为软件指令（拍照并将照片存储到相册中）。内核包含的驱动程序可以帮助实现这一过程。当摄像头按钮点击被检测到时，指令会发送到内核中相应的驱动程序，该驱动程序向摄像头硬件发送必要的命令，类似于按下键盘上的某个键。简单来说，内核中的驱动程序控制着底层硬件。正如之前截图所示，内核包含与
    Wi-Fi、蓝牙、USB、音频、显示等相关的驱动程序。
- en: All of the core functionalities of Android, such as process management, memory
    management, security, and networking are managed by the Linux kernel. Linux is
    a proven platform when it comes to both security and process management. Android
    has leveraged the existing Linux open source OS to build a solid foundation for
    its ecosystem. Each version of Android has a different version of the underlying
    Linux kernel. Currently, Google requires devices shipped with the Android 8.0
    Oreo OS to have at least Linux kernel version 4.4.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Android 的所有核心功能，如进程管理、内存管理、安全性和网络连接，都是由 Linux 内核管理的。Linux 是一个经过验证的、安全性和进程管理都非常可靠的平台。Android
    利用了现有的 Linux 开源操作系统，为其生态系统构建了一个坚实的基础。每个版本的 Android 都有不同版本的底层 Linux 内核。目前，Google
    要求运行 Android 8.0 Oreo 操作系统的设备至少要搭载 Linux 内核 4.4 版本。
- en: Hardware abstraction level
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件抽象层
- en: The hardware abstraction level or HAL allows the higher level, Java API framework,
    to work with mobile device's hardware with help of standard interfaces. This can
    be done thanks to multiple library modules, which provide interfaces for different
    types of hardware components, like Bluetooth or camera.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件抽象层（HAL）允许更高层次的 Java API 框架通过标准接口与移动设备的硬件进行交互。这得益于多个库模块，它们为不同类型的硬件组件（如蓝牙或摄像头）提供接口。
- en: Android Runtime
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 运行时
- en: Since Android 5.0 each application runs in its own process and with its own
    instance of the Android Runtime (ART). It allows run multiple virtual machines
    on low-memory devices by executing DEX (Dalvik Executable) files. It's important
    to note that prior to version 5.0 Dalvik was Android Runtime, so applications developed
    for Dalvik should work when running with ART.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 自 Android 5.0 起，每个应用程序都在自己的进程中运行，并且拥有独立的 Android 运行时（ART）实例。它通过执行 DEX（Dalvik
    可执行文件）文件，使得在低内存设备上运行多个虚拟机成为可能。需要注意的是，在 5.0 版本之前，Dalvik 是 Android 运行时，因此为 Dalvik
    开发的应用程序应该能在 ART 上正常运行。
- en: Native C/C++ Libraries
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原生 C/C++ 库
- en: Many core Android system components and services, including those mentioned
    earlier, like HAL and ART, are built from native code, so they require native
    libraries written in C and C++.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 许多核心 Android 系统组件和服务，包括之前提到的 HAL 和 ART，都是由本地代码构建的，因此它们需要用 C 和 C++ 编写的本地库。
- en: Java API Framework
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java API 框架
- en: 'Java API framework allows developers to create applications using modular system
    components and services as building blocks:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Java API 框架允许开发者使用模块化的系统组件和服务作为构建块来创建应用程序：
- en: View System allows to build application's user interface, and includes lists,
    grids, text boxes, buttons, and so on.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图系统允许构建应用程序的用户界面，包括列表、网格、文本框、按钮等。
- en: Resource Manager provides access to non-code components of an application, like
    localized strings, graphics and layout files.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源管理器提供访问应用程序的非代码组件，如本地化字符串、图形和布局文件。
- en: Notification Manager allows applications to display custom alerts.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知管理器允许应用程序显示自定义警报。
- en: Activity Manager manages the lifecycle as applications, and their back stack
    - the order in which each activity is opened.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动管理器管理应用程序的生命周期，以及它们的后退栈——即每个活动打开的顺序。
- en: Content Providers allows applications to access other applications data, and
    share their own.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容提供者允许应用程序访问其他应用程序的数据，并共享自己的数据。
- en: The application layer
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序层
- en: 'The topmost layer in the Android stack consists of applications (called **apps**),
    which are programs that users directly interact with. There are two kinds of apps,
    as discussed here:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Android 堆栈中的最上层由应用程序（称为 **应用**）组成，这些是用户直接交互的程序。这里讨论了两种类型的应用程序：
- en: '**System apps**: These are applications that are pre-installed on the phone
    and are shipped along with the phone. Applications such as default browser, email
    client, and contacts are examples of system apps. These generally cannot be uninstalled
    or changed by the user as they are read-only on production devices, though some
    devices offer the ability to *disable* these applications. If a system application
    is disabled, the app and all of its data remain on the device on the system partition,
    the application icon is simply hidden from the user. These applications can usually
    be found in the `/system` partition. Until Android 4.4 Kit Kat, all apps present
    under `/system` were treated equally. Beginning in Android 4.4, apps installed
    in `/system/priv-app/` are treated as privileged applications and are granted
    permissions with protection-level signatureOrSystem to privileged apps.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统应用**：这些是预装在手机上的应用程序，随手机一起出厂。像默认浏览器、电子邮件客户端和联系人等就是系统应用的例子。这些应用程序通常无法被用户卸载或更改，因为它们在生产设备上是只读的，尽管某些设备提供了*禁用*这些应用程序的功能。如果系统应用被禁用，应用程序及其所有数据仍然保留在设备的系统分区中，应用程序图标只是从用户界面中隐藏。这些应用程序通常可以在
    `/system` 分区找到。在 Android 4.4 KitKat 之前，所有位于 `/system` 分区的应用程序都被视为平等。但从 Android
    4.4 开始，安装在 `/system/priv-app/` 下的应用程序被视为特权应用，并被授予带有保护级别 signatureOrSystem 的权限。'
- en: '**User installed apps**: These are the applications that are downloaded and
    installed by the user from various distribution platforms such as Google Play.
    Google Play is the official app store for the Android operating system, where
    users can browse and download the applications. Based on December 2017 statistics
    from Statista, there are around 3.5 million Android apps in the Play Store. These
    apps are present under the `/data` partition. More information about how security
    is enforced between them is discussed in the following sections.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户安装的应用**：这些是用户从各种分发平台（如 Google Play）下载并安装的应用程序。Google Play 是 Android 操作系统的官方应用商店，用户可以浏览和下载应用程序。根据
    Statista 2017 年 12 月的统计数据，Google Play 商店中大约有 350 万款 Android 应用程序。这些应用程序位于 `/data`
    分区。关于如何在它们之间执行安全性管理的更多信息将在接下来的章节中讨论。'
- en: Android security
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 安全
- en: 'Android as a platform has certain features built into the architecture that
    ensure the security of users, applications, and data. Although they help in protecting
    the data, these security features sometimes prevent investigators from getting
    access to necessary data. From a forensic perspective, it is first important to
    understand the inherent security features so that a clear idea is established
    about what can be or cannot be accessed under normal circumstances. The security
    features and offerings that are incorporated aim to achieve three things:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Android作为平台，其架构内置了某些功能，确保用户、应用程序和数据的安全性。尽管这些安全功能有助于保护数据，但有时它们会阻止调查人员访问必要的数据。从取证的角度来看，首先要了解内在的安全特性，以便清楚地了解在正常情况下可以访问哪些数据，哪些不能访问。所内置的安全功能和服务旨在实现三项目标：
- en: To protect user data
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护用户数据
- en: To protect system resources
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护系统资源
- en: To make sure that one application cannot access the data of another application
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保一个应用程序无法访问另一个应用程序的数据
- en: The next sections provide an overview of the key security features in the Android
    operating system.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将概述Android操作系统中的关键安全功能。
- en: Security at OS level through the Linux kernel
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Linux内核在操作系统级别确保安全
- en: 'The Android operating system is built on top of the Linux kernel. Over the
    past few decades, Linux has evolved as a secure operating system trusted by many
    corporations across the world for its security. By having the Linux kernel at
    the heart of its platform, Android tries to ensure security at the OS level. Also,
    Android has built a lot of specific code into Linux to include certain features
    related to the mobile environment. With each Android release the kernel version
    also has changed. The following table shows Android versions and the corresponding
    Linux kernel version:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Android操作系统建立在Linux内核之上。在过去几十年中，Linux已经发展成为一个安全的操作系统，全球许多企业信任其安全性。通过将Linux内核作为平台的核心，Android试图确保操作系统级别的安全性。此外，Android在Linux中内建了大量与移动环境相关的特定代码。随着每次Android发布，内核版本也随之变化。下表显示了Android版本及其相应的Linux内核版本：
- en: '| **Android version** | **Linux kernel version** |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| **Android版本** | **Linux内核版本** |'
- en: '| 1.0 | 2.6.25 |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 1.0 | 2.6.25 |'
- en: '| 1.5 | 2.6.27 |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 1.5 | 2.6.27 |'
- en: '| 1.6 | 2.6.29 |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 1.6 | 2.6.29 |'
- en: '| 2.2 | 2.6.32 |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 2.2 | 2.6.32 |'
- en: '| 2.3 | 2.6.35 |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 2.3 | 2.6.35 |'
- en: '| 3.0 | 2.6.36 |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 3.0 | 2.6.36 |'
- en: '| 4.0 | 3.0.1 |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 4.0 | 3.0.1 |'
- en: '| 4.1 | 3.0.31 |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 4.1 | 3.0.31 |'
- en: '| 4.2 | 3.4.0 |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 4.2 | 3.4.0 |'
- en: '| 4.3 | 3.4.39 |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 4.3 | 3.4.39 |'
- en: '| 4.4 | 3.8 |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 4.4 | 3.8 |'
- en: '| 5.0 | 3.16.1 |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 5.0 | 3.16.1 |'
- en: '| 6.0 | 3.18.10 |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 6.0 | 3.18.10 |'
- en: '| 7.0 | 4.4.1 |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 7.0 | 4.4.1 |'
- en: '| 7.1 | 4.4.1 |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 7.1 | 4.4.1 |'
- en: '| 8.0 | 4.10 |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 8.0 | 4.10 |'
- en: '| 9.0 | 4.4.107, 4.9.84, and 4.14.42 |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 9.0 | 4.4.107, 4.9.84, 和 4.14.42 |'
- en: 'The Linux kernel provides Android with the following key security features:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Linux内核为Android提供以下关键安全特性：
- en: A user-based permissions model
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于用户的权限模型
- en: Process isolation
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程隔离
- en: Extensible mechanism for secure IPC
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展的安全IPC机制
- en: Permission model
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限模型
- en: Android implements a permission model for individual apps. Applications must
    declare which permissions (in the manifest file) they require. In older versions
    of Android, the user was presented with a full list of permissions requested by
    the application prior to installation.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Android为单独的应用程序实现了权限模型。应用程序必须在清单文件中声明它们需要哪些权限。在Android的早期版本中，用户在安装之前会看到应用程序请求的完整权限列表。
- en: Newer versions of Android prompt the user the first time each permission is
    required while the app is in use. This model allows a user to use an app without
    granting all permissions requested by the application, though functionality may
    be decreased.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Android的新版本在每次应用程序需要权限时，都会提示用户。这种模型允许用户在不授予应用程序所要求的所有权限的情况下使用该应用，尽管功能可能会减少。
- en: Sample permission model in Android
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android中的示例权限模型
- en: Unlike a desktop environment, this provides an opportunity for the user to know
    in advance what resources the application is seeking access to. In other words,
    user permission is a must to access any kind of critical resource on the device.
    By looking at the requested permission, the user is more aware of the risks involved
    in installing the application.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 与桌面环境不同，这为用户提供了提前了解应用程序请求访问的资源的机会。换句话说，必须获得用户许可才能访问设备上的任何关键资源。通过查看请求的权限，用户能够更清楚地意识到安装应用程序时所涉及的风险。
- en: 'As mentioned before, developers have to identify the permissions in a file
    named `AndroidManifest.xml`. For example, if the application needs to access the
    internet, the permission `INTERNET` is specified using the following code in the
    `AndroidManifest.xml` file:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，开发者需要在名为`AndroidManifest.xml`的文件中识别权限。例如，如果应用需要访问互联网，则需要在`AndroidManifest.xml`文件中使用以下代码指定`INTERNET`权限：
- en: '[PRE0]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Android permissions are categorized into four levels:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Android权限分为四个等级：
- en: '| **Permission type** | **Description** |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| **权限类型** | **描述** |'
- en: '| Normal | This is the default value. These are low risk permissions and do
    not pose a risk to other applications, system, or user. This permission is automatically
    granted to the user without asking for user approval during installation. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| 普通权限 | 这是默认值。此类权限属于低风险权限，不会对其他应用、系统或用户构成风险。此权限会在安装时自动授予用户，无需用户批准。 |'
- en: '| Dangerous | These are the permissions that can cause harm to the system and
    other applications. Hence, user approval is necessary during installation. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| 危险权限 | 这些权限可能会对系统和其他应用造成危害，因此在安装过程中需要用户授权。 |'
- en: '| Signature | These are automatically granted to a requesting app if that app
    is signed by the same certificate as the one that declared/created the permission.
    This level is designed to allow apps that are part of a suite, or otherwise related,
    to share data. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 签名权限 | 如果请求的应用与声明/创建此权限的应用使用相同证书签名，则此权限会自动授予该应用。此级别旨在允许一组应用或相关应用共享数据。 |'
- en: '| Signature/System | A permission that the system grants only to applications
    that are in the Android system image or that are signed with the same certificate
    as the application that declared the permission. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| 签名/系统权限 | 只有Android系统镜像中的应用或与声明此权限的应用使用相同证书签名的应用，才能获得系统授予的此类权限。 |'
- en: Application sandboxing
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用沙箱机制
- en: 'In order to isolate applications from each other, Android takes advantage of
    the Linux user-based protection model. In Linux systems, each user is assigned
    a unique **User ID** (**UID**) and users are segregated so that one user does
    not have access to the data of another. All resources under a particular user
    are run with the same privileges. Similarly, each Android application is assigned
    a UID and is run as a separate process. What this means is that, even if an installed
    application tries to do something malicious, it can do it only within its context
    and with the permissions it has. This application sandboxing is done at the kernel
    level. The security between applications and the system at the process level is
    ensured through standard Linux facilities, such as user and group IDs that are
    assigned to applications. For example, the following screenshot referenced from
    [http://www.ibm.com/developerworks/library/x-androidsecurity/ ](http://www.ibm.com/developerworks/library/x-androidsecurity/)shows
    the sandbox mechanism:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将应用相互隔离，Android利用了Linux基于用户的保护模型。在Linux系统中，每个用户都有一个唯一的**用户ID**（**UID**），并且用户之间是隔离的，一个用户不能访问另一个用户的数据。特定用户下的所有资源都在相同权限下运行。同样，每个Android应用都分配有一个UID，并以独立进程的方式运行。这意味着，即使已安装的应用尝试做一些恶意行为，它也只能在其自身的上下文中进行，并且只能在它拥有的权限范围内进行。这种应用沙箱机制是在内核层面实现的。应用与系统之间在进程级别的安全性是通过标准的Linux设施（如分配给应用的用户和组ID）来确保的。例如，以下截图来自[http://www.ibm.com/developerworks/library/x-androidsecurity/](http://www.ibm.com/developerworks/library/x-androidsecurity/)展示了沙箱机制：
- en: '![](img/85c3ec30-bf50-4e51-822a-482bcd53a5ce.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85c3ec30-bf50-4e51-822a-482bcd53a5ce.png)'
- en: By default, applications can't read or access the data of other applications
    and have limited access to the operating system. If Application A tries to read
    Application B's data, for example, the operating system protects against this
    because Application A does not have the appropriate user privileges. Since the
    application sandbox mechanism is implemented at the kernel level, it applies to
    both native applications and OS applications. Hence, the operating system libraries,
    application framework, application runtime, and all applications run within the
    Application Sandbox. Bypassing this sandbox mechanism would require compromising
    the security of the Linux kernel.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，应用程序不能读取或访问其他应用程序的数据，并且对操作系统的访问权限受到限制。例如，如果应用程序 A 尝试读取应用程序 B 的数据，操作系统会对此进行保护，因为应用程序
    A 没有适当的用户权限。由于应用程序沙箱机制是在内核级别实现的，它适用于本地应用程序和操作系统应用程序。因此，操作系统库、应用程序框架、应用程序运行时以及所有应用程序都在应用程序沙箱内运行。绕过此沙箱机制将需要破坏
    Linux 内核的安全性。
- en: SELinux in Android
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 中的 SELinux
- en: 'Starting with Android 4.3, **Security-Enhanced Linux** (**SELinux**) is supported
    by the Android security model. Android security is based on discretionary access
    control, which means applications can ask for permissions, and users can grant
    or deny those permissions. Hence, malware can create havoc on the phones by gaining
    permissions. Android uses SELinux to enforce mandatory access control that ensures
    applications work in isolated environments; this includes applications running
    as root or superuser. Hence, even if a user installs a malicious app, the malware
    cannot easily access the OS and corrupt the device. SELinux is used to enforce
    **Mandatory Access Control** (**MAC**) over all of the processes, including the
    ones running with root privileges. SELinux operates on the principle of *default
    denial*. Anything that isn''t explicitly allowed is denied. SELinux can operate
    in one of two global modes: permissive mode, in which permission denials are logged
    but not enforced, and enforcing mode, in which denials are both logged and enforced.
    As per Google''s documentation, in the Android 5.0 Lollipop release, Android moves
    to full enforcement of SELinux. This builds upon the permissive release of 4.3
    and the partial enforcement of 4.4\. In short, Android is shifting from enforcement
    on a limited set of crucial domains (`installd`, `netd`, `vold`, and `zygote`)
    to everything (more than 60 domains).'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Android 4.3 开始，**增强安全 Linux**（**SELinux**）已被 Android 安全模型所支持。Android 安全基于自主访问控制，这意味着应用程序可以请求权限，用户可以授予或拒绝这些权限。因此，恶意软件通过获得权限可以对手机造成破坏。Android
    使用 SELinux 强制实施强制访问控制，确保应用程序在隔离的环境中运行；这包括作为 root 或超级用户运行的应用程序。因此，即使用户安装了恶意应用，恶意软件也无法轻易访问操作系统并破坏设备。SELinux
    用于在所有进程上强制实施**强制访问控制**（**MAC**），包括那些具有 root 权限的进程。SELinux 的运作原则是 *默认拒绝*。任何没有明确允许的操作都会被拒绝。SELinux
    可以在两种全局模式下运行：宽容模式，在该模式下，权限拒绝会被记录，但不会强制执行；和强制模式，在该模式下，拒绝操作会被记录并强制执行。根据 Google 的文档，在
    Android 5.0 Lollipop 版本中，Android 实现了对 SELinux 的全面强制执行。这是在 4.3 版本的宽容发布和 4.4 版本的部分强制执行基础上的进一步改进。简而言之，Android
    正在从仅限于几个关键领域（`installd`、`netd`、`vold` 和 `zygote`）的强制执行，转向对所有领域（超过 60 个领域）的全面强制执行。
- en: Application signing
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序签名
- en: 'All Android apps need to be digitally signed with a certificate before they
    can be installed on a device. The main purpose of using certificates is to identify
    the author of an app. These certificates do not need to be signed by a certificate
    authority, and Android apps often use self-signed certificates. The app developer
    holds the certificate''s private key. Using the same private key, the developer
    can provide updates to their applications and share data between applications.
    In debug mode, developers can sign the app with a debug certificate generated
    by the Android SDK tools. You can run and debug an app signed in debug mode but
    the app cannot be distributed. To distribute an app, the app needs to be signed
    with your own certificate. The key store and the private key that are used during
    this process need to be secured by the developer as they are essential to push
    updates. The following screenshot shows the key store selection option that is
    displayed while exporting the application:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Android应用在安装到设备上之前都需要使用证书进行数字签名。使用证书的主要目的是识别应用的作者。这些证书不需要由证书授权机构签发，Android应用通常使用自签名证书。应用开发者持有证书的私钥。开发者可以使用相同的私钥为应用程序提供更新，并在应用之间共享数据。在调试模式下，开发者可以使用Android
    SDK工具生成的调试证书为应用签名。你可以运行和调试以调试模式签名的应用，但该应用不能分发。要分发应用，应用需要使用你自己的证书进行签名。在此过程中使用的密钥库和私钥需要由开发者加以保护，因为它们对推送更新至关重要。以下截图显示了导出应用时显示的密钥库选择选项：
- en: '![](img/c6b549f6-c107-414d-b1ac-a8100aa8de57.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6b549f6-c107-414d-b1ac-a8100aa8de57.png)'
- en: Secure inter-process communication
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全的进程间通信
- en: As discussed in the previous sections, sandboxing of the apps is achieved by
    running apps in different processes with different Linux identities. System services
    run in separate processes and have more privileges. Hence, in order to organize
    data and signals between these processes, an **Inter-Process Communication** (**IPC**)
    framework is needed. In Android, this is achieved with the use of the Binder mechanism.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，应用程序的沙盒机制是通过在不同的进程中以不同的Linux身份运行应用程序来实现的。系统服务在单独的进程中运行，并具有更多的权限。因此，为了组织这些进程之间的数据和信号，需要一个**进程间通信**（**IPC**）框架。在Android中，这是通过使用Binder机制来实现的。
- en: 'The Binder framework in Android provides the capabilities required to organize
    all types of communication between various processes. Android application components
    such as Intents and content providers are also built on top of this Binder framework.
    Using this framework, it is possible to perform a variety of actions such as invoking
    methods on remote objects as if they were local, synchronous and asynchronous
    method invocation, and sending file descriptors across processes. Let''s suppose
    the application in Process A wants to use certain behavior exposed by a Service
    that runs in Process B. In this case, Process A is the client and Process B is
    the service. The communication model using Binder is shown in the following screenshot:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Android中的Binder框架提供了组织各种进程间通信所需的能力。Android应用组件，如Intents和内容提供者，也都是建立在这个Binder框架之上的。通过使用这个框架，可以执行多种操作，如调用远程对象的方法，就像它们是本地的一样，支持同步和异步方法调用，以及在进程间传递文件描述符。假设进程A中的应用程序想要使用运行在进程B中的Service暴露的某些行为。在这种情况下，进程A是客户端，进程B是服务。使用Binder的通信模型如下图所示：
- en: '![](img/0158b37e-b70c-4644-83a4-d75b82adbf03.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0158b37e-b70c-4644-83a4-d75b82adbf03.png)'
- en: Binder communication model
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Binder通信模型
- en: All communications between the processes using the Binder framework occur through
    the Linux kernel driver, `/dev/binder`. The permissions to this device driver
    are set to world readable and writable, meaning any application may write to and
    read from this device driver. All communications between client and server happen
    through proxies on the client side and stubs on the server side. The proxies and
    the stubs are responsible for sending and receiving the data and the commands
    sent over the Binder driver.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Binder框架的所有进程间通信都通过Linux内核驱动程序`/dev/binder`进行。对该设备驱动程序的权限设置为可供所有用户读取和写入，这意味着任何应用程序都可以读写该设备驱动程序。客户端和服务器之间的所有通信都通过客户端侧的代理和服务器侧的存根进行。代理和存根负责发送和接收通过Binder驱动程序发送的数据和命令。
- en: Each service (also called a Binder service) exposed using the Binder mechanism
    is assigned a token. This token is a 32-bit value and is unique across all processes
    in the system. A client can start interacting with the service after discovering
    this value, which can be done with the help of Binder's context manager. Basically,
    the context manager acts as a name service providing the handle of a service using
    the name of this service. In order to get this process working, each service must
    be registered with the context manager. Hence, a client needs to know only the
    name of a service to communicate.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 每个通过 Binder 机制暴露的服务（也称为 Binder 服务）都会分配一个令牌。这个令牌是一个 32 位的值，在系统中所有进程中都是唯一的。客户端可以在发现这个值后开始与服务进行交互，这可以通过
    Binder 的上下文管理器来实现。基本上，上下文管理器充当一个命名服务，使用服务的名称提供服务的句柄。为了使这个过程正常工作，每个服务必须向上下文管理器注册。因此，客户端只需要知道服务的名称即可进行通信。
- en: The name is resolved by the context manager and the client receives the token
    that is later used for communicating with the service. The Binder driver adds
    the UID and the PID value of the sender process to each transaction. As discussed
    earlier, each application in the system has its own UID and hence this value is
    used to identify the calling party. The receiver of the call may check the obtained
    values and decide if the transaction should be completed. Hence, the security
    is enforced and the Binder token acts as a security token as it is unique across
    all of the processes.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 名称由上下文管理器解析，客户端接收到令牌，该令牌随后用于与服务进行通信。Binder 驱动程序将发送方进程的 UID 和 PID 值添加到每个事务中。如前所述，系统中的每个应用程序都有自己的
    UID，因此该值用于标识调用方。接收方可以检查获得的值，并决定是否完成该事务。因此，安全性得到了保障，Binder 令牌充当了安全令牌，因为它在所有进程中都是唯一的。
- en: Android hardware components
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 硬件组件
- en: Android is compatible with a wide range of hardware components. The Linux kernel
    made this easy, as Linux supports a large variety of hardware. This gives manufacturers
    a lot of flexibility as they can design based on their requirement without worrying
    about compatibility. This poses a significant challenge for forensic analysts
    during investigations. Hence, understanding the hardware components and device
    types will greatly help in understanding Android forensics.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Android 与多种硬件组件兼容。Linux 内核使这一切变得简单，因为 Linux 支持各种各样的硬件。这为制造商提供了很大的灵活性，因为他们可以根据自己的需求进行设计，而不必担心兼容性问题。这对法医分析师在调查过程中提出了重大挑战。因此，了解硬件组件和设备类型将大大有助于理解
    Android 法医分析。
- en: Core components
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心组件
- en: The components present in a device change from one manufacturer to another and
    from one model to another. However, there are some components that are found in
    most mobile devices. The following sections provide an overview of such commonly
    found components of an Android device.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 设备中存在的组件因制造商和型号的不同而有所变化。然而，有一些组件在大多数移动设备中都有出现。以下章节提供了 Android 设备中常见组件的概述。
- en: Central Processing Unit (CPU)
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中央处理单元（CPU）
- en: 'The CPU, also known as the processor, is responsible for executing everything
    that happens on a mobile device. It tells the device what to do and how to do
    it. Its performance is measured based on the number of tasks it can complete per
    second, known as a **cycle**. For example, a 1 GHz processor can process one billion
    cycles per second. The higher the capacity of the processor, the smoother the
    performance of the phone will be. When dealing with smartphones, we come across
    the following terminologies: ARM, x86 (Intel), MIPS, Cortex, and A5 or A7 or A9\.
    ARM is the name of a company that licenses their architectures (branded Cortex)
    with different models coming up each year, such as the A series mentioned before.
    Based on these architectures, chip makers release their own series of chipsets
    (Snapdragon, Exynos, and so on) that are used in mobile devices. Newer smartphones
    are powered by dual-core, quad-core, and even octa-core processors.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: CPU，也称为处理器，负责执行手机上发生的所有操作。它告诉设备该做什么以及如何做。它的性能通过每秒可以完成的任务数量来衡量，这称为 **周期**。例如，一个
    1 GHz 的处理器每秒可以处理十亿个周期。处理器的容量越大，手机的性能就会越流畅。在智能手机中，我们会遇到以下术语：ARM、x86（Intel）、MIPS、Cortex，以及
    A5、A7 或 A9。ARM 是一家公司，授权其架构（品牌为 Cortex），每年推出不同的型号，如前面提到的 A 系列。基于这些架构，芯片制造商发布了自己的芯片系列（如
    Snapdragon、Exynos 等），这些芯片被用于移动设备。较新的智能手机采用双核、四核甚至八核处理器。
- en: Baseband processor
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基带处理器
- en: Smartphones today support a variety of cellular protocols including GSM, 3G,
    4G, and LTE. These protocols are complicated and require a large amount of CPU
    power to process data, generate packets, and transmit them to the network provider.
    To handle this process, smartphones now use a *baseband modem*, which is a separate
    chip included in smartphones that communicates with the main processor. These
    baseband modems have their own processor called the *baseband processor* and run
    their own operating system. The baseband processor manages several radio control
    functions such as signal generation, modulation, encoding, as well as frequency
    shifting. It can also manage the transmission of signals.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现代智能手机支持多种移动通信协议，包括 GSM、3G、4G 和 LTE。这些协议非常复杂，需要大量的 CPU 计算能力来处理数据、生成数据包，并将其传输到网络提供商。为了处理这一过程，智能手机现在使用*基带调制解调器*，这是一种与主处理器通信的独立芯片。这些基带调制解调器拥有自己的处理器，称为*基带处理器*，并运行自己的操作系统。基带处理器管理多个无线控制功能，如信号生成、调制、编码以及频率偏移。它还可以管理信号的传输。
- en: The baseband processor is generally located on the same circuit board as the
    CPU, but consists of a separate radio component.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 基带处理器通常位于与 CPU 相同的电路板上，但由一个独立的无线组件组成。
- en: Memory
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存
- en: 'Android phones, just like normal computers, use two primary types of memory:
    RAM and ROM. Although most users are familiar with these concepts, there is some
    confusion, however, when it comes to mobile devices.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓手机和普通计算机一样，使用两种主要的内存类型：RAM 和 ROM。尽管大多数用户对这些概念很熟悉，但在移动设备上，仍然存在一些混淆。
- en: RAM stands for Random Access Memory. It is volatile, which means contents are
    deleted when the power is removed. RAM is very fast to access and is used primarily
    for the runtime memory of software applications (including the device's operating
    system and any applications). In other words, it is used by the system to load
    and execute the OS and other applications. The number of applications and processes
    that can be run simultaneously depends on this RAM size.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: RAM 是随机存取存储器（Random Access Memory）的缩写。它是易失性的，意味着断电后内容会被删除。RAM 访问速度非常快，主要用于软件应用程序的运行时内存（包括设备的操作系统和所有应用程序）。换句话说，它被系统用来加载和执行操作系统及其他应用程序。可以同时运行的应用程序和进程的数量取决于
    RAM 的大小。
- en: ROM (commonly referred to as **Android ROM**) stands for Read-Only Memory. It
    is non-volatile, which means it retains the contents even when the power is off.
    The Android ROM contains the boot loader, OS, all of the downloaded applications
    and their data, settings, and so on.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: ROM（通常被称为**安卓 ROM**）是只读存储器（Read-Only Memory）的缩写。它是非易失性的，这意味着即使断电，内容也会被保留。安卓
    ROM 包含启动加载程序、操作系统、所有下载的应用程序及其数据、设置等。
- en: Note that the part of memory that is used for the boot loader and Android is
    normally locked and can only be changed through a firmware upgrade. The remaining
    part of the memory is termed by some of the manufacturers as *user memory*. The
    data of each application stored here will not be accessible to other applications.
    Once this memory gets filled up the device slows down. Both RAM and Android ROM
    are often manufactured into a single component known as a **Multi-Chip Package**
    (**MCP**).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，启动加载程序和安卓系统使用的那部分内存通常是锁定的，只有通过固件升级才能更改。其余部分的内存被一些厂商称为*用户内存*。这里存储的每个应用程序的数据不会被其他应用程序访问。一旦这部分内存被填满，设备的运行速度就会变慢。RAM
    和安卓 ROM 通常被制造成一个单独的组件，称为**多芯片封装**（**MCP**）。
- en: SD Card
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SD 卡
- en: The SD card has great significance with respect to mobile forensics because
    quite often data that is stored on it can be vital evidence and can be accessed
    even if the device is locked or encrypted. Many Android devices have a removable
    memory card commonly referred to as a **Secure Digital** (**SD**) card. This is
    in contrast to Apple's iPhone, which does not have any provision for SD cards.
    SD cards are non-volatile, which means data is stored in them even when they're powered
    off. SD cards use flash memory, a type of **Electrically Erasable Programmable
    Read-Only Memory** (**EEPROM**) that is erased and written in large blocks instead
    of individual bytes. Most of the multimedia data and large files are stored by
    the apps in an SD card. In order to interoperate with other devices, SD cards
    implement certain communication protocols and specifications.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: SD卡在手机取证中具有重要意义，因为它上存储的数据常常是关键证据，即使设备被锁定或加密，也能访问。许多安卓设备具有可拆卸的存储卡，通常被称为**安全数字**（**SD**）卡。与此不同，苹果的iPhone没有SD卡的插槽。SD卡是非易失性的，这意味着即使它们断电，数据仍然保存在其中。SD卡使用闪存，这是一种**电可擦可编程只读存储器**（**EEPROM**），它以大块而非单个字节的方式进行擦写。大多数多媒体数据和大文件由应用程序存储在SD卡中。为了与其他设备互操作，SD卡实现了特定的通信协议和规范。
- en: In some mobiles, although an SD card interface is present, some portion of the
    onboard NAND memory (non-volatile) is carved out for creating an emulated SD card.
    This essentially means the SD card is not removable. Hence, forensic analysts
    need to check whether they are dealing with an actual SD card or an emulated SD
    card. SD memory cards come in several different sizes. The mini-SD card and micro-SD
    card contain the same underlying technology as the original SD memory card, but
    are smaller in size.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些手机中，尽管存在SD卡接口，但部分机载NAND内存（非易失性）被划分出来，用于创建一个模拟的SD卡。这实际上意味着SD卡是不可拆卸的。因此，法医分析师需要检查他们处理的是实际的SD卡还是模拟的SD卡。SD内存卡有几种不同的尺寸。迷你SD卡和微型SD卡与原始SD内存卡使用相同的技术，但尺寸更小。
- en: Display
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示屏
- en: Mobile phone screens have progressed dramatically over the last few years. The
    following is a brief description of some of the widely used types of mobile screens.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，手机屏幕发展迅速。以下是一些常见手机屏幕类型的简要描述。
- en: '**TFT LCD** stands for **Thin Film Transistor Liquid Crystal Display** and
    is the most common type of screen found in mobile phones. These screens have a
    light underneath them that shines through the pixels to make them visible.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TFT LCD**代表**薄膜晶体管液晶显示屏**，这是手机中最常见的屏幕类型。这些屏幕下面有一盏灯，透过像素使其可见。'
- en: '**AMOLED** stands for **Active-Matrix Organic Light-Emitting Diode**; this
    is a technology based on organic compounds and known for its best image quality
    while consuming low power. Unlike LCD screens, AMOLED displays don''t need a backlight—each
    pixel produces its own light—so phones using them can potentially be thinner.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AMOLED**代表**主动矩阵有机发光二极管**；这是一种基于有机化合物的技术，以其优异的图像质量和低功耗而闻名。与LCD屏幕不同，AMOLED显示器不需要背光—每个像素都会发光—因此使用AMOLED的手机可能更薄。'
- en: These are described at [http://www.in.techradar.com/news/phone-and-communications/mobile-phones/Best-phone-screen-display-tech-explained/articleshow/38997644.cms](http://www.in.techradar.com/news/phone-and-communications/mobile-phones/Best-phone-screen-display-tech-explained/articleshow/38997644.cms).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这些内容可以在[http://www.in.techradar.com/news/phone-and-communications/mobile-phones/Best-phone-screen-display-tech-explained/articleshow/38997644.cms](http://www.in.techradar.com/news/phone-and-communications/mobile-phones/Best-phone-screen-display-tech-explained/articleshow/38997644.cms)上找到。
- en: Battery
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电池
- en: 'The battery is the lifeblood of a mobile phone and is one of the major consumer
    concerns with modern smartphones. The more you use the device and its components,
    the more battery is consumed. The following are different types of batteries used
    in mobile phones:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 电池是手机的命脉，也是现代智能手机用户最关心的因素之一。你使用设备及其组件的频率越高，电池消耗的速度就越快。以下是手机中使用的不同类型的电池：
- en: '**Lithium Ion** (**Li-Ion**) batteries are the most popular batteries used
    in cell phones, as they are light and portable. They are well known for their
    high energy density and low maintenance. However, they are expensive to manufacture
    compared to other battery types.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**锂离子**（**Li-Ion**）电池是手机中最常用的电池，因为它们轻便易携带，且以高能量密度和低维护著称。然而，与其他类型的电池相比，它们的制造成本较高。'
- en: '**Lithium Polyme****r** (**Li-Poly**) batteries have all of the attributes
    of a Lithium Ion battery but with ultra slim geometry and simplified packaging.
    They are the latest technology and found only in few mobile devices.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**锂聚合物**（**Li-Poly**）电池具有锂离子电池的所有特性，但具有超薄几何形状和简化的包装。它们是最新技术，只在少数移动设备中出现。'
- en: '**Nickel Cadmium** (**NiCd**) batteries are old technology batteries and suffer
    from memory effect. As a result, the overall capacity and life span of the battery
    are reduced. In addition to this, nickel cadmium batteries are made from toxic
    materials that are not environmentally friendly.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**镍镉**（**NiCd**）电池是旧技术电池，且会受到记忆效应的影响。因此，电池的整体容量和使用寿命都会降低。此外，镍镉电池由有毒材料制成，对环境不友好。'
- en: '**Nickel Metal Hydride** (**NiMH**) batteries are the same as nickel cadmium
    batteries, but can contain higher energy and can run for between 30 and 40 percent
    longer. They still suffer from memory effect but comparatively less than the **Nickel
    Cadmium** (**NiCd**) Batteries. They are widely used in mobile phones and are
    affordable.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**镍氢**（**NiMH**）电池与镍镉电池相似，但可以容纳更高的能量，并且可以运行30%到40%更长的时间。它们仍然会受到记忆效应的影响，但相比于**镍镉**（**NiCd**）电池要少得多。它们广泛应用于手机，并且价格实惠。'
- en: The battery type can be known by looking at the details present on its body.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 电池类型可以通过查看其外壳上的详细信息来识别。
- en: Often, the SD card is located behind the battery. During forensic analysis,
    accessing a SD card may require removing the battery, which would power off the
    device. This can have certain implications that will be discussed in details in
    later chapters.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，SD卡位于电池后面。在取证分析过程中，访问SD卡可能需要拆卸电池，这将关闭设备电源。这可能会产生一些后果，后续章节将详细讨论。
- en: 'Apart from the components described previously, here are some of the other
    components that are well known:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 除了之前描述的组件外，以下是一些其他知名组件：
- en: '**Global Positioning System** (**GPS**)'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全球定位系统**（**GPS**）'
- en: Wi-Fi
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wi-Fi
- en: '**Near Field Communication** (**NFC**)'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**近场通信**（**NFC**）'
- en: Bluetooth
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝牙
- en: Camera
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摄像头
- en: Keypad
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按键盘
- en: USB
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB
- en: Accelerometer and Gyroscope
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加速度计和陀螺仪
- en: Speaker
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扬声器
- en: Microphone
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 麦克风
- en: Android boot process
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android启动过程
- en: Understanding the boot process of an Android device will help us to understand
    other forensic techniques that involve interacting with the device at various
    levels. When an Android device is first powered on, there is a sequence of steps
    that are executed, helping the device to load the necessary firmware, OS, application
    data, and so on into memory. The following information is compiled from the original
    post published at [https://community.nxp.com/docs/DOC-102546](https://community.nxp.com/docs/DOC-102546).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 了解Android设备的启动过程有助于我们理解涉及在不同层面与设备交互的其他取证技术。当Android设备首次开机时，会执行一系列步骤，帮助设备将必要的固件、操作系统、应用数据等加载到内存中。以下信息来自原文发布于[https://community.nxp.com/docs/DOC-102546](https://community.nxp.com/docs/DOC-102546)。
- en: 'The following is the sequence of steps involved in the Android boot process:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Android启动过程中涉及的步骤顺序：
- en: Boot ROM code execution
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动ROM代码执行
- en: The bootloader
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动加载程序
- en: The Linux kernel
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Linux内核
- en: The init process
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化过程
- en: Zygote and Dalvik
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zygote和Dalvik
- en: The system server
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统服务器
- en: We will examine each of these steps in detail.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细研究每个步骤。
- en: Boot ROM code execution
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动ROM代码执行
- en: 'Before the device is powered on, the device CPU will be in a state where no
    initializations have been done. Once the Android device is powered on, execution
    starts with the boot ROM code. This boot ROM code is specific to the CPU the device
    is using. As demonstrated in the following screenshot, this phase includes two
    steps, A and B:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在设备开机之前，设备的CPU处于未进行任何初始化的状态。一旦Android设备开机，执行将从启动ROM代码开始。此启动ROM代码是特定于设备所用CPU的。如下图所示，此阶段包括A和B两个步骤：
- en: '**Step A**: When the boot ROM code is executed, it initializes the device hardware
    and tries to detect the boot media. Hence, the boot ROM code scans until it finds
    the boot media. This is almost similar to the BIOS function in the boot process
    of a computer.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤A**：当启动ROM代码执行时，它会初始化设备硬件并尝试检测启动媒体。因此，启动ROM代码会一直扫描，直到找到启动媒体。这与计算机启动过程中的BIOS功能几乎相同。'
- en: '**Step B**: Once the boot sequence is established, the initial boot loader
    is copied to the internal RAM. After this, the execution shifts to the code loaded
    into RAM:'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 B**：一旦启动序列建立，初始引导加载程序会被复制到内部 RAM 中。此后，执行权转移到加载到 RAM 中的代码：'
- en: '![](img/644da025-9f5d-4e72-9424-6f284aefa490.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/644da025-9f5d-4e72-9424-6f284aefa490.png)'
- en: The bootloader
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引导加载程序
- en: 'The bootloader is a small program that is executed before the operating system
    starts to function. Bootloaders are present in desktop computers, laptops, and
    mobile devices as well. In the Android boot loader, there are two stages—**Initial
    Program Load** (**IPL**) and **Second Program Load** (**SPL**). As shown in the
    following screenshot, this involves the three steps explained here:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 引导加载程序是一个在操作系统开始工作之前执行的小程序。引导加载程序存在于台式电脑、笔记本电脑和移动设备中。在 Android 引导加载程序中，有两个阶段——**初始程序加载**（**IPL**）和**第二程序加载**（**SPL**）。如下面的截图所示，这涉及到这里解释的三个步骤：
- en: '**Step A**: IPL deals with detecting and setting up the external RAM.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 A**：IPL 负责检测和设置外部 RAM。'
- en: '**Step B**: Once the external RAM is available, SPL is copied into the RAM
    and execution is transferred to it. SPL is responsible for loading the Android
    operating system. It also provides access to other boot modes such as fastboot
    and recovery. It initiates several hardware components such as the console, display,
    keyboard, file systems, virtual memory, and other features.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 B**：一旦外部 RAM 可用，SPL 会被复制到 RAM 中，并且执行权转移到它。SPL 负责加载 Android 操作系统。它还提供访问其他引导模式的功能，如
    fastboot 和 recovery。它会初始化多个硬件组件，如控制台、显示器、键盘、文件系统、虚拟内存和其他功能。'
- en: '**Step C**: SPL tries to look for the Linux kernel. It will load this from
    boot media and will copy it to the RAM. Once the boot loader is done with this
    process, it transfers the execution to the kernel:'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 C**：SPL 会尝试查找 Linux 内核。它会从引导媒体中加载该内核，并将其复制到 RAM 中。一旦引导加载程序完成这个过程，它将把执行权转移给内核：'
- en: '![](img/fb3bd857-755a-412c-8572-ae8d85df13a7.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb3bd857-755a-412c-8572-ae8d85df13a7.png)'
- en: The Linux kernel
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux 内核
- en: 'The Linux kernel is the heart of the Android operating system and is responsible
    for process management, memory management, and enforcing security on the device.
    After the kernel is loaded, it mounts the **root filesystem** (**rootfs**) and
    provides access to system and user data:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 内核是 Android 操作系统的核心，负责进程管理、内存管理以及在设备上执行安全性控制。内核加载后，它会挂载**根文件系统**（**rootfs**），并提供对系统和用户数据的访问：
- en: '**Step A**: When the memory management units and caches have been initialized,
    the system can use virtual memory and launch user space processes.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 A**：当内存管理单元和缓存初始化完成后，系统可以使用虚拟内存并启动用户空间进程。'
- en: '**Step B**: The kernel will look in the `rootfs` for the `init` process and
    launch it as the initial user space process:'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 B**：内核将在 `rootfs` 中查找 `init` 进程，并将其作为初始用户空间进程启动：'
- en: '![](img/c87e3f7e-b4e2-49d0-a159-2a42278e7aa8.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c87e3f7e-b4e2-49d0-a159-2a42278e7aa8.png)'
- en: The init process
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Init 进程
- en: 'Init is the very first process that starts and is the root process of all other
    processes:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Init 是第一个启动的进程，是所有其他进程的根进程：
- en: '**Step A**: The Init process will look for a script named `init.rc`. This is
    a script that describes the system services, filesystem, and other parameters
    that need to be set up:'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 A**：Init 过程会寻找一个名为 `init.rc` 的脚本。这个脚本描述了系统服务、文件系统以及需要设置的其他参数：'
- en: '`init` process can be found at: `<android source>/system/core/init`.'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init` 进程可以在以下位置找到：`<android source>/system/core/init`。'
- en: '`init.rc` can be found at: `<android source>/system/core/rootdir/init.rc`.'
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init.rc` 可以在以下位置找到：`<android source>/system/core/rootdir/init.rc`。'
- en: More details about the Android file hierarchy will be covered in [Chapter 3](615ae74c-4301-46e6-92f2-387637bebd38.xhtml), *Understanding
    Data Storage on Android Devices*.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 Android 文件层次结构的详细内容将在[第三章](615ae74c-4301-46e6-92f2-387637bebd38.xhtml)中讨论，*理解
    Android 设备上的数据存储*。
- en: '**Step B**: The init process will parse the init script and launch the system
    service processes. At this stage, you will see the Android logo on the device
    screen:'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 B**：Init 进程会解析 init 脚本并启动系统服务进程。在此阶段，你将在设备屏幕上看到 Android 标志：'
- en: '![](img/ef609777-8f64-46cc-bc66-7f5fb5d95e32.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef609777-8f64-46cc-bc66-7f5fb5d95e32.png)'
- en: Zygote and Dalvik
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zygote 和 Dalvik
- en: Zygote is one of the first init processes created after the device boots. It
    initializes the Dalvik virtual machine and tries to create multiple instances
    to support each Android process. As discussed in earlier sections, the Dalvik
    virtual machine is the virtual machine that executes Android applications written
    in Java.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Zygote 是设备启动后创建的第一个初始化进程之一。它初始化 Dalvik 虚拟机，并尝试创建多个实例来支持每个 Android 进程。如前面章节所讨论，Dalvik
    虚拟机是执行用 Java 编写的 Android 应用程序的虚拟机。
- en: 'Zygote facilitates using a shared code across the VM, hence, helping to save
    the memory and reduce the burden on the system. After this, applications can run
    by requesting new Dalvik virtual machines. Zygote registers a server socket for
    zygote connections and preloads certain classes and resources. This zygote loading
    process has been more clearly explained at [https://elinux.org/Android_Zygote_Startup](https://elinux.org/Android_Zygote_Startup):'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: Zygote 通过在虚拟机中共享代码来实现，因此帮助节省内存并减轻系统负担。之后，应用程序可以通过请求新的 Dalvik 虚拟机来运行。Zygote 为
    zygote 连接注册一个服务器套接字，并预加载某些类和资源。这个 zygote 加载过程已在 [https://elinux.org/Android_Zygote_Startup](https://elinux.org/Android_Zygote_Startup)
    中更清晰地解释：
- en: '`Load ZygoteInitclass`: This loads the `ZygoteInit` class.Source Code:`` `<Android
    Source> /frameworks/base/core/java/com/android/internal/os/ZygoteInit.java` ``'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Load ZygoteInitclass`：加载 `ZygoteInit` 类。源代码：`` `<Android Source> /frameworks/base/core/java/com/android/internal/os/ZygoteInit.java`
    ``'
- en: '`registerZygoteSocket()`: This registers a server socket for `zygote` command
    connections.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`registerZygoteSocket()`：此方法为 `zygote` 命令连接注册一个服务器套接字。'
- en: '`preloadClasses()`: This is a simple text file containing a list of classes
    that need to be preloaded will be executed here. This file can be seen at this
    location: `<Android Source>/frameworks/base`.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preloadClasses()`：这是一个简单的文本文件，包含需要预加载的类列表，该文件将在此执行。该文件可以在以下位置找到：`<Android
    Source>/frameworks/base`。'
- en: '`preloadResources()`: This deals with native themes and layouts and everything
    that includes the `android.R` file will be loaded using this method:'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preloadResources()`：此方法处理本地主题和布局，并加载所有包含 `android.R` 文件的内容：'
- en: '![](img/e1482f3a-027c-4a96-ab55-4123a9afed0a.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1482f3a-027c-4a96-ab55-4123a9afed0a.png)'
- en: System server
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统服务器
- en: 'All of the core features of the device such as telephony, network, and other
    important functions are started by the system server, as shown in the following
    screenshot:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 设备的所有核心功能，如电话功能、网络功能以及其他重要功能，都是由系统服务器启动的，如下图所示：
- en: '![](img/5ef41db4-3b8b-46aa-af59-b025c5d1a26d.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ef41db4-3b8b-46aa-af59-b025c5d1a26d.png)'
- en: 'The following are some of the core services that get started in this process:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该过程中启动的一些核心服务：
- en: Start Power Manager
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动电源管理器
- en: Create Activity Manager
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建活动管理器
- en: Start Telephony Registry
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动电话注册表
- en: Start Package Manager
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动包管理器
- en: Set Activity Manager Service as System Process
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将活动管理器服务设置为系统进程
- en: Start Context Manager
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动上下文管理器
- en: Start System Context Providers
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动系统上下文提供者
- en: Start Battery Service
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动电池服务
- en: Start Alarm Manager
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动警报管理器
- en: Start Sensor Service
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动传感器服务
- en: Start Window Manager
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动窗口管理器
- en: Start Bluetooth Service
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动蓝牙服务
- en: Start Mount Service
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动挂载服务
- en: The system sends a broadcast action called `ACTION_BOOT_COMPLETED`, which informs
    all the dependent processes that the boot process is complete. After this, the
    device displays the home screen and is ready to interact with the user.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 系统发送一个广播动作，称为 `ACTION_BOOT_COMPLETED`，告知所有依赖进程启动过程已完成。之后，设备会显示主屏幕，并准备好与用户交互。
- en: As explained earlier, several manufacturers use Android operating systems on
    their devices. Most of these device manufacturers customize the OS based on their
    hardware and other requirements. When a new version of Android is released, these
    device manufacturers have to port their custom software and tweaks to the latest
    version.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，多个厂商在其设备上使用 Android 操作系统。这些设备厂商大多数会根据其硬件和其他需求定制操作系统。当 Android 发布新版本时，这些设备厂商必须将其自定义软件和调整移植到最新版本。
- en: Summary
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Understanding Android architecture and security model is crucial to having a
    proper understanding of Android forensics. The inherent security features in Android
    OS such as application sandboxing and permission models safeguard the device from
    various threats and pose as an obstacle for forensic experts during an investigation.
    With this knowledge of Android internals, we will discuss more about what data
    is stored on the device and how it is stored in the next chapter.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 Android 架构和安全模型对于正确理解 Android 取证至关重要。Android 操作系统中固有的安全功能，如应用程序沙箱和权限模型，能够保护设备免受各种威胁，同时也成为取证专家在调查过程中面临的障碍。掌握了
    Android 内部结构的知识后，我们将在下一章讨论设备上存储了哪些数据，以及这些数据是如何存储的。
