- en: Pentesting CMSes - Joomla
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渗透测试CMS - Joomla
- en: 'In the previous chapter, we learned about how to perform **Penetration Testing**
    (**pentesting**) on WordPress. Just like WordPress, there is another **Content
    Management System** (**CMS**) that is widely used by organizations to manage their
    website portals – Joomla. In this chapter, we will learn about Joomla, its architecture,
    and the modules that can be used to test the security of a Joomla-based website.
    The following are the topics that we will cover in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何对WordPress进行**渗透测试**（**pentesting**）。就像WordPress一样，还有另一个被组织广泛使用来管理其网站门户的**内容管理系统**（**CMS**）-
    Joomla。在本章中，我们将学习Joomla，其架构以及可用于测试基于Joomla的网站安全性的模块。以下是本章将涵盖的主题：
- en: An introduction to Joomla
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Joomla简介
- en: The Joomla architecture
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Joomla架构
- en: Reconnaissance and enumeration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 侦察和枚举
- en: Enumerating Joomla plugins and modules using Metasploit
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Metasploit枚举Joomla插件和模块
- en: Performing vulnerability scanning with Joomla
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Joomla进行漏洞扫描
- en: Joomla exploitation using Metasploit
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Metasploit进行Joomla利用
- en: Joomla shell upload
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Joomla shell上传
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the technical prerequisites for this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的技术先决条件：
- en: The Metasploit Framework ([https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework))
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit框架（[https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework)）
- en: Joomla CMS ([https://www.joomla.org/](https://www.joomla.org/))
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Joomla CMS（[https://www.joomla.org/](https://www.joomla.org/)）
- en: An installed database; MySQL is recommended ([https://www.mysql.com/](https://www.mysql.com/))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装的数据库；推荐使用MySQL（[https://www.mysql.com/](https://www.mysql.com/)）
- en: A basic knowledge of Linux commands
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对Linux命令的基本了解
- en: An introduction to Joomla
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Joomla简介
- en: Joomla is a free, open source CMS created by Open Source Matters, Inc. for the
    publication of web content. It is based on a **Model-View-Controller** (**MVC**)
    web application framework, which can be used independently of the CMS. Joomla
    was founded on August 17, 2005, as a result of a Mambo fork.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Joomla是一个由Open Source Matters，Inc.创建的免费开源CMS，用于发布Web内容。它基于**模型-视图-控制器**（**MVC**）Web应用程序框架，可以独立于CMS使用。
    Joomla成立于2005年8月17日，是Mambo分支的结果。
- en: 'Joomla has thousands of extensions and templates and a lot of them are available
    free of charge. Some of Joomla''s features include the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Joomla有成千上万的扩展和模板，其中许多是免费提供的。 Joomla的一些功能包括以下内容：
- en: It is multilingual.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是多语言的。
- en: It provides out-of-the-box **Search Engine Optimization** (**SEO**) and is **Search
    Engine Friendly** (**SEF**).
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供开箱即用的**搜索引擎优化**（**SEO**）并且是**搜索引擎友好**（**SEF**）的。
- en: It is free to use under a **General Public License** (**GPL**).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是免费使用的，遵循**通用公共许可证**（**GPL**）。
- en: It has access control lists that allow you to manage the users of a website,
    as well as different groups.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有访问控制列表，允许您管理网站的用户以及不同的用户组。
- en: It has menu management, so as many menus and menu items as required can be created.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有菜单管理，因此可以创建尽可能多的菜单和菜单项。
- en: Now that we have covered a short introduction to Joomla, let's look at its architecture
    to dive a little deeper into the software.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经简要介绍了Joomla，让我们看看它的架构，以深入了解软件。
- en: The Joomla architecture
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Joomla架构
- en: 'Joomla''s architecture is based on the MVC framework. We can divide the architecture
    into four major parts:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Joomla的架构基于MVC框架。我们可以将架构分为四个主要部分：
- en: '**The display**: This is the frontend, which a user sees when they visit the
    website. It contains the HTML and CSS files.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示**：这是用户访问网站时看到的前端。它包含HTML和CSS文件。'
- en: '**Extensions**: Extensions can be further sub-divided into five major types:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展**：扩展可以进一步分为五种主要类型：'
- en: '**Components**: Components can be thought of as mini-applications; they are
    intended for both users and administrators.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件**：组件可以被视为迷你应用程序；它们既适用于用户也适用于管理员。'
- en: '**Modules**: These are small and flexible extensions that can be used to render
    pages. One example is a login module.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块**：这些是可以用于呈现页面的小型灵活扩展。一个例子是登录模块。'
- en: '**Plugins**: These are more advanced extensions and are also known as event
    handlers. These events can be triggered from anywhere and execute the plugin associated
    with that event.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插件**：这些是更高级的扩展，也被称为事件处理程序。这些事件可以从任何地方触发，并执行与该事件相关联的插件。'
- en: '**Templates**: Templates take care of how the website looks. There are two
    types of templates that are used—frontend and backend. The backend template is
    used by the administrators to monitor functions, whereas the frontend template
    presents the website to visitors/users.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板**：模板负责网站的外观。有两种类型的模板—前端和后端。后端模板由管理员用于监视功能，而前端模板向访问者/用户呈现网站。'
- en: '**Languages**: These handle the translation of the website text. Joomla supports
    over 70 languages.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言**：这些处理网站文本的翻译。 Joomla支持70多种语言。'
- en: '**Framework**: The framework consists of the Joomla core. These are the PHP
    files that take care of the major functionality of the application, such as configuration
    files.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**框架**：框架由Joomla核心组成。这些是负责应用程序的主要功能的PHP文件，例如配置文件。'
- en: '**Database**: The database stores the user information, content, and so on.
    Joomla supports MySQL, **Microsoft Server SQL** (**MSSQL**), and PostgreSQL, among
    others.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库**：数据库存储用户信息，内容等。 Joomla支持MySQL，**Microsoft Server SQL**（**MSSQL**）和PostgreSQL等。'
- en: The file and directory structure
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件和目录结构
- en: 'Directory names in Joomla are very simple. We can guess a directory''s content
    just by looking at its name. Joomla files and directories have the following structure:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Joomla中的目录名称非常简单。我们可以通过查看其名称来猜测目录的内容。 Joomla文件和目录具有以下结构：
- en: '`Root`: This is where we extract Joomla''s source code. It contains an index
    file that executes the installation process.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`根`：这是我们提取Joomla源代码的地方。它包含一个执行安装过程的索引文件。'
- en: '`Administrator`: This folder contains all the files for Joomla''s administrator
    interface (components, templates, modules, plugins, and so on).'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`管理员`：此文件夹包含Joomla管理员界面的所有文件（组件、模板、模块、插件等）。'
- en: '`Cache`: This folder contains files cached by Joomla to increase the performance
    and efficiency of the CMS.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`缓存`：此文件夹包含Joomla缓存的文件，以增加CMS的性能和效率。'
- en: '`Components`: This folder contains all the user components (excluding the administrator),
    including login and search.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`组件`：此文件夹包含所有用户组件（不包括管理员），包括登录和搜索。'
- en: '`Images`: This directory contains all the images used by the Joomla interface,
    as well as those uploaded by the user.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`图像`：此目录包含Joomla界面使用的所有图像，以及用户上传的图像。'
- en: '`Includes`: This directory contains the core Joomla files.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`包含`：此目录包含核心Joomla文件。'
- en: '`Installation`: This folder contains the files needed to install Joomla. It
    should be deleted after installation.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`安装`：此文件夹包含安装Joomla所需的文件。安装后应删除它。'
- en: '`Language`: This folder contains all the language files. Joomla stores translations
    in a simple INI-based file format.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`语言`：此文件夹包含所有语言文件。Joomla以简单的INI格式文件存储翻译。'
- en: '`Libraries`: This folder contains the entire core libraries, as well as Joomla''s
    third-party libraries. It contains files describing the filesystem, database,
    and so on.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`库`：此文件夹包含整个核心库，以及Joomla的第三方库。它包含描述文件系统、数据库等的文件。'
- en: '`Logs`: This folder contains the application logs.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`日志`：此文件夹包含应用程序日志。'
- en: '`Media`: This directory stores all the media files, such as flash and videos.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`媒体`：此目录存储所有媒体文件，如Flash和视频。'
- en: '`Modules`: Modules are placed in a Joomla template, such as panels. This folder
    contains all the files for the frontend modules. Some common modules include login,
    news, and poll.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`模块`：模块放置在Joomla模板中，如面板。此文件夹包含所有前端模块的文件。一些常见的模块包括登录、新闻和投票。'
- en: '`Plugins`: This folder contains all the plugin files.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`插件`：此文件夹包含所有插件文件。'
- en: '`Templates`: This folder contains all the frontend template files. Each template
    is organized in the folder by name.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`模板`：此文件夹包含所有前端模板文件。每个模板都按名称组织在文件夹中。'
- en: '`Tmp`: This folder stores the temporary files and cookies that are used by
    the administrator and user interface of Joomla.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tmp`：此文件夹存储管理员和用户界面使用的临时文件和cookie。'
- en: We have now learned about the Joomla architecture. Next, we will look at reconnaissance
    and enumeration.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了Joomla的架构。接下来，我们将看一下侦察和枚举。
- en: Reconnaissance and enumeration
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 侦察和枚举
- en: 'Before using Joomla, the first step to carry out is to confirm whether the
    web application is powered by it. There are various ways of detecting the installation
    of the CMS, some of which are listed here:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Joomla之前，要执行的第一步是确认Web应用程序是否由其提供动力。有各种方法可以检测CMS的安装，其中一些列在这里：
- en: By searching for `<meta name="generator" content="Joomla! - Open Source Content
    Management" />`
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过搜索`<meta name="generator" content="Joomla! - Open Source Content Management"
    />`
- en: By exploring the `X-Meta-Generator HTTP` header
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过探索`X-Meta-Generator HTTP`标头
- en: 'By checking `RSS/atom feeds: index.php?format=feed&type=rss/atom`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '通过检查`RSS/atom feeds: index.php?format=feed&type=rss/atom`'
- en: 'By using Google Dorks: `inurl:"index.php?option=com_users`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Google Dorks：`inurl:"index.php?option=com_users`
- en: 'By looking for the `X-Content-Encoded-By: Joomla` header'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '通过查找`X-Content-Encoded-By: Joomla`标头'
- en: By looking for `joomla.svg/k2.png/SOBI 2.png/SobiPro.png/VirtueMart.png`
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过查找`joomla.svg/k2.png/SOBI 2.png/SobiPro.png/VirtueMart.png`
- en: Next, let's find out which version of Joomla is installed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们找出安装了哪个版本的Joomla。
- en: Version detection
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本检测
- en: 'Now that we know enough about Joomla, we can start with CMS pentesting (which
    we learned about in the previous chapter, [Chapter 8](e13c4d6e-8576-4fc0-aa78-aa4d54536bca.xhtml),
    *Pentesting a CMS – WordPress*). The first step in pentesting the Joomla CMS is
    to find the version installed on the target server. The following are the ways
    that we can detect which version is installed:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对Joomla有了足够的了解，我们可以开始CMS渗透测试（我们在上一章中学到了，[第8章](e13c4d6e-8576-4fc0-aa78-aa4d54536bca.xhtml)，*Pentesting
    a CMS – WordPress*）。渗透测试Joomla CMS的第一步是找出目标服务器上安装的版本。以下是我们可以检测安装了哪个版本的方法：
- en: Detection via a meta tag
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过元标记进行检测
- en: Detection via server headers
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过服务器标头进行检测
- en: Detection via language configurations
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过语言配置进行检测
- en: Detection via `README.txt`
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`README.txt`进行检测
- en: Detection via the `manifest` file
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`manifest`文件进行检测
- en: Detection via unique keywords
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过唯一关键字进行检测
- en: Detection via a meta tag
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过元标记进行检测
- en: 'The `generator` meta tag is generally described as the software that is used
    to generate a document or web page. The exact version number is disclosed in the
    `content` attribute of the meta tag:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`generator`元标记通常被描述为用于生成文档或网页的软件。确切的版本号在元标记的`content`属性中披露：'
- en: '![](img/82ef2e82-24d6-4cd3-9a27-74f670398713.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/82ef2e82-24d6-4cd3-9a27-74f670398713.png)
- en: Joomla-based websites often have this tag in their source, as shown in the preceding
    screenshot.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Joomla的网站通常在其源代码中具有此标记，如前面的屏幕截图所示。
- en: Detection via server headers
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过服务器标头进行检测
- en: 'The Joomla version number is frequently disclosed in the response headers of
    the server that the application is hosted on. The version can be disclosed in
    the `X-Content-Encoded-By` header, as in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Joomla的版本号经常在托管应用程序的服务器的响应标头中披露。版本可以在`X-Content-Encoded-By`标头中披露，如下面的屏幕截图所示：
- en: '![](img/e3ee649c-071d-4f66-ad7b-ce5974b1332a.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/e3ee649c-071d-4f66-ad7b-ce5974b1332a.png)
- en: Next, we will look at detection via language configurations.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过语言配置来进行检测。
- en: Detection via language configurations
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过语言配置进行检测
- en: 'Joomla supports over 70 languages. Each language pack has an XML file that
    discloses the version information, as shown:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Joomla支持70多种语言。每种语言包都有一个XML文件，其中披露了版本信息，如下所示：
- en: '![](img/b38d2ea2-3445-401a-87b8-f27f8df1dba8.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/b38d2ea2-3445-401a-87b8-f27f8df1dba8.png)
- en: This page can be accessed through the `/language/<language-type>/<language-type>.xml`
    page. In this case, we searched for the British English (`en-GB`) format.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`/language/<language-type>/<language-type>.xml`页面访问此页面。在这种情况下，我们搜索了英国英语（`en-GB`）格式。
- en: Detection via README.txt
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过README.txt检测
- en: 'This is the easiest and most basic technique. All we have to do is visit the
    `README.txt` page and we will see the version number, as shown:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最简单和最基本的技术。我们所要做的就是访问`README.txt`页面，我们将看到版本号，如下所示：
- en: '![](img/84a276d9-a0a7-4831-a9ff-950000598200.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84a276d9-a0a7-4831-a9ff-950000598200.png)'
- en: This file contains various pieces of information pertaining to first-time users
    of Joomla.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件包含有关Joomla首次用户的各种信息。
- en: Detection via the manifest file
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过清单文件检测
- en: 'The Joomla `manifest` file, located in `/administrator/manifests/files/joomla.xml`,
    contains basic information relating to the CMS installed on the server, along
    with the modules that are running, the version number, the installation date,
    and so on. This is also a good place to look for the version number of the CMS
    that is running:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Joomla的`manifest`文件位于`/administrator/manifests/files/joomla.xml`，包含了有关服务器上安装的CMS的基本信息，以及正在运行的模块、版本号、安装日期等。这也是查找正在运行的CMS版本号的好地方：
- en: '![](img/ec64c9e9-b139-4460-8e4c-f04559707ac7.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec64c9e9-b139-4460-8e4c-f04559707ac7.png)'
- en: The preceding screenshot shows the `manifest` file containing the version number.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了包含版本号的`manifest`文件。
- en: Detection via unique keywords
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过唯一关键字检测
- en: 'Another way of determining the version of Joomla running on the web server
    is to look for specific keywords in the following files. These keywords are version-specific
    and some of them are listed in the table following this code block:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 确定Web服务器上运行的Joomla版本的另一种方法是在以下文件中查找特定关键字。这些关键字是特定于版本的，其中一些在此代码块后面的表中列出：
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The unique keyword details according to their Joomla version are as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 根据其Joomla版本的唯一关键字详细信息如下：
- en: '| **Joomla version** | **Unique keywords** |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| **Joomla版本** | **唯一关键字** |'
- en: '| Version 2.5 | `MooTools.More={version:"1.4.0.1"}` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 版本2.5 | `MooTools.More={version:"1.4.0.1"}` |'
- en: '| Version 1.7 | `21322 2011-05-11 01:10:29Z dextercowley``22183 2011-09-30
    09:04:32Z infograf768``21660 2011-06-23 13:25:32Z infograf768``MooTools.More={version:"1.3.2.1"}`
    |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 版本1.7 | `21322 2011-05-11 01:10:29Z dextercowley``22183 2011-09-30 09:04:32Z
    infograf768``21660 2011-06-23 13:25:32Z infograf768``MooTools.More={version:"1.3.2.1"}`
    |'
- en: '| Version 1.6 | `20196 2011-01-09 02:40:25Z ian``20990 2011-03-18 16:42:30Z
    infograf768``MooTools.More={version:"1.3.0.1"}` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 版本1.6 | `20196 2011-01-09 02:40:25Z ian``20990 2011-03-18 16:42:30Z infograf768``MooTools.More={version:"1.3.0.1"}`
    |'
- en: '| Version 1.5 | `MooTools={version:''1.12''}``11391 2009-01-04 13:35:50Z ian`
    |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 版本1.5 | `MooTools={version:''1.12''}``11391 2009-01-04 13:35:50Z ian` |'
- en: '| Version 1.0 | `47 2005-09-15 02:55:27Z rhuk``423 2005-10-09 18:23:50Z stingrey``1005
    2005-11-13 17:33:59Z stingrey``1570 2005-12-29 05:53:33Z eddieajau``2368 2006-02-14
    17:40:02Z stingrey``4085 2006-06-21 16:03:54Z stingrey``4756 2006-08-25 16:07:11Z
    stingrey``5973 2006-12-11 01:26:33Z robs``5975 2006-12-11 01:26:33Z robs` |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 版本1.0 | `47 2005-09-15 02:55:27Z rhuk``423 2005-10-09 18:23:50Z stingrey``1005
    2005-11-13 17:33:59Z stingrey``1570 2005-12-29 05:53:33Z eddieajau``2368 2006-02-14
    17:40:02Z stingrey``4085 2006-06-21 16:03:54Z stingrey``4756 2006-08-25 16:07:11Z
    stingrey``5973 2006-12-11 01:26:33Z robs``5975 2006-12-11 01:26:33Z robs` |'
- en: 'The following screenshot shows one of the keywords in the `en-GB.ini` file,
    which implies that the version is 1.6:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`en-GB.ini`文件中的一个关键字，这意味着版本是1.6：
- en: '![](img/6bff5130-8203-495b-9ba7-82f577678c0b.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bff5130-8203-495b-9ba7-82f577678c0b.png)'
- en: In the next section, we will look at carrying out reconnaissance on Joomla using
    Metasploit.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看看如何使用Metasploit对Joomla进行侦察。
- en: Joomla reconnaissance using Metasploit
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行Joomla侦察
- en: 'Now that we have learned about the different ways of detecting a Joomla-based
    target, we can perform reconnaissance using the Metasploit modules that are already
    provided with the Metasploit framework. The first module that we''ll use is the
    `joomla_version` module. We can use the `use auxiliary/scanner/http/joomla_version`
    command, as shown:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了检测基于Joomla的目标的不同方法，我们可以使用Metasploit框架已经提供的Metasploit模块进行侦察。我们将使用的第一个模块是`joomla_version`模块。我们可以使用`use
    auxiliary/scanner/http/joomla_version`命令，如下所示：
- en: '![](img/60685918-9370-456c-9dc2-5ddebea2de7e.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60685918-9370-456c-9dc2-5ddebea2de7e.png)'
- en: 'After setting up all the information required by the module (in other words,
    RHOSTS and RPORT), we can execute the module using the `run` command, as shown:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 设置模块所需的所有信息（即RHOSTS和RPORT）后，我们可以使用`run`命令执行模块，如下所示：
- en: '![](img/6460087b-34ed-4416-bed3-c71a480711fb.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6460087b-34ed-4416-bed3-c71a480711fb.png)'
- en: This module will return the Joomla version running on the target instance via
    the different methods that we covered in the *Version detection* section. In the
    next section, we'll learn how to enumerate Joomla plugins and modules using Metasploit.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块将通过我们在*版本检测*部分中介绍的不同方法返回运行在目标实例上的Joomla版本。在下一节中，我们将学习如何使用Metasploit枚举Joomla插件和模块。
- en: Enumerating Joomla plugins and modules using Metasploit
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit枚举Joomla插件和模块
- en: 'We can also use inbuilt auxiliaries of Metasploit to perform the enumeration
    of Joomla. The following are the categories for enumerating Joomla that are available
    in Metasploit:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用Metasploit的内置辅助工具来进行Joomla的枚举。以下是在Metasploit中可用的用于枚举Joomla的类别：
- en: Page enumeration
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面枚举
- en: Plugin enumeration
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件枚举
- en: Page enumeration
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面枚举
- en: The first one is **page enumeration**. This auxiliary scans for common pages
    that exist in Joomla, such as `readme` and `robots.txt`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是**页面枚举**。这个辅助程序扫描Joomla中存在的常见页面，如`readme`和`robots.txt`。
- en: 'To use the auxiliary, we use the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用辅助工具，我们使用以下命令：
- en: '[PRE1]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We then see the various module options by using the `show options` command,
    as shown:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`show options`命令查看各种模块选项，如下所示：
- en: '![](img/e3c98ba2-b630-4430-887a-e57582d667e4.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3c98ba2-b630-4430-887a-e57582d667e4.png)'
- en: 'We set `RHOSTS` and `RPORT` and run the module. The pages discovered will be
    printed once the module is complete, as shown:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置`RHOSTS`和`RPORT`并运行模块。模块完成后，发现的页面将被打印出来，如下所示：
- en: '![](img/f939e755-910b-4602-a7b3-7efb23577547.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f939e755-910b-4602-a7b3-7efb23577547.png)'
- en: The next step is to enumerate the Joomla plugins using another Metasploit module.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用另一个Metasploit模块枚举Joomla插件。
- en: Plugin enumeration
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件枚举
- en: 'Another auxiliary for Metasploit that can be used to enumerate plugins is `joomla_plugins`.
    The auxiliary uses a word list to find directory paths to detect various plugins
    used by Joomla. We can execute the following command to use the plugin enumeration
    module:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit的另一个辅助工具，可用于枚举插件的是`joomla_plugins`。该辅助工具使用一个单词列表来查找目录路径，以检测Joomla使用的各种插件。我们可以执行以下命令来使用插件枚举模块：
- en: '[PRE2]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前述命令的输出：
- en: '![](img/1b689ce7-db23-49cd-9092-905bec42526b.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b689ce7-db23-49cd-9092-905bec42526b.png)'
- en: 'The output of `show options` is shown in the preceding screenshot. Once the
    module is executed, the script returns the name of the plugins it has discovered,
    as shown:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`show options`的输出如前面的屏幕截图所示。一旦执行了模块，脚本将返回它发现的插件的名称，如下所示：'
- en: '![](img/78a520b0-7398-4a09-af7f-0ace7b588f47.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78a520b0-7398-4a09-af7f-0ace7b588f47.png)'
- en: By default, the word list at [https://github.com/rapid7/metasploit-framework/blob/master/data/wordlists/joomla.txt](https://github.com/rapid7/metasploit-framework/blob/master/data/wordlists/joomla.txt) is
    used by the auxiliary; we can use a custom word list as well. In the next section,
    we will use Joomla to perform vulnerability scanning.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，辅助工具使用[https://github.com/rapid7/metasploit-framework/blob/master/data/wordlists/joomla.txt](https://github.com/rapid7/metasploit-framework/blob/master/data/wordlists/joomla.txt)上的单词列表；我们也可以使用自定义单词列表。在下一节中，我们将使用Joomla进行漏洞扫描。
- en: Performing vulnerability scanning with Joomla
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Joomla进行漏洞扫描
- en: Metasploit does not yet have an inbuilt module for Joomla's specific vulnerability
    assessment. This gives us two options; either make a wrapper or plugin for Joomla
    ourselves, as we did for WordPress in the previous chapter, or use different tools
    that are already available online, such as JoomScan or JoomlaVS. In this section,
    we will look at a great tool that can be used to perform a vulnerability assessment
    of Joomla.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit目前还没有内置的Joomla特定漏洞评估模块。这给我们两个选择；要么像我们在上一章中为WordPress所做的那样，为Joomla自己制作一个包装器或插件，要么使用已经在线可用的不同工具，如JoomScan或JoomlaVS。在本节中，我们将看一个可以用于执行Joomla漏洞评估的优秀工具。
- en: 'The following description is included on the official Joomla GitHub wiki page:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 官方Joomla GitHub维基页面上包括以下描述：
- en: JoomlaVS is a Ruby application that can help automate assessing how vulnerable
    a Joomla installation is to exploitation. It supports basic fingerprinting and
    can scan for vulnerabilities in components, modules, and templates, as well as
    vulnerabilities that exist within Joomla itself.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: JoomlaVS是一个Ruby应用程序，可以帮助自动评估Joomla安装对利用的脆弱性。它支持基本的指纹识别，并且可以扫描组件、模块和模板中存在的漏洞，以及Joomla本身存在的漏洞。
- en: 'JoomlaVS can be downloaded from: [https://github.com/rastating/joomlavs](https://github.com/rastating/joomlavs).'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: JoomlaVS可以从以下网址下载：[https://github.com/rastating/joomlavs](https://github.com/rastating/joomlavs)。
- en: 'The tool can be run by executing the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过执行以下命令来运行该工具：
- en: '[PRE3]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Running the tool without any arguments will print the `help` section, as in
    the following screenshot. The tool supports different scan types, such as scanning
    just the modules, templates, or components:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有任何参数的情况下运行该工具将打印`help`部分，如下面的屏幕截图所示。该工具支持不同的扫描类型，例如仅扫描模块、模板或组件：
- en: '![](img/e5bde690-ac4d-4083-9705-1f1af0e2d550.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5bde690-ac4d-4083-9705-1f1af0e2d550.png)'
- en: 'To perform a scan on a URL for all extensions, we can use the following command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要对URL进行所有扩展的扫描，我们可以使用以下命令：
- en: '[PRE4]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The tool will start running and the details of everything it discovered will
    be printed on the screen, as shown:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 工具将开始运行，并且它发现的所有细节将打印在屏幕上，如下所示：
- en: '![](img/749ba025-2bdd-4480-a3d7-14ff526b45ee.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/749ba025-2bdd-4480-a3d7-14ff526b45ee.png)'
- en: Once we have our information about the available exploits, plugins, and version
    numbers, we can proceed to the exploitation process.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们获得了关于可用漏洞、插件和版本号的信息，我们就可以继续进行利用过程。
- en: Joomla exploitation using Metasploit
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit进行Joomla漏洞利用
- en: 'Once all the enumeration and version detection is done, it''s time for the
    exploitation. In this section, we will look at some of the ways that Joomla can
    be exploited. The first one is the well-known SQL injection vulnerability applied
    in Joomla to gain **Remote Code Execution** (**RCE**). A Metasploit module is
    available for this and we can use it by executing the `use exploit/unix/webapp/joomla_comfields_sqli_rce`
    command, as in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有的枚举和版本检测完成，就该进行利用了。在本节中，我们将看一些Joomla可以被利用的方式。第一个是在Joomla中应用的众所周知的SQL注入漏洞，以获得**远程代码执行**（**RCE**）。Metasploit模块可用于此，我们可以通过执行`use
    exploit/unix/webapp/joomla_comfields_sqli_rce`命令来使用它，如下面的屏幕截图所示：
- en: '![](img/d800eb99-cc46-4f88-888e-e82771c15cfd.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d800eb99-cc46-4f88-888e-e82771c15cfd.png)'
- en: Before running the exploit, let's see how it works.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行利用之前，让我们看看它是如何工作的。
- en: How does the exploit work?
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞利用的原理是什么？
- en: 'The following SQL query is sent to the server, which returns a Base64-encoded
    value of the table name prefix:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下SQL查询被发送到服务器，返回表名前缀的Base64编码值：
- en: '![](img/175502cd-5b6a-477e-860a-0e6eade8e1d6.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/175502cd-5b6a-477e-860a-0e6eade8e1d6.png)'
- en: 'This can be seen as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以如下所示：
- en: '[PRE5]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The screenshot of the request sent to the web server can be seen here:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在此处看到发送到Web服务器的请求的屏幕截图：
- en: '![](img/33683472-0583-44e1-821d-074d99fd1c4d.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33683472-0583-44e1-821d-074d99fd1c4d.png)'
- en: 'The web server returns the Base64-encoded value of the table name prefix, shown
    here in between `ABC`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 网络服务器返回表名前缀的Base64编码值，如下所示，在`ABC`之间：
- en: '![](img/9d256823-36e9-4d9c-8fc9-284a588ff85b.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d256823-36e9-4d9c-8fc9-284a588ff85b.png)'
- en: 'The following screenshot displays the SQL query used to dump the user''s session:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了用于转储用户会话的SQL查询：
- en: '![](img/aa19bb5a-5181-4a86-baf9-140f996e7ce7.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa19bb5a-5181-4a86-baf9-140f996e7ce7.png)'
- en: 'This is shown as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示：
- en: '[PRE6]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The request is sent using the `send_request_cgi()` method. The server will
    give an `Internal Server Error` error (code `500`), but we can find the session
    using the hex values—in other words, `#{start_h}` and `#{fin_h}`—as a regex from
    the output. The following screenshot shows the code that looks for the session
    in between the hex values:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 请求使用`send_request_cgi()`方法发送。服务器将返回`内部服务器错误`错误（代码`500`），但我们可以使用十六进制值——换句话说，`#{start_h}`和`#{fin_h}`——作为正则表达式从输出中查找会话。以下截图显示了查找十六进制值之间会话的代码：
- en: '![](img/722f98bd-9f1f-45aa-bae1-d37bebb5b1f0.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/722f98bd-9f1f-45aa-bae1-d37bebb5b1f0.png)'
- en: 'The following screenshot shows the SQL query that is sent to the server to
    dump the session information:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了发送到服务器以转储会话信息的SQL查询：
- en: '![](img/410b4f1a-403d-4459-a341-f7ea5d58b63c.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/410b4f1a-403d-4459-a341-f7ea5d58b63c.png)'
- en: 'The following screenshot shows the web server''s response, disclosing the user''s session:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Web服务器的响应，显示了用户的会话：
- en: '![](img/41f1f4b3-c48a-4d73-969c-3e77d866b616.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41f1f4b3-c48a-4d73-969c-3e77d866b616.png)'
- en: 'As we can see in the following screenshot, the session was retrieved from the
    database, but in our case, we faced an issue; there appeared to be a character
    limit:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，从数据库中检索到了会话，但在我们的情况下，我们遇到了一个问题；似乎存在字符限制：
- en: '![](img/520c75b5-e6ea-4042-8d12-3642c2ebed67.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/520c75b5-e6ea-4042-8d12-3642c2ebed67.png)'
- en: 'Looking at the value in the database, we can see that not all the characters
    were returned, as shown:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 查看数据库中的值，我们可以看到并没有返回所有字符，如下所示：
- en: '![](img/8bc9e70e-01c8-4ab4-b180-4595f2bce4a9.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8bc9e70e-01c8-4ab4-b180-4595f2bce4a9.png)'
- en: The final three characters with a hex value of `ABC` at the end were not displayed
    on the screen. To resolve this issue, we can use a workaround, where instead of
    using a single query to retrieve the session from the database, we split the session
    into two parts using the `MID()` function.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最后三个具有十六进制值`ABC`的字符未显示在屏幕上。为了解决这个问题，我们可以使用一个解决方法，即不使用单个查询从数据库中检索会话，而是使用`MID()`函数将会话分为两部分。
- en: 'The first SQL session payload `1` that needs to be used is as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 需要使用的第一个SQL会话负载`1`如下所示：
- en: '[PRE7]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is shown as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示：
- en: '![](img/c6cfd060-c8b2-466f-9284-9ebc8ca73aa8.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6cfd060-c8b2-466f-9284-9ebc8ca73aa8.png)'
- en: 'The result of executing the preceding SQL payload `1` is given in the following
    screenshot:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前述SQL负载`1`的结果如下所示：
- en: '![](img/14d81c3c-c996-49d4-ae29-f0d8d387f41f.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14d81c3c-c996-49d4-ae29-f0d8d387f41f.png)'
- en: 'Now, the second SQL session payload that we need to use is as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要使用的第二个SQL会话负载如下：
- en: '[PRE8]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is shown as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示：
- en: '![](img/35074079-65cf-465d-b0fb-39a9517c5b64.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35074079-65cf-465d-b0fb-39a9517c5b64.png)'
- en: 'The result for executing the preceding SQL payload `2` is given in the following screenshot:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前述SQL负载`2`的结果如下所示：
- en: '![](img/2c331c46-13d5-4910-99a2-242eb36e4c71.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c331c46-13d5-4910-99a2-242eb36e4c71.png)'
- en: 'Now, we just need to concatenate the two outputs that we retrieved by executing
    payloads `1` and `2` from the preceding steps into one. Let''s add the code to
    the module:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要将我们在前面步骤中通过执行负载`1`和`2`检索到的两个输出连接成一个。让我们将代码添加到模块中：
- en: '![](img/9826aad9-f0ef-4aac-aea7-5c62a9216c64.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9826aad9-f0ef-4aac-aea7-5c62a9216c64.png)'
- en: 'Now that the code has been modified, let''s save the file and execute the module
    to see whether it works:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码已经修改，让我们保存文件并执行模块，看看是否有效：
- en: '![](img/3c526dd4-ffc5-4a95-adfa-02a201b87b07.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c526dd4-ffc5-4a95-adfa-02a201b87b07.png)'
- en: As we can see from the preceding screenshot, we were able to retrieve the session
    successfully and, using the session stored in the database, we opened up a Meterpreter
    session!
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们从前面的截图中所见，我们成功检索到了会话，并且使用存储在数据库中的会话，我们打开了一个Meterpreter会话！
- en: Joomla shell upload
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Joomla shell上传
- en: To understand where a shell is uploaded in the previously mentioned exploit,
    we will upload a basic command execution shell manually from the administrator
    panel.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解先前提到的漏洞中上传shell的位置，我们将从管理员面板手动上传一个基本的命令执行shell。
- en: 'After exploitation, once we have logged in successfully as an admin, we can
    upload a shell from the templates menu. The following screenshot shows the administration
    panel of Joomla:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 利用后，一旦我们成功以管理员身份登录，我们可以从模板菜单中上传一个shell。以下截图显示了Joomla的管理面板：
- en: '![](img/0f3daf8f-deb5-43d1-865c-03c1ef5d159f.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f3daf8f-deb5-43d1-865c-03c1ef5d159f.png)'
- en: 'From the panel''s menu, we click on Extensions | Templates | Templates, as
    shown:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 从面板菜单中，我们点击Extensions | Templates | Templates，如下所示：
- en: '![](img/eb7f8860-6a33-4368-9547-996a7f5fe653.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb7f8860-6a33-4368-9547-996a7f5fe653.png)'
- en: 'We are redirected to the Templates page, where all the templates currently
    uploaded are listed, including the one being currently used. It''s always best
    not to touch the current template as this may cause the administrators to notice
    the change and discover our code:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们被重定向到模板页面，列出了当前上传的所有模板，包括当前使用的模板。最好不要触摸当前的模板，因为这可能会引起管理员注意到变化并发现我们的代码：
- en: '![](img/7b30ff10-0af6-49fd-bc55-c8b4cb80fed2.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b30ff10-0af6-49fd-bc55-c8b4cb80fed2.png)'
- en: 'The preceding screenshot shows the list of templates. We will choose Protostar,
    so click on the template and you will then be redirected to the next page where,
    on the left-hand side, all of the template''s PHP pages are listed, as shown:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了模板列表。我们将选择Protostar，因此点击模板，然后将被重定向到下一页，在左侧列出了所有模板的PHP页面，如下所示：
- en: '![](img/b1bb9f06-3347-4e52-8e4d-43f2a1dd4b3f.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1bb9f06-3347-4e52-8e4d-43f2a1dd4b3f.png)'
- en: 'We click on index.php and add our custom PHP one-liner code to the file. This
    acts as a backdoor and will allow us to execute system-level commands:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们点击index.php并向文件添加我们自定义的PHP一行代码。这将充当后门，并允许我们执行系统级命令：
- en: '[PRE9]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following screenshot shows that the first line of the index now has our
    backdoor:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了索引的第一行现在有我们的后门：
- en: '![](img/44711f34-0857-42a5-8816-3e4eab8efa0c.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44711f34-0857-42a5-8816-3e4eab8efa0c.png)'
- en: 'Once the changes are saved, we can browse our backdoor at the following path:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 保存更改后，我们可以在以下路径浏览我们的后门：
- en: '[PRE10]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following screenshot shows that our command has been executed successfully:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示我们的命令已成功执行：
- en: '![](img/0f8be83b-b9e5-48f8-b61c-d476a4af7543.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '[图片]'
- en: The exploitation of Joomla is over once we have given the proof of concept to
    the client. However, going beyond the normal exploitation method and getting inside
    the network is something that needs to be discussed with the client in the kick-off
    meeting that heralds the project. As pen-testers, we have to abide by the scope
    that is defined by the client.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们向客户提供了概念验证，Joomla的利用就结束了。然而，超越正常的利用方法并进入网络是需要在项目启动会议中与客户讨论的事情。作为渗透测试人员，我们必须遵守客户定义的范围。
- en: If any such payload is uploaded for the sole reason of getting the proof of
    concept, we are obliged to remove these backdoors once the exploitation is complete.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上传了这样的有效负载，仅仅是为了获得概念验证，那么在利用完成后，我们有义务删除这些后门。
- en: Summary
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the Joomla architecture and its files and
    directory structure. Then, we moved on to the reconnaissance process and understood
    different ways of finding a Joomla instance and its version number. We also looked
    at tools and scripts that automate the process for us. Finally, we studied the
    in-depth process of Joomla exploitation and how the exploitation works using examples
    of previously discovered public exploits.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Joomla的架构及其文件和目录结构。然后，我们进行了侦察过程，并了解了查找Joomla实例及其版本号的不同方法。我们还研究了为我们自动化这一过程的工具和脚本。最后，我们深入研究了Joomla利用的过程，以及利用如何使用先前发现的公开利用的示例。
- en: In the next chapter, we'll learn about performing a pen test on another popular
    CMS—Drupal.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何对另一个流行的CMS——Drupal进行渗透测试。
- en: Questions
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Can I install Joomla on any operating system?
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我可以在任何操作系统上安装Joomla吗？
- en: Can I create my own Metasploit modules in case the existing ones are not able
    to find the Joomla version?
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果现有的Metasploit模块无法找到Joomla的版本，我可以自己创建Metasploit模块吗？
- en: The Metasploit module is not able to detect the Joomla version installed. Is
    there any other way of detecting it?
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Metasploit模块无法检测安装的Joomla版本。还有其他检测方法吗？
- en: I was able to upload a shell by exploiting the Joomla upload vulnerability.
    Is it possible to backdoor the CMS in any stealthy way?
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我成功利用Joomla上传漏洞上传了一个shell。有没有可能以隐秘的方式在CMS中设置后门？
- en: Further reading
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: A list of vulnerable extensions in Joomla can be found at [https://vel.joomla.org/live-vel](https://vel.joomla.org/live-vel).
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Joomla中易受攻击的扩展列表可以在[https://vel.joomla.org/live-vel](https://vel.joomla.org/live-vel)找到。
- en: More information about the Joomla architecture can be found at [https://docs.joomla.org/Archived:CMS_Architecture_in_1.5_and_1.6](https://docs.joomla.org/Archived:CMS_Architecture_in_1.5_and_1.6).
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Joomla架构的更多信息可以在[https://docs.joomla.org/Archived:CMS_Architecture_in_1.5_and_1.6](https://docs.joomla.org/Archived:CMS_Architecture_in_1.5_and_1.6)找到。
