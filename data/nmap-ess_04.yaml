- en: Chapter 4. Advanced Nmap Scans
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。高级Nmap扫描
- en: You should now be completely able to run Nmap scans against a variety of hosts.
    That's great! Knowing how to run a basic scan will get you through many situations,
    but there are a few notable exceptions—and different scan types—that are vital
    to become a power user.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你完全能够对各种主机运行Nmap扫描了。太棒了！知道如何运行基本扫描将帮助你解决许多情况，但有一些值得注意的例外情况——以及不同的扫描类型——对于成为高级用户是至关重要的。
- en: We will now specifically cover different methods for host detection (so that
    you know what to scan), how to run scans against devices that are trying to hide
    themselves, scanning UDP, different verbosity options, and so on.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将具体介绍不同的主机检测方法（以便你知道要扫描什么），如何对试图隐藏自己的设备进行扫描，扫描UDP，不同的详细程度选项等等。
- en: 'In this chapter, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Running a ping sweep
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行ping扫描
- en: Running a ping agnostic scan
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行ping不可知扫描
- en: Scanning UDP services
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描UDP服务
- en: Running different TCP flags on scans—such as the Xmas Tree scan
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在扫描中运行不同的TCP标志——比如圣诞树扫描
- en: Operating system detection
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统检测
- en: Increasing verbosity in Nmap output
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加Nmap输出的详细程度
- en: Showing packet tracing in scans
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示扫描中的数据包跟踪
- en: Host detection methods
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主机检测方法
- en: In order to scan a host effectively, it's important to first understand how
    to detect hosts that are "alive" or online. Because many system administrators
    try to hide their systems from the Internet, certain hosts will appear to be offline
    until further probed. Fortunately for us, Nmap has several ways to detect which
    hosts are online.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地扫描主机，首先了解如何检测“活着”或在线的主机是很重要的。因为许多系统管理员试图将他们的系统隐藏在互联网上，某些主机在进一步探测之前会显得离线。幸运的是，Nmap有几种方法来检测哪些主机是在线的。
- en: The most straightforward way to detect hosts is to run a ping sweep. A ping—or
    an ICMP echo request that machines are designed to respond to—is a simple "are
    you there?" question and answer conversation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 检测主机的最直接方法是运行ping扫描。ping或ICMP回显请求是机器设计用来响应的简单的“你在那里吗？”的问题和答案对话。
- en: Pings were named after sonar—the underwater "pings" that submarines send to
    detect other ships and submersibles in the area—and work in a similar way for
    computers. While you can test the ping command very easily by simply typing `ping
    google.com`, using Nmap for ping sweeps can allow significant efficiency gains
    across larger target network scopes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Ping是以声纳命名的——潜艇发送的水下“ping”，用于探测该区域内的其他船只和潜艇——并且对计算机起着类似的作用。虽然你可以通过简单地输入`ping
    google.com`来轻松测试ping命令，但使用Nmap进行ping扫描可以在更大的目标网络范围内实现显著的效率提升。
- en: It's easy to run a `ping only` sweep with Nmap using the `-sn` flag. This makes
    sure to run only a ping sweep, rather than a full port scan—which is excellent
    just to find out which hosts are online.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-sn`标志在Nmap中运行`ping only`扫描非常容易。这确保只运行ping扫描，而不是完整的端口扫描——这非常适合找出哪些主机在线。
- en: '![Host detection methods](img/4065OS_04_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![主机检测方法](img/4065OS_04_01.jpg)'
- en: In the preceding screenshot, which was run as a `-sn`, (ping sweep) scan, you
    can clearly see that out of the 256 IP addresses scanned, 18 were "up," or responding
    to a ping.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，作为`-sn`（ping扫描）扫描运行，你可以清楚地看到在扫描的256个IP地址中，有18个是“up”，或者对ping做出响应的。
- en: Sometimes, however, you need to take this scanning methodology a step further.
    In order to "hide" from scans, system administrators will often make their systems
    ignore ping requests. This is often an effective way to hide from network scans!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时你需要进一步地采用这种扫描方法。为了从扫描中“隐藏”，系统管理员经常会让他们的系统忽略ping请求。这通常是一个有效的方式来隐藏网络扫描！
- en: Running a ping agnostic scan
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行ping不可知扫描
- en: When a system is hiding from ping sweeps, it can be difficult to know what's
    online. Fortunately, Nmap provides a ping agnostic method for scanning that can
    be very beneficial to figure out some of these issues.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统从ping扫描中隐藏时，很难知道什么是在线的。幸运的是，Nmap提供了一种ping不可知的扫描方法，可以非常有益地解决一些这些问题。
- en: When Nmap runs a "normal" scan, it will first run a ping sweep and then follow
    up with actual port scans (of whatever port ranges specified). If hosts are not
    responding to a ping, they won't be fully scanned—which means that even if they
    have services online, those services will not be detected. When running a port
    scan, missing services or hosts is a very serious problem!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当Nmap运行“正常”扫描时，它将首先运行ping扫描，然后进行实际的端口扫描（扫描指定的端口范围）。如果主机不响应ping，它们将不会被完全扫描——这意味着即使它们有在线服务，这些服务也不会被检测到。在运行端口扫描时，丢失服务或主机是一个非常严重的问题！
- en: By running a scan with the `-Pn` flag, Nmap will completely skip running the
    initial ping sweep, and will scan all hosts in the specified target range. Although
    this generally takes longer to run—since scanning hosts that are really offline
    is a big waste of time—it is extremely useful to find hosts that may otherwise
    have been missed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`-Pn`标志运行扫描，Nmap将完全跳过运行初始的ping扫描，并扫描指定目标范围内的所有主机。虽然这通常需要更长的时间来运行——因为扫描真正离线的主机是一个很大的时间浪费——但它非常有用，可以找到可能被忽略的主机。
- en: '![Running a ping agnostic scan](img/4065OS_04_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![运行ping不可知扫描](img/4065OS_04_02.jpg)'
- en: You can easily see in the preceding screenshot that `dshaw.net`—my personal
    web page, which for the purposes of this scan was configured to not respond to
    a ping—was still scanned in this ping agnostic scan. When scanning large ranges—such
    as a Class B network—being able to detect hosts that are trying to appear offline
    can be invaluable to the security professional.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在前面的屏幕截图中清楚地看到`dshaw.net`——我的个人网页，在这次扫描的目的是配置为不响应ping——仍然在这次ping不可知扫描中被扫描到。在扫描大范围——比如一个B类网络——能够检测到试图隐藏的主机对于安全专业人员来说是非常宝贵的。
- en: Although it's not a specific type of scan, it can also be useful to use the
    Nmap's `-sL` flag—or the ability to conduct a simple list scan—to either ping
    or scan the target ranges. This is useful to get reverse DNS lookups, and to understand
    how many hosts are online in a specified range.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它不是一种特定类型的扫描，但使用Nmap的`-sL`标志—或者进行简单的列表扫描的能力—来ping或扫描目标范围也是有用的。这对于获取反向DNS查找以及了解指定范围内有多少主机在线非常有用。
- en: By scanning—or rather by not scanning—this way, excellent results can be achieved.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种扫描—或者说不扫描—的方式，可以获得出色的结果。
- en: '![Running a ping agnostic scan](img/4065OS_04_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![运行无视ping的扫描](img/4065OS_04_03.jpg)'
- en: In the preceding screenshot, you can see that the range Nmap "list scanned"
    points to the `1e100.net` domains, which are owned by Google. This is called **zero
    packet reconnaissance**, since no probes were actually sent to any of the domains
    in question, but full DNS PTR record lookups were achieved.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，您可以看到Nmap“列出扫描”的范围指向由Google拥有的`1e100.net`域。这被称为**零数据包侦察**，因为实际上没有向任何相关域发送探测，但实现了完整的DNS
    PTR记录查找。
- en: The last great Nmap feature that assists in host detection and discovery is
    the TCP SYN ping scan. Instead of sending an ICMP ping request (which many administrators
    disable responses to), the TCP SYN scan can treat hosts online if they respond
    to a SYN request at a given port. For example, if you're scanning a block of IP
    addresses that usually run SSL web servers, invoking the `-PS 443` flag would
    treat hosts online if there is a response to attempt a connection on port 443\.
    This is extraordinarily useful, and is one of the most valuable features in the
    Nmap host detection arsenal.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在主机检测和发现方面，最后一个伟大的Nmap功能是TCP SYN ping扫描。与发送ICMP ping请求（许多管理员禁用响应）不同，TCP SYN扫描可以在给定端口对SYN请求做出响应的主机上处理在线主机。例如，如果您正在扫描通常运行SSL
    Web服务器的一组IP地址，调用`-PS 443`标志将在端口443上尝试连接时对在线主机进行处理。这非常有用，是Nmap主机检测工具中最有价值的功能之一。
- en: Scanning UDP services
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扫描UDP服务
- en: So far we've mentioned UDP services, but haven't talked about how to actually
    scan them. UDP services are connectionless, which makes scanning them more difficult
    than traditional port scans—sometimes connections need to be protocol based in
    order to receive any response, and even when most services receive an actual response,
    it can take a large amount of time—in other words, scanning UDP services is generally
    slower and less reliable than their TCP counterparts.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经提到了UDP服务，但还没有讨论如何实际扫描它们。UDP服务是无连接的，这使得扫描它们比传统端口扫描更加困难—有时需要基于协议的连接才能收到任何响应，即使大多数服务收到实际响应，也可能需要大量时间—换句话说，扫描UDP服务通常比它们的TCP对应物更慢且不太可靠。
- en: That said, though, it's very important to be able to scan services that only
    listen on UDP. Many VPNs, for example, have their listening ports as UDP only.
    NTP and DNS, similarly, often listen exclusively on UDP ports. For this reason,
    it's important to understand how to scan them.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，重要的是能够扫描仅监听UDP的服务。例如，许多VPN的监听端口仅为UDP。同样，NTP和DNS通常仅监听UDP端口。因此，了解如何扫描它们非常重要。
- en: The caveat here is that it's generally best to do the first "round" of scanning
    as TCP only and the second sweep as UDP. This is important because having an entire
    scan forced to wait for UDP responses can make what should have been a five-minute
    scan, take more than five hours!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的警告是，通常最好先进行TCP扫描，然后再进行UDP扫描。这很重要，因为让整个扫描等待UDP响应可能会使原本应该在五分钟内完成的扫描花费超过五个小时！
- en: The flag to scan UDP services is to simply invoke `-sU`. Make sure you do so
    with caution, and when you have plenty of time to spare while waiting for scans!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描UDP服务的标志只需调用`-sU`。确保在等待扫描时要有足够的时间。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As an additional note, UDP scanning does require root privileges in order to
    run.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，UDP扫描需要root权限才能运行。
- en: '![Scanning UDP services](img/4065OS_04_04.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![扫描UDP服务](img/4065OS_04_04.jpg)'
- en: This scan of `tick.ucla.edu`, a public NTP server, shows that port `123`—**Network
    Time Protocol** (**NTP**)—is accepting connections from anywhere on the Internet.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`tick.ucla.edu`的扫描显示，端口`123`—**网络时间协议**（**NTP**）—可以从互联网的任何地方接受连接。
- en: Special TCP scans
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特殊的TCP扫描
- en: We've already covered the two basic scan types that Nmap suggests—TCP connect
    scans (`-sT`) and the SYN stealth scan (`-sS`). These "full" and "half" connection
    scans will get you through almost any situation, and are absolutely the "go-to"
    scan types for almost every security professional, system administrator, network
    engineer, and hobbyist.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了Nmap建议的两种基本扫描类型—TCP连接扫描（`-sT`）和SYN隐蔽扫描（`-sS`）。这些“全”和“半”连接扫描几乎可以应对任何情况，并且绝对是几乎每个安全专业人员、系统管理员、网络工程师和爱好者的“首选”扫描类型。
- en: 'However, despite the flexibility that these types of scans can produce, there
    are occasional reasons to try different flags on packets. For these scans, we
    will introduce three new scan types: **FIN**, **Xmas Tree**, and **Null** scans.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管这些类型的扫描可以产生灵活性，但有时也有理由尝试在数据包上使用不同的标志。对于这些扫描，我们将介绍三种新的扫描类型：**FIN**、**Xmas
    Tree**和**Null**扫描。
- en: The driving concept behind running these scans is that a closed port will attempt
    to reset the connection by issuing a RST (reset) packet, whereas an open port
    will just drop the connection entirely. This is useful because many **Intrusion
    Detection Systems** (**IDS**) are on the lookout for SYN scans—and the stealthy
    penetration tester never wants to get caught!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这些扫描的驱动概念是，关闭的端口将尝试通过发出RST（复位）数据包来重置连接，而打开的端口将完全放弃连接。这很有用，因为许多**入侵检测系统**（**IDS**）都在寻找SYN扫描—而隐秘的渗透测试人员绝对不想被发现！
- en: '![Special TCP scans](img/4065OS_04_05.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![特殊的TCP扫描](img/4065OS_04_05.jpg)'
- en: The first of these three new options, the FIN scan, starts by sending a FIN
    packet to each port.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个新选项中的第一个，FIN扫描，是通过向每个端口发送FIN数据包开始的。
- en: As you can see in the preceding example scan, when running a FIN scan (`-sF`)
    against my own web server, there was no response to the FIN request—this makes
    sense because there is an active service running on port 80 of `dshaw.net`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的示例扫描所示，当对我的网页服务器运行FIN扫描（`-sF`）时，对FIN请求没有响应——这是有道理的，因为`dshaw.net`的80端口上有一个活动服务运行。
- en: The next scan type is called the Xmas Tree scan—so-called because it is as if
    a packet is lit up like a Christmas tree! The Xmas Tree scan (`-sX`) works by
    flagging FIN, URG, and PUSH flags on a packet header.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个扫描类型被称为Xmas Tree扫描，因为它就像一个数据包被点亮像圣诞树一样！ Xmas Tree扫描（`-sX`）通过在数据包头上标记FIN、URG和PUSH标志来工作。
- en: The last of these three scan types is the null scan, which sets no flags on
    the packet header sent to the target port. This scan can be launched by using
    the `-sN` option. Make sure that if you're launching a null scan, you capitalize
    `N`—otherwise, you'll be accidentally running a ping swing (which we covered in
    *Host detection methods* section).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种扫描类型中的最后一种是空扫描，它在发送到目标端口的数据包头上不设置任何标志。可以使用`-sN`选项启动此扫描。确保如果要启动空扫描，您要大写`N`——否则，您将意外地运行一个ping
    swing（我们在*主机检测方法*部分中介绍过）。
- en: Although these scan types can often be very useful, it's worth noting that FIN,
    Xmas, and NULL scans are known to not work against Microsoft Windows hosts.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些扫描类型通常非常有用，但值得注意的是，FIN、Xmas和NULL扫描已知在Microsoft Windows主机上不起作用。
- en: Operating system detection
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作系统检测
- en: While it's very useful to be able to scan ports—and to use different packet
    headers in order to produce the best, most accurate results—there are a few things
    that simple port scanning cannot always achieve reliably. One of the most important
    of these elements is operating system detection.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管扫描端口并使用不同的数据包头以产生最佳、最准确的结果非常有用，但简单的端口扫描并不总是能够可靠地实现一些事情。其中最重要的一个元素是操作系统检测。
- en: When attempting to identify and attack a target, one of the most useful pieces
    of information is what operating system that machine is running. Because many
    pieces of software can run on multiple operating systems, this was traditionally
    a "hard" thing to solve. However, the developers at Nmap—with the help of the
    information security community at large—have been able to compile a database of
    the most common (and even some very rare) operating system fingerprints, which
    can consistently help to identify what operating system a target is running. It's
    an easy flag to remember—you simply have to invoke a scan with the `-O` flag.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试识别和攻击目标时，最有用的信息之一是该机器正在运行的操作系统。因为许多软件可以在多个操作系统上运行，这在传统上是一个“难”解决的问题。然而，Nmap的开发人员——在整个信息安全社区的帮助下——已经能够编制出一个数据库，其中包含最常见（甚至一些非常罕见）的操作系统指纹，这些指纹可以始终帮助识别目标正在运行的操作系统。这是一个容易记住的标志——您只需使用`-O`标志调用扫描即可。
- en: '![Operating system detection](img/4065OS_04_06.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![操作系统检测](img/4065OS_04_06.jpg)'
- en: 'As you can see, this scan of a Cisco security appliance easily identified several
    parts of the key information. First, we can see the MAC address—and who creates
    that device. Remember, though, that as we learned in [Chapter 2](ch02.html "Chapter 2. Network
    Fundamentals"), *Network Fundamentals*, we can only see MAC addresses if we''re
    scanning on a local area network—not over the Internet. Secondly, we can see the
    OS CPE—and even the OS details: a Cisco SA520 firewall, running the Linux 2.6
    kernel. This is absolutely one of the most valuable pieces of information we can
    pull out of a port scan.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这次对思科安全设备的扫描很容易识别出了关键信息的几个部分。首先，我们可以看到MAC地址——以及谁创建了该设备。请记住，正如我们在[第2章](ch02.html
    "第2章。网络基础")中所学到的那样，*网络基础*，我们只能在局域网上扫描到MAC地址——而不能在互联网上扫描到。其次，我们可以看到OS CPE——甚至是OS的详细信息：思科SA520防火墙，运行Linux
    2.6内核。这绝对是我们可以从端口扫描中提取出的最有价值的信息之一。
- en: Although it would be wonderful if operating system detection was always as straightforward
    and concise as it is in this example, which is not the case. The good news, though,
    is that once you start an operating system scan, Nmap will attempt to gauge how
    confident it is in the results it gives. In the following example, you can see
    that although Nmap isn't completely sure what operating system my machine is running
    (which makes sense when you consider how frequently patches change the way the
    underlying OS works), it can still give us a pretty good idea!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如果操作系统检测总是像本例中那样简单明了就好了，但事实并非如此。不过，好消息是，一旦开始操作系统扫描，Nmap将尝试评估其对给出的结果的信心程度。在下面的示例中，您可以看到，尽管Nmap并不完全确定我的机器正在运行什么操作系统（考虑到补丁经常改变底层操作系统的工作方式，这是有道理的），但它仍然可以给我们一个相当好的想法！
- en: '![Operating system detection](img/4065OS_04_07.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![操作系统检测](img/4065OS_04_07.jpg)'
- en: Increasing verbosity in scans
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增加扫描的详细程度
- en: As you have probably noticed throughout the book, more information is almost
    always better when running scans. Fortunately, Nmap developers allow us to quickly
    and easily retrieve information about a scan while it's running, by starting the
    scan with increased verbosity.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能在整本书中已经注意到的那样，运行扫描时几乎总是获得更多信息更好。幸运的是，Nmap的开发人员允许我们通过增加详细程度来快速轻松地在扫描时检索信息。
- en: Verbosity lets timing, parallelism, and internal debugging information to display
    straight to the console while scans run. This can be great to figure out when
    we need to try to optimize scans in one of the several ways (which we'll learn
    about in the next chapter). When running a scan in increased verbosity, you can
    also hit *Enter* to see how far the scan has progressed, and how far it has to
    go before completing its current target file. There are several different levels
    of verbosity, but I usually use the third-level.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 详细程度允许在扫描运行时直接在控制台上显示时间、并行性和内部调试信息。这对于找出何时需要尝试通过几种方式优化扫描非常有用（我们将在下一章中了解）。在增加详细程度的扫描中，您还可以按*Enter*键查看扫描的进度和完成当前目标文件之前还有多远。有几种不同级别的详细程度，但我通常使用第三级。
- en: The first level of verbosity gives a very basic information about a scan's progress,
    and can be invoked by using the `-v` flag. The second level of verbosity gives
    more information, including some network and packet information, and can be invoked
    by using `-vv` as a flag. Lastly, triple verbosity—which gives out the most information
    of a scan—can be invoked with the `-vvv` flag. If you want to make Nmap less verbose
    than normal, you can also use the `--reduce-verbosity` flag.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 冗长度的第一级提供了关于扫描进度的基本信息，并可以通过使用`-v`标志来调用。第二级冗长度提供了更多信息，包括一些网络和数据包信息，并可以通过使用`-vv`作为标志来调用。最后，三重冗长度提供了扫描的最多信息，可以通过使用`-vvv`标志来调用。如果您希望使Nmap比正常情况下更少冗长，您也可以使用`--reduce-verbosity`标志。
- en: '![Increasing verbosity in scans](img/4065OS_04_08.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![增加扫描的冗长度](img/4065OS_04_08.jpg)'
- en: You can see in the preceding screenshot that on this single-port scan, there
    is significantly more timing and packet information shown. This can be extremely
    useful, especially during long scans—such as those that include over 1,000 hosts—to
    understand better what Nmap is doing at the time. More importantly, this information
    can be used to determine if timing, parallelism, or other performance adjustments
    need to be made. For example, if a scan is progressing normally, but only a few
    hosts are being completed at a time, we know to increase parallelism to make the
    overall scan go faster. If, however, we're receiving network timeout errors, we
    know that we're scanning too fast—in that case, we'd want to use a slower `timing`
    flag.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在上述截图中看到，在这个单端口扫描中，显示了更多的时间和数据包信息。这可能非常有用，特别是在长时间扫描中，比如包括超过1000个主机的扫描，以更好地了解Nmap在进行时正在做什么。更重要的是，这些信息可以用来确定是否需要进行时间、并行性或其他性能调整。例如，如果扫描正常进行，但每次只完成了少数主机，我们就知道要增加并行性以使整体扫描更快。然而，如果我们收到网络超时错误，我们就知道我们扫描得太快了，这种情况下，我们会想要使用一个更慢的`timing`标志。
- en: Packet tracing
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据包跟踪
- en: Similar to increasing the verbosity of a scan, it is invaluable to understand
    the network hops that occur between hosts—and to see the actual network traffic
    passing through. Although it's possible to use system tools such as **traceroute**
    and **tcpdump** to find out where on a network target servers land, it can be
    a painful (and time-consuming) process to do this to many hosts simultaneously.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与增加扫描的冗长度类似，了解主机之间发生的网络跳数以及实际经过的网络流量是非常宝贵的。虽然可以使用系统工具如**traceroute**和**tcpdump**来找出目标服务器在网络上的位置，但对许多主机同时进行这样的操作可能是一个痛苦（且耗时）的过程。
- en: Instead of using outside tools, Nmap allows packet tracing for each scan—which
    shows the exact information we need. Instead of looking at this as a security
    feature (although it certainly does have security-related uses), it's best to
    think of this as a tool for system administrators and network engineers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap允许对每次扫描进行数据包跟踪，而不是使用外部工具，这显示了我们需要的确切信息。不要把这看作是一个安全功能（尽管它确实有与安全相关的用途），最好把它看作是系统管理员和网络工程师的工具。
- en: '![Packet tracing](img/4065OS_04_09.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![数据包跟踪](img/4065OS_04_09.jpg)'
- en: This packet tracing example shows tcpdump-style output from Nmap to target machines.
    Although it doesn't provide excessive value in this simple one-port scan, the
    information can be great to understand network congestion, packet drop, offline
    hosts, and so on, on larger scans.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据包跟踪示例显示了Nmap到目标机器的tcpdump风格输出。虽然在这个简单的单端口扫描中它并没有提供过多的价值，但这些信息对于理解网络拥塞、数据包丢失、离线主机等在更大的扫描中是非常有用的。
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered how to choose a target, run a default scan, check
    service versions, log scans (and what the different log types mean), specify special
    scan ranges, and learn the reasoning for Nmap results.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何选择目标，运行默认扫描，检查服务版本，记录扫描（以及不同日志类型的含义），指定特殊扫描范围，并了解Nmap结果的原因。
- en: In the next chapter, we will talk about how to ensure your scans are running
    at peak performance. Nmap has several features that can help scans run quickly,
    and deliver the results as accurately as possible. Each of these timing, parallelism,
    and performance improvements will be categorized and explained in the next chapter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何确保您的扫描运行在最佳性能。Nmap具有几个功能可以帮助扫描快速运行，并尽可能准确地提供结果。这些时间、并行性和性能改进将在下一章中进行分类和解释。
